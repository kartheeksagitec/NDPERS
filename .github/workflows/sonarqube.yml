name: Build & SonarQube (.NET Framework 4.8)

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest

    steps:
      # üß© Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ‚öôÔ∏è Setup MSBuild (for .NET Framework builds)
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      # ‚öôÔ∏è Restore NuGet packages
      - name: Restore NuGet packages
        run: nuget restore "slnNeoSpin/slnNeoSpin.sln"

      # üß∞ Install Sagitec Framework (if required by your projects)
      - name: Install Sagitec Framework
        run: |
          if (Test-Path ".\Dependencies\Sagitec Framework-Installer.exe") {
            Write-Host "Installing Sagitec Framework..."
            Start-Process -FilePath ".\Dependencies\Sagitec Framework-Installer.exe" -ArgumentList "/quiet" -Wait
          } else {
            Write-Host "Sagitec Framework installer not found. Skipping installation."
          }

      # ‚òï Install Java (SonarQube scanner requires it)
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # üß† Install SonarScanner for .NET Framework
      - name: Install SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          $env:PATH += ";$env:USERPROFILE\.dotnet\tools"

      # üîç Begin SonarQube analysis
      - name: SonarQube Begin
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          $env:PATH += ";$env:USERPROFILE\.dotnet\tools"
          dotnet sonarscanner begin `
            /k:"gitDERP" `
            /d:sonar.host.url="http://sagitec-1656:9000" `
            /d:sonar.login="$env:SONAR_TOKEN"

      # üèóÔ∏è Build .NET Framework 4.8 solution
      - name: Build Solution
        run: msbuild "slnNeoSpin/slnNeoSpin.sln" /p:Configuration=Release /p:Platform="Any CPU"

      # üß© End SonarQube analysis
      - name: SonarQube End
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          $env:PATH += ";$env:USERPROFILE\.dotnet\tools"
          dotnet sonarscanner end /d:sonar.login="$env:SONAR_TOKEN"
