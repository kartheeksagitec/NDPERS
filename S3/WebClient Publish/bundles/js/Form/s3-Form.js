app.controller('FormController', ["$scope", "$rootScope", "ngDialog", "$EntityIntellisenseFactory", "$NavigateToFileService", "$timeout", "$filter", "hubcontext", "$compile", "ConfigurationFactory", '$getQueryparam', 'FormDetailsFactory', 'CONSTANTS', '$ValidationService', '$Errors', '$GetEntityFieldObjectService', '$Entityintellisenseservice', '$getModelList', '$SgMessagesService', '$GetGridEntity', function ($scope, $rootScope, ngDialog, $EntityIntellisenseFactory, $NavigateToFileService, $timeout, $filter, hubcontext, $compile, ConfigurationFactory, $getQueryparam, FormDetailsFactory, CONST, $ValidationService, $Errors, $GetEntityFieldObjectService, $Entityintellisenseservice, $getModelList, $SgMessagesService, $GetGridEntity) {
    $rootScope.IsLoading = true;

    //#region Common Properties  
    $scope.lstLoadedEntityTrees = [];
    $scope.lstLoadedEntityColumnsTree = [];
    $scope.entityTreeName = "";
    $scope.currentEntiyTreeObject = undefined;
    $scope.lookupTreeObject = [];
    $scope.ColumnsLimitCount = 50;
    $scope.LstDisplayedEntities = [];
    $scope.MainPanels = [];
    $scope.MainPanelID = "";
    $scope.selectedDesignSource = false;
    $scope.IsEntityTreeExpanded = false;
    $scope.IsToolsDivCollapsed = false;
    $scope.isDeveloperView = false;
    $scope.SelectedQuery = undefined;
    $scope.DesignHighlightAttribute = null;
    $scope.lstselectedobjecttreefields = [];
    $scope.selectedobjecttreefield = undefined;
    $scope.lstEntity = [];
    $scope.ObjgridBoundedQuery = {};
    $scope.lstControl = CONST.FORM.CONTROL_TYPES;
    $scope.parameterList = [];
    //#endregion

    //#region On Load
    $scope.currentfile = $rootScope.currentopenfile.file;

    hubMain.server.getModel($scope.currentfile.FilePath, $scope.currentfile.FileType).done(function (data) {
        if (data) {
            $scope.receiveformmodel(data);
        }
        else {
            $rootScope.closeFile($scope.currentfile.FileName);
        }

    });

    $scope.receiveformmodel = function (data) {
        $scope.$apply(function () {
            var FormDetials;
            if ($scope.currentfile.FileType == "Maintenance") {
                FormDetials = FormDetailsFactory.getFormDetails();
                if (FormDetials) {
                    var objFileDetails = {
                        FileType: 'Lookup', FileName: "wfm" + FormDetials.ID + "Lookup", FilePath: FormDetials.Path, FileID: "wfm" + FormDetials.ID + "Lookup"
                    };
                    $rootScope.SaveModelWithPackets(FormDetials.objSfxLookupForm, objFileDetails, undefined, true);
                    FormDetailsFactory.setFormDetails(undefined);
                }
            }

            $scope.FormModel = data;
            $scope.MainPanels = [];
            $scope.UDCTableList = [];
            $scope.objFormExtraFields = [];
            $scope.SetMainTable();
            if (!$scope.InitialLoad) {
                $scope.InitialLoad = { Name: 'initialload', Value: '', dictAttributes: {}, Elements: [], Children: [] };
                //$scope.FormModel.Elements.splice(0, 0, $scope.InitialLoad);
            }
            if ($scope.FormModel.dictAttributes.sfwType != "UserControl") {
                $scope.FindDeepNodeUDC($scope.FormModel, $scope.UDCTableList);
                if ($scope.UDCTableList.length > 0) {
                    $scope.SetUDCMainTable();
                }
            }

            $scope.MainPanelID = "MainParentPanel" + $scope.FormModel.dictAttributes.ID;
            if ($scope.MainPanels.length > 0) {
                if ($scope.MainPanels[0].dictAttributes.ID == "pnltoolbar" && $scope.MainPanels.length > 1) $scope.selectPanelControl($scope.MainPanels[1]);
                else $scope.selectPanelControl($scope.MainPanels[0]);
            }

            if ($scope.FormModel.dictAttributes.sfwType == "Lookup") {
                $scope.PopulateQueryId(true);
            }

            var objnew = {
                EntityName: $scope.FormModel.dictAttributes.sfwEntity, IsVisible: true, selectedobjecttreefield: undefined, lstselectedobjecttreefields: [], IsQuery: false, IsMainEntity: true
            };
            if ($scope.FormModel.IsLookupCriteriaEnabled) {
                objnew.IsVisible = false;
            }

            if ($scope.lstLoadedEntityTrees && $scope.lstLoadedEntityTrees.length > 0) {
                for (var i = 0; i < $scope.lstLoadedEntityTrees.length; i++) {
                    if ($scope.lstLoadedEntityTrees[i].EntityName == $scope.FormModel.dictAttributes.sfwEntity && !$scope.lstLoadedEntityTrees[i].IsQuery) {
                        $scope.lstLoadedEntityTrees[i].IsVisible = true;
                        // $scope.currentEntiyTreeObject = $scope.lstLoadedEntityTrees[i];
                    }
                    else {
                        $scope.lstLoadedEntityTrees[i].IsVisible = false;
                    }
                }
            }
            else {
                $scope.lstLoadedEntityTrees.push(objnew);
                $scope.entityTreeName = $scope.FormModel.dictAttributes.sfwEntity;
                $scope.currentEntiyTreeObject = objnew;

            }

            $scope.InitialLoadSection();
            if ($scope.FormModel.dictAttributes.sfwType == "UserControl" || $scope.FormModel.dictAttributes.ID.startsWith("wfp")) {
                $scope.FormModel.IsLookupCriteriaEnabled = false;
            }
            $scope.objFormExtraFields = $filter('filter')($scope.FormModel.Elements, {
                Name: 'ExtraFields'
            });
            if ($scope.objFormExtraFields.length > 0) {
                $scope.objFormExtraFields = $scope.objFormExtraFields[0];
                //$scope.removeExtraFieldsDataInToMainModel();
            }

            if ($scope.objFormExtraFields.length == 0) {
                $scope.objFormExtraFields = {
                    Name: "ExtraFields", Value: '', dictAttributes: {}, Elements: []
                };
            }
            $timeout(function () {
                if (!FormDetials) {
                    $rootScope.IsLoading = false;
                }
            });

            $scope.PopulateRemoteObjects();

            $scope.validationErrorList = [];
            if ($Errors.validationListObj && angular.isArray($Errors.validationListObj)) {
                var checkErrObj = $filter('filter')($Errors.validationListObj, { FileName: $scope.currentfile.FileName });
                if (checkErrObj.length == 0) $Errors.validationListObj.push({ FileName: $scope.currentfile.FileName, errorList: [] });
                //$scope.validateFileData();
                var fileErrObj = $filter('filter')($Errors.validationListObj, { FileName: $scope.currentfile.FileName })[0];

                $scope.validationErrorList = fileErrObj.errorList = [];
            }
            $scope.formTableModel = $filter('filter')($scope.FormModel.Elements, { Name: "sfwTable" })[0];
            //  createValidationData();
            createRuledata($scope.FormModel.objExtraData);
            $scope.iswizard = $scope.FormModel.dictAttributes.sfwType == "Wizard" ? true : false;
            $scope.isLookup = $scope.FormModel.dictAttributes.sfwType == "Lookup" ? true : false;
            $scope.IsPrototype = $scope.FormModel.dictAttributes.ID && $scope.FormModel.dictAttributes.ID.startsWith("wfp") ? true : false;
        });

        if ($scope.currentfile.SelectNodePath && $scope.currentfile.SelectNodePath != "") {
            $scope.selectElement($scope.currentfile.SelectNodePath);
        }

        CheckForFilterGrid($scope.FormModel);
    };

    $scope.SetFormSelectedControl = function (curelement) {
        SetFormSelectedControl($scope.FormModel, curelement, event);
    };

    $scope.PopulateRemoteObjects = function () {
        $.connection.hubForm.server.getRemoteObjectList().done(function (data) {
            $scope.$evalAsync(function () {
                if (data) {
                    $scope.FormModel.RemoteObjectCollection = data;
                    if ($scope.FormModel.RemoteObjectCollection && $scope.FormModel.RemoteObjectCollection.length > 0) {
                        $scope.FormModel.RemoteObjectCollection.splice(0, 0, {
                            dictAttributes: {
                                ID: ""
                            }
                        });
                    }
                }
            });
        });
    }

    // #region validation
    var worker;
    $scope.validateFileData = function () {

        if ($Errors.validationListObj && angular.isArray($Errors.validationListObj)) {
            var checkErrObj = $filter('filter')($Errors.validationListObj, { FileName: $scope.currentfile.FileName });
            if (checkErrObj.length == 0) $Errors.validationListObj.push({ FileName: $scope.currentfile.FileName, errorList: [] });
            //$scope.validateFileData();
            var fileErrObj = $filter('filter')($Errors.validationListObj, { FileName: $scope.currentfile.FileName })[0];

            $scope.validationErrorList = fileErrObj.errorList = [];
        }
        // createValidationData();
        if ($scope.formTableModel) {
            $scope.iterateModel($scope.formTableModel);
            createValidationData();
        }
        $timeout(function () {
            $("#validation-btn").prop("disabled", false);
        });
        //using Web worker 
        /*   if (window.Worker) { // Check if Browser supports the Worker api.
               if(!worker) worker = new Worker("Common/scripts/Worker.js");
   
               worker.postMessage({ 'request': 'data','response': 'DATA' });
               worker.postMessage({ 'request': 'validate_id', 'response': 'VALIDATE_ID' });
               worker.onmessage = function (e) {
               if (e.data == "DATA") {
                   console.log("data created");
                   $scope.createValidationData();
               }
               if (e.data == "VALIDATE_ID") {
                   if ($scope.formTableModel) {
                       $scope.iterateModel($scope.formTableModel);
                   }
               }
               };
           }
           */
    };

    var createValidationData = function () {
        /** form validation **/
        $scope.lstEntity = [];
        $scope.parameterList = [];
        if ($scope.FormModel) {
            if ($scope.FormModel.dictAttributes.hasOwnProperty('sfwEntity')) {
                $ValidationService.validateEntity($scope.FormModel, undefined);
            }
        }
        if ($scope.FormModel.dictAttributes.sfwEntity && $scope.FormModel.errors && !$scope.FormModel.errors.invalid_entity) {
            $rootScope.IsLoading = true;
            $scope.lstEntity.push($scope.FormModel.dictAttributes.sfwEntity);
            traverseModelAndGetEntities($scope.FormModel, $scope.FormModel.dictAttributes.sfwEntity);
            if (angular.isArray($scope.lstQueriesName) && $scope.lstQueriesName.length > 0) {
                //dummy dialog id is given as second parameter in below call, so that it gets the column alias name from query instead of actual columns.
                $.connection.hubForm.server.getQueriesResult($scope.lstQueriesName, 'dummy').done(function (data) {
                    $scope.$evalAsync(function () {
                        if (data) {
                            $scope.gridQueryResult = data;
                        }
                    });
                });
            }
            $.connection.hubForm.server.getGlobleParameters().done(function (data) {
                $scope.$evalAsync(function () {
                    if (data) {
                        $scope.objGlobleParametersList(data);
                    }
                });
            });
            if ($scope.isLookup) {
                getQueryIdData($scope.FormModel);
            }
            $.connection.hubMain.server.getFormValidationData($scope.lstEntity).done(function (data) {
                $scope.$evalAsync(function () {
                    $scope.validationData = data;
                    $scope.objEntityExtraData = {};
                    $scope.resourceList = $ValidationService.getListByPropertyName($scope.validationData.Resources, "ResourceID", false);
                    if ($scope.validationData.hasOwnProperty($scope.FormModel.dictAttributes.sfwEntity)) {
                        createRuledata($scope.validationData[$scope.FormModel.dictAttributes.sfwEntity]);
                        $scope.objEntityExtraData.lstHardErrors = $scope.createValidationRuleList($scope.validationData[$scope.FormModel.dictAttributes.sfwEntity], false, $scope.FormModel.dictAttributes.sfwHardErrorGroup);
                    }
                    // validate detail window fields
                    if ($scope.FormModel.dictAttributes.hasOwnProperty('sfwResource') && $scope.FormModel.dictAttributes.sfwResource) {
                        $ValidationService.checkValidListValue($scope.resourceList, $scope.FormModel, $scope.FormModel.dictAttributes.sfwResource, "sfwResource", "invalid_resource", CONST.VALIDATION.RESOURCE_NOT_EXISTS, $scope.validationErrorList);
                    }
                    var list = $ValidationService.getListByPropertyName($scope.lstMessages, "MessageID", false);
                    if ($scope.FormModel.dictAttributes.hasOwnProperty('sfwNewMessageID') && $scope.FormModel.dictAttributes.sfwNewMessageID) {
                        $ValidationService.checkValidListValue(list, $scope.FormModel, $scope.FormModel.dictAttributes.sfwNewMessageID, "sfwNewMessageID", "sfwNewMessageID", CONST.VALIDATION.INVALID_MESSAGE_ID, $scope.validationErrorList);
                    }
                    if ($scope.FormModel.dictAttributes.hasOwnProperty('sfwOpenMessageID') && $scope.FormModel.dictAttributes.sfwOpenMessageID) {
                        $ValidationService.checkValidListValue(list, $scope.FormModel, $scope.FormModel.dictAttributes.sfwOpenMessageID, "sfwOpenMessageID", "sfwOpenMessageID", CONST.VALIDATION.INVALID_MESSAGE_ID, $scope.validationErrorList);
                    }
                    if ($scope.FormModel.dictAttributes.hasOwnProperty("sfwDefaultButtonID") && $scope.FormModel.dictAttributes.sfwDefaultButtonID) {
                        var lstButtons = [];
                        FindControlListByName($scope.SfxMainTable, "sfwButton", lstButtons);
                        lstButtons = $ValidationService.getListByPropertyName(lstButtons, "ID", false);
                        $ValidationService.checkValidListValue(lstButtons, $scope.FormModel, $scope.FormModel.dictAttributes.sfwDefaultButtonID, "sfwDefaultButtonID", "sfwDefaultButtonID", CONST.VALIDATION.BUTTON_NOT_EXISTS, $scope.validationErrorList);
                    }
                    //End of details window validation
                    $timeout(function () {
                        validateForm($scope.formTableModel, $scope.FormModel.dictAttributes.sfwEntity, $scope.objEntityExtraData);
                        $scope.$evalAsync(function () {
                            $rootScope.IsLoading = false;
                        });
                    });
                });
            });
        }
    };
    $scope.objGlobleParametersList = function (data) {
        angular.forEach(data.Elements, function (paramObj) {
            if (paramObj && paramObj.dictAttributes.ID) {
                var item = "~" + paramObj.dictAttributes.ID;
                $scope.parameterList.push(item);
            }
        });
    };
    $scope.lstQueriesName = [];
    var traverseModelAndGetEntities = function (model, entityid) {
        angular.forEach(model.Elements, function (obj) {
            if (CONST.FORM.COLLECTION_TYPE_NODES.indexOf(obj.Name) > -1) {
                var entity = null;
                if (obj.Name == "sfwGridView" && obj.dictAttributes.sfwBoundToQuery && obj.dictAttributes.sfwBoundToQuery.toLowerCase() == "true" && obj.dictAttributes.sfwBaseQuery) {
                    $scope.lstQueriesName.push(obj.dictAttributes.sfwBaseQuery);
                }
                if (obj.Name == "sfwGridView" && obj.dictAttributes.sfwParentGrid) {
                    var objParentGrid = FindControlByID($scope.SfxMainTable, obj.dictAttributes.sfwParentGrid);
                    if (objParentGrid && objParentGrid.dictAttributes.sfwEntityField) {
                        var entObject = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.FormModel.dictAttributes.sfwEntity, objParentGrid.dictAttributes.sfwEntityField);
                        if (entObject) {
                            var entObj = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(entObject.Entity, obj.dictAttributes.sfwEntityField);
                            if (entObj) {
                                entity = entObj.Entity;
                            }
                        }
                    }
                } else {
                    entity = getEntityName(obj.dictAttributes.sfwEntityField, entityid);
                }
                if (entity && $scope.lstEntity.indexOf(entity) <= -1) $scope.lstEntity.push(entity);
            }
            if (obj && obj.dictAttributes.ID) {
                $scope.parameterList.push(obj.dictAttributes.ID);
            }
            if (obj.Elements && obj.Elements.length > 0) {
                traverseModelAndGetEntities(obj, entityid);
            }
        });
    };
    var getQueryIdData = function (mainModel) {
        angular.forEach(mainModel.Elements, function (obj) {
            if (obj.dictAttributes.hasOwnProperty("sfwDataField") && obj.dictAttributes.sfwDataField) {
                var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                var list = PopulateColumnList(obj.dictAttributes.sfwQueryID, $scope.FormModel, entityIntellisenseList, $scope.lstLoadedEntityColumnsTree);
            }
            if (obj.Elements && obj.Elements.length > 0) {
                getQueryIdData(obj);
            }
        });
    };
    $scope.objEntityExtraData = {};
    var createRuledata = function (entExtraData) {
        $scope.objEntityExtraData.lstRules = PopulateEntityRules(entExtraData, $scope.iswizard, $scope.FormModel.dictAttributes.sfwInitialLoadGroup);
    };
    var validateForm = function (mainModel, entityid, extraData, chartObj, query) {
        angular.forEach(mainModel.Elements, function (obj) {
            obj.ParentVM = mainModel;
            if (obj.dictAttributes.hasOwnProperty('sfwVisibleRule') && obj.dictAttributes.sfwVisibleRule) {
                var listRule = extraData.lstRules;
                if (obj.dictAttributes.sfwRelatedGrid) {
                    listRule = getRuleData(obj);
                }
                if (obj.dictAttributes.sfwParentGrid) {
                    listRule = getRuleData(obj);
                }
                if (obj.Name != "HeaderTemplate" && obj.Name != "FooterTemplate" && FindParent(obj, "sfwGridView")) {
                    listRule = getRuleData(obj);
                }
                $ValidationService.checkValidListValue(listRule, obj, undefined, 'sfwVisibleRule', "invalid_visible_rule", CONST.VALIDATION.VISIBLE_RULE_NOT_EXISTS, $scope.validationErrorList);
            }
            if (obj.dictAttributes.hasOwnProperty('sfwSelectColVisibleRule') && obj.dictAttributes.sfwSelectColVisibleRule) {
                var listRule = extraData.lstRules;
                if (obj.dictAttributes.sfwRelatedGrid) {
                    listRule = getRuleData(obj);
                }
                if (obj.dictAttributes.sfwParentGrid) {
                    listRule = getRuleData(obj);
                }
                if (obj.Name != "HeaderTemplate" && obj.Name != "FooterTemplate" && FindParent(obj, "sfwGridView")) {
                    listRule = getRuleData(obj);
                }
                $ValidationService.checkValidListValue(listRule, obj, undefined, 'sfwSelectColVisibleRule', "sfwSelectColVisibleRule", CONST.VALIDATION.VISIBLE_RULE_NOT_EXISTS, $scope.validationErrorList);
            }
            if (obj.dictAttributes.hasOwnProperty('sfwEnableRule') && obj.dictAttributes.sfwEnableRule) {
                var listRule = extraData.lstRules;
                if (obj.dictAttributes.sfwRelatedGrid) {
                    listRule = getRuleData(obj);
                }
                $ValidationService.checkValidListValue(listRule, obj, undefined, 'sfwEnableRule', "invalid_enable_rule", CONST.VALIDATION.ENABLE_RULE_NOT_EXISTS, $scope.validationErrorList);
            }
            if (obj.dictAttributes.hasOwnProperty('sfwReadOnlyRule') && obj.dictAttributes.sfwReadOnlyRule) {
                var listRule = extraData.lstRules;
                if (obj.dictAttributes.sfwRelatedGrid) {
                    listRule = getRuleData(obj);
                }
                $ValidationService.checkValidListValue(listRule, obj, undefined, 'sfwReadOnlyRule', "invalid_readonly_rule", CONST.VALIDATION.READONLY_RULE_NOT_EXISTS, $scope.validationErrorList);
            }
            if (obj.dictAttributes.hasOwnProperty('sfwRulesGroup') && obj.dictAttributes.sfwRulesGroup) {
                $scope.validateGroups(obj, entityid);
            }

            if (obj.dictAttributes.hasOwnProperty("sfwEntityField") && query) {
                $scope.validateGridControlField(obj, query, mainModel);
            } else if (obj.dictAttributes.hasOwnProperty('sfwEntityField') && obj.Name != "parameter" && obj.dictAttributes.sfwEntityField) {
                var attrType = '';
                var entityname = entityid;
                if (FindParent(obj, "sfwGridView")) {
                    entityname = $GetGridEntity.getEntityName($scope.FormModel, obj);
                }

                if (obj.dictAttributes.sfwEntityField == "InternalErrors" || obj.dictAttributes.sfwEntityField == "ExternalErrors") {
                    entityname = "entError";
                }
                if (obj.dictAttributes.sfwRelatedGrid) {
                    entityname = $scope.FindEntityName(obj, $scope.FormModel.dictAttributes.sfwEntity);
                }
                if (obj.dictAttributes.sfwParentGrid) {
                    entityname = $scope.FindEntityName(obj, $scope.FormModel.dictAttributes.sfwEntity);
                }
                $ValidationService.checkValidListValueForMultilevel([], obj, obj.dictAttributes.sfwEntityField, entityname, "sfwEntityField", "sfwEntityField", CONST.VALIDATION.ENTITY_FIELD_INCORRECT, $scope.validationErrorList, false, attrType);
            }
            if (obj.dictAttributes.hasOwnProperty('sfwRetrievalQuery') && obj.dictAttributes.sfwRetrievalQuery) {
                $ValidationService.checkValidQuery($EntityIntellisenseFactory.getEntityIntellisense(), obj, obj.dictAttributes.sfwRetrievalQuery, undefined, "sfwRetrievalQuery", "sfwRetrievalQuery", CONST.VALIDATION.INVALID_QUERY, $scope.validationErrorList);
            }
            if (obj.dictAttributes.hasOwnProperty('sfwRetrievalMethod') && obj.dictAttributes.sfwRetrievalMethod) {
                var entityname = entityid;
                if (obj.dictAttributes.sfwRelatedGrid) {
                    entityname = $scope.FindEntityName(obj, $scope.FormModel.dictAttributes.sfwEntity);
                }
                var methodList = getMethodList(entityname, false, true);
                $ValidationService.checkValidListValue(methodList, obj, obj.dictAttributes.sfwRetrievalMethod, "sfwRetrievalMethod", "invalid_retrieval_method", CONST.VALIDATION.INVALID_METHOD, $scope.validationErrorList);
            }
            if (obj.dictAttributes.hasOwnProperty('sfwAutoQuery') && obj.dictAttributes.sfwAutoQuery) {
                $ValidationService.checkValidQuery($EntityIntellisenseFactory.getEntityIntellisense(), obj, obj.dictAttributes.sfwAutoQuery, undefined, "sfwAutoQuery", "sfwAutoQuery", CONST.VALIDATION.INVALID_QUERY, $scope.validationErrorList);
            }
            if (obj.dictAttributes.hasOwnProperty('sfwBaseQuery') && obj.dictAttributes.sfwBaseQuery) {
                $ValidationService.checkValidQuery($EntityIntellisenseFactory.getEntityIntellisense(), obj, obj.dictAttributes.sfwBaseQuery, undefined, "sfwBaseQuery", "sfwBaseQuery", CONST.VALIDATION.INVALID_QUERY, $scope.validationErrorList);
            }
            if (obj.dictAttributes.hasOwnProperty('sfwResource') && obj.dictAttributes.sfwResource && obj.dictAttributes.sfwResource != 0) {
                $ValidationService.checkValidListValue($scope.resourceList, obj, obj.dictAttributes.sfwResource, "sfwResource", "invalid_resource", CONST.VALIDATION.RESOURCE_NOT_EXISTS, $scope.validationErrorList);
            }
            if (obj.dictAttributes.hasOwnProperty('sfwValidationRules') && obj.dictAttributes.sfwValidationRules) {
                var listHardRule = extraData.lstHardErrors;
                if (obj.dictAttributes.sfwRelatedGrid) {
                    listHardRule = getValidationRuleData(obj);
                }
                $ValidationService.checkMultipleValueWithList(listHardRule, obj, obj.dictAttributes.sfwValidationRules, ";", 'sfwValidationRules', "invalid_validation_rule", CONST.VALIDATION.VALIDATION_RULE_NOT_EXISTS, $scope.validationErrorList);
            }
            if (obj.dictAttributes.hasOwnProperty("sfwActiveForm") && obj.dictAttributes.sfwActiveForm) {
                checkActiveForm(obj);
            }
            if (obj.dictAttributes.hasOwnProperty("Name") && obj.dictAttributes.Name && obj.Name == "udc") {
                checkActiveForm(obj);
            }

            if (obj.dictAttributes.hasOwnProperty('sfwExpression') && obj.dictAttributes.sfwExpression) {
                var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                var list = getEntityAttributeByType(entityIntellisenseList, entityid, "Expression");
                list = $ValidationService.getListByPropertyName(list, "ID", false);
                $ValidationService.checkValidListValue(list, obj, obj.dictAttributes.sfwExpression, "sfwExpression", "invalid_expression", CONST.VALIDATION.INVALID_EXPRESSION, $scope.validationErrorList);
            }
            if (obj.dictAttributes.hasOwnProperty("sfwMessageID") && obj.dictAttributes.sfwMessageID) {
                list = $ValidationService.getListByPropertyName($scope.lstMessages, "MessageID", false);
                $ValidationService.checkValidListValue(list, obj, obj.dictAttributes.sfwMessageID, "sfwMessageID", "sfwMessageID", CONST.VALIDATION.INVALID_MESSAGE_ID, $scope.validationErrorList);
            }
            if (obj.Name == "sfwDropDownList" || obj.Name == "sfwCascadingDropDownList" || obj.Name == "sfwMultiSelectDropDownList" || obj.Name == "sfwListPicker" || obj.Name == "sfwListBox" || obj.Name == "sfwRadioButtonList") {
                if (obj.dictAttributes.sfwLoadType == "CodeGroup") {
                    var list = $ValidationService.getListByPropertyName($scope.validationData.CodeGroup, "CodeID");
                    list.push("0");
                    $scope.validateEmptyCodeId(obj, list, entityid);
                }
            }
            if (obj.dictAttributes.hasOwnProperty('sfwLoadSource') && obj.dictAttributes.sfwLoadSource) {
                //if (obj.dictAttributes.sfwLoadType == "CodeGroup") {
                //    var list = $ValidationService.getListByPropertyName($scope.validationData.CodeGroup, "CodeID");
                //    if (obj.Name == "sfwDropDownList" || obj.Name == "sfwCascadingDropDownList" || obj.Name == "sfwMultiSelectDropDownList" || obj.Name == "sfwListPicker" || obj.Name == "sfwListBox" || obj.Name == "sfwRadioButtonList") {
                //        $scope.validateEmptyCodeId(obj, list);
                //    } else {
                //        $ValidationService.checkValidListValue(list, obj, obj.dictAttributes.sfwLoadSource, "sfwLoadSource", "invalid_code_group", CONST.VALIDATION.CODE_GROUP_NOT_EXISTS, $scope.validationErrorList);
                //    }
                //} else
                if (obj.dictAttributes.sfwLoadType == "Query") {
                    $ValidationService.checkValidQuery($EntityIntellisenseFactory.getEntityIntellisense(), obj, obj.dictAttributes.sfwLoadSource, undefined, "sfwLoadSource", "sfwLoadSource", CONST.VALIDATION.INVALID_QUERY, $scope.validationErrorList);
                } else if (obj.dictAttributes.sfwLoadType == "Method") {
                    var entityname = entityid;
                    if (obj.dictAttributes.sfwRelatedGrid) {
                        entityname = $scope.FindEntityName(obj, $scope.FormModel.dictAttributes.sfwEntity);
                    }
                    var methodList = getMethodList(entityname, true, false);
                    $ValidationService.checkValidListValue(methodList, obj, obj.dictAttributes.sfwLoadSource, "sfwLoadSource", "invalid_method", CONST.VALIDATION.INVALID_METHOD, $scope.validationErrorList);
                } else if (obj.dictAttributes.sfwLoadType == "ServerMethod") {
                    validateServerMethod(obj);
                }
            }
            if (obj.dictAttributes.hasOwnProperty('XValueMember') && obj.dictAttributes.XValueMember) {
                $ValidationService.checkValidListValueForMultilevel([], obj, obj.dictAttributes.XValueMember, entityid, "XValueMember", "XValueMember", CONST.VALIDATION.INVALID_FIELD, $scope.validationErrorList, false, '');
                copyErrorMessages(obj, chartObj);
            }
            if (obj.dictAttributes.hasOwnProperty('YValueMembers') && obj.dictAttributes.YValueMembers) {
                $ValidationService.checkValidListValueForMultilevel([], obj, obj.dictAttributes.YValueMembers, entityid, "YValueMembers", "YValueMembers", CONST.VALIDATION.INVALID_FIELD, $scope.validationErrorList, false, '');
                copyErrorMessages(obj, chartObj);
            }
            if (obj.dictAttributes.hasOwnProperty('sfwCodeTable') && obj.dictAttributes.sfwCodeTable) {
                $ValidationService.checkValidQuery($EntityIntellisenseFactory.getEntityIntellisense(), obj, obj.dictAttributes.sfwCodeTable, undefined, "sfwCodeTable", "sfwCodeTable", CONST.VALIDATION.INVALID_CODE_TABLE, $scope.validationErrorList);
            }
            if (obj.dictAttributes.hasOwnProperty("sfwEntityField") && obj.dictAttributes.sfwEntityField && obj.dictAttributes.hasOwnProperty("sfwMethodName") && obj.dictAttributes.sfwMethodName == "btnOpen_Click") {
                var list = $scope.PopulateEntityFieldsForOpenButton(obj, $scope.isLookup);
                $ValidationService.checkValidListValue(list, obj, obj.dictAttributes.sfwEntityField, "sfwEntityField", "sfwEntityField", CONST.VALIDATION.ENTITY_FIELD_INCORRECT, $scope.validationErrorList);
            }
            if ($scope.isLookup && !$scope.IsPrototype) {
                if (obj.dictAttributes.hasOwnProperty("sfwQueryID") && obj.dictAttributes.sfwQueryID) {
                    $ValidationService.checkValidListValue($scope.queryIDList, obj, obj.dictAttributes.sfwQueryID, "sfwQueryID", "invalid_query_id", CONST.VALIDATION.INVALID_QUERY_ID, $scope.validationErrorList);
                }
                /*     if (obj.dictAttributes.hasOwnProperty("sfwDataField") && obj.dictAttributes.sfwDataField) { // user can enter substring,CAST function we can allow it
                         var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                         var list = [], attributeName = "ID";
                         var result = PopulateColumnList(obj.dictAttributes.sfwQueryID, $scope.FormModel, entityIntellisenseList, $scope.lstLoadedEntityColumnsTree);
                         if (result) {
                             list = result.list;
                             attributeName = result.attribute;
                         }
                         // list = $ValidationService.getListByPropertyName(list, attributeName, false);
                         $ValidationService.checkDataFieldValue(list, obj, obj.dictAttributes.sfwDataField, attributeName, "sfwDataField", "invalid_data_field", CONST.VALIDATION.INVALID_DATA_FIELD, $scope.validationErrorList);
                     }
                 */

            }

            if (obj.dictAttributes.hasOwnProperty("sfwParameters") && obj.dictAttributes.sfwParameters) {
                $scope.validateParameters(obj, obj.dictAttributes.sfwParameters, "sfwParameters");
            }
            if (obj.dictAttributes.hasOwnProperty("sfwAutoParameters") && obj.dictAttributes.sfwAutoParameters) {
                $scope.validateParameters(obj, obj.dictAttributes.sfwAutoParameters, "sfwAutoParameters");
            }
            if (obj.dictAttributes.hasOwnProperty("sfwCascadingRetrievalParameters") && obj.dictAttributes.sfwCascadingRetrievalParameters) {
                $scope.validateParameters(obj, obj.dictAttributes.sfwCascadingRetrievalParameters, "sfwCascadingRetrievalParameters");
            }

            if (obj.dictAttributes.hasOwnProperty("sfwObjectMethod") && obj.dictAttributes.sfwObjectMethod) {
                var methodList = getMethodList(entityid, false, false);
                $ValidationService.checkValidListValue(methodList, obj, obj.dictAttributes.sfwObjectMethod, "sfwObjectMethod", "sfwObjectMethod", CONST.VALIDATION.INVALID_METHOD, $scope.validationErrorList);
                if (obj && obj.errors && obj.errors.sfwObjectMethod) {
                    validateServerMethod(obj, "sfwObjectMethod");
                }
            }

            if (obj.dictAttributes.hasOwnProperty("sfwEntityField") && obj.dictAttributes.sfwEntityField && (obj.Name == "sfwScheduler" || obj.Name == "sfwCalendar")) {
                var entityname = getEntityName(obj.dictAttributes.sfwEntityField, entityid);
                if (obj.dictAttributes.hasOwnProperty("sfwEventId") && obj.dictAttributes.sfwEventId) {
                    $ValidationService.checkValidListValueForMultilevel([], obj, obj.dictAttributes.sfwEventId, entityname, "sfwEventId", "sfwEventId", CONST.VALIDATION.INVALID_FIELD, $scope.validationErrorList, false, "");
                }
                if (obj.dictAttributes.hasOwnProperty("sfwEventName") && obj.dictAttributes.sfwEventName) {
                    $ValidationService.checkValidListValueForMultilevel([], obj, obj.dictAttributes.sfwEventName, entityname, "sfwEventName", "sfwEventName", CONST.VALIDATION.INVALID_FIELD, $scope.validationErrorList, false, "");
                }
                if (obj.dictAttributes.hasOwnProperty("sfwEventStartDate") && obj.dictAttributes.sfwEventStartDate) {
                    $ValidationService.checkValidListValueForMultilevel([], obj, obj.dictAttributes.sfwEventStartDate, entityname, "sfwEventStartDate", "sfwEventStartDate", CONST.VALIDATION.INVALID_FIELD, $scope.validationErrorList, false, "");
                }
                if (obj.dictAttributes.hasOwnProperty("sfwEventEndDate") && obj.dictAttributes.sfwEventEndDate) {
                    $ValidationService.checkValidListValueForMultilevel([], obj, obj.dictAttributes.sfwEventEndDate, entityname, "sfwEventEndDate", "sfwEventEndDate", CONST.VALIDATION.INVALID_FIELD, $scope.validationErrorList, false, "");
                }
                if (obj.dictAttributes.hasOwnProperty("sfwEventCategory") && obj.dictAttributes.sfwEventCategory) {
                    $ValidationService.checkValidListValueForMultilevel([], obj, obj.dictAttributes.sfwEventCategory, entityname, "sfwEventCategory", "sfwEventCategory", CONST.VALIDATION.INVALID_FIELD, $scope.validationErrorList, false, "");
                }
            }
            if (obj.Elements && obj.Elements.length > 0) {
                if (chartObj && chartObj.errors && chartObj.errors.hasOwnProperty("series_errors") && !$ValidationService.isEmptyObj(chartObj.errors.series_errors)) delete chartObj.errors.series_errors;

                var newExtraData = {};
                if (obj.Name == "sfwWizardStep") {
                    var strRuleGroup = obj.dictAttributes.sfwRulesGroup;
                    newExtraData.lstHardErrors = $scope.createValidationRuleList($scope.validationData[entityid], $scope.iswizard, strRuleGroup);
                    newExtraData.lstRules = PopulateEntityRules($scope.validationData[entityid], $scope.iswizard, null);
                    validateForm(obj, entityid, newExtraData, chartObj, query);
                }
                else if (CONST.FORM.COLLECTION_TYPE_NODES.indexOf(obj.Name) > -1) {
                    var entity;
                    var baseQuery = "";
                    if (obj.dictAttributes.sfwEntityField && (obj.dictAttributes.sfwEntityField == "InternalErrors" || obj.dictAttributes.sfwEntityField == "ExternalErrors")) {
                        entity = "entError";
                    }
                    else if (obj.Name == "sfwGridView" && obj.dictAttributes.sfwBoundToQuery && obj.dictAttributes.sfwBoundToQuery.toLowerCase() == "true") {
                        baseQuery = obj.dictAttributes.sfwBaseQuery;
                    } else if (obj.dictAttributes.sfwParentGrid && obj.dictAttributes.sfwEntityField) { // if parent grid setted to grid then get entity of parent grid
                        entity = $scope.FindEntityName(obj, $scope.FormModel.dictAttributes.sfwEntity, true);
                    } else {
                        entity = getEntityName(obj.dictAttributes.sfwEntityField, entityid);
                    }
                    var chart = {};
                    if (obj.Name == "sfwChart") chart = obj;
                    if (entity) {
                        if ($scope.validationData && $scope.validationData.hasOwnProperty(entity)) {
                            newExtraData.lstHardErrors = $scope.createValidationRuleList($scope.validationData[entity], $scope.iswizard, null);
                            newExtraData.lstRules = PopulateEntityRules($scope.validationData[entity], $scope.iswizard, null);
                        }
                        validateForm(obj, entity, newExtraData, chart, query);
                    } else {
                        validateForm(obj, entityid, extraData, chartObj, baseQuery);
                    }
                }
                else if (obj.Name == "sfwDialogPanel") {
                    var strdialogpanelid = obj.dictAttributes.ID;
                    var entityfieldname;
                    if (strdialogpanelid) {
                        var button = GetFieldFromFormObject($scope.SfxMainTable, 'sfwButton', 'sfwRelatedDialogPanel', strdialogpanelid);
                        if (button && button.length > 0 && button[0].dictAttributes.sfwRelatedControl) {
                            var gridview = GetFieldFromFormObject($scope.SfxMainTable, 'sfwGridView', 'ID', button[0].dictAttributes.sfwRelatedControl);
                            if (gridview && gridview.length > 0) {
                                entityfieldname = gridview[0].dictAttributes.sfwEntityField;
                            }
                        }
                    }
                    var entityName;
                    if (entityfieldname) {
                        entityName = getEntityName(entityfieldname, entityid);
                        if ($scope.validationData && $scope.validationData.hasOwnProperty(entityName)) {
                            newExtraData.lstHardErrors = $scope.createValidationRuleList($scope.validationData[entityName], $scope.iswizard, null);
                            newExtraData.lstRules = PopulateEntityRules($scope.validationData[entityName], $scope.iswizard, null);
                        }
                    }
                    if (entityName) {
                        validateForm(obj, entityName, newExtraData, chartObj, query);
                    } else validateForm(obj, entityid, extraData, chartObj, query);
                }
                else {
                    validateForm(obj, entityid, extraData, chartObj, query);
                }
            }
        });
        //$("#validation-btn").prop("disabled", false);
    };

    $scope.validateParameters = function (obj, params, prop) {
        if (angular.isArray($scope.parameterList) && $scope.parameterList.length <= 0) {
            return;
        }
        var prefix = "prop-";
        if (prop == "sfwAutoParameters") {
            prefix = "autoprop-";
        } else if (prop == "sfwCascadingRetrievalParameters") {
            prefix = "cprop-";
        }
        var param = params.split(";");
        for (var i = 0; i < param.length; i++) {
            var str1 = param[i].split("=");
            var strId = str1[str1.length - 1];
            $ValidationService.checkValidListValue($scope.parameterList, obj, strId, prop, prefix + strId, "parameter value(" + strId + ") does not exists", $scope.validationErrorList);
        }
    };
    $scope.validateGroups = function (obj, entityid) {
        if ($scope.validationData && $scope.validationData.hasOwnProperty(entityid)) {
            var lstRules = $scope.validationData[entityid];
            var group = lstRules && lstRules.lstGroupsList;
            var lstGroups = [];
            if (angular.isArray(group) && group.length > 0) {
                lstGroups = $ValidationService.getListByPropertyName(group[0].Elements, 'ID');
            }
            $ValidationService.checkValidListValue(lstGroups, obj, obj.dictAttributes.sfwRulesGroup, 'sfwRulesGroup', "sfwRulesGroup", CONST.VALIDATION.INVALID_GROUP, $scope.validationErrorList);
        }
    };
    $scope.validateGridControlField = function (obj, query, parentObj) {
        if ((obj.Name === "sfwLabel" || obj.Name == "parameter") && parentObj && (parentObj.Name == "HeaderTemplate" || parentObj.Name == "FooterTemplate" || parentObj.Name == "Parameters")) {
            $ValidationService.checkValidListValueForMultilevel([], obj, obj.dictAttributes.sfwEntityField, $scope.FormModel.dictAttributes.sfwEntity, "sfwEntityField", "sfwEntityField", CONST.VALIDATION.ENTITY_FIELD_INCORRECT, $scope.validationErrorList, false, "");
        } else if ($scope.gridQueryResult && $scope.gridQueryResult.hasOwnProperty(query)) {
            var list = $ValidationService.getListByPropertyName($scope.gridQueryResult[query], "CodeID", false);
            $ValidationService.checkValidListValue(list, obj, obj.dictAttributes.sfwEntityField, "sfwEntityField", "sfwEntityField", CONST.VALIDATION.ENTITY_FIELD_INCORRECT, $scope.validationErrorList);
        }
    };
    var getRuleData = function (obj) {
        var lstRules = [];
        var entityname = null;
        if (FindParent(obj, "sfwGridView")) {
            entityname = $GetGridEntity.getEntityName($scope.FormModel, obj);

        } else {
            entityname = $scope.FindEntityName(obj, $scope.FormModel.dictAttributes.sfwEntity);
        }
        if (entityname) {
            lstRules = PopulateEntityRules($scope.validationData[entityname], $scope.iswizard, null);
        }
        return lstRules;
    };
    var getValidationRuleData = function (obj) {
        var lstHardErrors = [];
        var entityname = $scope.FindEntityName(obj, $scope.FormModel.dictAttributes.sfwEntity);
        if (entityname) {
            lstHardErrors = $scope.createValidationRuleList($scope.validationData[entityname], $scope.iswizard, null);
        }
        return lstHardErrors;
    };
    $scope.validateEmptyCodeId = function (model, list, entity) {
        var property = "";
        if (model.dictAttributes.sfwRelatedGrid) {
            entity = $scope.FindEntityName(model, $scope.FormModel.dictAttributes.sfwEntity);
        }
        if ($scope.IsSearchCriteriaSelected && model.dictAttributes.sfwDataField) {
            property = "sfwDataField";
        } else if (model.dictAttributes.sfwEntityField) {
            property = "sfwEntityField";
        }
        if (model.Name == "sfwCheckBoxList") {
            property = "sfwCheckBoxField";
        }

        if (model.dictAttributes.sfwLoadSource) {
            $ValidationService.checkValidListValue(list, model, model.dictAttributes.sfwLoadSource, "sfwLoadSource", "invalid_code_group", CONST.VALIDATION.CODE_GROUP_NOT_EXISTS, $scope.validationErrorList);
        } else if (model.dictAttributes[property] && model.errors && !model.errors[property]) {
            var placeHolderValue = GetCodeID(entity, model.dictAttributes[property], $EntityIntellisenseFactory.getEntityIntellisense());
            if (!placeHolderValue) {
                $ValidationService.checkValidListValue([], model, model.dictAttributes.sfwLoadSource, "sfwLoadSource", "invalid_code_group", CONST.VALIDATION.CODE_GROUP_NOT_EXISTS, $scope.validationErrorList, true);
            }
        }

    };

    var validateServerMethod = function (obj, attribute) {
        if (!(attribute && attribute.trim().length > 0)) {
            attribute = "sfwLoadSource";
        }
        var RemoteObjectName = "srvCommon";
        var lstRemoteObj = [];
        if ($scope.FormModel && $scope.FormModel.dictAttributes.sfwRemoteObject) {
            RemoteObjectName = $scope.FormModel.dictAttributes.sfwRemoteObject;
        }
        if ($scope.validationData && $scope.validationData.hasOwnProperty("RemoteObject")) {
            lstRemoteObj = $scope.validationData["RemoteObject"];
        }
        var objServerObject = GetServerMethodObject(RemoteObjectName, lstRemoteObj);
        var list = PopulateServerMethod([], obj, objServerObject, true);
        $ValidationService.checkValidListValue(list, obj, obj.dictAttributes[attribute], attribute, attribute, CONST.VALIDATION.INVALID_METHOD, $scope.validationErrorList);
    };

    var getMethodList = function (entityid, showonlycollection, showonlyobject) {
        var lst = $Entityintellisenseservice.GetIntellisenseData(entityid, "", "", true, false, true, true, false, false);
        var resultList = [];
        if (lst && lst.length > 0) {
            if (showonlycollection) {
                lst = $filter("filter")(lst, { ReturnType: "Collection" });
            }
            else if (showonlyobject) {
                lst = $filter("filter")(lst, { ReturnType: "Object" });
            }
            if (lst && lst.length > 0) {
                resultList = $ValidationService.getListByPropertyName(lst, "ID", false);
            }
        }
        return resultList;
    };

    var getEntityName = function (entField, entityid) {
        var entity = "";
        if (entField) {
            var object = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(entityid, entField);
            if (object) {
                entity = object.Entity;
            }
        }
        return entity;
    };
    $scope.iterateModel = function (model) {
        angular.forEach(model.Elements, function (obj) {
            if (CONST.FORM.IGNORE_NODES.indexOf(obj.Name) <= -1) {
                if (obj.Name == "sfwTable" && $scope.currentfile.FileType == "Lookup") {
                    $ValidationService.validateID(obj, $scope.validationErrorList, obj.dictAttributes.ID);
                } else if (obj.Name != "sfwTable") {
                    $ValidationService.validateID(obj, $scope.validationErrorList, obj.dictAttributes.ID);
                }
                $ValidationService.checkDuplicateId(obj, $scope.formTableModel, $scope.validationErrorList, false, CONST.FORM.NODES);
            }
            if (obj.Elements && obj.Elements.length > 0 && (CONST.FORM.NODES.indexOf(obj.Name) > -1)) {
                $scope.iterateModel(obj);
            }
        });
    };
    $scope.findParentAndChildObject = function (selectedItem) {
        var findList = [];
        $scope.FindDeepNode($scope.FormModel, selectedItem, findList);

        $scope.$evalAsync(function () {
            var path = $ValidationService.createFullPath($scope.FormModel, findList);
            $scope.selectElement(path);
        });
    };

    var checkActiveForm = function (model) {


        var property = "sfwActiveForm";
        var ActiveFormType = "Lookup,Maintenance,Wizard,FormLinkLookup,FormLinkMaintenance,FormLinkWizard";

        if (model.dictAttributes.sfwMethodName == "btnCorrespondenceRows_Click") {
            ActiveFormType = "Maintenance,FormLinkMaintenance";
        }
        else if (model.dictAttributes.sfwMethodName == "btnOpenLookup_Click") {
            ActiveFormType = "Lookup,FormLinkLookup,Maintenance,FormLinkMaintenance";
        }

        if ((model.dictAttributes.sfwMethodName == "btnNewUpdate_Click") ||
            (model.dictAttributes.sfwMethodName == "btnPrototypeSearch_Click")) {
            ActiveFormType = "Maintenance,FormLinkMaintenance";
        }

        if (model.dictAttributes.sfwMethodName === "btnRetrieve_Click") {
            ActiveFormType = "Lookup,FormLinkLookup";
        }

        if (model.Name == "sfwOpenDetail" || model.Name == "sfwMultiCorrespondence") {
            ActiveFormType = "Maintenance,FormLinkMaintenance";
        }
        if (model.Name == "sfwToolTipButton") {
            ActiveFormType = "Tooltip,";
        }
        if (model.Name == "udc") {
            ActiveFormType = "UserControl,";
            property = "Name";
        }
        var listOfFiles = [];
        function getListofFiles(file) {
            if (file.FileType == files[i]) {
                listOfFiles.push(file.FileID);
            }
        }
        if (ActiveFormType.indexOf(',') > -1) {
            var files = ActiveFormType.split(',');
            for (var i = 0; i < files.length; i++) {
                angular.forEach($scope.validationData.ActiveForms, getListofFiles);
            }
        }
        $ValidationService.checkActiveForm(listOfFiles, model, model.dictAttributes[property], property, 'invalid_active_form', CONST.VALIDATION.INVALID_ACTIVE_FORM, $scope.validationErrorList);
    };
    var copyErrorMessages = function (objSeries, model) {
        if (model && model.errors && !model.errors.hasOwnProperty("series_errors")) model.errors.series_errors = {};
        for (var prop in objSeries.errors) {
            if (model && model.errors && !model.errors.series_errors.hasOwnProperty(prop)) {
                model.errors.series_errors[prop + "_" + objSeries.dictAttributes.Name] = objSeries.errors[prop];
            }
        }
    };
    // #endregion

    $scope.PopulateQueryId = function (isVisible) {

        $scope.$evalAsync(function () {
            $scope.lstQueryID = [];
            var initialload = $scope.FormModel.Elements.filter(function (x) { return x.Name == 'initialload'; });

            if (initialload.length > 0) {
                for (i = 0; i < initialload[0].Elements.length; i++) {
                    if (initialload[0].Elements[i] && initialload[0].Elements[i].dictAttributes && initialload[0].Elements[i].dictAttributes.ID) {
                        $scope.lstQueryID.push(initialload[0].Elements[i]);
                    }
                }
            }

            if ($scope.lstQueryID.length > 0) {
                $scope.SelectedQuery = $scope.lstQueryID[0];
                if (!$scope.MainQuery) {
                    $scope.lstQueryID.splice(0, 0, { Name: "", dictAttributes: { ID: '' } });
                }
                $scope.populateQueryFields($scope.SelectedQuery, isVisible);
            }

            function AddInqueryIDList(item) {
                if (item.dictAttributes.ID) {
                    $scope.queryIDList.push(item.dictAttributes.ID);
                }
            }
            $scope.queryIDList = [];
            angular.forEach($scope.lstQueryID, AddInqueryIDList);
        });
    };

    $scope.toggleSideBar = function () {
        if (!$scope.isDeveloperView) {
            $scope.IsToolsDivCollapsed = !$scope.IsToolsDivCollapsed;
        }
    };

    $scope.ClearSelectedColumns = function () {
        for (var i = 0; i < $scope.lstLoadedEntityColumnsTree.length; i++) {
            if ($scope.lstLoadedEntityColumnsTree[i].IsVisible == true) {
                if ($scope.lstLoadedEntityColumnsTree[i].selectedobjecttreefield) {
                    $scope.lstLoadedEntityColumnsTree[i].selectedobjecttreefield.IsRecordSelected = false;
                    $scope.lstLoadedEntityColumnsTree[i].selectedobjecttreefield.IsSelected = "False";
                }
                if ($scope.lstLoadedEntityColumnsTree[i].lstselectedobjecttreefields.length > 0) {
                    for (var j = 0; j < $scope.lstLoadedEntityColumnsTree[i].lstselectedobjecttreefields.length; j++) {
                        $scope.lstLoadedEntityColumnsTree[i].lstselectedobjecttreefields[j].IsRecordSelected = false;
                        $scope.lstLoadedEntityColumnsTree[i].lstselectedobjecttreefields[j].IsSelected = "False";
                    }
                }
                break;
            }
        }
    };
    $scope.populateQueryFieldsFromLookupTree = function (query, isVisible) {
        if (query) {
            $scope.SelectedQuery = query;
            $scope.populateQueryFields(query, isVisible);
        }
        else {
            $scope.SelectedQuery = undefined;
        }
    };

    $scope.onRefreshQueryFields = function () {
        if ($scope.SelectedQuery) {
            $scope.populateQueryFields($scope.SelectedQuery, true);
            $scope.ShowRefreshCompletedDialog();
        }
    }

    $scope.ShowRefreshCompletedDialog = function () {
        var newScope = $scope.$new();
        newScope.strMessage = "Refresh Completed.";
        newScope.isError = true;
        var dialog = $rootScope.showDialog(newScope, "", "StartUp/views/TFSMessageDialog.html");
        newScope.OkClick = function () {
            dialog.close();
        };
    };

    $scope.populateQueryFields = function (query, isVisible) {
        $scope.ClearSelectedColumns();
        if (query) {
            var objnew;
            for (var i = 0; i < $scope.lstLoadedEntityColumnsTree.length; i++) {
                if ($scope.lstLoadedEntityColumnsTree[i].EntityName == query.dictAttributes.ID && $scope.lstLoadedEntityColumnsTree[i].IsQuery == true) {
                    $scope.lstLoadedEntityColumnsTree[i].IsVisible = true;
                    $scope.lstLoadedEntityColumnsTree[i].lstselectedobjecttreefields = [];
                    //$scope.entityTreeName = $scope.lstLoadedEntityColumnsTree[i].EntityName;
                    $scope.lookupTreeObject = $scope.lstLoadedEntityColumnsTree[i];
                    objnew = $scope.lstLoadedEntityColumnsTree[i];
                }
                else {
                    //if ($scope.FormModel.IsLookupCriteriaEnabled) {
                    $scope.lstLoadedEntityColumnsTree[i].IsVisible = false;
                    //}
                }
            }
            if (!objnew) {
                objnew = { EntityName: query.dictAttributes.ID, IsVisible: isVisible, selectedobjecttreefield: undefined, lstselectedobjecttreefields: [], IsQuery: true, QueryRef: query.dictAttributes.sfwQueryRef, SortedColumns: [] };
                $scope.lstLoadedEntityColumnsTree.push(objnew);
                $scope.lookupTreeObject = objnew;
                // $scope.entityTreeName = query.dictAttributes.ID;
            }
            objnew.SortedColumns = objnew.lstselectedobjecttreefields;
            $scope.ColumnsLimitCount = 50;
            if (query.dictAttributes.sfwQueryRef != undefined && query.dictAttributes.sfwQueryRef != undefined) {
                $.connection.hubForm.server.getEntityQueryColumns(query.dictAttributes.sfwQueryRef, 'LoadQueryFieldsForLookup').done(function (data) {
                    $scope.receiveQueryFields(data, query.dictAttributes.sfwQueryRef);
                });
            }
        }
    };

    $scope.sortcolumnslist = function (objlookuptree, strText) {
        if (strText != "") {
            var lstExactMatchCaseSensitive = [];
            var lstExactMatchCaseInSensitive = [];
            var lstCaseSenesitive = [];
            var lstCaseInsensitive = [];
            var lstContainsCaseSensitive = [];
            var lstContainsCaseInSensitive = [];

            for (var i = 0; i < objlookuptree.lstselectedobjecttreefields.length; i++) {
                if (objlookuptree.lstselectedobjecttreefields[i].ID == strText) {
                    lstExactMatchCaseSensitive.push(objlookuptree.lstselectedobjecttreefields[i]);
                } else if (objlookuptree.lstselectedobjecttreefields[i].ID.toLowerCase() == strText.toLowerCase()) {
                    lstExactMatchCaseInSensitive.push(objlookuptree.lstselectedobjecttreefields[i]);
                } else if (objlookuptree.lstselectedobjecttreefields[i].ID.indexOf(strText) == 0) {
                    lstCaseSenesitive.push(objlookuptree.lstselectedobjecttreefields[i]);
                } else if (objlookuptree.lstselectedobjecttreefields[i].ID.toLowerCase().indexOf(strText.toLowerCase()) == 0) {
                    lstCaseInsensitive.push(objlookuptree.lstselectedobjecttreefields[i]);
                } else if (objlookuptree.lstselectedobjecttreefields[i].ID.contains(strText)) {
                    lstContainsCaseSensitive.push(objlookuptree.lstselectedobjecttreefields[i]);
                } else if (objlookuptree.lstselectedobjecttreefields[i].ID.toLowerCase().contains(strText.toLowerCase())) {
                    lstContainsCaseInSensitive.push(objlookuptree.lstselectedobjecttreefields[i]);
                }
            }
            var lst = lstExactMatchCaseSensitive.concat(lstExactMatchCaseInSensitive).concat(lstCaseSenesitive).concat(lstCaseInsensitive).concat(lstContainsCaseSensitive).concat(lstContainsCaseInSensitive);
            objlookuptree.SortedColumns = lst;
            $scope.ColumnsLimitCount = 50;

        } else {
            objlookuptree.SortedColumns = objlookuptree.lstselectedobjecttreefields;
            $scope.ColumnsLimitCount = 50;
        }
    };

    $scope.receiveQueryFields = function (lstqueryfields, sfwQueryRef) {

        $scope.$apply(function () {
            function iAddSelectedFields(query) {
                var datatype = "";
                if (query.Data1 && query.Data1 != null) {
                    datatype = query.Data1.toLowerCase();
                }
                else if (query.DataType) {
                    datatype = query.DataType.toLowerCase();
                }
                var newquery = { ID: query.CodeID, DisplayName: query.CodeID, Value: query.CodeID, DataType: datatype, Entity: "", Direction: "", IsPrivate: "", Type: "", KeyNo: "", CodeID: "" };
                objnew.lstselectedobjecttreefields.push(newquery);

            }
            if ($scope.lstQueryID) {


                var lst = $scope.lstQueryID.filter(function (itm) {
                    return itm.dictAttributes.sfwQueryRef == sfwQueryRef;
                });
                if (lst && lst.length > 0) {

                    var lst1 = $scope.lstLoadedEntityColumnsTree.filter(function (itm) {
                        return itm.EntityName == lst[0].dictAttributes.ID;
                    });
                    if (lst1 && lst1.length > 0) {
                        var objnew = lst1[0];
                        if (lstqueryfields) {
                            sortListBasedOnproperty(lstqueryfields, "", "CodeID");

                            angular.forEach(lstqueryfields, iAddSelectedFields);
                        }
                    }
                }
            }
        });
    };

    $scope.otherSelectedField = [];
    $scope.RemoveOrIsFieldPresentFromOtherSelectedField = function (objField, param) {
        var isFound = false;
        for (var i = 0; i < $scope.otherSelectedField.length; i++) {
            if ($scope.otherSelectedField[i].ID == objField.ID) {
                if (param == "Delete") {
                    $scope.otherSelectedField.splice(i, 1);
                } else if (param == "bool") {
                    isFound = true;
                }
                break;
            }
        }

        return isFound;
    };

    $scope.selectField = function (field, event) {
        if ($scope.selectedfield && !event.ctrlKey) {
            $scope.selectedfield.IsRecordSelected = false;
            if (!$scope.ischeckboxvisible) {
                $scope.selectedfield.IsSelected = "False";
            }
        } else {
            if ($scope.selectedfield) {
                var isFound = $scope.RemoveOrIsFieldPresentFromOtherSelectedField($scope.selectedfield, "bool");
                if (!isFound) {
                    $scope.otherSelectedField.push($scope.selectedfield);
                }
                $scope.selectedfield = undefined;
            }
        }

        if (!event.ctrlKey) {
            $scope.selectedfield = field;
            $scope.selectedfield.IsRecordSelected = true;
        }
        if (event) {
            event.stopPropagation();
            event.stopImmediatePropagation();
        }

        if (!$scope.ischeckboxvisible) {
            if (event.ctrlKey) {
                if (field.IsRecordSelected) {
                    field.IsRecordSelected = false;
                    field.IsSelected = "False";
                    $scope.RemoveOrIsFieldPresentFromOtherSelectedField(field, "Delete");
                }
                else {
                    field.IsRecordSelected = true;
                    field.IsSelected = "True";
                    $scope.otherSelectedField.push(field);
                }
            }
            else {
                for (var i = 0; i < $scope.otherSelectedField.length; i++) {
                    $scope.otherSelectedField[i].IsRecordSelected = false;
                    $scope.otherSelectedField[i].IsSelected = "False";
                }
                $scope.otherSelectedField = [];
                field.IsRecordSelected = true;
                field.IsSelected = "True";
            }
        }
        for (var i = 0; i < $scope.lstLoadedEntityColumnsTree.length; i++) {
            if ($scope.lstLoadedEntityColumnsTree[i].IsVisible == true) {
                $scope.lstLoadedEntityColumnsTree[i].selectedobjecttreefield = $scope.selectedfield;
                //$scope.lstLoadedEntityColumnsTree[i].lstselectedobjecttreefields = $scope.otherSelectedField;
                break;
            }
        }

        if ($scope.ObjgridBoundedQuery.IsQuery) {
            $scope.ObjgridBoundedQuery.selectedobjecttreefield = $scope.selectedfield;
        }
    };

    $scope.selectPanelControl = function (obj, e) {
        if (obj) {
            if ($scope.CurrPanel && $scope.CurrPanel != obj) {
                $scope.CurrPanel.IsVisible = false;
                $scope.CurrPanel.initialvisibilty = false;
            }
            if (!obj.isLoaded) {
                obj.isLoaded = true;
            }
            $scope.CurrPanel = obj;
            $scope.IsGridSeleected = false;
            $scope.CurrPanel.IsVisible = true;
            // $scope.CurrPanel.initialvisibilty = true;
            if (!$scope.isAnyPanelOpen) {
                $scope.CurrPanel.initialvisibilty = true;
                $scope.isAnyPanelOpen = true;
            }

            $scope.CurrPanel.IsPanelToggle = !$scope.CurrPanel.IsPanelToggle;
            SetFormSelectedControl($scope.FormModel, $scope.CurrPanel);

            //$scope.FormModel.SelectedControl = $scope.CurrPanel;
            $scope.CurrPanel.IsHeaderTemplate = false;

            var panelName = $scope.GetPanelName(obj);
            $scope.setobjtemplate(panelName);
            var lstPanels = [];
            FindControlListByName($scope.CurrPanel, "sfwPanel", lstPanels);
            FindControlListByName($scope.CurrPanel, "sfwListView", lstPanels);
            FindControlListByName($scope.CurrPanel, "sfwDialogPanel", lstPanels);
            FindControlListByName($scope.CurrPanel, "sfwWizardStep", lstPanels);
            if (lstPanels && lstPanels.length > 0) {
                for (var i = 0; i < lstPanels.length; i++) {
                    lstPanels[i].IsVisible = true;
                    lstPanels[i].initialvisibilty = true;
                    lstPanels[i].isLoaded = true;
                }
            }
            if ($scope.setDisplayNoneToTable) {
                $scope.setDisplayNoneToTable();
            }
            $scope.ObjgridBoundedQuery.IsQuery = false;
        }
    };

    $scope.GetPanelName = function (obj) {
        var strCaption = obj.dictAttributes.ID;
        if (obj.dictAttributes.Title) {
            strCaption = obj.dictAttributes.Title;
        }
        else if (obj.dictAttributes.sfwCaption) {
            strCaption = obj.dictAttributes.sfwCaption;
        }
        return strCaption;
    };

    $scope.setobjtemplate = function (panelName) {
        function SetTabState(sfxtabSheet) {
            var strTabName = sfxtabSheet.dictAttributes.ID;
            if (strTabName.contains("tshAdvCriteria")) {
                $scope.IsLookupAdvCriteriaSelected = true;
            }
            else if (strTabName.contains("tshAdvSort")) {
                $scope.IsLookupAdvSortSelected = true;
            }
            else if (strTabName.contains("tshSql")) {
                $scope.IsLookupQuerySelected = true;
            }
        }
        $scope.FormModel.IsLookupCriteriaEnabled = false;
        $scope.FormModel.IsPrototypeLookupCriteriaEnabled = false;
        if ($scope.FormModel.dictAttributes.sfwType == "Lookup" && !$scope.FormModel.dictAttributes.ID.startsWith("wfp")) {
            var isGridFound = isGridPresentInsidePanel($scope.CurrPanel);
            if ($scope.CurrPanel.dictAttributes.ID && !isGridFound) {
                $scope.FormModel.IsLookupCriteriaEnabled = true;
                $scope.IsGridSeleected = false;

                for (var i = 0; i < $scope.lstLoadedEntityColumnsTree.length; i++) {

                    if ($scope.SelectedQuery && $scope.lstLoadedEntityColumnsTree[i].EntityName == $scope.SelectedQuery.dictAttributes.ID && $scope.lstLoadedEntityColumnsTree[i].IsQuery == true) {

                        $scope.lstLoadedEntityColumnsTree[i].IsVisible = true;
                        $scope.lookupTreeObject = $scope.lstLoadedEntityColumnsTree[i];
                        //$scope.entityTreeName = $scope.lstLoadedEntityColumnsTree[i].EntityName;
                        //$scope.currentEntiyTreeObject = $scope.lstLoadedEntityColumnsTree[i];
                    }
                    else {
                        $scope.lstLoadedEntityColumnsTree[i].IsVisible = false;
                    }
                }
            }
        }

        if ($scope.FormModel.dictAttributes.sfwType == "Lookup") {
            if ($scope.CurrPanel && $scope.CurrPanel.TableVM) {
                var rowVM = $scope.CurrPanel.TableVM.Elements[0];

                var sfxCellVM = rowVM.Elements[0];
                if (sfxCellVM.Elements.length > 0 && sfxCellVM.Elements[0].Name == "sfwTabContainer") {
                    var sfxTabContainerModel = sfxCellVM.Elements[0];


                    if (sfxTabContainerModel) {
                        var tabsVM = sfxTabContainerModel.Elements[0];
                        if (tabsVM) {

                            angular.forEach(tabsVM.Elements, SetTabState);
                        }
                    }

                }
            }
        }

        if (!$scope.FormModel.IsLookupCriteriaEnabled) {
            for (var i = 0; i < $scope.lstLoadedEntityTrees.length; i++) {
                if ($scope.lstLoadedEntityTrees[i].EntityName == $scope.FormModel.dictAttributes.sfwEntity && !$scope.lstLoadedEntityTrees[i].IsQuery) {

                    $scope.lstLoadedEntityTrees[i].IsVisible = true;
                    $scope.entityTreeName = $scope.lstLoadedEntityTrees[i].EntityName;
                    $scope.currentEntiyTreeObject = $scope.lstLoadedEntityTrees[i];
                }
                else {
                    $scope.lstLoadedEntityTrees[i].IsVisible = false;
                }
            }
        }
        if ($scope.FormModel.dictAttributes.sfwType == "Lookup" && $scope.FormModel.dictAttributes.ID.startsWith("wfp")) {
            var isGridFound = isGridPresentInsidePanel($scope.CurrPanel);
            if ($scope.CurrPanel.dictAttributes.ID && !isGridFound) {
                $scope.FormModel.IsPrototypeLookupCriteriaEnabled = true;
            }
        }
    };

    $scope.SetMainTable = function () {
        function iLoopMainTable(row) {
            row.ParentVM = $scope.SfxMainTable;
            if (row.Elements.length > 0) {
                if ($scope.FormModel.dictAttributes.sfwType == "Wizard") {
                    for (k = 0; k < row.Elements.length; k++) {
                        var column = row.Elements[k];
                        column.ParentVM = row;
                        var panel = column.Elements.filter(function (x) {
                            return x.Name == "sfwWizard";
                        });

                        if (panel.length > 0) {
                            $scope.objWizard = panel;
                            panel = panel[0];
                            $scope.objWizard = panel;
                            panel.ParentVM = column;

                            var wizardstep = panel.Elements.filter(function (x) {
                                return x.Name == "WizardSteps";
                            });

                            var HeaderTemplate = panel.Elements.filter(function (x) {
                                return x.Name == "HeaderTemplate";
                            });
                            if (HeaderTemplate.length > 0) {
                                $scope.HeaderTemplate = HeaderTemplate[0];
                            }

                            if (wizardstep.length > 0) {
                                wizardstep = wizardstep[0];
                                for (var iwizard = 0; iwizard < wizardstep.Elements.length; iwizard++) {
                                    var step = wizardstep.Elements[iwizard];
                                    step.ParentVM = wizardstep;
                                    if (step.Name == "sfwWizardStep") {
                                        if (step.Elements[0].Name == "sfwTable") {
                                            step.TableVM = step.Elements[0];
                                        }
                                        step.isLoaded = false;
                                        //if ((step.dictAttributes.ID != "pnltoolbar" || wizardstep.Elements.length == 1) && !$scope.isAnyPanelOpen) {
                                        //    step.initialvisibilty = true;
                                        //    $scope.isAnyPanelOpen = true;
                                        //}
                                        $scope.MainPanels.push(step);
                                    }
                                }
                            }
                            break;
                        }
                    }
                }
                else {
                    angular.forEach(row.Elements, function (column) {
                        column.ParentVM = row;
                        var panel = column.Elements.filter(function (x) {
                            return x.Name == "sfwPanel" || x.Name == "sfwDialogPanel";
                        });
                        if (panel.length > 0) {
                            panel = panel[0];
                            panel.ParentVM = column;
                            panel.IsMainPanel = true;
                            for (j = 0; j < panel.Elements.length; j++) {
                                if (panel.Elements[j].Name == "sfwTable") {
                                    panel.TableVM = panel.Elements[j];
                                    break;
                                }
                            }
                            panel.isLoaded = false;
                            //if (panel.dictAttributes.ID != "pnltoolbar" && !$scope.isAnyPanelOpen) {
                            //    panel.initialvisibilty = true;
                            //    $scope.isAnyPanelOpen = true;
                            //}
                            $scope.MainPanels.push(panel);

                        }

                    });
                }
            }
        }

        for (var ielem = 0; ielem < $scope.FormModel.Elements.length; ielem++) {
            if ($scope.FormModel.Elements[ielem].Name == "sfwTable") {
                $scope.SfxMainTable = $scope.FormModel.Elements[ielem];
                angular.forEach($scope.SfxMainTable.Elements, iLoopMainTable);

            }
            else if ($scope.FormModel.Elements[ielem].Name == "initialload") {
                $scope.InitialLoad = $scope.FormModel.Elements[ielem];
            }

            else if ($scope.FormModel.Elements[ielem].Name == "centerleft") {
                $scope.CenterLeft = $scope.FormModel.Elements[ielem];
            }

            else if ($scope.FormModel.Elements[ielem].Name == "validatenew") {
                $scope.ValidateNew = $scope.FormModel.Elements[ielem];
            }
        }
    };

    // Iterating UserControl from each table
    $scope.FindDeepNodeUDC = function (objParentElements, pathToObject) {
        if (objParentElements) {
            angular.forEach(objParentElements.Elements, function (item) {
                if (item.Name == "udc") {
                    pathToObject.push(item);
                }

                if (item.Elements && item.Elements.length > 0) {
                    $scope.FindDeepNodeUDC(item, pathToObject);
                }
            });
        }
    };

    $scope.SetUDCMainTable = function () {
        var fileList = [];
        if ($scope.UDCTableList && $scope.UDCTableList.length > 0) {
            for (var i = 0; i < $scope.UDCTableList.length > 0; i++) {
                var obj = { FileName: $scope.UDCTableList[i].dictAttributes.Name, ID: $scope.UDCTableList[i].dictAttributes.ID };
                fileList.push(obj);
            }
        }

        $.connection.hubForm.server.getUserControlModel(fileList, "").done(function (udcFileList) {
            $scope.receiveUcMainTable(udcFileList);
        });
    };

    hubMain.server.populateMessageList().done(function (lstMessages) {
        $scope.lstMessages = lstMessages;
    });

    //#endregion

    // for find in design check condition before setting to false - if its not there dont set the property      
    $scope.ToggleUIDesginAttribute = function (items, IsAction) {
        if (items[0] && items[0].Name) {
            items[items.length - 1].isAdvanceSearched = IsAction;
        }
    };

    // ================================================= property highlighter was here      
    function addHighlightBox(objElement, strResponseTemplate, strAttributeName) {
        var highlightbox = $(strResponseTemplate);
        var HighlightRow = highlightbox.find(".HighlightRowWrapper");
        switch (strAttributeName.toLowerCase()) {
            case "sfwvisiblerule": HighlightRow.append("<span title='" + $(objElement).attr("sfwVisibleRule") + "' class='blk-blue'></span>"); break;
            case "sfwselectcolvisiblerule": HighlightRow.append("<span title='" + $(objElement).attr("sfwSelectColVisibleRule") + "' class='blk-blue'></span>"); break;
            case "sfwautoquery": HighlightRow.append("<span title='" + $(objElement).attr("sfwAutoQuery") + "' class='blk-red'></span>"); break;
            case "sfwretrievalquery": HighlightRow.append("<span title='" + $(objElement).attr("sfwRetrievalQuery") + "' class='blk-green'></span>"); break;
            case "sfwreadonlyrule": HighlightRow.append("<span title='" + $(objElement).attr("sfwReadOnlyRule") + "' class='blk-purple'></span>"); break;
            case "sfwvalidationrules": HighlightRow.append("<span title='" + $(objElement).attr("sfwValidationRules") + "' class='blk-brown'></span>"); break;
        }
        $(objElement).append(highlightbox);
    }
    $scope.receieveHTMLFromModel = function (strHtml) {
        if (strHtml) {
            $scope.$evalAsync(function () {
                $rootScope.IsLoading = false;
            });
            $scope.PrepareHighlightedForm(strHtml);
        }
    };
    $scope.PrepareHighlightedForm = function (strHtml) {
        $("#" + $scope.currentfile.FileName).find("#transformedxml")[0].innerHTML = strHtml;
        var highlighttemplatePath = [window.location.protocol, "//", window.location.host, "/", getWebApplicationName(), "/", "Form/views/highlightElementTemplate.html"].join("");
        // get highlight template
        $.ajax({
            url: highlighttemplatePath,
            type: 'GET',
            async: false,
            success: function (response) {
                if ($scope.DesignSearchAttributes.indexOf("sfwVisibleRule") != -1) {
                    var sfwvisibleruleElements = $("#" + $scope.currentfile.FileName).find("#transformedxml [sfwVisibleRule]");
                    var sfwSelectColVisibleRuleElements = $("#" + $scope.currentfile.FileName).find("#transformedxml [sfwSelectColVisibleRule]");
                    sfwvisibleruleElements.each(function () {
                        addHighlightBox(this, response, "sfwvisiblerule");
                    });
                    sfwSelectColVisibleRuleElements.each(function () {
                        var existingBox = $(this).find("> .highlightElement .HighlightRowWrapper");
                        if (existingBox.length > 0) {
                            existingBox.append("<span title='" + $(this).attr("sfwSelectColVisibleRule") + "' class='blk-blue'></span>");
                        }
                        else {
                            addHighlightBox(this, response, "sfwSelectColVisibleRule");
                        }
                    });
                }
                // check if these elements contains highlight box already - if no append it otherwise append only the attribute span
                if ($scope.DesignSearchAttributes.indexOf("sfwAutoQuery") != -1) {
                    var listsfwAutoQueryElements = $("#" + $scope.currentfile.FileName).find("#transformedxml [sfwAutoQuery]");
                    listsfwAutoQueryElements.each(function () {
                        var existingBox = $(this).find("> .highlightElement .HighlightRowWrapper");
                        if (existingBox.length > 0) {
                            existingBox.append("<span title='" + $(this).attr("sfwAutoQuery") + "' class='blk-red'></span>");
                        }
                        else {
                            addHighlightBox(this, response, "sfwAutoQuery");
                        }
                    });
                }
                if ($scope.DesignSearchAttributes.indexOf("sfwRetrievalQuery") != -1) {
                    var listsfwRetrievalQueryElements = $("#" + $scope.currentfile.FileName).find("#transformedxml [sfwRetrievalQuery]");
                    listsfwRetrievalQueryElements.each(function () {
                        var existingBox = $(this).find("> .highlightElement .HighlightRowWrapper");
                        if (existingBox.length > 0) {
                            existingBox.append("<span title='" + $(this).attr("sfwRetrievalQuery") + "' class='blk-green'></span>");
                        }
                        else {
                            addHighlightBox(this, response, "sfwRetrievalQuery");
                        }
                    });
                }
                if ($scope.DesignSearchAttributes.indexOf("sfwReadOnlyRule") != -1) {
                    var listsfwReadOnlyRuleElements = $("#" + $scope.currentfile.FileName).find("#transformedxml [sfwReadOnlyRule]");
                    listsfwReadOnlyRuleElements.each(function () {
                        var existingBox = $(this).find("> .highlightElement .HighlightRowWrapper");
                        if (existingBox.length > 0) {
                            existingBox.append("<span title='" + $(this).attr("sfwReadOnlyRule") + "' class='blk-purple'></span>");
                        }
                        else {
                            addHighlightBox(this, response, "sfwReadOnlyRule");
                        }
                    });
                }
                if ($scope.DesignSearchAttributes.indexOf("sfwValidationRules") != -1) {
                    var listsfwValidationRulesElements = $("#" + $scope.currentfile.FileName).find("#transformedxml [sfwValidationRules]");
                    listsfwValidationRulesElements.each(function () {
                        var existingBox = $(this).find("> .highlightElement .HighlightRowWrapper");
                        if (existingBox.length > 0) {
                            existingBox.append("<span title='" + $(this).attr("sfwValidationRules") + "' class='blk-brown'></span>");
                        }
                        else {
                            addHighlightBox(this, response, "sfwValidationRules");
                        }
                    });
                }
            }
        });
    };
    $scope.getHightlightAttribute = function () {
        var dialogScope = $scope.$new(true);
        dialogScope.attributesList = [{ label: "Visible Rule", value: "sfwVisibleRule" }, { label: "Auto Query", value: "sfwAutoQuery" }, { label: "Retrieval Query", value: "sfwRetrievalQuery" }, { label: "Readonly Rule", value: "sfwReadOnlyRule" }, { label: "Validation Rules", value: "sfwValidationRules" }];
        dialogScope.AllFilesObj = { name: "All", value: "All", selected: false };
        if ($scope.DesignHighlightAttribute == null && !$scope.isDeveloperView) {
            // first time from normal mode to analyst view
            $scope.DesignHighlightAttribute = {};
            dialogScope.DesignAttribute = {};
        }
        else {
            dialogScope.DesignAttribute = {};
            angular.copy($scope.DesignHighlightAttribute, dialogScope.DesignAttribute);
        }
        dialogScope.AttributeDialog = $rootScope.showDialog(dialogScope, "Select attributes to highlight", "Form/views/highlightAttribute.html", { width: 300, height: 500, showclose: true });
        dialogScope.onOKClick = function () {
            angular.copy(dialogScope.DesignAttribute, $scope.DesignHighlightAttribute);
            dialogScope.AttributeDialog.close();
            var highlightthis = dialogScope.attributesList.filter(function (item) {
                return dialogScope.DesignAttribute[item.value];
            });
            dialogScope.$destroy();
            $scope.DesignSearchAttributes = [];
            highlightthis.forEach(function (item) {
                $scope.DesignSearchAttributes.push(item.value);
            });
            if ($scope.DesignSearchAttributes.length > 0) {
                // ================================================= get xml from from form object      
                var objFormModel = GetBaseModel($scope.FormModel);
                if (objFormModel != "") {
                    var strobj = JSON.stringify(objFormModel);
                    if (strobj.length < 32000) {
                        $rootScope.IsLoading = true;
                        hubcontext.hubForm.server.getHTMLfromModel(strobj, $scope.currentfile).done(function (data) {
                            $scope.$evalAsync(function () {
                                $rootScope.IsLoading = false;
                            });
                            $scope.PrepareHighlightedForm(data);
                        });
                    }
                    else {
                        var strpacket = "";
                        var lstDataPackets = [];
                        var count = 0;
                        for (var i = 0; i < strobj.length; i++) {
                            count++;
                            strpacket = strpacket + strobj[i];
                            if (count == 32000) {
                                count = 0;
                                lstDataPackets.push(strpacket);
                                strpacket = "";
                            }
                        }
                        if (count != 0) {
                            lstDataPackets.push(strpacket);
                        }
                        $rootScope.IsLoading = true;
                        SendDataPacketsToServer(lstDataPackets, $scope.currentfile, "Highlight_XML");
                    }
                }
                // =================================================                 
                $scope.blackStyle = { 'height': '99%', 'overflow': 'auto', 'margin': '10px', 'padding-top': '10px' };
                $scope.IsToolsDivCollapsed = true;
                $scope.isDeveloperView = true;
            }
            else {
                $("#" + $scope.currentfile.FileName).find("#transformedxml")[0].innerHTML = "";
                $scope.isDeveloperView = false;
                $scope.blackStyle = null;
            }
        };
        dialogScope.selectAll = function () {
            if (dialogScope.AllFilesObj.selected) {
                dialogScope.attributesList.filter(function (item) {
                    dialogScope.DesignAttribute[item.value] = true;
                });
            }
            else {
                dialogScope.attributesList.filter(function (item) {
                    dialogScope.DesignAttribute[item.value] = false;
                });
            }
        };
        dialogScope.close = function () {
            $scope.$evalAsync(function () {

                dialogScope.AttributeDialog.close();
                dialogScope.$destroy();
            });
        };
    };
    $scope.OnSwitchView = function () {
        $scope.$evalAsync(function () {
            $scope.blackStyle = null;
            $scope.isDeveloperView = false;
        });
        $("#" + $scope.currentfile.FileName).find("#transformedxml")[0].innerHTML = "";
        $scope.DesignHighlightAttribute = null;
    };
    // ================================================= property highlighter was here      

    //#region Xml source Start
    $rootScope.isFromSource = false;
    $scope.ShowDesign = function () {
        if ($scope.selectedDesignSource == true) {
            //$scope.selectedDesignSource = false;
            var xmlstring = $scope.editor.getValue();
            if (xmlstring != null && xmlstring != "") {
                $rootScope.IsLoading = true;

                var lineno = $scope.editor.selection.getCursor().row;
                lineno = lineno + 1;

                if (xmlstring.length < 32000) {
                    hubMain.server.getDesignXmlString(xmlstring, $scope.currentfile, lineno);
                }
                else {
                    var lineNumber = [];
                    if (lineno > 0) {
                        lineNumber[0] = lineno;
                    }
                    else {
                        lineNumber[0] = 1;
                    }

                    var strpacket = "";
                    var lstDataPackets = [];
                    var count = 0;
                    for (var i = 0; i < xmlstring.length; i++) {
                        count++;
                        strpacket = strpacket + xmlstring[i];
                        if (count == 32000) {
                            count = 0;
                            lstDataPackets.push(strpacket);
                            strpacket = "";
                        }
                    }
                    if (count != 0) {
                        lstDataPackets.push(strpacket);
                    }

                    SendDataPacketsToServer(lstDataPackets, $scope.currentfile, "Source-Design", lineNumber);
                }
                $scope.receiveformcorrdesignxmlobject = function (data, path) {
                    $scope.selectedDesignSource = false;

                    if ($scope.isSourceDirty) {
                        var formmodel = data;

                        $scope.receiveformmodel(formmodel);
                        $scope.isSourceDirty = false;
                    }
                    //else {
                    //    $scope.removeExtraFieldsDataInToMainModel();
                    //}

                    //Commented following code, because source to design synchronization is hold for now.
                    $scope.selectElement(path);
                };
            }
        }
    };
    $scope.selectElement = function (path) {
        $("#" + $scope.currentfile.FileName).find("[drag-handler-btn]").remove();
        $scope.$evalAsync(function () {
            if ($scope.FormModel.dictAttributes.sfwType == "UserControl") {
                if (path != "form") {
                    var items = [];
                    items = $scope.objectPath(path);
                    if (items.length > 0) {
                        $scope.highlightControl(items);
                    }
                }
            }
            else {
                if ($scope.CurrPanel) {
                    $scope.CurrPanel.IsVisible = false;
                    $scope.CurrPanel.IsPanelToggle = false;
                    $scope.CurrPanel.initialvisibilty = false;
                }
                var PanelControl;
                if (path != null && path != "form") {
                    var items = [];
                    items = $scope.objectPath(path);
                    if (items && items.length > 0) {
                        if (items.length > 3 && items[0].Name != "initialload" && items[0].Name != "validatenew" && items[items.length - 1].Name != "SideBarTemplate" && items[items.length - 1].ParentVM.Name != "SideBarTemplate") {
                            $scope.highlightControl(items);
                        }
                        else {
                            //Select Main Panel Control, If user Clicked on initialload,validatenew
                            if ($scope.MainPanels.length > 1 && $scope.MainPanels[0].dictAttributes.ID == "pnltoolbar") {
                                PanelControl = $scope.MainPanels[1];
                            }
                            else {
                                PanelControl = $scope.MainPanels[0];
                            }

                            //If there are only three levels, It means it is Table-Row-Column level
                            //Then if Column is selected then selects the Panel inside of that column
                            if (items[items.length - 1] && items[items.length - 1].Name == "sfwColumn" && $scope.FormModel.dictAttributes.sfwType != "Wizard") {
                                PanelControl = items[items.length - 1].Elements[0];
                            }
                            else if (items[items.length - 1] && items[items.length - 1].Name == "sfwRow" && $scope.FormModel.dictAttributes.sfwType != "Wizard") {
                                PanelControl = items[items.length - 1].Elements[0].Elements[0];
                            }
                            else if (items[items.length - 1] && items[items.length - 1].Name == "WizardSteps" || items[items.length - 1].Name == "sfwWizard") {
                                if (items[items.length - 1].Name == "WizardSteps") {
                                    PanelControl = items[items.length - 1].Elements[0];
                                }
                                else {
                                    PanelControl = items[items.length - 1].Elements[0].Elements[0];
                                }
                            }
                            else if (items[items.length - 1] && items[items.length - 1].Name == "HeaderTemplate" && $scope.FormModel.dictAttributes.sfwType == "Wizard") {
                                PanelControl = items[items.length - 1];
                            }
                            $scope.setLookupCriteriaVisiblityVariable(PanelControl);
                            if (PanelControl) {
                                $scope.MainPanels.some(function (panel) {
                                    if (panel.dictAttributes.ID == PanelControl.dictAttributes.ID) {

                                        $scope.CurrPanel.IsVisible = false;
                                        $scope.CurrPanel.IsPanelToggle = true;

                                        $scope.CurrPanel = panel;
                                        $scope.CurrPanel.IsVisible = false;
                                        $scope.CurrPanel.IsPanelToggle = false;

                                        panel.initialvisibilty = true;
                                        panel.IsVisible = true;
                                        panel.isLoaded = true;
                                    }
                                });
                            }

                            SetFormSelectedControl($scope.FormModel, PanelControl, window.event);
                            setEntity($scope.FormModel.SelectedControl);
                        }
                    }
                }
                else {
                    if ($scope.MainPanels.length > 1 && $scope.MainPanels[0].dictAttributes.ID == "pnltoolbar") {
                        PanelControl = $scope.MainPanels[1];
                    }
                    else { PanelControl = $scope.MainPanels[0]; }

                    if ($scope.CurrPanel && PanelControl) {
                        $scope.CurrPanel.IsVisible = false;
                        $scope.CurrPanel.IsPanelToggle = true;

                        $scope.CurrPanel = PanelControl;
                        $scope.CurrPanel.IsVisible = false;
                        $scope.CurrPanel.IsPanelToggle = false;
                    }
                    $scope.setLookupCriteriaVisiblityVariable(PanelControl);
                    if (PanelControl) {
                        PanelControl.initialvisibilty = true;
                        PanelControl.IsVisible = true;
                        PanelControl.isLoaded = true;
                        SetFormSelectedControl($scope.FormModel, PanelControl, window.event);
                        setEntity($scope.FormModel.SelectedControl);
                    }
                }
            }
            $rootScope.IsLoading = false;
            $timeout(function () {
                var mainDiv = $("#" + $scope.FormModel.dictAttributes.ID);
                var selElem = $(mainDiv).find(".select-label-control,.select-textbox-control,.select-button-control,.select-hyperlink-control,.select-gridview-control,.select-cell-control,.select-dropdown-control,.select-cascading-dropdown-control");

                if (mainDiv && selElem && selElem.length) {
                    $(mainDiv).find('.form-area-editable').animate({ scrollTop: $(selElem).offset().top - 300 }, 100);
                    $(mainDiv).find('.form-area-editable').animate({ scrollLeft: $(selElem).offset().left - 400 }, 100);
                }
            });
        });
    };

    $scope.setLookupCriteriaVisiblityVariable = function (PanelControl) {
        $scope.FormModel.IsLookupCriteriaEnabled = false;
        if ($scope.FormModel.dictAttributes.sfwType == "Lookup" || $scope.FormModel.dictAttributes.sfwType == "FormLinkLookup") {
            var isGridFound = isGridPresentInsidePanel(PanelControl);
            if (PanelControl && PanelControl.dictAttributes && PanelControl.dictAttributes.ID && !isGridFound) {
                $scope.FormModel.IsLookupCriteriaEnabled = true;
                $scope.IsGridSeleected = false;
            }
        }
        $scope.FormModel.IsPrototypeLookupCriteriaEnabled = false;
        if ($scope.FormModel.dictAttributes.sfwType == "Lookup" && $scope.FormModel.dictAttributes.ID.startsWith("wfp")) {
            var isGridFound = isGridPresentInsidePanel(PanelControl);
            if (PanelControl && PanelControl.dictAttributes && PanelControl.dictAttributes.ID && !isGridFound) {
                $scope.FormModel.IsPrototypeLookupCriteriaEnabled = true;
                $scope.FormModel.IsLookupCriteriaEnabled = false;
            }
        }
    };

    $scope.objectPath = function (path) {
        var items = [];
        var objHierarchy;
        if (path.contains("-") || path.contains(",")) {
            objHierarchy = $scope.FormModel;
            for (var i = 0; i < path.split(',').length; i++) {
                objHierarchy = $scope.FindNodeHierarchy(objHierarchy, path.split(',')[i].substring(path.split(',')[i].lastIndexOf('-') + 1));
                if (objHierarchy) {
                    items.push(objHierarchy);
                }
            }
        }
        return items;
    };

    $scope.highlightControl = function (items) {
        var PanelControl, SelectedControlInSource;
        for (var i = 0; i < items.length; i++) {
            var obj = items[i];
            if (obj.Name == "sfwPanel" || obj.Name == "sfwWizardStep" || obj.Name == "HeaderTemplate") {
                PanelControl = obj;
                var IsMainPanel = false;
                if (PanelControl && PanelControl.Name != "HeaderTemplate" && $scope.MainPanels.length > 0) {
                    $scope.MainPanels.some(function (panel) {
                        if (panel.dictAttributes.ID == PanelControl.dictAttributes.ID) {

                            IsMainPanel = true;
                            $scope.CurrPanel.IsVisible = false;
                            $scope.CurrPanel.IsPanelToggle = true;

                            $scope.CurrPanel = panel;
                            $scope.CurrPanel.IsVisible = false;
                            $scope.CurrPanel.IsPanelToggle = false;

                            panel.initialvisibilty = true;
                            panel.IsVisible = true;
                            panel.isLoaded = true;

                            // $scope.setobjtemplate($scope.CurrPanel.dictAttributes.ID);
                            $scope.FormModel.IsLookupCriteriaEnabled = false;
                            if (($scope.FormModel.dictAttributes.sfwType == "Lookup" || $scope.FormModel.dictAttributes.sfwType == "FormLinkLookup") && !$scope.FormModel.dictAttributes.ID.startsWith("wfp")) {
                                var isGridFound = isGridPresentInsidePanel($scope.CurrPanel);
                                if ($scope.CurrPanel.dictAttributes.ID && !isGridFound) {
                                    $scope.FormModel.IsLookupCriteriaEnabled = true;
                                    $scope.IsGridSeleected = false;
                                }
                            }
                            $scope.FormModel.IsPrototypeLookupCriteriaEnabled = false;
                            if ($scope.FormModel.dictAttributes.sfwType == "Lookup" && $scope.FormModel.dictAttributes.ID.startsWith("wfp")) {
                                var isGridFound = isGridPresentInsidePanel($scope.CurrPanel);
                                if ($scope.CurrPanel.dictAttributes.ID && !isGridFound) {
                                    $scope.FormModel.IsPrototypeLookupCriteriaEnabled = true;
                                }
                            }
                        }
                    });
                }
                else if (PanelControl && PanelControl.Name == "HeaderTemplate" && $scope.CurrPanel) {
                    IsMainPanel = true;
                    $scope.CurrPanel.IsVisible = false;
                    $scope.CurrPanel.IsPanelToggle = true;

                    $scope.CurrPanel = PanelControl;
                    $scope.CurrPanel.IsVisible = false;
                    $scope.CurrPanel.IsPanelToggle = false;

                    PanelControl.initialvisibilty = true;
                    PanelControl.IsVisible = true;
                    PanelControl.isLoaded = true;
                }

                if (!IsMainPanel) {
                    PanelControl.initialvisibilty = true;
                    PanelControl.IsVisible = true;
                    PanelControl.isLoaded = true;
                }
            }
            else if (obj.Name == "sfwDialogPanel" || obj.Name == "sfwListView") {
                PanelControl = obj;
                PanelControl.initialvisibilty = true;
                PanelControl.isLoaded = true;
            }
            else if (obj.Name == "sfwTabSheet") {
                $rootScope.isFromSource = true;
                PanelControl = obj;
                PanelControl.isLoaded = true;
                PanelControl.ParentVM.SelectedTabSheet = obj;
                PanelControl.ParentVM.SelectedTabSheet.IsSelected = true;
            }
            else if ((i == items.length - 1) && (obj.Name == "ItemTemplate" || obj.Name == "Columns")) {
                if (obj.Name == "ItemTemplate") {
                    SetFormSelectedControl($scope.FormModel, obj.Elements[0], window.event);
                    setEntity($scope.FormModel.SelectedControl);
                }
                else {
                    SetFormSelectedControl($scope.FormModel, items[items.length - 2], window.event);
                    setEntity($scope.FormModel.SelectedControl);
                }
            }
            else if ((i == items.length - 1) && (obj.Name == "sfwTabContainer" || obj.Name == "Tabs")) {
                $rootScope.isFromSource = false;
                if (obj.Name == "sfwTabContainer") {
                    SetFormSelectedControl($scope.FormModel, obj.Elements[0].Elements[0], window.event);
                    setEntity($scope.FormModel.SelectedControl);
                }
                else {
                    SetFormSelectedControl($scope.FormModel, obj.Elements[0], window.event);
                    setEntity($scope.FormModel.SelectedControl);
                }
            }
            else if ((i == items.length - 1) && (obj.Name == "sfwRow")) {
                var ParentFound;
                while (obj.ParentVM) {
                    ParentFound = false;
                    if (obj.ParentVM.Name == "sfwPanel" || obj.ParentVM.Name == "sfwWizardStep" || obj.ParentVM.Name == "HeaderTemplate") {
                        SetFormSelectedControl($scope.FormModel, obj.ParentVM, window.event);
                        setEntity($scope.FormModel.SelectedControl);
                        ParentFound = true;
                        break;
                    }
                    else if (obj.ParentVM.Name == "sfwDialogPanel") {
                        SetFormSelectedControl($scope.FormModel, obj.ParentVM, window.event);
                        setEntity($scope.FormModel.SelectedControl);
                        ParentFound = true;
                        break;
                    }
                    else if (obj.ParentVM.Name == "sfwListView") {
                        SetFormSelectedControl($scope.FormModel, obj.ParentVM, window.event);
                        setEntity($scope.FormModel.SelectedControl);
                        ParentFound = true;
                        break;
                    }
                    else if (obj.ParentVM.Name == "sfwTabSheet") {
                        SetFormSelectedControl($scope.FormModel, obj.ParentVM, window.event);
                        setEntity($scope.FormModel.SelectedControl);
                        ParentFound = true;
                        break;
                    }
                    obj = obj.ParentVM;
                }

                if (!ParentFound && $scope.MainPanels.length > 0) {
                    var PanelControl;
                    if ($scope.MainPanels.length > 1 && $scope.MainPanels[0].dictAttributes.ID == "pnltoolbar") {
                        PanelControl = $scope.MainPanels[1];
                    }
                    else {
                        PanelControl = $scope.MainPanels[0];
                    }

                    $scope.MainPanels.some(function (panel) {
                        if (panel.dictAttributes.ID == PanelControl.dictAttributes.ID) {

                            $scope.CurrPanel.IsVisible = false;
                            $scope.CurrPanel.IsPanelToggle = true;

                            $scope.CurrPanel = panel;
                            $scope.CurrPanel.IsVisible = false;
                            $scope.CurrPanel.IsPanelToggle = false;

                            panel.initialvisibilty = true;
                            panel.IsVisible = true;
                            panel.isLoaded = true;
                        }
                    });
                }
            }
            else if ((i == items.length - 1) && (obj.Name == "WizardSteps" || obj.Name == "sfwWizard")) {
                if (obj.Name == "WizardSteps") {
                    PanelControl = obj.Elements[0];
                }
                else {
                    PanelControl = obj.Elements[0].Elements[0];
                }
                if ($scope.MainPanels.length > 0) {
                    $scope.MainPanels.some(function (panel) {
                        if (panel.dictAttributes.ID == PanelControl.dictAttributes.ID) {

                            $scope.CurrPanel.IsVisible = false;
                            $scope.CurrPanel.IsPanelToggle = true;

                            $scope.CurrPanel = panel;
                            $scope.CurrPanel.IsVisible = false;
                            $scope.CurrPanel.IsPanelToggle = false;

                            panel.initialvisibilty = true;
                            panel.IsVisible = true;
                            panel.isLoaded = true;
                        }
                    });
                }

                SetFormSelectedControl($scope.FormModel, PanelControl, window.event);
                setEntity($scope.FormModel.SelectedControl);
                break;
            }
            else if ((i == items.length - 1) && (obj.Name == "Area3DStyle" || obj.Name == "sfwChartArea"
                || obj.Name == "ChartAreas" || obj.Name == "Series" || obj.Name == "sfwSeries")) {
                while (obj.Name != "sfwChart") {
                    obj = obj.ParentVM;
                }
                SetFormSelectedControl($scope.FormModel, obj, window.event);
                setEntity($scope.FormModel.SelectedControl);
                break;
            }

            if (i == items.length - 1 && obj.Name != "ItemTemplate" && obj.Name != "Columns"
                && obj.Name != "sfwTabContainer" && obj.Name != "Tabs" && obj.Name != "sfwRow"
                && obj.Name != "Area3DStyle" && obj.Name != "sfwChartArea"
                && obj.Name != "ChartAreas" && obj.Name != "Series" && obj.Name != "sfwSeries") {
                SetFormSelectedControl($scope.FormModel, obj, window.event);
                setEntity($scope.FormModel.SelectedControl);
            }
        }
    };

    $scope.isSourceDirty;
    $scope.sourceChanged = function () {
        $scope.isSourceDirty = true;
        $scope.isDirty = true;
        $scope.SearchSource.IsSearchCriteriaChange = true;
    };

    var SendDataPacketsToServer = function (lstpackets, filedetails, operationtoperform, nodeId) {
        for (var i = 0; i < lstpackets.length; i++) {
            hubMain.server.receiveDataPackets(lstpackets[i], lstpackets.length, filedetails, i, operationtoperform, nodeId);
        }
    };

    $scope.ShowSource = function () {
        if ($scope.selectedDesignSource == false && !$scope.isDeveloperView) {
            if ($scope.FormModel != null && $scope.FormModel != undefined) {
                if (!$scope.IsPrototype && $scope.FormModel.dictAttributes.sfwType != "UserControl" && $scope.FormModel.dictAttributes.sfwType != "Lookup") {

                    $scope.dummyLstLoadDetails = LoadDetails($scope.FormModel, $scope.objLoadDetails, false, $rootScope, false);
                }
            }
            $scope.selectedDesignSource = true;
            if ($scope.FormModel != null && $scope.FormModel != undefined) {
                $rootScope.IsLoading = true;
                //$scope.addExtraFieldsDataInToMainModel();

                //usercontrol and tooltip will be supported by fwk later

                var objreturn1 = GetBaseModel($scope.FormModel);
                if (objreturn1 != "") {

                    var nodeId = [];
                    var nodes = [];
                    var indexes = [];
                    var formSelectedControl;
                    $rootScope.IsLoading = true;
                    var sObj;
                    var indexPath = [];
                    var pathString;

                    var formSelectedControl = $scope.FormModel.SelectedControl;

                    if (formSelectedControl) {
                        var pathToObject = [];
                        //sObj = FindDeepNode($scope.FormModel, formSelectedControl);
                        //pathString = getPathSource(sObj, indexPath);
                        //angular.copy(pathString.reverse(), nodeId);
                        sObj = $scope.FindDeepNode($scope.FormModel, formSelectedControl, pathToObject);
                        pathString = $scope.getPathSource($scope.FormModel, pathToObject, indexPath);
                        angular.copy(pathString, nodeId);
                    }

                    var strobj = JSON.stringify(objreturn1);
                    if (strobj.length < 32000) {
                        hubMain.server.getSourceXmlObject(strobj, $scope.currentfile, nodeId);
                    }
                    else {
                        var strpacket = "";
                        var lstDataPackets = [];
                        var count = 0;
                        for (var i = 0; i < strobj.length; i++) {
                            count++;
                            strpacket = strpacket + strobj[i];
                            if (count == 32000) {
                                count = 0;
                                lstDataPackets.push(strpacket);
                                strpacket = "";
                            }
                        }
                        if (count != 0) {
                            lstDataPackets.push(strpacket);
                        }
                        SendDataPacketsToServer(lstDataPackets, $scope.currentfile, "Design-Source", nodeId);
                    }
                    $scope.receivesourcexml = function (xmlstring, lineno) {
                        $scope.$apply(function () {
                            $scope.xmlSource = xmlstring;
                            var ID = $scope.currentfile.FileName;
                            setDataToEditor($scope, xmlstring, lineno, ID);
                            $scope.$evalAsync(function () {
                                $rootScope.IsLoading = false;
                                //$scope.FormModel.SelectedControl = undefined;
                                //$scope.CurrPanel.IsPanelToggle = false;
                                //$scope.CurrPanel = undefined;
                                $rootScope.isFromSource = false;
                            });
                            if (window.navigator.userAgent.toLowerCase().contains("chrome")) {
                                $scope.$evalAsync(function () {
                                    $rootScope.IsLoading = false;
                                });
                            }
                        });
                    };
                }
            }
        }
    };

    $scope.FindNodeHierarchy = function (objParentElements, index) {
        if (objParentElements && objParentElements.Elements) {
            var newObj = objParentElements.Elements[index];
            if (newObj == undefined) {
                newObj = objParentElements.Elements[index - 1];
            }
            if (newObj) {
                newObj.ParentVM = objParentElements;
            }
            return newObj;
        }
    };
    $scope.FindDeepNode = function (objParentElements, selectedItem, pathToObject) {
        if (objParentElements) {
            angular.forEach(objParentElements.Elements, function (item) {
                //item.ParentVM = objParentElements
                var isNodeInPath = $scope.isValidObject(item, selectedItem);
                if (isNodeInPath) {
                    pathToObject.push(item);
                }
                if (item == selectedItem) {
                    return selectedItem;
                }
                else if (item.Elements && item.Elements.length > 0) {
                    selectedItem = $scope.FindDeepNode(item, selectedItem, pathToObject);
                    return selectedItem;
                }
            });
        }
        return selectedItem;
    };
    $scope.getPathSource = function (objModel, pathToObject, indexPath) {
        for (var i = 0; i < pathToObject.length; i++) {
            if (i == 0) {
                var indx = objModel.Elements.indexOf(pathToObject[i]);
                indexPath.push(indx);
            }
            else {
                var indx = pathToObject[i - 1].Elements.indexOf(pathToObject[i]);
                indexPath.push(indx);
            }
        }
        return indexPath;
    };
    $scope.isValidObject = function (objParentElements, selectedItem) {
        var result;
        if (objParentElements == selectedItem) {
            result = true;
            return result;
        }

        for (var ele in objParentElements.Elements) {
            if (objParentElements.Elements[ele] == selectedItem) {
                result = true;
                return result;
            }
            if (objParentElements.Elements[ele].Elements && objParentElements.Elements[ele].Elements.length > 0) {
                for (iele in objParentElements.Elements[ele].Elements) {
                    result = $scope.isValidObject(objParentElements.Elements[ele].Elements[iele], selectedItem);
                    if (result == true) {
                        return result;
                    }
                }
            }
        }
        return result;
    };
    //#endregion

    //#region Common Functions

    $scope.OnSelectLeftFormTab = function (opt) {
        if (opt == 'Entity') {
            $scope.ActiveTabForForm = 'Entity';
            if (!$scope.IsEntityTreeExpanded) {
                $scope.IsEntityTreeExpanded = true;
                if ($scope.FormModel) {
                    if (!$scope.FormModel.IsLookupCriteriaEnabled) {
                        if ($scope.currentEntiyTreeObject && $scope.currentEntiyTreeObject.lstselectedobjecttreefields.length > 0) {
                            $scope.currentEntiyTreeObject.selectedobjecttreefield = $scope.currentEntiyTreeObject.lstselectedobjecttreefields[0];
                            $scope.currentEntiyTreeObject.selectedobjecttreefield.IsRecordSelected = true;
                            $scope.currentEntiyTreeObject.selectedobjecttreefield.IsSelected = "True";
                        }
                    }
                    else if ($scope.FormModel && $scope.FormModel.dictAttributes.sfwType == 'Lookup' && $scope.FormModel.IsLookupCriteriaEnabled == true && (!$scope.MainQuery && (!$scope.SelectedQuery || ($scope.SelectedQuery && !$scope.SelectedQuery.dictAttributes.ID)))) {
                        if ($scope.lstselectedobjecttreefields.length > 0) {
                            $scope.selectedobjecttreefield = $scope.lstselectedobjecttreefields[0];
                            $scope.selectedobjecttreefield.IsRecordSelected = true;
                            $scope.selectedobjecttreefield.IsSelected = "True";
                        }
                    }
                    else {
                        if ($scope.lookupTreeObject && $scope.lookupTreeObject.SortedColumns && $scope.lookupTreeObject.SortedColumns.length > 0) {
                            $scope.selectedfield = $scope.lookupTreeObject.SortedColumns[0];
                            $scope.selectedfield.IsRecordSelected = true;
                            $scope.selectedfield.IsSelected = "True";
                        }
                    }
                }

            }

        }
        else if (opt == 'Properties') {
            $scope.ActiveTabForForm = 'Properties';
            if (!$scope.IsPropsExpanded) {
                $scope.IsPropsExpanded = true;
            }
        }
        else {
            $scope.ActiveTabForForm = 'Toolbox';
        }

    };

    $scope.GetMainPanelID = function () {
        if ($scope.FormModel) {
            return "MainParentPanel" + $scope.FormModel.dictAttributes.ID;
        }
    };

    $scope.showOtherControl = false;

    $scope.showHTMLControl = false;

    $scope.ToggleOtherControlmenudropdown = function () {
        $scope.showHTMLControl = false;
        $scope.showOtherControl = !$scope.showOtherControl;
    };

    $scope.ToggleHTMLControlmenudropdown = function () {
        $scope.showOtherControl = false;
        $scope.showHTMLControl = !$scope.showHTMLControl;
    };


    $scope.InitialLoadSection = function () {
        $scope.SubQueryCollection = [];
        function iteration(objcustommethod) {
            if (objcustommethod.Name == "callmethods") {
                if (!objcustommethod.dictAttributes.sfwMode) {
                    $scope.SelectedNewMethod = objcustommethod;
                    $scope.SelectedUpdateMethod = "";
                    $scope.FormModel.IsSameAsNew = true;
                }
                if (objcustommethod.dictAttributes.sfwMode == 'New' || objcustommethod.dictAttributes.sfwMode == 'All') {
                    $scope.SelectedNewMethod = objcustommethod;
                }
                if (objcustommethod.dictAttributes.sfwMode == 'Update' || objcustommethod.dictAttributes.sfwMode == 'All') {
                    $scope.SelectedUpdateMethod = objcustommethod;
                }
            }
            else if (objcustommethod.Name == "query") {
                var strQuery = objcustommethod.dictAttributes.sfwQueryRef;
                if ($scope.IsSubQuery(strQuery)) {

                    $scope.SubQueryCollection.push(objcustommethod);
                    $scope.SelectedSubQuery = objcustommethod;
                }

                else if (objcustommethod.dictAttributes.sfwQueryRef) {
                    $scope.MainQuery = objcustommethod;

                    //****** NEED TO IMPLEMENT*******//

                    //foreach (CustomMethodDetails strNew in LoadMethodCollection)
                    //{
                    //    if (strNew.Description.StartsWith(objcustommethod[ApplicationConstants.XMLFacade.SFWRETURNTYPE] + " " + objcustommethod[ApplicationConstants.XMLFacade.SFWMETHODNAME]))
                    //{
                    //    SelectedLoadMethod = strNew.Name;
                    //    break;
                    //}

                }
            }
            else if (objcustommethod.Name == "session") {
                $scope.SessionFields = objcustommethod;
                $scope.SessionFields.lstselectedobjecttreefields = [];
                $scope.SessionFields.LstDisplayedEntities = [];
            }
        }
        if ($scope.InitialLoad) {
            angular.forEach($scope.InitialLoad.Elements, iteration);
        }
        else {
            $scope.MainQuery = undefined;
            $scope.SelectedQuery = undefined;
        }
        if ($scope.FormModel.dictAttributes.sfwType == "Maintenance") {
            if ($scope.InitialLoad) {
                if ($scope.SessionFields == undefined) {
                    $scope.SessionFields = {
                        Name: 'session', Value: '', dictAttributes: {}, Elements: [], Children: []
                    };
                    $scope.SessionFields.lstselectedobjecttreefields = [];
                    $scope.SessionFields.LstDisplayedEntities = [];
                }
            }
        }
    };

    $scope.IsSubQuery = function (strQuery) {
        var retValue = false;
        function iIssubselectquery(Query) {
            if (!retValue) {
                if (Query.ID == strQueryName && Query.QueryType && Query.QueryType.toLowerCase() == "subselectquery") {
                    retValue = true;
                }
            }
        }
        if (strQuery != "" && strQuery != undefined) {
            var strCDOName = strQuery.substring(0, strQuery.indexOf("."));
            var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
            var lstObj = entityIntellisenseList.filter(function (x) {
                return x.ID == strCDOName;
            });
            if (lstObj && lstObj.length > 0) {

                var strQueryName = strQuery.substring(strQuery.indexOf(".") + 1);

                angular.forEach(lstObj[0].Queries, iIssubselectquery);
            }
        }

        return retValue;
    };



    //#endregion

    //#region Add Control From Object Tree

    $scope.AddControlFromObjectTree = function (cntrlClassName) {

        function getDropDownList(obj) {
            if (obj.Value && endsWith(obj.Value.toLowerCase(), "_description")) {
                message = obj.Value;
                descriptionList.push(obj);
            }
        }
        function getSelectedList(obj) {
            lstselectedfields.splice(obj, 1);
        }

        function iteratorisInvalidExpression(obj) {
            if (obj.Type == "Expression") {
                if (cntrlClassName != "sfwLabel") {
                    isInvalidExpressionMapping = true;
                    obj.IsChecked = false;
                    lstselectedfields.splice(obj, 1);
                }
            }
        }

        function iteratorAddActualControl(field) {
            var isGrid = true;
            if (objcontrolVM && objcontrolVM.Name == "sfwButtonGroup") {
                isGrid = false;
            } else {
                isGrid = true;
            }
            $scope.AddActualControl(blnIsLookup, cntrlClassName, field, false, objcontrolVM, isGrid);
        }

        function iteratorAddsfwGridView(field) {
            var prefix = "asp";

            var aTemplateField = {
                Name: "TemplateField", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
            };
            aTemplateField.ParentVM = columnvm;
            aTemplateField.dictAttributes.SortExpression = field.ID;
            aTemplateField.dictAttributes.HeaderText = GetCaptionFromField(field);

            var aItemTemplate = {
                Name: "ItemTemplate", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
            };
            aItemTemplate.ParentVM = aTemplateField;

            $scope.AddActualControl(blnIsLookup, cntrlClassName, field, false, aItemTemplate, true);

            aTemplateField.Elements.push(aItemTemplate);

            $rootScope.PushItem(aTemplateField, columnvm.Elements);
        }
        if (cntrlClassName) {

            var objcontrolVM = $scope.GetSfxControlVM();
            var objGrid = FindParent(objcontrolVM, "sfwGridView");
            if (!objcontrolVM) {
                $SgMessagesService.Message('Message', 'Select control in right panel to which elements have to be added.');
            }
            if ($scope.FormModel.dictAttributes.sfwType.toLowerCase() == "maintenance" && objcontrolVM.Name == "sfwGridView" && objcontrolVM.dictAttributes.sfwBoundToQuery && objcontrolVM.dictAttributes.sfwBoundToQuery.toLowerCase() == "true" && ["sfwLabel", "sfwHyperLink", "sfwButton", "sfwImage", "sfwToolTipButton"].indexOf(cntrlClassName) <= -1) {
                $SgMessagesService.Message("Not Allowed", "Can not add this control.");
                return;
            }
            if ($scope.FormModel.dictAttributes.sfwType.toLowerCase() == "maintenance" && objGrid && objGrid.dictAttributes.sfwBoundToQuery && objGrid.dictAttributes.sfwBoundToQuery.toLowerCase() == "true" && ["sfwLabel", "sfwHyperLink", "sfwButton", "sfwImage", "sfwToolTipButton"].indexOf(cntrlClassName) <= -1) {
                $SgMessagesService.Message("Not Allowed", "Can not add this control.");
                return;
            }
            if ($scope.FormModel.dictAttributes.sfwType.toLowerCase() == "maintenance" && objGrid && objGrid.dictAttributes.sfwBoundToQuery && objGrid.dictAttributes.sfwBoundToQuery.toLowerCase() == "true" && ["sfwLabel", "sfwHyperLink", "sfwButton", "sfwImage", "sfwToolTipButton"].indexOf(cntrlClassName) <= -1) {
                $SgMessagesService.Message("Not Allowed", "Can not add this control.");
                return;
            }
            if ($scope.FormModel.dictAttributes.sfwType.toLowerCase() == "lookup" && cntrlClassName != "sfwButton") {
                var objpanel = FindParent(objcontrolVM, "sfwPanel");
                if (objpanel && objcontrolVM.Name == "sfwColumn" && objpanel.dictAttributes.ID == "pnlResult") {
                    $SgMessagesService.Message("Not Allowed", "Can not add any control outside the grid in result panel.");
                    return;
                }
            }
            var selectedobjecttreefield;
            var isCollectionField = true;
            var lstselectedobjecttreefields = [];
            if (!$scope.FormModel.IsLookupCriteriaEnabled) {
                if ($scope.ObjgridBoundedQuery.IsQuery) {
                    selectedobjecttreefield = $scope.ObjgridBoundedQuery.selectedobjecttreefield;
                    lstselectedobjecttreefields = $scope.ObjgridBoundedQuery.lstselectedobjecttreefields;
                } else {
                    for (var i = 0; i < $scope.lstLoadedEntityTrees.length; i++) {
                        if ($scope.lstLoadedEntityTrees[i].IsVisible == true) {
                            selectedobjecttreefield = $scope.lstLoadedEntityTrees[i].selectedobjecttreefield;
                            lstselectedobjecttreefields = $scope.lstLoadedEntityTrees[i].lstselectedobjecttreefields;
                            break;
                        }
                    }
                }
            } else if ($scope.FormModel.IsLookupCriteriaEnabled == true && (!$scope.MainQuery && (!$scope.SelectedQuery || ($scope.SelectedQuery && !$scope.SelectedQuery.dictAttributes.ID)))) {
                selectedobjecttreefield = $scope.selectedobjecttreefield;
                lstselectedobjecttreefields = $scope.lstselectedobjecttreefields;
            } else {
                for (var i = 0; i < $scope.lstLoadedEntityColumnsTree.length; i++) {
                    if ($scope.lstLoadedEntityColumnsTree[i].IsVisible == true) {
                        selectedobjecttreefield = $scope.lstLoadedEntityColumnsTree[i].selectedobjecttreefield;
                        lstselectedobjecttreefields = $scope.lstLoadedEntityColumnsTree[i].lstselectedobjecttreefields;
                        break;
                    }
                }
            }

            if (objcontrolVM) {
                switch (cntrlClassName) {
                    case "Grid":
                        if (!selectedobjecttreefield) {
                            $SgMessagesService.Message('Invalid Field', 'Select a valid one-to-many field from entity tree to add grid control.');
                        }
                        else {
                            if (selectedobjecttreefield.DataType == "Collection" || selectedobjecttreefield.DataType == "List" || selectedobjecttreefield.DataType == "CDOCollection") {
                                $scope.AddSfxGridviewToGrid(objcontrolVM);

                            }
                            else {
                                $SgMessagesService.Message('Invalid Field', 'Select a valid one-to-many field from entity tree to add grid control.');
                            }


                        }
                        break;
                    case "SfxChart":
                        if (!selectedobjecttreefield) {
                            $SgMessagesService.Message("Invalid Field", "Select a valid one-to-many field from entity tree to add chart control.");
                        }
                        else {
                            if (selectedobjecttreefield.DataType == "Collection" || selectedobjecttreefield.DataType == "List" || selectedobjecttreefield.DataType == "CDOCollection") {
                                $scope.AddSfxChartToGrid(objcontrolVM);

                            }
                            else {
                                $SgMessagesService.Message("Invalid Field", "Select a valid one-to-many field from entity tree to add chart control.");
                            }
                        }
                        break;
                    case "UserControl":
                        if (!selectedobjecttreefield) {
                            $SgMessagesService.Message("Invalid Field", "Select a valid one-to-one field from entity tree to add user control.");
                        }
                        else if (selectedobjecttreefield.DataType != "Object") {
                            $SgMessagesService.Message("Invalid Field", "Select a valid one-to-one field from entity tree to add user control.");
                        }
                        else if (objcontrolVM.Name == "sfwColumn" || objcontrolVM.Name == "sfwButtonGroup") {
                            $scope.AddControlToCell(objcontrolVM, cntrlClassName, undefined);
                        }
                        else {
                            if (objcontrolVM && objcontrolVM.ParentVM && (objcontrolVM.ParentVM.Name == "sfwColumn" || objcontrolVM.ParentVM.Name == "sfwButtonGroup")) {
                                $scope.AddControlToCell(objcontrolVM.ParentVM, cntrlClassName, undefined);
                            }
                        }

                        break;
                    case "sfwCalendar":
                        if (!selectedobjecttreefield) {
                            $SgMessagesService.Message("Invalid Field", "Select a valid one-to-many field from entity tree to add calendar control.");
                        }
                        else {
                            if (selectedobjecttreefield.DataType == "Collection" || selectedobjecttreefield.DataType == "List" || selectedobjecttreefield.DataType == "CDOCollection") {
                                $scope.AddSfxCalendarControl(objcontrolVM, false);
                            }
                            else {
                                $SgMessagesService.Message("Invalid Field", "Select a valid one-to-many field from entity tree to add calendar control.");
                            }
                        }
                        break;
                    case "sfwScheduler":
                        if (!selectedobjecttreefield) {
                            $SgMessagesService.Message("Invalid Field", "Select a valid one-to-many field from entity tree to add scheduler control.");
                        }
                        else if (FindParent(objcontrolVM, "sfwDialogPanel")) {
                            $SgMessagesService.Message("Message", "Select a valid one-to-many field from entity tree to add scheduler control.");
                        }
                        else {
                            if (selectedobjecttreefield.DataType == "Collection" || selectedobjecttreefield.DataType == "List" || selectedobjecttreefield.DataType == "CDOCollection") {
                                $scope.AddSfxCalendarControl(objcontrolVM, true);
                            }
                            else {
                                $SgMessagesService.Message("Invalid Field", "Select a valid one-to-many field from entity tree to add scheduler control.");
                            }
                        }
                        break;
                    case "sfwListView":
                        if (!selectedobjecttreefield) {
                            $SgMessagesService.Message("Invalid Field", "Select a valid one-to-many field from entity tree to add repeater control.");
                        }
                        else {
                            if (selectedobjecttreefield.DataType == "Collection" || selectedobjecttreefield.DataType == "List") {
                                $scope.AddSfxRepeaterControl(objcontrolVM);
                            }
                            else {
                                $SgMessagesService.Message("Invalid Field", "Select a valid one-to-many field from entity tree to add repeater control.");
                            }
                        }
                        break;
                    default:
                        var lstselectedfields = [];
                        lstselectedfields = GetSelectedFieldList(lstselectedobjecttreefields, lstselectedfields);
                        var isCollectionField = false;
                        if (!$scope.FormModel.IsLookupCriteriaEnabled) {
                            var DisplayedEntity = getDisplayedEntity($scope.LstDisplayedEntities);
                            if (DisplayedEntity && DisplayedEntity.isParentFieldCollection) {
                                lstselectedfields = [];
                                isCollectionField = true;
                            }
                        }
                        var isDateTimeField = false;
                        var isCollectionField = false;
                        var isCollection = false;
                        if (lstselectedfields.length > 0) {
                            for (var i = 0; i < lstselectedfields.length; i++) {
                                if (!lstselectedfields[i].DataType || (lstselectedfields[i].DataType && ["collection", "list", "cdocollection"].indexOf(lstselectedfields[i].DataType.toLowerCase()) > -1)) {
                                    if (cntrlClassName == "sfwCheckBoxList" && !(lstselectedfields[i].Type && lstselectedfields[i].Type === "Description")) {
                                        isCollection = true;
                                    }
                                }
                                if (!lstselectedfields[i].DataType || (lstselectedfields[i].DataType && (lstselectedfields[i].DataType.toLowerCase() != "datetime") && lstselectedfields[i].DataType.toLowerCase() != "date")) {
                                    if (cntrlClassName == "sfwDateTimePicker") {
                                        isDateTimeField = true;
                                    }
                                }
                            }
                        }

                        var isValid = true;
                        if (isCollectionField) {
                            isValid = false;
                            $SgMessagesService.Message("Message", "Collection field/s cannot be added.");
                        }
                        else if (lstselectedfields.length == 0) {
                            isValid = false;
                            $SgMessagesService.Message("Message", "Select field/s from entity tree to add control.");
                        }
                        else if (isDateTimeField) {
                            isValid = false;
                            $SgMessagesService.Message("Invalid Field", "Select valid DateTime field/s from entity tree to add DateTime Picker control.");
                        }
                        else {
                            if (!isCollection && cntrlClassName == "sfwCheckBoxList" && !$scope.FormModel.IsLookupCriteriaEnabled) {
                                isValid = false;
                                $SgMessagesService.Message("Invalid Field", "Select valid one-to-many field to add Checkbox List control.");
                            }
                        }

                        if (cntrlClassName == "sfwLabel" || cntrlClassName == "sfwTextBox" || cntrlClassName == "sfwRadioButton" || cntrlClassName == "sfwCheckBox" || cntrlClassName == "sfwDateTimePicker"
                            || cntrlClassName == "sfwRadioButtonList" || cntrlClassName == "sfwDropDownList" || cntrlClassName == "sfwCascadingDropDownList" || cntrlClassName == "sfwMultiSelectDropDownList") {
                            if (lstselectedfields.length > 0) {
                                var tempSelectedList = [];
                                for (var i = 0; i < lstselectedfields.length; i++) {
                                    if (lstselectedfields[i].DataType !== "Collection" && lstselectedfields[i].DataType !== "List" && lstselectedfields[i].DataType !== "CDOCollection" && lstselectedfields[i].DataType !== "Object") {
                                        tempSelectedList.push(lstselectedfields[i]);
                                    }
                                }
                                lstselectedfields = tempSelectedList;
                            }
                        }
                        if (isValid) {
                            var descriptionList = [];
                            var message = "";
                            if (cntrlClassName == "sfwDropDownList") {


                                angular.forEach(lstselectedfields, getDropDownList);


                                angular.forEach(descriptionList, getSelectedList);

                            }

                            var isInvalidExpressionMapping = false;

                            angular.forEach(lstselectedfields, iteratorisInvalidExpression);


                            if (lstselectedfields.length > 0) {

                                if (objcontrolVM) {
                                    var buttonGroup = GetVM("sfwButtonGroup", objcontrolVM);
                                    if (objcontrolVM.Name == "ItemTemplate") {
                                        var blnIsLookup = $scope.FormModel.dictAttributes.sfwType == "Lookup";
                                        $rootScope.UndRedoBulkOp("Start");

                                        angular.forEach(lstselectedfields, iteratorAddActualControl);
                                        $rootScope.UndRedoBulkOp("End");
                                    }
                                    else if (objcontrolVM.Name == "sfwGridView") {
                                        var blnIsLookup = $scope.FormModel.dictAttributes.sfwType == "Lookup";
                                        var columnvm = objcontrolVM.Elements[0];
                                        $rootScope.UndRedoBulkOp("Start");
                                        if (!columnvm) {
                                            columnvm = {
                                                Name: 'Columns', Value: '', dictAttributes: {}, Elements: []
                                            };
                                            $rootScope.PushItem(columnvm, objcontrolVM.Elements);
                                        }

                                        angular.forEach(lstselectedfields, iteratorAddsfwGridView);

                                        $rootScope.UndRedoBulkOp("End");

                                    } else if (buttonGroup || objcontrolVM.Name == "sfwButtonGroup") {
                                        objcontrolVM = buttonGroup ? buttonGroup : objcontrolVM;
                                        $rootScope.UndRedoBulkOp("Start");
                                        angular.forEach(lstselectedfields, iteratorAddActualControl);
                                        $rootScope.UndRedoBulkOp("End");
                                    }
                                    else {
                                        if ($scope.FormModel && $scope.FormModel.dictAttributes.sfwType == "Lookup" && $scope.FormModel.IsLookupCriteriaEnabled
                                            && (objcontrolVM.Name == "sfwTabContainer" || (objcontrolVM.Name == 'sfwColumn' && objcontrolVM.Elements.length > 0 && objcontrolVM.Elements[0].Name == "sfwTabContainer"))) {
                                            $SgMessagesService.Message("Not Allowed", "Can not add a control outside the criteria tab container");
                                        }
                                        else if ($scope.FormModel && $scope.FormModel.dictAttributes.sfwType == "Lookup" && $scope.FormModel.IsPrototypeLookupCriteriaEnabled
                                            && (objcontrolVM.Name == "sfwTabContainer" || (objcontrolVM.Name == 'sfwColumn' && objcontrolVM.Elements.length > 0 && objcontrolVM.Elements[0].Name == "sfwTabContainer"))) {
                                            $SgMessagesService.Message("Not Allowed", "Can not add a control outside the criteria tab container");
                                        }
                                        else {
                                            var tableVM = GetVM("sfwTable", objcontrolVM);
                                            var sfxCellVM = $scope.GetSelectedControl();
                                            if (sfxCellVM && tableVM == GetVM("sfwTable", sfxCellVM)) {
                                                objcontrolVM = sfxCellVM;
                                            }
                                            if (tableVM) {
                                                $rootScope.UndRedoBulkOp("Start");
                                                $scope.AddControls(tableVM, objcontrolVM, cntrlClassName, lstselectedfields, false);
                                                $rootScope.UndRedoBulkOp("End");
                                            }
                                        }
                                    }
                                }
                            }

                            if (lstselectedfields.length == 0 && cntrlClassName != "sfwDropDownList") {
                                $SgMessagesService.Message("Not Allowed", "Select valid field/ s from entity tree to add control " + cntrlClassName + ".");
                            }
                            else if (descriptionList.length > 0) {
                                message.slice(0, -1);
                                //  message = message.TrimEnd(',');
                                $SgMessagesService.Message("Not Allowed", "Field that ends with _description can't be added as DropDownList");
                                //this.ReSet(descriptionList);
                            }
                            else if (isInvalidExpressionMapping) {
                                $SgMessagesService.Message("Invalid Expression", "Invalid Expression Binding");
                                //this.ReSet(expFields as List<ObjectTreeModel>);
                            }
                        }
                        break;
                }
            }
            ClearSelectedFieldList(lstselectedobjecttreefields);
            if ($scope.FormModel.IsLookupCriteriaEnabled && $scope.lstLoadedEntityColumnsTree) {
                for (var i = 0; i < $scope.lstLoadedEntityColumnsTree.length; i++)
                    $scope.lstLoadedEntityColumnsTree[i].selectedobjecttreefield = undefined;
            } else if ($scope.lstLoadedEntityTrees) {
                for (var i = 0; i < $scope.lstLoadedEntityTrees.length; i++)
                    $scope.lstLoadedEntityTrees[i].selectedobjecttreefield = undefined;
            }
        }
    };


    $scope.AddControlToCell = function (objcontrolVM, cntrlName, sfxControlModel) {
        if (!sfxControlModel) {
            sfxControlModel = CreateControl($scope.FormModel, objcontrolVM, cntrlName);
        }

        if (sfxControlModel && sfxControlModel.Name != "udc") {
            $rootScope.PushItem(sfxControlModel, objcontrolVM.Elements);

            //this.ObjVM.DesignVM.CheckAndUpdateSelectedControlStatus(this.MirrorElements[this.MirrorElements.Count - 1] as SfxControlVM, false);
            //this.PopulateObjectID(this.ObjVM.Model, sfxControlModel);
        }

        //#region Add User Control
        if (sfxControlModel != undefined && sfxControlModel.Name == "udc") {

            var entityname = $scope.FormModel.dictAttributes.sfwEntity;
            var selectedobjecttreefield;
            for (var i = 0; i < $scope.lstLoadedEntityTrees.length; i++) {
                if ($scope.lstLoadedEntityTrees[i].IsVisible == true) {

                    selectedobjecttreefield = $scope.lstLoadedEntityTrees[i].selectedobjecttreefield;
                    break;
                }

            }

            if (selectedobjecttreefield) {
                entityname = selectedobjecttreefield.Entity;
            }
            var newScope = $scope.$new();
            var DisplayedEntity = getDisplayedEntity($scope.LstDisplayedEntities);
            var itempath = selectedobjecttreefield.ID;
            if (DisplayedEntity && DisplayedEntity.strDisplayName != "") {
                itempath = DisplayedEntity.strDisplayName + "." + selectedobjecttreefield.ID;
            }
            newScope.objSetUCProp = {
                StrId: sfxControlModel.dictAttributes.ID, StrName: '', StrEntityField: itempath, StrResource: '', formObject: $scope.FormModel
            };
            newScope.formodel = $scope.FormModel;
            newScope.objSetUCProp.IsAddedFromObjectTree = true;
            newScope.onUserControlOkClick = function () {

                sfxControlModel.dictAttributes.ID = newScope.objSetUCProp.StrId;
                sfxControlModel.dictAttributes.Name = newScope.objSetUCProp.StrName;
                if (newScope.objSetUCProp.StrEntityField) {
                    sfxControlModel.dictAttributes.sfwEntityField = newScope.objSetUCProp.StrEntityField;
                }

                sfxControlModel.dictAttributes.sfwResource = newScope.objSetUCProp.StrResource;

                if (sfxControlModel.dictAttributes.Name != undefined && sfxControlModel.dictAttributes.Name != "") {
                    var fileList = [];
                    var obj = {
                        FileName: sfxControlModel.dictAttributes.Name, ID: sfxControlModel.dictAttributes.ID
                    };
                    fileList.push(obj);
                    $.connection.hubForm.server.getUserControlModel(fileList, "").done(function (udcFileList) {
                        $scope.receiveUcMainTable(udcFileList);
                    });
                }

                $rootScope.PushItem(sfxControlModel, objcontrolVM.Elements);

                newScope.onUserControlCancelClick();
            };

            newScope.onUserControlCancelClick = function () {
                $ValidationService.removeObjInToArray($scope.validationErrorList, newScope.objSetUCProp);
                if (ucPropDialog) {
                    ucPropDialog.close();
                }
            };

            newScope.ValidateUserProp = function () {
                var retVal = false;
                newScope.ErrorMessageForDisplay = "";
                if (newScope.objSetUCProp.StrId == undefined || newScope.objSetUCProp.StrId == "") {
                    newScope.ErrorMessageForDisplay = "Error: Enter the ID.";
                    retVal = true;
                }
                else {
                    var lstIds = [];
                    CheckforDuplicateID($scope.FormModel, newScope.objSetUCProp.StrId, lstIds);
                    if (lstIds.length > 0) {
                        newScope.ErrorMessageForDisplay = "Error: Duplicate ID.";
                        retVal = true;
                    } else if (!isValidIdentifier(newScope.objSetUCProp.StrId, false, false)) {
                        newScope.ErrorMessageForDisplay = "Error: Invalid ID.";
                        retVal = true;
                    }
                }
                if (!newScope.objSetUCProp.StrName || newScope.objSetUCProp.StrName == '') {
                    newScope.ErrorMessageForDisplay = "Please Enter Active Form.";
                    retVal = true;
                }
                //else if (!newScope.objSetUCProp.StrEntityField || newScope.objSetUCProp.StrEntityField == "") {
                //    newScope.ErrorMessageForDisplay = "Please Enter Entity field.";
                //    retVal = true;
                //}
                else if (!newScope.objSetUCProp.StrResource || newScope.objSetUCProp.StrResource == '') {
                    newScope.ErrorMessageForDisplay = "Please Enter Resource.";
                    retVal = true;
                }

                if (newScope.ErrorMessageForDisplay == undefined || newScope.ErrorMessageForDisplay == "") {
                    if (newScope.objSetUCProp.StrEntityField != undefined && newScope.objSetUCProp.StrEntityField != "") {
                        var object = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.FormModel.dictAttributes.sfwEntity, newScope.objSetUCProp.StrEntityField);
                        if (!object || object.Type != "Object") {
                            newScope.ErrorMessageForDisplay = "Entity Field should be Object.";
                            retVal = true;
                        }
                    }
                }
                if (newScope.objSetUCProp.errors && $ValidationService.isEmptyObj(newScope.objSetUCProp.errors)) {
                    retVal = true;
                }
                return retVal;
            };


            var ucPropDialog = $rootScope.showDialog(newScope, "User Control", "Form/views/SetUserControlProperties.html");
        }

        //#endregion

    };

    $scope.AddControls = function (tableVM, selectedCntrlVM, astrControlClass, alst, isListView) {
        var blnIsLookup = $scope.FormModel.dictAttributes.sfwType == "Lookup";
        var strTabSheetID = "";

        if (blnIsLookup) {
            if (tableVM.ParentVM.Name == "sfwTabSheet") {
                strTabSheetID = tableVM.ParentVM.dictAttributes.ID;
                if (strTabSheetID && (strTabSheetID == "tshAdvSort" || strTabSheetID == "tshSql")) {
                    $SgMessagesService.Message("Not Allowed", "New controls cannot be added in Adv Sort/Query tab.");
                    return;
                }
            }

        }


        if (astrControlClass == "sfwHyperLink") {
            astrControlClass = "sfwLinkButton";
        }

        var dRowMultiplier = 0.4;




        var totalControlCount = 1;
        if (astrControlClass == "sfwRange") {
            var afield = alst[0];
            if (afield.DataType && (afield.DataType.toLowerCase() == "date" || afield.DataType.toLowerCase() == "datetime" || afield.DataType.toLowerCase() == "decimal" ||
                afield.DataType.toLowerCase() == "double" || startsWith(afield.DataType.toLowerCase(), "int", 0))) {
                totalControlCount = alst.length * 4;
            }
            else {
                totalControlCount = 0;
                $SgMessagesService.Message("Message", "Only fields having datatype Date/DateTime/Decimal/Double/Int can be added for range.");
                return;
            }
        }
        else if (blnIsLookup && strTabSheetID && strTabSheetID == "tshAdvCriteria") {
            totalControlCount = alst.length * 3;
        }
        else {
            totalControlCount = alst.length * 2;
        }

        var intRows = 1;
        var ColCount = GetMaxColCount(tableVM.Elements[0], tableVM);


        if (totalControlCount == ColCount) {
            intRows = 1;
        }
        else {
            intRows = (totalControlCount / ColCount) + dRowMultiplier;
        }

        intRows = Math.round(intRows);
        if (intRows <= 0)//atleast one row should be added
            intRows = 1;

        var cellVM = GetVM("sfwColumn", selectedCntrlVM);

        var intCurRowInd;
        if (cellVM) {
            var rownvM = cellVM.ParentVM;
            var rowindex = rownvM.ParentVM.Elements.indexOf(rownvM);
            intCurRowInd = rowindex;
        }
        else {
            var RowCount = tableVM.Elements.length;
            intCurRowInd = RowCount - 1;
        }


        var cellLst = [];

        var cellInd = 0;
        for (rowInd = 1; rowInd <= intRows; rowInd++) {
            var prefix = "swc";

            var sfxRowModel = {
                Name: "sfwRow", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
            };
            sfxRowModel.ParentVM = tableVM;

            for (colInd = 0; colInd < ColCount; colInd++) {
                var sfxCellModel = {
                    Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                };
                sfxCellModel.ParentVM = sfxRowModel;

                $rootScope.PushItem(sfxCellModel, sfxRowModel.Elements);
            }

            $rootScope.InsertItem(sfxRowModel, tableVM.Elements, rowInd + intCurRowInd);

            angular.forEach(tableVM.Elements[rowInd + intCurRowInd].Elements, function (vm) {
                var cellitem = {
                };
                cellitem.key = cellInd;
                cellitem.value = vm;
                cellLst.push(cellitem);
                cellInd++;
            });

        }


        cellInd = 0;
        function getCellIndex(field) {
            if (astrControlClass == "sfwRange") {
                cellInd = $scope.AddRange(cellLst, blnIsLookup, astrControlClass, field, cellInd);
            }
            else if (blnIsLookup && strTabSheetID && strTabSheetID == "tshAdvCriteria") {
                $scope.AddControlInAdvCriteria(cellLst, blnIsLookup, astrControlClass, field, cellInd);
            }
            else {
                cellInd = $scope.AddControlsGrid(cellLst, blnIsLookup, astrControlClass, field, cellInd, isListView);
            }
        }
        angular.forEach(alst, getCellIndex);


    };

    $scope.AddControlInAdvCriteria = function (acellLst, ablnIsLookup, astrControlClass, afield, intCellInd) {
        var aintCellInd = intCellInd;
        var strOpCodeGroup = "0";
        var strControlInit = "";
        switch (astrControlClass) {
            case "sfwLabel":
                strControlInit = "lblAdv";
                strOpCodeGroup = "0";
                break;
            case "sfwTextBox":
                strControlInit = "txtAdv";
                strOpCodeGroup = "3";
                break;
            case "sfwDropDownList":
                strControlInit = "ddlAdv";
                strOpCodeGroup = "4";
                break;
            case "sfwCheckBox":
                strControlInit = "chkAdv";
                strOpCodeGroup = "0";
                break;
            case "sfwCheckBoxList":
                strControlInit = "cblAdv";
                strOpCodeGroup = "8";
                break;
        }

        var strControlID = CreateControlID($scope.FormModel, afield.ID, astrControlClass);

        var cellVM;
        var newControl;
        var prefix = "swc";
        for (i = 0; i < acellLst.length; i++) {
            if (acellLst[i].key == aintCellInd) {
                cellVM = acellLst[i].value;
                aintCellInd++;

                newControl = {
                    Name: "sfwLabel", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                };
                newControl.ParentVM = cellVM;

                var strLabelID = CreateControlID($scope.FormModel, afield.ID, "sfwLabel", true);
                if (startsWith(strLabelID, "cap", 0)) {
                    strLabelID = "capAdv" + strLabelID.substring(3);
                }
                newControl.dictAttributes.ID = strLabelID;
                if (!$scope.FormModel.IsLookupCriteriaEnabled) {
                    newControl.dictAttributes.Text = GetCaptionFromField(afield);
                    if (newControl.dictAttributes.Text && newControl.dictAttributes.Text.trim().length > 0 && !newControl.dictAttributes.Text.contains(":")) {
                        newControl.dictAttributes.Text = newControl.dictAttributes.Text + " : ";
                    }
                }
                else if ($scope.FormModel.IsLookupCriteriaEnabled == true && (!$scope.MainQuery && (!$scope.SelectedQuery || ($scope.SelectedQuery && !$scope.SelectedQuery.dictAttributes.ID)))) {
                    newControl.dictAttributes.Text = GetCaptionFromField(afield);
                    if (newControl.dictAttributes.Text && newControl.dictAttributes.Text.trim().length > 0 && !newControl.dictAttributes.Text.contains(":")) {
                        newControl.dictAttributes.Text = newControl.dictAttributes.Text + " : ";
                    }
                }
                else {
                    newControl.dictAttributes.Text = GetCaptionFromFieldName(afield.ID) + " : ";
                }
                newControl.dictAttributes.sfwIsCaption = "True";
                newControl.dictAttributes.AssociatedControlID = strControlID;

                $rootScope.PushItem(newControl, cellVM.Elements);

                break;
            }
        }

        for (i = 0; i < acellLst.length; i++) {
            if (acellLst[i].key == aintCellInd) {
                cellVM = acellLst[i].value;
                aintCellInd++;

                newControl = {
                    Name: "sfwDropDownList", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                };
                newControl.ParentVM = cellVM;

                newControl.dictAttributes.ID = "ddlAdvOp" + CreateControlIDInCamelCase(afield.ID);
                newControl.dictAttributes.sfwLoadType = "CodeGroup";
                newControl.dictAttributes.sfwLoadSource = strOpCodeGroup;

                $rootScope.PushItem(newControl, cellVM.Elements);

                break;
            }
        }
        for (i = 0; i < acellLst.length; i++) {
            if (acellLst[i].key == aintCellInd) {
                cellVM = acellLst[i].value;
                aintCellInd++;
                newControl = {
                    Name: astrControlClass, value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                };
                newControl.ParentVM = cellVM;


                newControl.dictAttributes.ID = strControlID;
                if ($scope.SelectedQuery) {
                    newControl.dictAttributes.sfwQueryID = $scope.SelectedQuery.dictAttributes.ID;//$scope.GetsfwQueryID();
                }
                if ($scope.FormModel.IsLookupCriteriaEnabled == true && (!$scope.MainQuery && (!$scope.SelectedQuery || ($scope.SelectedQuery && !$scope.SelectedQuery.dictAttributes.ID)))) {
                    newControl.dictAttributes.sfwDataField = afield.Value;
                }
                else {
                    newControl.dictAttributes.sfwDataField = afield.ID;
                }

                SetDefultValuesBasedOnDataType(afield, astrControlClass, newControl);

                if (astrControlClass == "sfwDropDownList" || astrControlClass == "sfwCheckBoxList") {
                    if (endsWith(afield.Value, "_value")) {
                        var DisplayedEntity = getDisplayedEntity($scope.LstDisplayedEntities);
                        if (DisplayedEntity) {
                            var entityname = DisplayedEntity.strID;
                            var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                            var strCodeGroup = 0;
                            strCodeGroup = GetCodeIDForLookup(entityname, afield.Value, entityIntellisenseList);
                            newControl.dictAttributes.sfwLoadType = "CodeGroup";
                            newControl.placeHolder = strCodeGroup;
                            //newControl.dictAttributes.sfwLoadSource = strCodeGroup;
                        }
                    }
                }

                if (astrControlClass == "sfwCheckBoxList") {
                    newControl.dictAttributes.RepeatDirection = "Horizontal";
                    newControl.dictAttributes.RepeatColumns = "4";
                }

                $rootScope.PushItem(newControl, cellVM.Elements);

                break;
            }
        }


        return aintCellInd;
    };

    $scope.GetsfwQueryID = function () {
        var initialload = $scope.FormModel.Elements.filter(function (x) {
            return x.Name == 'initialload';
        });

        if (initialload.length > 0) {
            for (i = 0; i < initialload[0].Elements.length; i++) {

                var sfwQueryRef = initialload[0].Elements[i].dictAttributes.sfwQueryRef;
                if (!$scope.IsSubQuery(sfwQueryRef)) {
                    return initialload[0].Elements[i].dictAttributes.ID;
                }
            }
        }

    };

    $scope.AddRange = function (acellLst, ablnIsLookup, astrControlClass, afield, intCellInd) {
        var aintCellInd = intCellInd;

        if (afield.DataType && (afield.DataType.toLowerCase() == "date" || afield.DataType.toLowerCase() == "datetime" || afield.DataType.toLowerCase() == "decimal" ||
            afield.DataType.toLowerCase() == "double" || startsWith(afield.DataType.toLowerCase(), "int", 0))) {
            $rootScope.UndRedoBulkOp("Start");
            var controlID = CreateControlIDInCamelCase(afield.ID);

            var cellVM;
            var newCntrl;
            var prefix = "swc";
            for (i = 0; i < acellLst.length; i++) {
                if (acellLst[i].key == aintCellInd) {
                    cellVM = acellLst[i].value;
                    aintCellInd++;

                    newCntrl = {
                        Name: "sfwLabel", value: '', prefix: prefix, dictAttributes: { sfwIsCaption: "True" }, Elements: [], Children: []
                    };
                    newCntrl.ParentVM = cellVM;


                    newCntrl.dictAttributes.ID = "cap" + controlID + "From";

                    if (!$scope.FormModel.IsLookupCriteriaEnabled) {
                        newCntrl.dictAttributes.Text = GetCaptionFromField(afield) + " From : ";
                    }
                    else if ($scope.FormModel.IsLookupCriteriaEnabled == true && (!$scope.MainQuery && (!$scope.SelectedQuery || ($scope.SelectedQuery && !$scope.SelectedQuery.dictAttributes.ID)))) {
                        newCntrl.dictAttributes.Text = GetCaptionFromField(afield) + " From : ";
                    }
                    else {
                        newCntrl.dictAttributes.Text = GetCaptionFromFieldName(afield.ID) + " From : ";
                    }

                    $rootScope.PushItem(newCntrl, cellVM.Elements);
                    break;
                }
            }

            for (i = 0; i < acellLst.length; i++) {
                if (acellLst[i].key == aintCellInd) {
                    cellVM = acellLst[i].value;
                    aintCellInd++;

                    newCntrl = {
                        Name: "sfwTextBox", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                    };
                    newCntrl.ParentVM = cellVM;


                    newCntrl.dictAttributes.ID = "txt" + controlID + "From";
                    if ($scope.SelectedQuery) {
                        newCntrl.dictAttributes.sfwQueryID = $scope.SelectedQuery.dictAttributes.ID;//$scope.GetsfwQueryID();
                    }
                    if ($scope.FormModel.IsLookupCriteriaEnabled == true && (!$scope.MainQuery && (!$scope.SelectedQuery || ($scope.SelectedQuery && !$scope.SelectedQuery.dictAttributes.ID)))) {
                        newCntrl.dictAttributes.sfwDataField = afield.Value;
                    }
                    else {
                        newCntrl.dictAttributes.sfwDataField = afield.ID;
                    }
                    newCntrl.dictAttributes.sfwOperator = "between";
                    newCntrl.dictAttributes.sfwRelatedControl = "txt" + controlID + "To";

                    if (afield.DataType && (afield.DataType.toLowerCase() == "datetime" || afield.DataType.toLowerCase() == "date")) {
                        newCntrl.dictAttributes.sfwDataType = "DateTime";
                        newCntrl.dictAttributes.sfwDataFormat = "{0:d}";
                    }
                    else {
                        newCntrl.dictAttributes.sfwDataType = "Numeric";
                    }

                    $rootScope.PushItem(newCntrl, cellVM.Elements);

                    newCntrl = {
                        Name: "CompareValidator", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                    };
                    newCntrl.ParentVM = cellVM;


                    newCntrl.dictAttributes.ID = "val" + controlID + "From";
                    newCntrl.dictAttributes.Text = "*";
                    newCntrl.dictAttributes.sfwOperator = "DataTypeCheck";
                    newCntrl.dictAttributes.ControlToValidate = "txt" + controlID + "From";

                    if (afield.DataType && (afield.DataType.toLowerCase() == "datetime" || afield.DataType.toLowerCase() == "date")) {
                        newCntrl.dictAttributes.Type = "Date";

                        if (!$scope.FormModel.IsLookupCriteriaEnabled) {
                            newCntrl.dictAttributes.ErrorMessage = GetCaptionFromField(afield) + "From must be in mm/dd/yyyy format.";
                        }
                        else if ($scope.FormModel.IsLookupCriteriaEnabled == true && (!$scope.MainQuery && (!$scope.SelectedQuery || ($scope.SelectedQuery && !$scope.SelectedQuery.dictAttributes.ID)))) {
                            newCntrl.dictAttributes.ErrorMessage = GetCaptionFromField(afield) + "From must be in mm/dd/yyyy format.";
                        }
                        else {
                            newCntrl.dictAttributes.ErrorMessage = GetCaptionFromFieldName(afield.ID) + "From must be in mm/dd/yyyy format.";
                        }
                    }
                    else {
                        newCntrl.dictAttributes.Type = "Integer";

                        if (!$scope.FormModel.IsLookupCriteriaEnabled) {
                            newCntrl.dictAttributes.ErrorMessage = GetCaptionFromField(afield) + " From must be an Integer value.";
                        }
                        else if ($scope.FormModel.IsLookupCriteriaEnabled == true && (!$scope.MainQuery && (!$scope.SelectedQuery || ($scope.SelectedQuery && !$scope.SelectedQuery.dictAttributes.ID)))) {
                            newCntrl.dictAttributes.ErrorMessage = GetCaptionFromField(afield) + " From must be an Integer value.";
                        }
                        else {
                            newCntrl.dictAttributes.ErrorMessage = GetCaptionFromFieldName(afield.ID) + " From must be an Integer value.";
                        }
                    }
                    $rootScope.PushItem(newCntrl, cellVM.Elements);

                    break;
                }
            }


            for (i = 0; i < acellLst.length; i++) {
                if (acellLst[i].key == aintCellInd) {
                    cellVM = acellLst[i].value;
                    aintCellInd++;

                    newCntrl = {
                        Name: "sfwLabel", value: '', prefix: prefix, dictAttributes: { sfwIsCaption: "True" }, Elements: [], Children: []
                    };
                    newCntrl.ParentVM = cellVM;


                    newCntrl.dictAttributes.ID = "cap" + controlID + "To";

                    if (!$scope.FormModel.IsLookupCriteriaEnabled) {
                        newCntrl.dictAttributes.Text = GetCaptionFromField(afield) + " To : ";
                    }
                    else if ($scope.FormModel.IsLookupCriteriaEnabled == true && (!$scope.MainQuery && (!$scope.SelectedQuery || ($scope.SelectedQuery && !$scope.SelectedQuery.dictAttributes.ID)))) {
                        newCntrl.dictAttributes.Text = GetCaptionFromField(afield) + " To : ";
                    }
                    else {
                        newCntrl.dictAttributes.Text = GetCaptionFromFieldName(afield.ID) + " To : ";
                    }


                    $rootScope.PushItem(newCntrl, cellVM.Elements);


                    break;
                }
            }

            for (i = 0; i < acellLst.length; i++) {
                if (acellLst[i].key == aintCellInd) {
                    cellVM = acellLst[i].value;
                    aintCellInd++;

                    newCntrl = {
                        Name: "sfwTextBox", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                    };
                    newCntrl.ParentVM = cellVM;


                    newCntrl.dictAttributes.ID = "txt" + controlID + "To";
                    if ($scope.SelectedQuery) {
                        newCntrl.dictAttributes.sfwQueryID = $scope.SelectedQuery.dictAttributes.ID;//$scope.GetsfwQueryID();
                    }
                    if ($scope.FormModel.IsLookupCriteriaEnabled == true && (!$scope.MainQuery && (!$scope.SelectedQuery || ($scope.SelectedQuery && !$scope.SelectedQuery.dictAttributes.ID)))) {
                        newCntrl.dictAttributes.sfwDataField = afield.Value;
                    }
                    else {
                        newCntrl.dictAttributes.sfwDataField = afield.ID;
                    }

                    newCntrl.dictAttributes.sfwOperator = "between";


                    if (afield.DataType && (afield.DataType.toLowerCase() == "datetime" || afield.DataType.toLowerCase() == "date")) {
                        newCntrl.dictAttributes.sfwDataType = "DateTime";
                        newCntrl.dictAttributes.sfwDataFormat = "{0:d}";
                    }
                    else {
                        newCntrl.dictAttributes.sfwDataType = "Numeric";
                    }
                    $rootScope.PushItem(newCntrl, cellVM.Elements);

                    newCntrl = {
                        Name: "CompareValidator", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                    };
                    newCntrl.ParentVM = cellVM;


                    newCntrl.dictAttributes.ID = "val" + controlID + "To";
                    newCntrl.dictAttributes.Text = "*";
                    newCntrl.dictAttributes.Operator = "DataTypeCheck";
                    newCntrl.dictAttributes.ControlToValidate = "txt" + controlID + "To";

                    if (afield.DataType && (afield.DataType.toLowerCase() == "datetime" || afield.DataType.toLowerCase() == "date")) {
                        newCntrl.dictAttributes.Type = "Date";
                        if (!$scope.FormModel.IsLookupCriteriaEnabled) {
                            newCntrl.dictAttributes.ErrorMessage = GetCaptionFromField(afield) + "From must be in mm/dd/yyyy format.";
                        }
                        else if ($scope.FormModel.IsLookupCriteriaEnabled == true && (!$scope.MainQuery && (!$scope.SelectedQuery || ($scope.SelectedQuery && !$scope.SelectedQuery.dictAttributes.ID)))) {
                            newCntrl.dictAttributes.ErrorMessage = GetCaptionFromField(afield) + "From must be in mm/dd/yyyy format.";
                        }
                        else {
                            newCntrl.dictAttributes.ErrorMessage = GetCaptionFromFieldName(afield.ID) + "From must be in mm/dd/yyyy format.";
                        }
                    }
                    else {
                        newCntrl.dictAttributes.Type = "Integer";
                        if (!$scope.FormModel.IsLookupCriteriaEnabled) {
                            newCntrl.dictAttributes.ErrorMessage = GetCaptionFromField(afield) + " From must be an Integer value.";
                        }
                        else if ($scope.FormModel.IsLookupCriteriaEnabled == true && (!$scope.MainQuery && (!$scope.SelectedQuery || ($scope.SelectedQuery && !$scope.SelectedQuery.dictAttributes.ID)))) {
                            newCntrl.dictAttributes.ErrorMessage = GetCaptionFromField(afield) + " From must be an Integer value.";
                        }
                        else {
                            newCntrl.dictAttributes.ErrorMessage = GetCaptionFromFieldName(afield.ID) + " From must be an Integer value.";
                        }
                    }
                    $rootScope.PushItem(newCntrl, cellVM.Elements);

                    // Insert second CompareValidator

                    newCntrl = {
                        Name: "CompareValidator", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                    };
                    newCntrl.ParentVM = cellVM;


                    newCntrl.dictAttributes.ID = "val" + controlID + "Range";
                    newCntrl.dictAttributes.Text = "*";
                    newCntrl.dictAttributes.Operator = "GreaterThanEqual";
                    newCntrl.dictAttributes.ControlToValidate = "txt" + controlID + "To";
                    newCntrl.dictAttributes.ControlToCompare = "txt" + controlID + "From";


                    if (!$scope.FormModel.IsLookupCriteriaEnabled) {
                        newCntrl.dictAttributes.ErrorMessage = GetCaptionFromField(afield) + " To cannot be less than " + GetCaptionFromField(afield) + " From.";
                    }
                    else if ($scope.FormModel.IsLookupCriteriaEnabled == true && (!$scope.MainQuery && (!$scope.SelectedQuery || ($scope.SelectedQuery && !$scope.SelectedQuery.dictAttributes.ID)))) {
                        newCntrl.dictAttributes.ErrorMessage = GetCaptionFromField(afield) + " To cannot be less than " + GetCaptionFromField(afield) + " From.";
                    }
                    else {
                        newCntrl.dictAttributes.ErrorMessage = GetCaptionFromFieldName(afield.ID) + " To cannot be less than " + GetCaptionFromFieldName(afield.ID) + " From.";
                    }

                    if (afield.DataType && (afield.DataType.toLowerCase() == "datetime" || afield.DataType.toLowerCase() == "date")) {
                        newCntrl.dictAttributes.Type = "Date";
                    }
                    else {
                        newCntrl.dictAttributes.Type = "Integer";
                    }
                    $rootScope.PushItem(newCntrl, cellVM.Elements);

                    break;
                }
            }

            $rootScope.UndRedoBulkOp("End");

        }
        return aintCellInd;
    };

    $scope.AddControlsGrid = function (acellLst, ablnIsLookup, astrControlClass, afield, cellInd, isListViewControl) {
        var aintCellInd = cellInd;
        var strControlID = CreateControlID($scope.FormModel, afield.ID, astrControlClass);

        var cellVM;
        var newControl;
        var prefix = "swc";
        for (i = 0; i < acellLst.length; i++) {
            if (acellLst[i].key == aintCellInd) {
                cellVM = acellLst[i].value;

                aintCellInd++;

                newControl = {
                    Name: "sfwLabel", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                };
                newControl.ParentVM = cellVM;

                var strLabelID = CreateControlID($scope.FormModel, afield.ID, "sfwLabel", true);
                newControl.dictAttributes.ID = strLabelID;
                newControl.dictAttributes.Text = GetCaptionFromField(afield);
                if (newControl.dictAttributes.Text && newControl.dictAttributes.Text.trim().length > 0 && !newControl.dictAttributes.Text.contains(":")) {
                    newControl.dictAttributes.Text = newControl.dictAttributes.Text + " : ";
                }
                if (!isListViewControl) {
                    newControl.dictAttributes.AssociatedControlID = strControlID;
                    newControl.dictAttributes.sfwIsCaption = "True";
                }

                $rootScope.PushItem(newControl, cellVM.Elements);
                break;
            }
        }


        for (i = 0; i < acellLst.length; i++) {
            if (acellLst[i].key == aintCellInd) {
                cellVM = acellLst[i].value;
                aintCellInd++;

                $scope.AddActualControl(ablnIsLookup, astrControlClass, afield, isListViewControl, cellVM, false);
                break;
            }
        }


        return aintCellInd;


    };

    $scope.AddActualControl = function (ablnIsLookup, astrControlClass, afield, isListViewControl, cellVM, blnAddedinGrid) {
        var prefix = "swc";
        var newControl = {
            Name: astrControlClass, value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
        };
        var DisplayedEntity = getDisplayedEntity($scope.LstDisplayedEntities);
        var itempath = afield.ID;
        if (DisplayedEntity && DisplayedEntity.strDisplayName != "") {
            itempath = DisplayedEntity.strDisplayName + "." + afield.ID;
        }
        newControl.ParentVM = cellVM;
        if (!blnAddedinGrid) {
            if (astrControlClass == "sfwLabel") {
                strControlID = CreateControlID($scope.FormModel, afield.ID, astrControlClass, false);
            }
            else {
                strControlID = CreateControlID($scope.FormModel, afield.ID, astrControlClass, true);
            }


            newControl.dictAttributes.ID = strControlID;
        }
        else if (blnAddedinGrid && astrControlClass && astrControlClass == "sfwCascadingDropDownList") {
            strControlID = CreateControlID($scope.FormModel, afield.ID, astrControlClass, true);
            newControl.dictAttributes.ID = strControlID;
        }
        if (ablnIsLookup) {
            if (!blnAddedinGrid) {
                if ($scope.FormModel.IsLookupCriteriaEnabled == true && (!$scope.MainQuery && (!$scope.SelectedQuery || ($scope.SelectedQuery && !$scope.SelectedQuery.dictAttributes.ID)))) {
                    newControl.dictAttributes.sfwDataField = afield.Value;
                }
                else if ($scope.FormModel.IsLookupCriteriaEnabled == true) {
                    newControl.dictAttributes.sfwDataField = afield.ID;
                }
                else {
                    newControl.dictAttributes.sfwEntityField = itempath;
                }
            }
            else {
                newControl.dictAttributes.sfwEntityField = itempath;
            }
            if ($scope.FormModel.IsLookupCriteriaEnabled && $scope.SelectedQuery) {
                newControl.dictAttributes.sfwQueryID = $scope.SelectedQuery.dictAttributes.ID;//$scope.GetsfwQueryID();
            }
        }
        else if (isListViewControl) {
            newControl.dictAttributes.sfwDataField = itempath;// GetItemPathForEntityObject(afield);
        }
        else {
            if (newControl.Name == "sfwLabel") {
                newControl.dictAttributes.sfwEntityField = itempath;//GetItemPathForEntityObject(afield);
            }
            else {
                newControl.dictAttributes.sfwEntityField = itempath;// GetItemPathForEntityObject(afield);
            }

        }

        if (astrControlClass == "sfwLinkButton") {
            newControl.dictAttributes.sfwMethodName = "btnOpen_Click";
        }
        else if (astrControlClass == "sfwDropDownList" || astrControlClass == "sfwCascadingDropDownList" || astrControlClass == "sfwCheckBoxList" || astrControlClass == "sfwRadioButtonList" || astrControlClass == "sfwMultiSelectDropDownList") {
            if (endsWith(afield.Value, "_value")) {
                var entityName = "";
                if (DisplayedEntity) {
                    entityName = DisplayedEntity.strID;
                }
                if ($scope.FormModel.IsLookupCriteriaEnabled == true && (!$scope.MainQuery && (!$scope.SelectedQuery || ($scope.SelectedQuery && !$scope.SelectedQuery.dictAttributes.ID)))) {
                    entityName = $scope.FormModel.dictAttributes.sfwEntity;
                }
                else if ($scope.FormModel.IsLookupCriteriaEnabled && $scope.SelectedQuery) {
                    if ($scope.SelectedQuery.dictAttributes.sfwQueryRef.contains('.')) {
                        entityName = $scope.SelectedQuery.dictAttributes.sfwQueryRef.substring(0, $scope.SelectedQuery.dictAttributes.sfwQueryRef.indexOf('.'));
                    }
                }
                var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                var strCodeGroup = "";
                if (entityName) {
                    if (!ablnIsLookup) {
                        strCodeGroup = GetCodeID(entityName, afield.ID, entityIntellisenseList);
                    } else {
                        if ($scope.FormModel.IsLookupCriteriaEnabled) {
                            strCodeGroup = GetCodeIDForLookup(entityName, afield.Value, entityIntellisenseList);
                        }
                        else {
                            strCodeGroup = GetCodeID(entityName, afield.ID, entityIntellisenseList);
                        }
                    }
                }
                if (!strCodeGroup) {
                    strCodeGroup = "0";
                }
                newControl.dictAttributes.sfwLoadType = "CodeGroup";
                newControl.placeHolder = strCodeGroup;
                //newControl.dictAttributes.sfwLoadSource = strCodeGroup;

                if (ablnIsLookup) {
                    if (astrControlClass == "sfwDropDownList") {
                        newControl.dictAttributes.sfwOperator = "=";
                    }
                }
            }
        }
        else if (astrControlClass == "sfwRadioButton" && afield.Value) {
            var strIbusName = afield.Value.substring(afield.Value.indexOf(".") + 1);
            newControl.dictAttributes.GroupName = strIbusName;
        }
        else {
            SetDefultValuesBasedOnDataType(afield, astrControlClass, newControl);
            if (ablnIsLookup && afield.DataType) {
                if (afield.DataType.toLowerCase() == "datetime" || afield.DataType.toLowerCase() == "date") {
                    newControl.dictAttributes.sfwDataType = "DateTime";
                }
                else if (afield.DataType.toLowerCase() == "decimal") {
                    newControl.dictAttributes.sfwDataType = "Decimal";
                }
                else if (afield.DataType == "Int32" || afield.DataType.toLowerCase() == "int" || afield.DataType == "int32") {
                    newControl.dictAttributes.sfwDataType = "Numeric";
                }
            }
        }

        if (blnAddedinGrid) {
            if ($scope.FormModel && $scope.FormModel.dictAttributes.sfwType != "Lookup") {

                if (newControl.Name != "sfwLabel" && newControl.Name != "sfwButton" && newControl.Name != "sfwLinkButton" && newControl.Name != "sfwImageButton" && newControl.Name !== "sfwButtonGroup") {
                    var objGridView = FindParent(newControl, "sfwGridView");
                    if (objGridView) {
                        $rootScope.EditPropertyValue(objGridView.dictAttributes.AllowEditing, objGridView.dictAttributes, "AllowEditing", "True");
                        $rootScope.EditPropertyValue(objGridView.dictAttributes.sfwTwoWayBinding, objGridView.dictAttributes, "sfwTwoWayBinding", "True");
                        $rootScope.EditPropertyValue(objGridView.dictAttributes.sfwCommonFilterBox, objGridView.dictAttributes, "sfwCommonFilterBox", "False");
                        $rootScope.EditPropertyValue(objGridView.dictAttributes.sfwFilterOnKeyPress, objGridView.dictAttributes, "sfwFilterOnKeyPress", "False");

                    }
                }
            }
        }
        $rootScope.PushItem(newControl, cellVM.Elements, "SetFormSelectedControl");
        $scope.SetFormSelectedControl(newControl);
    };

    $scope.AddSfxChartToGrid = function (objcontrolVM) {
        var selectedField;
        for (var i = 0; i < $scope.lstLoadedEntityTrees.length; i++) {
            if ($scope.lstLoadedEntityTrees[i].IsVisible == true) {
                selectedField = $scope.lstLoadedEntityTrees[i].selectedobjecttreefield;
                break;
            }
        }

        if (selectedField) {

            // if (UtilityFunctions.ValidateSfwObjectFieldForGrid(selectedField.BusObjName, selectedField.ItemPath, this.ObjVM.VMMain.ActiveProject))
            {

                if (objcontrolVM) {
                    //var entitycollname = GetItemPathForEntityObject(selectedField);
                    var DisplayedEntity = getDisplayedEntity($scope.LstDisplayedEntities);
                    var DisplayName = "";
                    if (DisplayedEntity && DisplayedEntity.strDisplayName != "") {
                        DisplayName = DisplayedEntity.strDisplayName + "." + selectedField.ID;
                    } else {
                        DisplayName = selectedField.ID;
                    }
                    var entitycollname = DisplayName;
                    $scope.ParentEntityName = selectedField.Entity;
                    var cellVM = null;
                    var buttonGroup = GetVM("sfwButtonGroup", objcontrolVM);
                    if (buttonGroup) {
                        cellVM = buttonGroup;
                    } else {
                        cellVM = GetVM("sfwColumn", objcontrolVM);
                    }

                    // var cellVM = GetVM("sfwColumn", objcontrolVM);
                    if (null != cellVM) {
                        var newScope = $scope.$new();
                        newScope.ObjChartModel = {
                            Name: 'sfwChart',
                            prefix: 'swc',
                            Value: '',
                            dictAttributes: {
                                ID: '', sfwEntityField: entitycollname, ChartType: '', Width: '', Height: '', ShowLegend: 'True'
                            },
                            Elements: [],
                            Children: []
                        };
                        newScope.ObjChartModel.lstselectedobjecttreefields = [];
                        newScope.ObjChartModel.selectedobjecttreefield;
                        newScope.lstChartType = $rootScope.ChartTypes;
                        newScope.lstToolTipTypes = ['None', 'Chart', 'Table', 'Both'];
                        newScope.DataFormats = ['', '{0:d}', '{0:C}', '{0:000-##-####}', '{0:(###)###-####}'];


                        newScope.SeriesModel = {
                            Name: 'Series',
                            prefix: '',
                            Value: '',
                            dictAttributes: {
                            },
                            Elements: [],
                            Children: []
                        };
                        newScope.SeriesModel.ParentVM = newScope.ObjChartModel;
                        newScope.ObjChartModel.Elements.push(newScope.SeriesModel);

                        var ChartAreasModel = {
                            Name: 'ChartAreas',
                            prefix: '',
                            Value: '',
                            dictAttributes: {
                            },
                            Elements: [],
                            Children: []
                        };
                        ChartAreasModel.ParentVM = newScope.ObjChartModel;
                        newScope.ObjChartModel.Elements.push(ChartAreasModel);

                        newScope.sfwChartAreaModel = {
                            Name: 'sfwChartArea',
                            prefix: 'swc',
                            Value: '',
                            dictAttributes: {
                                ChartAreaName: '', BackColor: ''
                            },
                            Elements: [],
                            Children: []
                        };
                        newScope.sfwChartAreaModel.ParentVM = ChartAreasModel;
                        ChartAreasModel.Elements.push(newScope.sfwChartAreaModel);

                        newScope.removeSeriescolumnValues = function (chartModel) {
                            for (var i = 0; i < chartModel.Elements.length; i++) {
                                if (chartModel.Elements[i].Name == "Series") {
                                    var seriesModel = chartModel.Elements[i];
                                    for (var j = 0; j < seriesModel.Elements.length; j++) {
                                        seriesModel.Elements[j].dictAttributes.sfwSeriesColumnName = "";
                                    }
                                    break;
                                }
                            }
                        };

                        newScope.onChartTypeChanged = function () {
                            if (newScope.ObjChartModel.dictAttributes.ChartType && (newScope.ObjChartModel.dictAttributes.ChartType == "Donut" || newScope.ObjChartModel.dictAttributes.ChartType == "Pie")) {
                                newScope.ObjChartModel.dictAttributes.sfwIsDynamicSeries = "False";
                                newScope.removeSeriescolumnValues(newScope.ObjChartModel);
                            }
                        };
                        newScope.Area3DStyle = {
                            Name: 'Area3DStyle',
                            prefix: '',
                            Value: '',
                            dictAttributes: {
                                IsEnable3D: 'false', Inclination: '', LightStyle: ''
                            },
                            Elements: [],
                            Children: []
                        };
                        newScope.Area3DStyle.ParentVM = newScope.sfwChartAreaModel;
                        newScope.sfwChartAreaModel.Elements.push(newScope.Area3DStyle);


                        newScope.onSfxChartFinishClick = function () {
                            newScope.UpdateNavigationParam();
                            var tableVM = null;
                            if (cellVM.Name == "sfwButtonGroup") {
                                tableVM = cellVM;
                            } else {
                                tableVM = GetVM('sfwTable', cellVM);
                            }

                            // var tableVM = GetVM('sfwTable', cellVM);
                            if (tableVM && tableVM.Name != "sfwButtonGroup") {
                                var newRowModel = {
                                    Name: 'sfwRow',
                                    prefix: 'swc',
                                    Value: '',
                                    dictAttributes: {
                                    },
                                    Elements: [],
                                    Children: []
                                };
                                newRowModel.ParentVM = tableVM;

                                var newcellModel = {
                                    Name: 'sfwColumn',
                                    prefix: 'swc',
                                    Value: '',
                                    dictAttributes: {
                                    },
                                    Elements: [],
                                    Children: []
                                };
                                newcellModel.ParentVM = newRowModel;
                                if (newScope.ObjChartModel && newScope.ObjChartModel.dictAttributes) {
                                    if (!newScope.ObjChartModel.dictAttributes.ID.match("^chr")) {
                                        newScope.ObjChartModel.dictAttributes.ID = "chr" + newScope.ObjChartModel.dictAttributes.ID;
                                    }
                                    newcellModel.Elements.push(newScope.ObjChartModel);
                                }

                                newRowModel.Elements.push(newcellModel);

                                var ColCount = GetMaxColCount(tableVM.Elements[0]);
                                for (ind = 1; ind < ColCount; ind++) {
                                    newcellModel = {
                                        Name: 'sfwColumn',
                                        prefix: 'swc',
                                        Value: '',
                                        dictAttributes: {
                                        },
                                        Elements: [],
                                        Children: []
                                    };
                                    newcellModel.ParentVM = newRowModel;

                                    newRowModel.Elements.push(newcellModel);
                                }

                                tableVM.Elements.push(newRowModel);
                            }
                            if (tableVM && tableVM.Name == "sfwButtonGroup") {
                                if (newScope.ObjChartModel && newScope.ObjChartModel.dictAttributes) {
                                    if (!newScope.ObjChartModel.dictAttributes.ID.match("^chr")) {
                                        newScope.ObjChartModel.dictAttributes.ID = "chr" + newScope.ObjChartModel.dictAttributes.ID;
                                    }
                                    tableVM.Elements.push(newScope.ObjChartModel);
                                }
                            }
                            $scope.selectControl(newScope.ObjChartModel);

                            newScope.onSfxChartCancelClick();
                        };


                        newScope.UpdateNavigationParam = function () {
                            var strParameters = "";
                            function item(grdParam) {
                                var strParamValue = grdParam.ParmeterValue;

                                if (strParamValue != null && strParamValue != "") {
                                    var blnConstant = grdParam.ParmeterConstant;
                                    if (blnConstant)
                                        strParamValue = "#" + strParamValue;

                                    var strParam = strParamValue;
                                    var strParamField = grdParam.ParmeterField;

                                    if (strParamValue.toLowerCase() != strParamField.toLowerCase())
                                        strParam = strParamField + '=' + strParamValue;

                                    if (strParameters == "")
                                        strParameters = strParam;
                                    else
                                        strParameters += ';' + strParam;
                                }
                            }
                            function iterator(aobjSeriesModel) {
                                strParameters = "";
                                angular.forEach(aobjSeriesModel.FormParameters, item);
                                aobjSeriesModel.dictAttributes.sfwNavigationParameter = strParameters;
                            }
                            angular.forEach(newScope.SeriesModel.Elements, iterator);
                        };

                        newScope.onSfxChartCancelClick = function () {
                            if (newScope.CreateChartDialog) {
                                newScope.CreateChartDialog.close();
                            }
                            //ngDialog.close(newScope.objGridViewWizardVM.id);
                        };

                        newScope.isChartNextDisable = function () {
                            var IsValid = false;
                            newScope.ObjChartModel.ErrorMessageForDisplay = "";
                            if (!newScope.ObjChartModel.ValidateChartName()) {
                                IsValid = true;
                            }
                            else if (!newScope.ObjChartModel.ValidateEntityCollection()) {
                                IsValid = true;
                            }

                            else if (!newScope.ObjChartModel.ValidateChartType()) {
                                IsValid = true;
                            }
                            else if (!newScope.ObjChartModel.ValidateWidth()) {
                                IsValid = true;
                            }
                            else if (!newScope.ObjChartModel.ValidateHeight()) {
                                IsValid = true;
                            }
                            //else if (!newScope.ObjChartModel.ValidateChartAreaName()) {
                            //    IsValid = true;
                            //}
                            return IsValid;

                        };


                        //#region Validation for Create Chart

                        //#region Validate Chart Name
                        newScope.ObjChartModel.ValidateChartName = function () {
                            var retValue = true;
                            if (!newScope.ObjChartModel.dictAttributes.ID) {
                                newScope.ObjChartModel.ErrorMessageForDisplay = "Error: Please enter ID.";
                                retValue = false;
                            }
                            return retValue;
                        };
                        //#endregion

                        //#region Validation for Entity Collecction
                        newScope.ObjChartModel.ValidateEntityCollection = function () {
                            var retValue = true;
                            if (!newScope.ObjChartModel.dictAttributes.sfwEntityField) {
                                newScope.ObjChartModel.ErrorMessageForDisplay = "Error: Please enter a Entity.";
                                retValue = false;
                            }

                            return retValue;
                        };
                        //#endregion


                        //#region Validation for Chart Type
                        newScope.ObjChartModel.ValidateChartType = function () {
                            var retValue = true;
                            if (!newScope.ObjChartModel.dictAttributes.ChartType) {
                                newScope.ObjChartModel.ErrorMessageForDisplay = "Error: Please Select a ChartType.";
                                retValue = false;
                            }
                            return retValue;
                        };
                        //#endregion

                        //#region Validation for Width
                        newScope.ObjChartModel.ValidateWidth = function () {
                            var retValue = true;
                            if (!newScope.ObjChartModel.dictAttributes.Width) {
                                newScope.ObjChartModel.ErrorMessageForDisplay = "Error: Please enter a Width.";
                                retValue = false;
                            }
                            //else if (newScope.ObjChartModel.dictAttributes.Width) {
                            //    var reg = new RegExp("[^0-9]");
                            //    if (reg.test(newScope.ObjChartModel.dictAttributes.Width)) {
                            //        newScope.ObjChartModel.ErrorMessageForDisplay = "Invalid Width '" + newScope.ObjChartModel.dictAttributes.Width + "'.";
                            //        return false;
                            //    }
                            //}
                            return retValue;
                        };
                        //#endregion

                        //#region Validation for Height
                        newScope.ObjChartModel.ValidateHeight = function () {
                            var retValue = true;
                            if (!newScope.ObjChartModel.dictAttributes.Height) {
                                newScope.ObjChartModel.ErrorMessageForDisplay = "Error: Please enter a Height.";
                                retValue = false;
                            }
                            //else if (newScope.ObjChartModel.dictAttributes.Height) {
                            //    var reg = new RegExp("[^0-9]");
                            //    if (reg.test(newScope.ObjChartModel.dictAttributes.Height)) {
                            //        newScope.ObjChartModel.ErrorMessageForDisplay = "Invalid Height '" + newScope.ObjChartModel.dictAttributes.Height + "'.";
                            //        return false;
                            //    }
                            //}
                            return retValue;
                        };
                        //#endregion

                        //#region Validation for Chart Type
                        //newScope.ObjChartModel.ValidateChartAreaName = function () {
                        //    var retValue = true;
                        //    if (!newScope.sfwChartAreaModel.dictAttributes.ChartAreaName) {
                        //        newScope.ObjChartModel.ErrorMessageForDisplay = "Error: Please enter a ChartAreaName.";
                        //        retValue = false;
                        //    }
                        //    return retValue;
                        //}
                        //#endregion

                        //#endregion


                        //#region add series

                        newScope.ShowSeriesDetail = function (itm) {

                            itm.ShowDetails = !itm.ShowDetails;
                        };

                        newScope.SelectSeries = function (obj) {
                            if (newScope.ObjSeriesModel && newScope.ObjSeriesModel != obj) {
                                if (newScope.ObjSeriesModel.ShowDetails) {
                                    newScope.ObjSeriesModel.ShowDetails = false;
                                }
                            }
                            newScope.ObjSeriesModel = obj;
                        };

                        newScope.GetSeriesID = function () {
                            var strItemKey = "Series";
                            var iItemNum = 0;
                            var strItemName = strItemKey;

                            var newTemp = newScope.SeriesModel.Elements.filter(function (x) {
                                return x.dictAttributes.Name == strItemName;
                            });

                            while (newTemp.length > 0) {
                                iItemNum++;
                                strItemName = strItemKey + iItemNum;
                                newTemp = newScope.SeriesModel.Elements.filter(function (x) {
                                    return x.dictAttributes.Name == strItemName;
                                });
                            }
                            return strItemName;
                        };

                        newScope.OnAddSeriesClick = function () {
                            var newSeriesScope = newScope.$new();

                            newSeriesScope.ObjSeriesModel = {
                                Name: 'sfwSeries',
                                prefix: 'swc',
                                Value: '',
                                dictAttributes: {
                                    Name: '', XValueMember: '', YValueMembers: '', YMemberColor: '', IsValueShownAsLabel: 'False', sfwFormatField: '', sfwTooltipType: '', sfwTooltipTableParams: '', sfwActiveForm: ''
                                },
                                Elements: [],
                                Children: []
                            };
                            newSeriesScope.ObjSeriesModel.dictAttributes.Name = newScope.GetSeriesID();
                            newSeriesScope.ObjSeriesModel.ParentVM = newScope.SeriesModel;
                            newSeriesScope.ObjSeriesModel.lstselectedobjecttreefields = [];
                            newSeriesScope.ObjSeriesModel.selectedobjecttreefield;
                            newSeriesScope.ObjSeriesModel.ShowDetails = true;
                            newSeriesScope.ObjSeriesModel.FormParameters = [];
                            newSeriesScope.ShowParameters = false;
                            //$scope.populateParamtersForform = function () {

                            //    $.connection.hubForm.server.getFormParameters(newSeriesScope.ObjSeriesModel.dictAttributes.sfwActiveForm, "").done(function (lstparams) {
                            //        $scope.receiveFormParameters(lstparams, "");
                            //    });
                            //};

                            $scope.receiveFormParameters = function (lstparams, formtype) {
                                if (lstparams) {
                                    newSeriesScope.$evalAsync(function () {
                                        newSeriesScope.ObjSeriesModel.FormParameters = lstparams;
                                        newSeriesScope.ShowParameters = true;
                                    });
                                }
                            };
                            newSeriesScope.ClearParamtersForform = function () {
                                if (newSeriesScope.ObjSeriesModel && newSeriesScope.ObjSeriesModel.FormParameters) {
                                    newSeriesScope.ObjSeriesModel.FormParameters = "";
                                }
                                if (newSeriesScope.ObjSeriesModel && newSeriesScope.ObjSeriesModel.dictAttributes.sfwActiveForm != "") {
                                    newSeriesScope.seriesactiveform = true;
                                }
                                newSeriesScope.ShowParameters = false;
                            };

                            //#region Validation for Add Series


                            newSeriesScope.isChartFinishDisable = function () {
                                var IsValid = false;
                                newSeriesScope.ErrorMessageForDisplay = "";
                                if (newSeriesScope.ObjSeriesModel) {
                                    if (!newSeriesScope.ValidateSeriesName()) {
                                        IsValid = true;
                                    }
                                    else if (!newSeriesScope.ValidateXValue()) {
                                        IsValid = true;
                                    }
                                    else if (!newSeriesScope.ValidateYValue()) {
                                        IsValid = true;
                                    }
                                    //else if (!newSeriesScope.ValidateActiveForm()) {
                                    //    IsValid = true;
                                    //}
                                }
                                return IsValid;
                            };

                            //#region Validation for Series Name
                            newSeriesScope.ValidateSeriesName = function () {
                                var retValue = true;
                                if (!newSeriesScope.ObjSeriesModel.dictAttributes.Name) {
                                    newSeriesScope.ErrorMessageForDisplay = "Error: Please enter a Series Name.";
                                    retValue = false;
                                }

                                return retValue;
                            };
                            //#endregion

                            //#region Validation for X Value Member
                            newSeriesScope.ValidateXValue = function () {
                                var retValue = true;
                                if (!newSeriesScope.ObjSeriesModel.dictAttributes.XValueMember) {
                                    newSeriesScope.ErrorMessageForDisplay = "Error: Please enter a Series XValueMember.";
                                    retValue = false;
                                }

                                return retValue;
                            };
                            //#endregion


                            //#region Validation for Y Value Member
                            newSeriesScope.ValidateYValue = function () {
                                var retValue = true;
                                if (!newSeriesScope.ObjSeriesModel.dictAttributes.YValueMembers) {
                                    newSeriesScope.ErrorMessageForDisplay = "Error: Please enter a Series YValueMembers.";
                                    retValue = false;
                                }

                                return retValue;
                            };
                            //#endregion


                            //#region Validation for Y Value Member
                            //newSeriesScope.ValidateActiveForm = function () {
                            //    var retValue = true;
                            //    if (!newSeriesScope.ObjSeriesModel.dictAttributes.sfwActiveForm) {
                            //        newSeriesScope.ErrorMessageForDisplay = "Error: Please enter a Series Navigation Form.";
                            //        retValue = false;
                            //    }

                            //    return retValue;
                            //}
                            //#endregion


                            //#region Validation for Y Value Member
                            newSeriesScope.ValidateYValue = function () {
                                var retValue = true;
                                if (!newSeriesScope.ObjSeriesModel.dictAttributes.YValueMembers) {
                                    newSeriesScope.ErrorMessageForDisplay = "Error: Please enter a Series YValueMembers.";
                                    retValue = false;
                                }

                                return retValue;
                            };
                            //#endregion

                            //#endregion

                            newSeriesScope.OpenTooltipParams = function () {
                                newScope.OpenTooltipParams(newSeriesScope);
                            };

                            newSeriesScope.onAdditionalChartColumnClick = function () {
                                newScope.onAdditionalChartColumnClick(newSeriesScope);
                            };


                            newSeriesScope.onCancelClick = function () {
                                if (seriesDialog) {
                                    seriesDialog.close();
                                }
                            };

                            newSeriesScope.OnOkClick = function () {
                                newSeriesScope.ObjSeriesModel.dictAttributes.ChartType = newScope.ObjChartModel.dictAttributes.ChartType;
                                newScope.SeriesModel.Elements.push(newSeriesScope.ObjSeriesModel);
                                if (seriesDialog) {
                                    seriesDialog.close();
                                }
                            };


                            var seriesDialog = $rootScope.showDialog(newSeriesScope, "Add Series", "Form/views/AddEditSeries.html", { width: 600, height: 600 });

                        };

                        newScope.OpenTooltipParams = function (newSeriesScope) {
                            var newParamScope = newSeriesScope.$new();
                            newScope.objTooltipParamsVM = $rootScope.showDialog(newParamScope, "Set Tooltip Parameters", "Form/views/SetToolTipParameters.html", { width: 500, height: 420 });

                            newParamScope.onSfxChartTooltipTableCancelClick = function () {
                                if (newScope.objTooltipParamsVM) {
                                    newScope.objTooltipParamsVM.close();
                                }
                                //ngDialog.close(newScope.objTooltipParamsVM.id);
                            };

                            newParamScope.onSfxChartTooltipTableOKClick = function () {
                                var lstselectedfields = [];
                                lstselectedfields = GetSelectedFieldList(newSeriesScope.ObjSeriesModel.lstselectedobjecttreefields, lstselectedfields);
                                var DisplayedEntity = getDisplayedEntity(newSeriesScope.ObjSeriesModel.LstDisplayedEntities);
                                var itempath = "";
                                if (DisplayedEntity && DisplayedEntity.strDisplayName != "") {
                                    itempath = DisplayedEntity.strDisplayName;
                                }
                                function iUpdatetooltipparam(itm) {
                                    var ID = itm.ID;
                                    if (itempath) {
                                        ID = itempath + "." + ID;
                                    }
                                    if (tooltipparam) {
                                        tooltipparam = tooltipparam + ";" + ID;
                                    }
                                    else {
                                        tooltipparam = ID;
                                    }
                                }
                                if (lstselectedfields.length > 0) {
                                    var tooltipparam;

                                    angular.forEach(lstselectedfields, iUpdatetooltipparam);

                                    newSeriesScope.ObjSeriesModel.dictAttributes.sfwTooltipTableParams = tooltipparam;

                                }
                                newParamScope.onSfxChartTooltipTableCancelClick();
                                //ngDialog.close(newScope.objTooltipParamsVM.id);
                            };
                        };

                        newScope.OnRemoveSeriesClick = function () {

                            if (newScope.ObjSeriesModel) {
                                var index = newScope.SeriesModel.Elements.indexOf(newScope.ObjSeriesModel);
                                newScope.SeriesModel.Elements.splice(index, 1);
                                //$rootScope.DeleteItem(newScope.ObjSeriesModel, SeriesModel.Elements);
                                if (index < newScope.SeriesModel.Elements.length) {
                                    newScope.SelectSeries(newScope.SeriesModel.Elements[index]);
                                }
                                else if (newScope.SeriesModel.Elements.length > 0) {
                                    newScope.SelectSeries(newScope.SeriesModel.Elements[index - 1]);
                                }
                                else {
                                    newScope.ObjSeriesModel = undefined;
                                }
                            }

                            //                    if (this.SelectedSeries != null)
                            //                    {
                            //                        foreach (ChildWizardPage objChild in this.ObjChartViewVM.WizardItemCollection)
                            //                    {
                            //                            if (objChild.DataContext is AddSeriesNavigationParamVM)
                            //                    {
                            //                                if ((objChild.DataContext as AddSeriesNavigationParamVM).objSeriesModel.Equals(this.SelectedSeries))
                            //                    {
                            //                                    this.ObjChartViewVM.WizardItemCollection.Remove(objChild);
                            //                        break;
                            //                    }
                            //                }
                            //            }

                            //            this.Series.Elements.Remove(this.SelectedSeries);

                            //            int index = 1;
                            //            foreach (ChildWizardPage objChild in this.ObjChartViewVM.WizardItemCollection)
                            //            {
                            //                if (objChild.DataContext is AddSeriesNavigationParamVM)
                            //            {
                            //                    objChild.Title = string.Format("Step {0} - Enter Series {1} Navigation Parameters. ", index,
                            //                    (objChild.DataContext as AddSeriesNavigationParamVM).objSeriesModel[ApplicationConstants.XMLFacade.NAME_C]);
                            //        }

                            //        index++;
                            //    }


                            //    this.AddOrRemoveFinishButtonVisibility();
                            //}
                        };

                        newScope.OnEditSeries = function (itm) {
                            var newSeriesScope = newScope.$new();
                            newSeriesScope.ObjSeriesModel = itm;
                            newSeriesScope.ObjSeriesModel.ParentVM = undefined;
                            if (newSeriesScope.ObjSeriesModel.FormParameters && newSeriesScope.ObjSeriesModel.FormParameters.length > 0) {
                                newSeriesScope.ShowParameters = true;
                            }
                            else {
                                newSeriesScope.ShowParameters = false;
                            }

                            newSeriesScope.seriesactiveform = true;
                            //$scope.populateParamtersForform = function () {

                            //    $.connection.hubForm.server.getFormParameters(newSeriesScope.ObjSeriesModel.dictAttributes.sfwActiveForm, "").done(function (lstparams) {
                            //        $scope.receiveFormParameters(lstparams, "");
                            //    });
                            //};

                            $scope.receiveFormParameters = function (lstparams, formtype) {

                                if (lstparams) {
                                    newSeriesScope.$evalAsync(function () {
                                        function iUpdateParams(param) {

                                            var lst = params.filter(function (obj) {
                                                return param.ParmeterField == obj.ParmeterField;
                                            });
                                            if (lst && lst.length > 0) {
                                                param.ParmeterValue = lst[0].ParmeterValue;
                                                param.ParmeterConstant = lst[0].ParmeterConstant;
                                            }
                                        }
                                        var params = newSeriesScope.ObjSeriesModel.FormParameters;
                                        newSeriesScope.ObjSeriesModel.FormParameters = [];
                                        if (params && params.length > 0) {


                                            angular.forEach(lstparams, iUpdateParams);
                                        }
                                        newSeriesScope.ObjSeriesModel.FormParameters = lstparams;
                                        newSeriesScope.ShowParameters = true;
                                    });
                                }
                            };
                            newSeriesScope.ClearParamtersForform = function () {
                                if (newSeriesScope.ObjSeriesModel && newSeriesScope.ObjSeriesModel.FormParameters) {
                                    newSeriesScope.ObjSeriesModel.FormParameters = "";
                                }
                                if (newSeriesScope.ObjSeriesModel && newSeriesScope.ObjSeriesModel.dictAttributes.sfwActiveForm != "") {
                                    newSeriesScope.seriesactiveform = true;
                                }
                                newSeriesScope.ShowParameters = false;
                            };

                            //#region Validation for Add Series


                            newSeriesScope.isChartFinishDisable = function () {
                                var IsValid = false;
                                newSeriesScope.ErrorMessageForDisplay = "";
                                if (newSeriesScope.ObjSeriesModel) {
                                    if (!newSeriesScope.ValidateSeriesName()) {
                                        IsValid = true;
                                    }
                                    else if (!newSeriesScope.ValidateXValue()) {
                                        IsValid = true;
                                    }
                                    else if (!newSeriesScope.ValidateYValue()) {
                                        IsValid = true;
                                    }
                                    //else if (!newSeriesScope.ValidateActiveForm()) {
                                    //    IsValid = true;
                                    //}
                                }
                                return IsValid;
                            };

                            //#region Validation for Series Name
                            newSeriesScope.ValidateSeriesName = function () {
                                var retValue = true;
                                if (!newSeriesScope.ObjSeriesModel.dictAttributes.Name) {
                                    newSeriesScope.ErrorMessageForDisplay = "Error: Please enter a Series Name.";
                                    retValue = false;
                                }

                                return retValue;
                            };
                            //#endregion

                            //#region Validation for X Value Member
                            newSeriesScope.ValidateXValue = function () {
                                var retValue = true;
                                if (!newSeriesScope.ObjSeriesModel.dictAttributes.XValueMember) {
                                    newSeriesScope.ErrorMessageForDisplay = "Error: Please enter a Series XValueMember.";
                                    retValue = false;
                                }

                                return retValue;
                            };
                            //#endregion


                            //#region Validation for Y Value Member
                            newSeriesScope.ValidateYValue = function () {
                                var retValue = true;
                                if (!newSeriesScope.ObjSeriesModel.dictAttributes.YValueMembers) {
                                    newSeriesScope.ErrorMessageForDisplay = "Error: Please enter a Series YValueMembers.";
                                    retValue = false;
                                }

                                return retValue;
                            };
                            //#endregion


                            //#region Validation for Y Value Member
                            newScope.ValidateActiveForm = function () {
                                var retValue = true;
                                if (!newSeriesScope.ObjSeriesModel.dictAttributes.sfwActiveForm) {
                                    newSeriesScope.ErrorMessageForDisplay = "Error: Please enter a Series Navigation Form.";
                                    retValue = false;
                                }

                                return retValue;
                            };
                            //#endregion


                            //#region Validation for Y Value Member
                            newScope.ValidateYValue = function () {
                                var retValue = true;
                                if (!newSeriesScope.ObjSeriesModel.dictAttributes.YValueMembers) {
                                    newSeriesScope.ErrorMessageForDisplay = "Error: Please enter a Series YValueMembers.";
                                    retValue = false;
                                }

                                return retValue;
                            };
                            //#endregion

                            //#endregion

                            newSeriesScope.OpenTooltipParams = function () {
                                newScope.OpenTooltipParams(newSeriesScope);
                            };

                            newSeriesScope.onAdditionalChartColumnClick = function () {
                                newScope.onAdditionalChartColumnClick(newSeriesScope);
                            };

                            newSeriesScope.onCancelClick = function () {
                                if (seriesDialog) {
                                    seriesDialog.close();
                                }
                            };

                            newSeriesScope.OnOkClick = function () {
                                newSeriesScope.ObjSeriesModel.ParentVM = newScope.SeriesModel;
                                newSeriesScope.onCancelClick();
                            };


                            var seriesDialog = $rootScope.showDialog(newSeriesScope, "Edit Series", "Form/views/AddEditSeries.html", { width: 600, height: 600 });
                        };


                        newScope.onAdditionalChartColumnClick = function (newSeriesScope) {
                            var newColumnScope = newSeriesScope.$new();
                            newColumnScope.sfwAddtionalChartColumns = [];
                            newColumnScope.SelectedObject = newSeriesScope.ObjSeriesModel;
                            //newColumnScope.ParentEntityName = $scope.FormModel.dictAttributes.sfwEntity;
                            if (newSeriesScope.ObjSeriesModel.dictAttributes.swfAddtionalChartColumns) {
                                var temp = newSeriesScope.ObjSeriesModel.dictAttributes.swfAddtionalChartColumns.split(",");
                                for (var i = 0; i < temp.length; i++) {
                                    newColumnScope.sfwAddtionalChartColumns.push({ Property: temp[i] });
                                }
                            }
                            var AdditionalChartdialog = $rootScope.showDialog(newColumnScope, "Multiple Objects Selection", "Form/views/AdditionalChartColumnsDialog.html", { width: 1000, height: 490 });
                            newColumnScope.onCancelClick = function () {
                                AdditionalChartdialog.close();
                            };
                            newColumnScope.onOkClick = function () {
                                var AddtionalChartColumns = "";
                                for (var i = 0; i < newColumnScope.sfwAddtionalChartColumns.length; i++) {
                                    if (newColumnScope.sfwAddtionalChartColumns[i].Property != "") {
                                        if (AddtionalChartColumns == "") {
                                            AddtionalChartColumns = newColumnScope.sfwAddtionalChartColumns[i].Property;
                                        }
                                        else {
                                            AddtionalChartColumns += "," + newColumnScope.sfwAddtionalChartColumns[i].Property;
                                        }
                                    }
                                }
                                $rootScope.EditPropertyValue(newSeriesScope.ObjSeriesModel.dictAttributes.swfAddtionalChartColumns, newSeriesScope.ObjSeriesModel.dictAttributes, "swfAddtionalChartColumns", AddtionalChartColumns);
                                AdditionalChartdialog.close();
                            };
                            newColumnScope.selectRow = function (row) {
                                newColumnScope.selectedRow = row;
                            };
                            newColumnScope.addProperty = function () {
                                newColumnScope.sfwAddtionalChartColumns.push({ Property: "" });
                            };
                            newColumnScope.deleteProperty = function () {
                                var index = -1;
                                if (newColumnScope.selectedRow) {
                                    for (var i = 0; i < newColumnScope.sfwAddtionalChartColumns.length; i++) {
                                        if (newColumnScope.selectedRow == newColumnScope.sfwAddtionalChartColumns[i]) {
                                            index = i;
                                            break;
                                        }
                                    }
                                }
                                if (index > -1) {
                                    newColumnScope.sfwAddtionalChartColumns.splice(index, 1);
                                    if (newColumnScope.sfwAddtionalChartColumns.length > 0) {
                                        if (index > 0) {
                                            newColumnScope.selectedRow = newColumnScope.sfwAddtionalChartColumns[index - 1];
                                        }
                                        else {
                                            newColumnScope.selectedRow = newColumnScope.sfwAddtionalChartColumns[newColumnScope.sfwAddtionalChartColumns.length - 1];
                                        }
                                    }
                                    else {
                                        newColumnScope.selectedRow = undefined;
                                    }
                                }
                            };
                        };

                        //newScope.onSfxChartSeriesOKClick = function () {
                        //    newScope.ObjSeriesModel.dictAttributes.ChartType = newScope.ObjChartModel.dictAttributes.ChartType;
                        //    newScope.SeriesModel.Elements.push(newScope.ObjSeriesModel);
                        //    //this.AddNavParamPage(ObjAddSeriesDialogVM.ObjSeriesModel);
                        //    newScope.onSfxChartSeriesCancelClick();
                        //}
                        //#endregion


                        newScope.title = "Create Chart";
                        newScope.CreateChartDialog = $rootScope.showDialog(newScope, newScope.title, "Form/views/CreateChart.html", { width: 1000, height: 700 });
                        newScope.setTitle = function (title) {
                            if (newScope.title) {
                                newScope.title = title;
                                newScope.CreateChartDialog.updateTitle(newScope.title);
                            }
                        };
                    }
                }
            }
        }
    };

    //#region Add Calendar Control
    $scope.AddSfxCalendarControl = function (controlVM, isAddScheduler) {
        var selectedField;
        for (var i = 0; i < $scope.lstLoadedEntityTrees.length; i++) {
            if ($scope.lstLoadedEntityTrees[i].IsVisible == true) {

                selectedField = $scope.lstLoadedEntityTrees[i].selectedobjecttreefield;
                break;
            }

        }
        if (selectedField) {
            if (controlVM) {
                //var cellVM = GetVM('sfwColumn', controlVM);
                var cellVM = null;
                var buttonGroup = GetVM("sfwButtonGroup", controlVM);
                if (buttonGroup) {
                    cellVM = buttonGroup;
                } else {
                    cellVM = GetVM("sfwColumn", controlVM);
                }
                if (cellVM) {
                    var newScope = $scope.$new();
                    newScope.ShowNewParameters = false;
                    newScope.ShowOpenParameters = false;

                    newScope.IsAddScheduler = isAddScheduler;
                    var name = "sfwCalendar";
                    if (isAddScheduler) {
                        name = "sfwScheduler";
                    }
                    newScope.objCalendar = {
                        Name: name,
                        prefix: 'swc',
                        Value: '',
                        dictAttributes: {
                        },
                        Elements: [],
                        Children: []
                    };
                    newScope.objCalendar.isNewSelected = false;
                    newScope.objCalendar.NewbuttonID = "";
                    newScope.objCalendar.NewformID = "";

                    newScope.objCalendar.isOpenSelected = false;
                    newScope.objCalendar.OpenbuttonID = "";
                    newScope.objCalendar.OpenformID = "";

                    var DisplayedEntity = getDisplayedEntity($scope.LstDisplayedEntities);
                    var itempath = selectedField.ID;
                    if (DisplayedEntity && DisplayedEntity.strDisplayName != "") {
                        itempath = DisplayedEntity.strDisplayName + "." + selectedField.ID;
                    }
                    strControlID = CreateControlID($scope.FormModel, selectedField.ID, 'sfwCalendar');
                    newScope.objCalendar.dictAttributes.ID = strControlID;
                    newScope.objCalendar.dictAttributes.sfwEntityField = itempath;
                    newScope.FormModel = $scope.FormModel;
                    newScope.ParentEntityName = selectedField.Entity;
                    newScope.SfxMainTable = $scope.SfxMainTable;

                    newScope.title = "Create New Calendar";

                    if (isAddScheduler) {
                        newScope.title = "Create New Scheduler";
                        if (startsWith(strControlID, "cal", 0))
                            strSchedulerID = strControlID.substring(3);
                        //     newScope.lstRelatedDialog = PopulateRelatedDialogList(newScope.SfxMainTable, undefined);

                        if (!newScope.objCalendar.NewbuttonID) {
                            newScope.objCalendar.NewbuttonID = "btnNew" + strSchedulerID;
                        }
                        if (!newScope.objCalendar.OpenbuttonID) {
                            newScope.objCalendar.OpenbuttonID = "btnOpen" + strSchedulerID;
                        }


                    }
                    newScope.onAddButtons = function () {
                        var prefix = "swc";
                        newScope.ialGridButtons = [];
                        if (newScope.objCalendar.isNewSelected && newScope.objCalendar.isNewSelected == 'True') {
                            var newControl = {
                                Name: 'sfwButton', prefix: prefix, Value: '', dictAttributes: {}, Elements: [], Children: []
                            };
                            newControl.dictAttributes.ID = newScope.objCalendar.NewbuttonID;
                            newControl.dictAttributes.sfwMethodName = "btnNew_Click";
                            newControl.dictAttributes.sfwActiveForm = newScope.objCalendar.NewformID;
                            newControl.dictAttributes.sfwRelatedControl = newScope.objCalendar.dictAttributes.ID;
                            newControl.dictAttributes.Text = "New";
                            newControl.dictAttributes.sfwNavigationParameter = GetNavigationParameters(newScope.FormNewParameters);

                            newScope.ialGridButtons.push(newControl);
                        }
                        if (newScope.objCalendar.isOpenSelected && newScope.objCalendar.isOpenSelected == 'True') {
                            var newControl = {
                                Name: 'sfwButton', prefix: prefix, Value: '', dictAttributes: {}, Elements: [], Children: []
                            };
                            newControl.dictAttributes.ID = newScope.objCalendar.OpenbuttonID;
                            newControl.dictAttributes.sfwMethodName = "btnOpen_Click";
                            newControl.dictAttributes.sfwActiveForm = newScope.objCalendar.OpenformID;
                            newControl.dictAttributes.sfwRelatedControl = newScope.objCalendar.dictAttributes.ID;
                            newControl.dictAttributes.Text = "Open";
                            newControl.dictAttributes.sfwNavigationParameter = GetNavigationParameters(newScope.FormOpenParameters);

                            newScope.ialGridButtons.push(newControl);
                        }

                        newScope.ShowNewParameters = false;
                        newScope.ShowOpenParameters = false;

                    };
                    //#region Validate Calendar Control

                    newScope.ValidateCalendar = function () {
                        newScope.ErrorMessageForDisplay = "";
                        if (newScope.objCalendar.dictAttributes.ID == undefined || newScope.objCalendar.dictAttributes.ID == "") {
                            newScope.ErrorMessageForDisplay = "Enter ID.";
                            return true;
                        }
                        else if (newScope.objCalendar.dictAttributes.ID && !isValidIdentifier(newScope.objCalendar.dictAttributes.ID, false, false)) {
                            newScope.ErrorMessageForDisplay = "Invalid ID.";
                            return true;
                        } else {
                            var lstIds = [];
                            CheckforDuplicateID($scope.FormModel, newScope.objCalendar.dictAttributes.ID, lstIds);
                            if (lstIds.length > 0) {
                                newScope.ErrorMessageForDisplay = "Duplicate ID.";
                                return true;
                            }
                        }
                        if (newScope.objCalendar.dictAttributes.sfwEventId == undefined || newScope.objCalendar.dictAttributes.sfwEventId == "") {
                            newScope.ErrorMessageForDisplay = "Enter Event Id.";
                            return true;
                        }
                        if (newScope.objCalendar.dictAttributes.sfwEventName == undefined || newScope.objCalendar.dictAttributes.sfwEventName == "") {
                            newScope.ErrorMessageForDisplay = "Enter Event Name.";
                            return true;
                        }
                        if (newScope.objCalendar.dictAttributes.sfwEventStartDate == undefined || newScope.objCalendar.dictAttributes.sfwEventStartDate == "") {
                            newScope.ErrorMessageForDisplay = "Enter Event Start Date.";
                            return true;
                        }
                        if (newScope.objCalendar.dictAttributes.sfwEventEndDate == undefined || newScope.objCalendar.dictAttributes.sfwEventEndDate == "") {
                            newScope.ErrorMessageForDisplay = "Enter Event End Date.";
                            return true;
                        }
                        //if (isAddScheduler && !newScope.objCalendar.dictAttributes.sfwEventCategory) {
                        //    newScope.ErrorMessageForDisplay = "Enter Event Category.";
                        //    return true;
                        //}
                        //if (isAddScheduler && !newScope.objCalendar.dictAttributes.sfwRelatedDialogPanel) {
                        //    newScope.ErrorMessageForDisplay = "Enter Related Dialog Panel.";
                        //    return true;
                        //}
                        if (newScope.objCalendar.errors && $ValidationService.isEmptyObj(newScope.objCalendar.errors)) {
                            return true;
                        }

                        return false;
                    };

                    //#endregion

                    newScope.onOkClick = function () {
                        newScope.onAddButtons();
                        //var tableVM = GetVM("sfwTable", cellVM);
                        var tableVM = null;
                        if (cellVM.Name == "sfwButtonGroup") {
                            tableVM = cellVM;
                        } else {
                            tableVM = GetVM('sfwTable', cellVM);
                        }
                        if (tableVM && tableVM.Name != "sfwButtonGroup") {
                            var ColCount = GetMaxColCount(tableVM.Elements[0], tableVM);
                            /*adding new and open button */
                            if (newScope.ialGridButtons.length > 0) {
                                var sfxRowModel = {
                                    Name: 'sfwRow', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
                                };
                                sfxRowModel.ParentVM = tableVM;

                                for (ind = 0; ind < ColCount; ind++) {
                                    var sfxCellModel = {
                                        Name: 'sfwColumn', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
                                    };
                                    sfxCellModel.ParentVM = sfxRowModel;
                                    sfxRowModel.Elements.push(sfxCellModel);
                                }

                                var index = 0;

                                function AddInsfxCellModel(btn) {
                                    btn.ParentVM = sfxCellModel;
                                    sfxCellModel.Elements.push(btn);
                                }
                                var sfxCellModel = sfxRowModel.Elements[index];
                                angular.forEach(newScope.ialGridButtons, AddInsfxCellModel);
                                $rootScope.PushItem(sfxRowModel, tableVM.Elements);


                            }

                            var newRowModel = {
                                Name: 'sfwRow', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
                            };
                            newRowModel.ParentVM = tableVM;

                            var newcellModel = {
                                Name: 'sfwColumn', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
                            };
                            newcellModel.ParentVM = newRowModel;


                            newcellModel.Elements.push(newScope.objCalendar);

                            newRowModel.Elements.push(newcellModel);

                            for (ind = 1; ind < ColCount; ind++) {
                                newcellModel = {
                                    Name: 'sfwColumn', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
                                };
                                newcellModel.ParentVM = newRowModel;


                                newRowModel.Elements.push(newcellModel);
                            }

                            $rootScope.PushItem(newRowModel, tableVM.Elements);
                            SetFormSelectedControl($scope.FormModel, newScope.objCalendar, event);
                        }
                        if (tableVM && tableVM.Name == "sfwButtonGroup") {
                            if (newScope.objCalendar) {
                                if (newScope.ialGridButtons.length > 0) {
                                    function AddBtnInCell(btn) {

                                        $rootScope.PushItem(btn, tableVM.Elements);
                                    }
                                    angular.forEach(newScope.ialGridButtons, AddBtnInCell);
                                }

                                $rootScope.PushItem(newScope.objCalendar, tableVM.Elements);
                                SetFormSelectedControl($scope.FormModel, newScope.objCalendar, event);
                            }
                        }
                        newScope.onCancelClick();
                    };

                    newScope.onCancelClick = function () {
                        if (newScope.objCalendar.errors) {
                            newScope.objCalendar.errors = {};
                            $ValidationService.removeObjInToArray($scope.validationErrorList, newScope.objCalendar);
                        }
                        if (newScope.objCalendarDialog) {
                            newScope.objCalendarDialog.close();
                        }
                    };

                    //#region for Expand and Collapse


                    newScope.showParametersForScheduler = function (obj) {

                        newScope.FieldControlCollection = [];
                        if (obj == 'New') {
                            newScope.ShowOpenParameters = false;

                            if (newScope.ShowNewParameters) {
                                newScope.ShowNewParameters = false;
                            }
                            else {
                                newScope.ShowNewParameters = true;
                            }
                        }
                        else if (obj == 'Open') {
                            if (newScope.ShowNewParameters) {
                                newScope.ShowNewParameters = false;
                            }

                            if (newScope.ShowOpenParameters) {
                                newScope.ShowOpenParameters = false;
                            }
                            else {
                                newScope.ShowOpenParameters = true;
                            }
                        }

                        PopulateAvailableControl(newScope.FieldControlCollection, newScope.SfxMainTable, newScope.ShowNewParameters, false);

                        $.connection.hubForm.server.getGlobleParameters().done(function (data) {
                            $scope.$apply(function () {
                                newScope.objGlobleParameters = data;
                                PopulateGlobalParameters(newScope.objGlobleParameters, newScope.FieldControlCollection);
                            });
                        });


                    };

                    newScope.populateParamtersForform = function (formname, formtype) {
                        if (formname) {
                            var filename = formname;
                            if (formtype == "New") {
                                newScope.ShowNewParameters = false;
                            }
                            else if (formtype == "Open") {
                                newScope.ShowOpenParameters = false;
                            }

                            $.connection.hubForm.server.getFormParameters(filename, formtype).done(function (lstparams) {
                                newScope.receiveFormParameters(lstparams, formtype);
                            });
                        }
                    };

                    newScope.receiveFormParameters = function (lstparams, formtype) {
                        if (lstparams) {
                            if (formtype == "New") {
                                newScope.FormNewParameters = lstparams;
                            }
                            else if (formtype == "Open") {
                                newScope.FormOpenParameters = lstparams;
                            }

                        }

                    };

                    newScope.ExpandCollapsedCustomAttrField = function (field, event) {
                        field.IsExpanded = !field.IsExpanded;
                    };


                    newScope.SetFieldClass = function (obj) {
                        if (obj == newScope.SelectedField) {
                            return "selected";
                        }
                    };

                    newScope.SelectFieldClick = function (obj, event) {
                        newScope.SelectedField = obj;
                        if (event) {
                            event.stopPropagation();
                        }
                    };
                    //#endregion


                    newScope.onChangeSchedulerCheckBox = function (formtype) {
                        if (formtype == "New") {
                            newScope.FormNewParameters = [];
                            newScope.objCalendar.NewformID = "";
                            newScope.ShowNewParameters = false;
                        }
                        else if (formtype == "Open") {
                            newScope.FormOpenParameters = [];
                            newScope.objCalendar.OpenformID = "";
                            newScope.ShowOpenParameters = false;
                        }
                    };


                    newScope.objCalendarDialog = $rootScope.showDialog(newScope, newScope.title, "Form/views/AddCalendarControl.html", { width: 700, height: 700 });
                    ComponentsPickers.init();
                }
            }
        }
    };
    //#endregion

    //#region Add Repeater Control 

    $scope.AddSfxRepeaterControl = function (controlVM) {
        var strID = CreateControlID($scope.FormModel, "RepeaterViewPanel", "sfwListView");
        var prefix = "swc";
        /*scope.objRepeaterControl = { Name: "sfwListView", value: '', prefix: prefix, dictAttributes: { ID: strID }, Elements: [], Children: [] };
        scope.ParentEntityName = formodel.dictAttributes.sfwEntity;
        scope.objRepeaterControl.selectedobjecttreefield;
        scope.objRepeaterControl.lstselectedobjecttreefields = [];
        RepeaterControldialog = ngDialog.open({
            template: 'RepeaterControlTemplate',
            scope: scope,
            closeByDocument: false
        });*/
        var selectedField;
        for (var i = 0; i < $scope.lstLoadedEntityTrees.length; i++) {
            if ($scope.lstLoadedEntityTrees[i].IsVisible == true) {

                selectedField = $scope.lstLoadedEntityTrees[i].selectedobjecttreefield;
                break;
            }

        }
        if (selectedField) {

            var objRepeaterControl = { Name: "sfwListView", value: '', prefix: prefix, dictAttributes: { ID: strID }, Elements: [], Children: [] };
            var DisplayedEntity = getDisplayedEntity($scope.LstDisplayedEntities);
            var itempath = selectedField.ID;
            if (DisplayedEntity && DisplayedEntity.strDisplayName != "") {
                itempath = DisplayedEntity.strDisplayName + "." + selectedField.ID;
            }
            strControlID = CreateControlID($scope.FormModel, selectedField.ID, 'sfwListView');
            objRepeaterControl.dictAttributes.ID = strControlID;
            objRepeaterControl.dictAttributes.sfwEntityField = itempath;

            //var cellVM = GetVM('sfwColumn', controlVM);
            var cellVM = null;
            var buttonGroup = GetVM("sfwButtonGroup", controlVM);
            if (buttonGroup) {
                cellVM = buttonGroup;
            } else {
                cellVM = GetVM("sfwColumn", controlVM);
            }
            if (cellVM) {


                //var tableVM = GetVM("sfwTable", controlVM);
                var tableVM = null;
                if (cellVM.Name == "sfwButtonGroup") {
                    tableVM = cellVM;
                } else {
                    tableVM = GetVM('sfwTable', cellVM);
                }
                if (tableVM) {




                    if (objRepeaterControl) {
                        objRepeaterControl.dictAttributes.sfwSelection = "Many";
                        objRepeaterControl.dictAttributes.sfwCaption = "List View";
                        objRepeaterControl.dictAttributes.AllowPaging = "True";
                        objRepeaterControl.dictAttributes.PageSize = "1";


                        var parentenetityname = selectedField.Entity;
                        var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                        objRepeaterControl.dictAttributes.sfwDataKeyNames = GetTableKeyFields(parentenetityname, entityIntellisenseList);

                        var prefix = "swc";

                        var objListTableModel = AddListViewTable($scope.FormModel, objRepeaterControl);

                        objRepeaterControl.Elements.push(objListTableModel);
                        objRepeaterControl.initialvisibilty = true;
                        objRepeaterControl.isLoaded = true;

                        $rootScope.UndRedoBulkOp("Start");

                        if (tableVM.Name == "sfwButtonGroup") {
                            $rootScope.PushItem(objRepeaterControl, tableVM.Elements);
                        } else {
                            var ColCount = GetMaxColCount(tableVM.Elements[0], tableVM);


                            var sfxMainRowModel = {
                                Name: 'sfwRow', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
                            };
                            sfxMainRowModel.ParentVM = tableVM;

                            var sfxCellModel = {
                                Name: 'sfwColumn', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
                            };
                            sfxCellModel.ParentVM = sfxMainRowModel;

                            sfxMainRowModel.Elements.push(sfxCellModel);
                            $rootScope.PushItem(sfxMainRowModel, tableVM.Elements);
                            $rootScope.PushItem(objRepeaterControl, sfxCellModel.Elements);
                            for (ind = 1; ind < ColCount; ind++) {
                                var newcellModel = {
                                    Name: 'sfwColumn', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
                                };
                                newcellModel.ParentVM = sfxMainRowModel;

                                $rootScope.PushItem(newcellModel, sfxMainRowModel.Elements);
                            }
                        }



                        $rootScope.UndRedoBulkOp("End");

                        if ($scope.selectControl) {
                            $scope.selectControl(objRepeaterControl);
                        }
                    }
                }

            }
        }
    };

    //#endregion

    $scope.AddSfxGridviewToGrid = function (controlVM) {
        var selectedField;
        for (var i = 0; i < $scope.lstLoadedEntityTrees.length; i++) {
            if ($scope.lstLoadedEntityTrees[i].IsVisible == true) {

                selectedField = $scope.lstLoadedEntityTrees[i].selectedobjecttreefield;
                break;
            }
        }
        $scope.AddGridControl(selectedField, controlVM);
    };

    $scope.AddGridControl = function (selectedField, controlVM, isAddToExistingCell, isAddGridWithPanel, gridEntityField) {
        if (selectedField) {
            //if (UtilityFunctions.ValidateSfwObjectFieldForGrid(selectedField.BusObjName, selectedField.ItemPath, this.ObjVM.VMMain.ActiveProject))
            {
                if (controlVM) {
                    // var cellVM = GetVM('sfwColumn', controlVM);
                    var cellVM = null;
                    var buttonGroup = GetVM("sfwButtonGroup", controlVM);
                    if (buttonGroup) {
                        cellVM = buttonGroup;
                    } else {
                        cellVM = GetVM("sfwColumn", controlVM);
                    }

                    if (cellVM) {

                        var newScope = $scope.$new();
                        newScope.objGridView = {
                            Name: 'sfwGridView',
                            prefix: 'swc',
                            Value: '',
                            dictAttributes: {
                                //sfwDatasourceType: "EntityCollection",
                            },
                            Elements: [],
                            Children: []
                        };
                        newScope.objGridView.LstDisplayedEntities = [];
                        newScope.objGridView.lstselectedmultiplelevelfield = [];
                        newScope.objGridView.selectedentityobjecttreefields = [];
                        newScope.cellVM = cellVM;
                        newScope.IsAddToExistingCell = isAddToExistingCell;
                        newScope.IsAddGridWithPanel = isAddGridWithPanel;
                        newScope.selectedEntityField = selectedField;
                        newScope.FormModel = $scope.FormModel;
                        newScope.ParentEntityName = selectedField.Entity;
                        newScope.SfxMainTable = $scope.SfxMainTable;
                        newScope.GridEntityField = gridEntityField;
                        newScope.IsGridInsideListView = false;
                        if (controlVM.Name === "sfwListView" || FindParent(controlVM, "sfwListView")) {
                            newScope.objGridView.IsGridInsideListView = true
                        }

                        newScope.title = "Create New Grid";
                        newScope.LstDisplayedEntities = $scope.LstDisplayedEntities;
                        if ($scope.FormModel.dictAttributes.sfwType == "Tooltip") newScope.skipSecondStep = true;
                        if (newScope.FormModel && newScope.FormModel.dictAttributes.ID.startsWith("wfp")) {
                            newScope.IsPrototype = true;
                        }
                        else {
                            newScope.IsPrototype = false;
                        }
                        newScope.objGridDialog = $rootScope.showDialog(newScope, newScope.title, "Form/views/CreateGridViewControl.html", {
                            width: 1000, height: 700
                        });
                        newScope.setTitle = function (title) {
                            if (newScope.title) {
                                newScope.title = title;
                                newScope.objGridDialog.updateTitle(newScope.title);
                            }
                        };
                    }
                }
            }
        }
    };

    $scope.GetSfxControlVM = function () {
        var controlVM = $scope.GetSelectedControl();

        if (controlVM) {
            if (controlVM && (controlVM.Name == "sfwDialogPanel" || controlVM.Name == "sfwPanel") && controlVM.IsMainPanel) {
                var panelVM = controlVM;

                if (null != panelVM.TableVM && panelVM.TableVM.Elements.length > 0) {
                    var sfxRow = panelVM.TableVM.Elements[panelVM.TableVM.Elements.length - 1];
                    if (null != sfxRow && sfxRow.Elements.length > 0) {

                        if ($scope.FormModel.IsLookupCriteriaEnabled) {
                            var tabsVM = $scope.GetTabsVM(panelVM.TableVM);
                            if (tabsVM) {
                                controlVM = $scope.GetDefaultControlVM(tabsVM);
                            }
                            else {
                                if (sfxRow.Elements[0].Name == "sfwColumn") {
                                    controlVM = sfxRow.Elements[0];
                                }
                            }
                        }
                        else {
                            if (sfxRow.Elements[0].Name == "sfwColumn") {
                                controlVM = sfxRow.Elements[0];
                            }
                        }
                    }
                    else {
                        controlVM = undefined;
                    }
                }
                else {
                    controlVM = undefined;
                }
            }
            else if (controlVM.Name == "sfwWizardStep" || controlVM.Name == "HeaderTemplate") {
                var wizardItems = controlVM;
                if (wizardItems.TableVM && wizardItems.TableVM.Elements.length > 0) {
                    var sfxRow = wizardItems.TableVM.Elements[wizardItems.TableVM.Elements.length - 1];
                    if (sfxRow && sfxRow.Elements.length > 0) {
                        if (sfxRow.Elements[0].Name == "sfwColumn") {
                            controlVM = sfxRow.Elements[0];
                        }

                    }
                    else {
                        controlVM = null;
                    }
                }
                else {
                    controlVM = null;
                }
            }
            else if (controlVM.Name == "sfwTabSheet" || controlVM.Name === "sfwListView") {
                var tabsheetVM = controlVM;
                var TableVM = tabsheetVM.Elements[0];
                if (null != TableVM) {
                    var sfxRow = TableVM.Elements[TableVM.Elements.length - 1];
                    if (null != sfxRow && sfxRow.Elements.length > 0) {
                        controlVM = sfxRow.Elements[0].Name == "sfwColumn" ? sfxRow.Elements[0] : null;

                    }
                    else {
                        controlVM = null;
                    }
                }
            }
            else if (controlVM.Name == "sfwTable") { //added this code while selecting table in usercontrol and clicking collection from Object Tree , it was not getting added.
                var tableVM = controlVM;
                if (null != tableVM) {
                    var sfxRow = tableVM.Elements[tableVM.Elements.length - 1];
                    if (null != sfxRow && sfxRow.Elements.length > 0) {
                        controlVM = sfxRow.Elements[0].Name == "sfwColumn" ? sfxRow.Elements[0] : null;

                    }
                    else {
                        controlVM = null;
                    }
                }
            }
            //commented by neha because when we drop in adv criteria it was failing
            //else if (controlVM.Name == "sfwColumn") {
            //    var panelVM = GetVM('sfwPanel', controlVM);
            //    if (!panelVM) {
            //        panelVM = GetVM('sfwDialogPanel', controlVM);

            //    }
            //    if (panelVM) {
            //        if (panelVM.IsMainPanel && $scope.FormModel.IsLookupCriteriaEnabled) {
            //            if (panelVM.TableVM) {
            //                var tabsVM = $scope.GetTabsVM(panelVM.TableVM);

            //                var sfxRow = panelVM.TableVM.Elements[panelVM.TableVM.Elements.length - 1];

            //                if (tabsVM) {
            //                    controlVM = $scope.GetDefaultControlVM(tabsVM);
            //                }
            //                else {
            //                    if (sfxRow && sfxRow.Elements && sfxRow.Elements.length > 0 && sfxRow.Elements[0].Name == "sfwColumn")
            //                        controlVM = sfxRow.Elements[0];
            //                }
            //            }
            //        }
            //    }

            //}
            else if (controlVM.Name == "TemplateField" && controlVM.Elements.length > 0) {
                if (controlVM.Elements[0].Name == "ItemTemplate")
                    controlVM = controlVM.Elements[0];
            }
            else if (controlVM.Name == "sfwWizard") {
                if ($scope.CurrPanel && $scope.CurrPanel.Name == "sfwWizardStep") {
                    controlVM = $scope.CurrPanel;
                    var wizardItems = controlVM;
                    if (wizardItems.TableVM && wizardItems.TableVM.Elements.length > 0) {
                        var sfxRow = wizardItems.TableVM.Elements[wizardItems.TableVM.Elements.length - 1];
                        if (sfxRow && sfxRow.Elements.length > 0) {
                            if (sfxRow.Elements[0].Name == "sfwColumn") {
                                controlVM = sfxRow.Elements[0];
                            }
                        }
                        else {
                            controlVM = null;
                        }
                    }
                    else {
                        controlVM = null;
                    }
                }
            }
            else if (controlVM.Name == "sfwButtonGroup") {

            }
            else if (controlVM.ParentVM && controlVM.ParentVM.Name == "ItemTemplate") {
                controlVM = controlVM.ParentVM;
            }
        }

        return controlVM;
    };

    $scope.GetDefaultControlVM = function (tabsVM) {
        var retVM;
        if (tabsVM.SelectedTabSheet) {
            for (i = 0; i < tabsVM.SelectedTabSheet.Elements.length; i++) {
                if (tabsVM.SelectedTabSheet.Elements[i].Name == "sfwTable") {
                    var TableVM = tabsVM.SelectedTabSheet.Elements[i];
                    if (TableVM) {
                        var sfxRow = TableVM.Elements[TableVM.Elements.length - 1];
                        if (sfxRow && sfxRow.Elements.length > 0) {
                            if (sfxRow.Elements[0].Name == "sfwColumn") {
                                retVM = sfxRow.Elements[0];
                            }
                        }
                    }


                    break;
                }
            }
        }



        return retVM;
    };

    $scope.GetTabsVM = function (TableVM) {
        var tabsVM;
        if (TableVM) {
            var sfxCellVM = TableVM.Elements[0].Elements[0];
            if (sfxCellVM.Elements.length > 0 && sfxCellVM.Elements[0].Name == "sfwTabContainer") {
                var tabContainerVM = sfxCellVM.Elements[0];
                if (tabContainerVM.Elements.length > 0 && tabContainerVM.Elements[0].Name == "Tabs") {
                    tabsVM = tabContainerVM.Elements[0];
                }
            }
        }
        return tabsVM;
    };

    $scope.GetSelectedControl = function () {
        var retVal;

        retVal = $scope.FormModel.SelectedControl;
        //if (this.SelectedControls.Count > 0)
        //{
        //    retVal = this.SelectedControls[0];
        //}

        return retVal;
    };


    //#endregion

    //#region User Control Details 
    $scope.onUserControlDetailsClick = function () {
        var newScope = $scope.$new();
        newScope.objExtraFields = [];
        newScope.objDirFunctions = {
        };
        newScope.showExtraFieldsTab = false;
        newScope.SelectedNewMethod = undefined;
        newScope.formName = "Form";
        var entityname = $scope.FormModel.dictAttributes.sfwEntity;
        newScope.Init = function () {
            if ($scope.InitialLoad) {
                newScope.InitialLoad = {};
                angular.copy($scope.InitialLoad, newScope.InitialLoad);
            }
            else {
                newScope.InitialLoad = { Name: 'initialload', Value: '', dictAttributes: {}, Elements: [], Children: [] };
            }



            newScope.FormModel = { dictAttributes: {} };
            angular.forEach($scope.FormModel.dictAttributes, function (val, key) {
                newScope.FormModel.dictAttributes[key] = val;
            });

            //#region Call Init Method
            newScope.InitialLoadSectionForDetail();
            //newScope.Init();

            if ($scope.FormModel.errors) {
                newScope.FormModel.errors = {
                };
                newScope.FormModel.errors = $scope.FormModel.errors;
                $ValidationService.removeObjInToArray($scope.validationErrorList, $scope.FormModel);
                if ($ValidationService.isEmptyObj($scope.FormModel.errors)) {
                    $scope.validationErrorList.push(newScope.FormModel);
                }
            }

            if ($scope.FormModel.dictAttributes.sfwType == "Tooltip") {
                newScope.PopulateXmlMethodForTooltip(entityname);
                if (!newScope.SelectedNewMethod) {
                    newScope.SelectedNewMethod = { Name: 'callmethods', Value: '', dictAttributes: {}, Elements: [] };
                    newScope.InitialLoad.Elements.push(newScope.SelectedNewMethod);
                }
                if (newScope.SelectedNewMethod) {
                    newScope.populateXmlMethodParamtersForTooltip(newScope.SelectedNewMethod.dictAttributes.sfwMethodName);
                }

            }
        }

        newScope.InitialLoadSectionForDetail = function () {
            function iteration(objcustommethod) {
                if (objcustommethod.Name == "callmethods") {
                    newScope.SelectedNewMethod = objcustommethod;
                }
            }
            if (newScope.InitialLoad) {
                angular.forEach(newScope.InitialLoad.Elements, iteration);
            }
        };

        newScope.ErrorMessageForDisplay = "";
        newScope.validateUCDetails = function () {
            if (!$scope.FormModel.dictAttributes.sfwEntity) {
                newScope.ErrorMessageForDisplay = "Entity Should be required";
                return false;
            }

            if (newScope.objDirFunctions.getExtraFieldData) {
                newScope.objExtraFields = newScope.objDirFunctions.getExtraFieldData(); // getting extra field data from extraFieldDirective
            }

            var extraValueFlag = validateExtraFields(newScope);
            if (extraValueFlag) {
                newScope.ErrorMessageForDisplay = newScope.FormDetailsErrorMessage;
                return false;
            }
            newScope.ErrorMessageForDisplay = "";
            return true;
        };
        newScope.updateEntityTree = function (entityID) {
            $scope.entityTreeName = entityID;
        };
        newScope.openEntityClick = function (aEntityID) {
            if (aEntityID && aEntityID != "") {
                if ($scope.FormModel && $scope.FormModel.dictAttributes && $scope.FormModel.dictAttributes.hasOwnProperty("sfwEntity")) {
                    $ValidationService.validateEntity($scope.FormModel, $scope.validationErrorList);
                }
                if ($scope.FormModel.errors && !$scope.FormModel.errors.invalid_entity) {
                    newScope.userControlOkClick();
                    $NavigateToFileService.NavigateToFile(aEntityID, "", "");
                }

            }
        };
        newScope.selectXmlMethodClick = function (aXmlMethodID) {
            if (aXmlMethodID && aXmlMethodID != "" && aXmlMethodID != "NewObject") {
                newScope.userControlOkClick();
                $NavigateToFileService.NavigateToFile($scope.FormModel.dictAttributes.sfwEntity, "methods", aXmlMethodID);
            }
        };


        newScope.PopulateXmlMethodForTooltip = function (entityID) {
            newScope.XmlMethodsCollectionForTooltip = [];
            newScope.entityTreeName = entityID;

            newScope.XmlMethodsCollectionForTooltip.push({ ID: '' });
            newScope.XmlMethodsCollectionForTooltip.push({ ID: 'NewObject' });
            var entityIntellisenseList = $EntityIntellisenseFactory.getXmlMethods(entityID, true);

            function getXmlmethods(item) {
                if (item.MethodType == "Load") {
                    newScope.XmlMethodsCollectionForTooltip.push(item);
                }
            }

            if (entityIntellisenseList && entityIntellisenseList.length > 0) {
                angular.forEach(entityIntellisenseList, getXmlmethods);
            }

            //function getMethods(method) {
            //    angular.forEach(method.XmlMethods, getXmlmethods);
            //}
            //if (entityID) {
            //    var lst = [];
            //    var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
            //    var parentEntityID = entityID;

            //    while (parentEntityID) {
            //        lst = entityIntellisenseList.filter(function (x) { return x.ID == parentEntityID; });
            //        if (lst && lst.length > 0) {
            //            parentEntityID = lst[0].ParentId;
            //        }
            //        else {
            //            parentEntityID = '';
            //        }
            //    }

            //    if (lst && lst.length > 0) {

            //        angular.forEach(lst, getMethods);
            //    }
            //}
        };
        newScope.populateXmlMethodParamtersForTooltip = function (xmlMethod) {
            newScope.paramtersForXmlMethodforTooltip = [];
            function iterator(itm) {
                newScope.paramtersForXmlMethodforTooltip.push(itm);
            }
            if (xmlMethod) {
                var lst = newScope.XmlMethodsCollectionForTooltip.filter(function (x) { return x.ID == xmlMethod; });
                if (lst && lst.length > 0) {

                    angular.forEach(lst[0].Parameters, iterator);
                }
            }
        };


        newScope.userControlOkClick = function () {

            if (newScope.validateUCDetails()) {
                $rootScope.UndRedoBulkOp("Start");

                if (newScope.objDirFunctions.prepareExtraFieldData) {
                    newScope.objDirFunctions.prepareExtraFieldData();// calling extraFieldDirective function for getting extra field data
                }

                if (entityname && entityname != newScope.FormModel.dictAttributes.sfwEntity) {
                    for (var i = 0; i < $scope.lstLoadedEntityTrees.length; i++) {
                        if ($scope.lstLoadedEntityTrees[i].EntityName == entityname) {
                            $scope.lstLoadedEntityTrees[i].EntityName = $scope.FormModel.dictAttributes.sfwEntity;
                            break;
                        }
                    }
                    newScope.updateEntityTree(newScope.FormModel.dictAttributes.sfwEntity);

                    //If previous entity name was 'entPrototype' then remove all 'Data' nodes from all 'sfwGridView' controls.
                    if (entityname === "entPrototype") {
                        var allGridViews = getDescendents($scope.FormModel, "sfwGridView");
                        for (var i = 0, gridCount = allGridViews.length; i < gridCount; i++) {
                            for (var j = 0, gridElementCount = allGridViews[i].Elements.length; j < gridElementCount; j++) {
                                if (allGridViews[i].Elements[j].Name.toLowerCase() === "data") {
                                    $rootScope.DeleteItem(allGridViews[i].Elements[j], allGridViews[i].Elements);
                                    $rootScope.EditPropertyValue(allGridViews[i].prototypemodel, allGridViews[i], "prototypemodel", null);
                                    break;
                                }
                            }
                        }
                    }
                }


                if (newScope.FormModel.dictAttributes.sfwType == "Tooltip") {

                    if (newScope.objDirFunctions.prepareExtraFieldData) {
                        newScope.objDirFunctions.prepareExtraFieldData();// calling extraFieldDirective function for getting extra field data
                    }

                    angular.forEach(newScope.FormModel.dictAttributes, function (val, key) {
                        $rootScope.EditPropertyValue($scope.FormModel.dictAttributes[key], $scope.FormModel.dictAttributes, key, val);
                        // $scope.FormModel.dictAttributes[key] = val;
                    });

                    $scope.FormModel.errors = {};
                    if (newScope.FormModel.errors) {
                        $scope.FormModel.errors = newScope.FormModel.errors;
                        $ValidationService.removeObjInToArray($scope.validationErrorList, newScope.FormModel);
                        if ($ValidationService.isEmptyObj(newScope.FormModel.errors)) {
                            $scope.validationErrorList.push($scope.FormModel);
                        }
                    }

                    if (newScope.SelectedNewMethod && (newScope.SelectedNewMethod.dictAttributes.sfwMethodName == undefined || newScope.SelectedNewMethod.dictAttributes.sfwMethodName == "")) {
                        var NewMethodIndex = newScope.InitialLoad.Elements.indexOf(newScope.SelectedNewMethod);
                        if (NewMethodIndex > -1) {
                            newScope.InitialLoad.Elements.splice(NewMethodIndex, 1);
                            newScope.SelectedNewMethod = undefined;
                        }
                    }
                    if (!newScope.SelectedNewMethod) {
                        newScope.InitialLoad = undefined;
                    }

                    if (newScope.InitialLoad && !$scope.FormModel.Elements.some(function (x) { return x.Name == "initialload"; })) {
                        $rootScope.InsertItem(newScope.InitialLoad, $scope.FormModel.Elements, 0);
                    }
                    else if (newScope.InitialLoad && $scope.FormModel.Elements.some(function (x) { return x.Name == "initialload"; })) {
                        for (var i = 0; i < $scope.FormModel.Elements.length; i++) {
                            if ($scope.FormModel.Elements[i].Name == "initialload") {
                                $rootScope.DeleteItem($scope.FormModel.Elements[i], $scope.FormModel.Elements);
                                $rootScope.InsertItem(newScope.InitialLoad, $scope.FormModel.Elements, i);
                                break;
                            }
                        }
                    }
                    else if (!newScope.InitialLoad) {
                        for (var i = 0; i < $scope.FormModel.Elements.length; i++) {
                            if ($scope.FormModel.Elements[i].Name == "initialload") {
                                $rootScope.DeleteItem($scope.FormModel.Elements[i], $scope.FormModel.Elements);
                                //$scope.FormModel.Elements.splice(i, 1);
                                break;
                            }
                        }
                    }

                    $rootScope.EditPropertyValue($scope.InitialLoad, $scope, "InitialLoad", newScope.InitialLoad);
                }
                else {

                    if (newScope.objDirFunctions.prepareExtraFieldData) {
                        newScope.objDirFunctions.prepareExtraFieldData();// calling extraFieldDirective function for getting extra field data
                    }

                    angular.forEach(newScope.FormModel.dictAttributes, function (val, key) {
                        $rootScope.EditPropertyValue($scope.FormModel.dictAttributes[key], $scope.FormModel.dictAttributes, key, val);
                        // $scope.FormModel.dictAttributes[key] = val;
                    });

                    $scope.FormModel.errors = {};
                    if (newScope.FormModel.errors) {
                        $scope.FormModel.errors = newScope.FormModel.errors;
                        $ValidationService.removeObjInToArray($scope.validationErrorList, newScope.FormModel);
                        if ($ValidationService.isEmptyObj(newScope.FormModel.errors)) {
                            $scope.validationErrorList.push($scope.FormModel);
                        }
                    }

                }

                $rootScope.UndRedoBulkOp("End");
            }

            newScope.dialogObj.close();
        };

        newScope.dialogObj = $rootScope.showDialog(newScope, "Details", "Form/views/userControlDetails.html", { width: 550, height: 555 });

        newScope.Init();
    };
    //#endregion

    //#region Form Details Method
    $scope.onDetailClick = function () {
        $rootScope.IsLoading = true;

        var newScope = $scope.$new(true);
        newScope.MainQuery = undefined;
        newScope.objExtraFields = [];
        newScope.objFormExtraFields = $scope.objFormExtraFields;
        newScope.objDirFunctions = {
        };
        newScope.showExtraFieldsTab = false;
        newScope.formName = "Form";
        newScope.FormModel = {};
        newScope.remoteObject = null;
        if ($scope.InitialLoad) {
            newScope.InitialLoad = {};
            angular.copy($scope.InitialLoad, newScope.InitialLoad);
        }
        else {
            newScope.InitialLoad = { Name: 'initialload', Value: '', dictAttributes: {}, Elements: [], Children: [] };
        }

        newScope.InitialLoadSectionForDetail = function () {
            newScope.$evalAsync(function () {
                newScope.SubQueryCollection = { Elements: [] };
                function iteration(objcustommethod) {
                    if (objcustommethod.Name == "callmethods") {
                        if (!objcustommethod.dictAttributes.sfwMode) {
                            newScope.SelectedNewMethod = objcustommethod;
                            newScope.SelectedUpdateMethod = "";
                            newScope.FormModel.IsSameAsNew = true;
                        }
                        if (objcustommethod.dictAttributes.sfwMode == 'New' || objcustommethod.dictAttributes.sfwMode == 'All') {
                            newScope.SelectedNewMethod = objcustommethod;
                        }
                        if (objcustommethod.dictAttributes.sfwMode == 'Update' || objcustommethod.dictAttributes.sfwMode == 'All') {
                            newScope.SelectedUpdateMethod = objcustommethod;
                        }
                    }
                    else if (objcustommethod.Name == "query") {
                        var strQuery = objcustommethod.dictAttributes.sfwQueryRef;
                        if ($scope.IsSubQuery(strQuery)) {

                            newScope.SubQueryCollection.Elements.push(objcustommethod);
                            newScope.SelectedSubQuery = objcustommethod;
                        }

                        else if (!newScope.MainQuery) {
                            newScope.MainQuery = objcustommethod;
                        }
                        else {
                            newScope.SubQueryCollection.Elements.push(objcustommethod);
                        }
                    }
                    else if (objcustommethod.Name == "session") {
                        newScope.SessionFields = objcustommethod;
                        newScope.SessionFields.lstselectedobjecttreefields = [];
                        newScope.SessionFields.LstDisplayedEntities = [];
                    }
                }
                if (newScope.InitialLoad) {
                    angular.forEach(newScope.InitialLoad.Elements, iteration);
                }
                if ($scope.FormModel.dictAttributes.sfwType == "Maintenance") {
                    if (newScope.InitialLoad) {
                        if (newScope.SessionFields == undefined) {
                            newScope.SessionFields = {
                                Name: 'session', Value: '', dictAttributes: {}, Elements: [], Children: []
                            };
                            newScope.SessionFields.lstselectedobjecttreefields = [];
                            newScope.SessionFields.LstDisplayedEntities = [];
                        }
                    }
                }
            });
        };

        newScope.FormModel = { dictAttributes: {} };
        angular.forEach($scope.FormModel.dictAttributes, function (val, key) {
            newScope.FormModel.dictAttributes[key] = val;
        });

        if ($scope.FormModel.errors) {
            newScope.FormModel.errors = {};
            newScope.FormModel.errors = $scope.FormModel.errors;
            $ValidationService.removeObjInToArray($scope.validationErrorList, $scope.FormModel);
            if ($ValidationService.isEmptyObj($scope.FormModel.errors)) {
                $scope.validationErrorList.push(newScope.FormModel);
            }
        }
        newScope.FormModel.RemoteObjectCollection = [];
        if ($scope.FormModel.RemoteObjectCollection) {
            angular.copy($scope.FormModel.RemoteObjectCollection, newScope.FormModel.RemoteObjectCollection);
        }
        newScope.$evalAsync(function () {
            newScope.IsPrototypeDetails = false;
        });

        if ($scope.FormModel.dictAttributes.ID.startsWith("wfp")) {
            newScope.$evalAsync(function () {
                newScope.IsPrototypeDetails = true;
            });
        }
        var entityname = $scope.FormModel.dictAttributes.sfwEntity;
        $.connection.hubMain.server.getFormExtraData(entityname).done(function (extradata) {
            newScope.$evalAsync(function () {
                newScope.FormModel.objExtraData = extradata;
                newScope.populateXmlMethods(newScope.MethodType);
                newScope.Init();
            });
        });


        newScope.populateXmlMethods = function (aMethodType) {
            newScope.XmlNewMethodsCollection = [];
            newScope.XmlUpdateMethodsCollection = [];
            if (aMethodType != 'SrvMethod') {
                newScope.paramtersForNewMethod = [];
                newScope.paramtersForUpdateMethod = [];
            }
            if (newScope.FormModel.objExtraData) {
                var dummyObj = {
                    Name: '', Value: '', dictAttributes: { ID: "" }, Elements: [], Children: []
                };
                if (newScope.FormModel.objExtraData.lstMethodsList) {
                    var methodsModel = newScope.FormModel.objExtraData.lstMethodsList.filter(function (x) {
                        return x.Name.toLowerCase() == "methods";
                    });
                    newScope.XmlUpdateMethodsCollection.push(dummyObj);
                    newScope.XmlNewMethodsCollection.push(dummyObj);
                    var dummyObj = {
                        Name: '', Value: '', dictAttributes: { ID: "NewObject" }, Elements: [], Children: []
                    };
                    newScope.XmlNewMethodsCollection.push(dummyObj);
                    if (methodsModel && methodsModel.length > 0) {
                        for (var i = 0; i < methodsModel.length; i++) {
                            for (j = 0; j < methodsModel[i].Elements.length; j++) {
                                var item = methodsModel[i].Elements[j];
                                if (item.Name == "method") {
                                    if (item.dictAttributes.sfwMode == 'New' || item.dictAttributes.sfwMode == 'All') {
                                        newScope.XmlNewMethodsCollection.push(item);
                                    }
                                    if (item.dictAttributes.sfwMode == 'Update' || item.dictAttributes.sfwMode == 'All') {
                                        newScope.XmlUpdateMethodsCollection.push(item);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };

        if ($scope.FormModel.dictAttributes.sfwType != "Lookup") {
            newScope.populateXmlMethods();
        }
        newScope.RemoteObjectCollection = [];
        newScope.IsEntityTabSelected = false;
        newScope.IsGroupTabSelected = false;
        newScope.IsSessionTabSelected = false;
        newScope.SrvMethodCollection = [];
        newScope.lstWebsite = [];
        var objNewDialog;
        var temObj = ConfigurationFactory.getLastProjectDetails();
        if (temObj && temObj != null) {
            var tempWbsite = ConfigurationFactory.getLastProjectDetails().Website;
            if (tempWbsite && tempWbsite != null && tempWbsite.contains(";")) {
                newScope.lstWebsite = ConfigurationFactory.getLastProjectDetails().Website.split(";");
            }
            else {
                newScope.lstWebsite.push(ConfigurationFactory.getLastProjectDetails().Website);
            }
            newScope.lstWebsite.splice(0, 0, "");
        }
        newScope.Init = function () {
            newScope.IsSameAsNewDisabled = true;
            var controlNames = $scope.lstControl.filter(function (ctrl) { return ctrl.attributetype && ctrl.attributetype === "value"; }).map(function (itm) { return itm.method; });
            var formcontrols = getDescendents($scope.FormModel);
            newScope.valueTypeFormControls = formcontrols.filter(function (ctrl) { return controlNames.indexOf(ctrl.Name) > -1 && ctrl.dictAttributes.ID && ctrl.dictAttributes.sfwIsCaption !== "True"; }).map(function (itm) { return itm.dictAttributes.ID; });

            $scope.PopulateRemoteObjects();

            //#region for loading message description while opening detail popup
            if (newScope.FormModel.dictAttributes.sfwNewMessageID) {
                newScope.populateMessageForNewMessage(newScope.FormModel.dictAttributes.sfwNewMessageID);
            }

            if (newScope.FormModel.dictAttributes.sfwOpenMessageID) {
                newScope.populateMessageForOpenMessage(newScope.FormModel.dictAttributes.sfwOpenMessageID);
            }
            //#endregion
            newScope.MethodType = "XmlMethod";
            if (newScope.FormModel.dictAttributes.sfwRemoteObject) {
                newScope.MethodType = "SrvMethod";
                newScope.remoteObject = newScope.FormModel.dictAttributes.sfwRemoteObject;
                $.connection.hubForm.server.getRemoteObjectList().done(function (data) {
                    newScope.$evalAsync(function () {
                        if (data) {
                            newScope.FormModel.RemoteObjectCollection = data;
                            if (newScope.FormModel.RemoteObjectCollection && newScope.FormModel.RemoteObjectCollection.length > 0) {
                                newScope.FormModel.RemoteObjectCollection.splice(0, 0, {
                                    dictAttributes: {
                                        ID: ""
                                    }
                                });
                            }
                            newScope.PopulateRemoteObject();
                        }
                    });
                });
                //newScope.PopulateRemoteObject();
            }
            else {
                if (newScope.SelectedNewMethod) {
                    newScope.populateParamtersForNew(newScope.SelectedNewMethod);
                } else {
                    newScope.SelectedNewMethod = { Name: 'callmethods', Value: '', dictAttributes: { sfwMode: "New" }, Elements: [] };
                }
                if (newScope.SelectedUpdateMethod) {
                    newScope.populateParamtersForUpdate(newScope.SelectedUpdateMethod);
                } else {
                    newScope.SelectedUpdateMethod = { Name: 'callmethods', Value: '', dictAttributes: { sfwMode: "Update" }, Elements: [] };
                }
            }

            newScope.lstButtons = [];
            if (newScope.FormModel.objExtraData && newScope.FormModel.objExtraData.lstRulesList) {
                newScope.lstLogRules = newScope.FormModel.objExtraData.lstRulesList;
                newScope.lstLogRules.splice(0, 0, { dictAttributes: { ID: '' } });
            }

            if ($scope.SfxMainTable && $scope.SfxMainTable.Elements) {
                FindControlListByName($scope.SfxMainTable, "sfwButton", newScope.lstButtons);
            }
            if ($scope.FormModel.dictAttributes.sfwType == "Lookup") {
                if (!newScope.MainQuery) {
                    newScope.MainQuery = { Name: 'query', Value: '', dictAttributes: {}, Elements: [] };
                    newScope.InitialLoad.Elements.push(newScope.MainQuery);
                }
                //else {
                //    newScope.MainQuery = {};
                //    angular.copy($scope.MainQuery, newScope.MainQuery);
                //}
            }

            //validate session fileds 
            if (newScope.SessionFields) {
                angular.forEach(newScope.SessionFields.Elements, function (field) {
                    newScope.validateSeesionID(field);
                });
                newScope.valiidateSessionField();
            }
            if (newScope.SubQueryCollection && newScope.SubQueryCollection.Elements.length > 0) {
                newScope.validateQueryID();
            }
            $rootScope.IsLoading = false;
            objNewDialog = $rootScope.showDialog(newScope, "Form Details", "Form/views/FormDetails.html", { width: 700, height: 700 });
        };

        //#region Method type methods
        newScope.PopulateRemoteObject = function () {
            newScope.RemoteObjectCollection = newScope.FormModel.RemoteObjectCollection;
            if (newScope.RemoteObjectCollection && newScope.RemoteObjectCollection.length > 0) {
                if (newScope.RemoteObjectCollection[0].dictAttributes.ID != "") {
                    newScope.RemoteObjectCollection.splice(0, 0, { dictAttributes: { ID: "" } });
                }
                newScope.onRemoteObjectChange();
            }
            if (newScope.FormModel && newScope.FormModel.dictAttributes && newScope.FormModel.dictAttributes.sfwType != "Lookup") {
                if (newScope.SelectedNewMethod) {
                    newScope.populateSrvParamtersForNew(newScope.SelectedNewMethod);
                } else {
                    newScope.SelectedNewMethod = { Name: 'callmethods', Value: '', dictAttributes: { sfwMode: "New" }, Elements: [] };
                }
                if (newScope.SelectedUpdateMethod) {
                    newScope.populateSrvParamtersForUpdate(newScope.SelectedUpdateMethod);
                } else {
                    newScope.SelectedUpdateMethod = { Name: 'callmethods', Value: '', dictAttributes: { sfwMode: "Update" }, Elements: [] };
                }
            }
        };

        //newScope.receiveRemoteObjectCollection = function (data) {
        //    newScope.$evalAsync(function () {
        //        newScope.RemoteObjectCollection = data;
        //        newScope.RemoteObjectCollection.splice(0, 0, { dictAttributes: { ID: "" } });
        //        newScope.onRemoteObjectChange();
        //        if ($scope.SelectedNewMethod) {
        //            newScope.populateSrvParamtersForNew($scope.SelectedNewMethod.dictAttributes.sfwMethodName);
        //        }
        //        if ($scope.SelectedUpdateMethod) {
        //            newScope.populateSrvParamtersForUpdate($scope.SelectedUpdateMethod.dictAttributes.sfwMethodName);
        //        }
        //    });
        //}

        newScope.onRemoteObjectChange = function () {
            newScope.isReset = true;
            newScope.SrvMethodCollection = [];  /*Bug 8836:In Lookup Form Details Popup- On Selecting 'Blank' in Remote Object - Load Methods List Should not be Displayed.*/
            if (newScope.FormModel.dictAttributes.sfwRemoteObject != undefined && newScope.FormModel.dictAttributes.sfwRemoteObject != "") {
                if (newScope.remoteObject != newScope.FormModel.dictAttributes.sfwRemoteObject) {
                    if (newScope.SelectedNewMethod) {
                        newScope.SelectedNewMethod.dictAttributes.sfwMethodName = "";
                    }
                    if (newScope.SelectedUpdateMethod) {
                        newScope.SelectedUpdateMethod.dictAttributes.sfwMethodName = "";
                    }
                    newScope.paramtersForNewMethod = [];
                    newScope.paramtersForUpdateMethod = [];
                }
                var lst = newScope.RemoteObjectCollection.filter(function (itm) {
                    return itm.dictAttributes.ID == newScope.FormModel.dictAttributes.sfwRemoteObject;
                });
                if (lst && lst.length > 0) {
                    newScope.SrvMethodCollection = lst[0].Elements;
                    newScope.SrvNewMethodCollection = lst[0].Elements.filter(function (itm) { return itm.dictAttributes.sfwMode == "New" || itm.dictAttributes.sfwMode == "All"; });
                    newScope.SrvUpdateMethodCollection = lst[0].Elements.filter(function (itm) { return itm.dictAttributes.sfwMode == "Update" || itm.dictAttributes.sfwMode == "All"; });
                    newScope.SrvMethodCollection.splice(0, 0, { dictAttributes: { ID: '' } });
                }

            }
            else {
                newScope.SrvNewMethodCollection = [];
                newScope.SrvUpdateMethodCollection = [];
            }
        };

        newScope.onMethodTypeChange = function (aMethodType) {
            newScope.MethodType = aMethodType;
            newScope.PopulateRemoteObject();
            if (newScope.MainQuery && newScope.MainQuery.dictAttributes) {
                newScope.MainQuery.dictAttributes.sfwMethodName = "";
            }
            if (newScope.SelectedNewMethod) {
                newScope.SelectedNewMethod.dictAttributes.sfwMethodName = "";
            }
            if (newScope.SelectedUpdateMethod) {
                newScope.SelectedUpdateMethod.dictAttributes.sfwMethodName = "";
            }

            newScope.FormModel.dictAttributes.sfwRemoteObject = "";

            newScope.FormModel.dictAttributes.sfwGridCollection = "";


            newScope.paramtersForNewMethod = [];


            newScope.paramtersForUpdateMethod = [];


            newScope.SrvMethodCollection = [];


            newScope.SrvNewMethodCollection = [];


            newScope.SrvUpdateMethodCollection = [];

        };
        newScope.selectXmlMethodClick = function (aXmlMethodID) {
            if (aXmlMethodID && aXmlMethodID != "" && aXmlMethodID != "NewObject") {
                //objNewDialog.close();
                newScope.OkClick();
                $NavigateToFileService.NavigateToFile(newScope.FormModel.dictAttributes.sfwEntity, "methods", aXmlMethodID);
            }
        };

        //#endregion

        //#region Main Query Methods
        newScope.openMainQueryDialog = function () {
            var newQueryScope = newScope.$new();
            newQueryScope.strSelectedQuery = newScope.MainQuery.dictAttributes.sfwQueryRef;

            newQueryScope.QueryDialog = $rootScope.showDialog(newQueryScope, "Browse For Query", "Form/views/BrowseForQuery.html", { width: 1000, height: 700 });

            newQueryScope.$on('onQueryClick', function (event, data) {
                if (!$scope.IsSubQuery(data)) {
                    if (data.contains('.')) {
                        newScope.MainQuery.dictAttributes.ID = data.split('.')[0];
                    }

                    newScope.MainQuery.dictAttributes.sfwQueryRef = data;
                }
                if (event) {
                    event.stopPropagation();
                }
            });

        };

        newScope.onMainQueryChange = function (data) {
            newScope.updateMainQueryChange();
            if (!$scope.IsSubQuery(data)) {
                if (!newScope.MainQuery) {
                    newScope.MainQuery = {
                        Name: 'query', Value: '', dictAttributes: {}, Elements: []
                    };
                    newScope.InitialLoad.Elements.push(newScope.MainQuery);
                }
                if (data && data.contains('.')) {
                    if (!newScope.MainQuery.dictAttributes.ID) {
                        newScope.MainQuery.dictAttributes.ID = data.split('.')[0];
                        newScope.MainQueryIDChange(newScope.MainQuery);
                    }
                }
                else if (!data) {
                    newScope.MainQuery.dictAttributes.ID = "";
                    newScope.MainQueryIDChange(newScope.MainQuery);
                }
            }

        };
        newScope.MainQueryIDChange = function (aobjMainQuery) {
            if (newScope.InitialLoad && newScope.InitialLoad.Elements) {
                for (var i = 0; i < newScope.InitialLoad.Elements.length; i++) {
                    if (newScope.InitialLoad.Elements[i].dictAttributes && newScope.InitialLoad.Elements[i].dictAttributes.sfwQueryRef == aobjMainQuery.dictAttributes.sfwQueryRef) {
                        newScope.InitialLoad.Elements[i].dictAttributes.ID = aobjMainQuery.dictAttributes.ID;
                    }
                }
            }
        };
        newScope.updateMainQueryChange = function () {
            if (newScope.InitialLoad && newScope.InitialLoad.Elements) {
                for (var i = 0; i < newScope.InitialLoad.Elements.length; i++) {
                    if (newScope.InitialLoad.Elements[i].dictAttributes && newScope.InitialLoad.Elements[i].dictAttributes.ID == newScope.MainQuery.dictAttributes.ID) {
                        newScope.InitialLoad.Elements[i].dictAttributes.sfwQueryRef = newScope.MainQuery.dictAttributes.sfwQueryRef;
                    }
                }
            }
        };

        newScope.onSubQueryClick = function (obj) {
            if (obj) {
                newScope.SelectedSubQuery = obj;
            }
        };
        //#endregion

        //#region Group functionality Implemented
        newScope.getGroupList = function (event) {
            var input = $(event.target);
            var lstGroupList = [];
            lstGroupList = createGroupList();
            if (lstGroupList.length > 0 && lstGroupList[0].Elements.length > 0) {
                var data = lstGroupList[0].Elements;
                if (event.ctrlKey && event.keyCode == $.ui.keyCode.SPACE) {
                    if ($(input).data('ui-autocomplete')) {
                        $(input).autocomplete("search", $(input).val());
                    }
                    event.preventDefault();
                }
                else {
                    setSingleLevelAutoComplete(input, data, newScope, "ID");
                }
            }
            else {
                if (event.ctrlKey && event.keyCode == $.ui.keyCode.SPACE) {
                    event.preventDefault();
                }
            }
        };

        newScope.showGroupList = function (event) {
            var inputElement = $(event.target).prevAll("input[type='text']");
            var lstGroupList = [];

            lstGroupList = createGroupList();
            if (lstGroupList.length > 0 && lstGroupList[0].Elements.length > 0) {
                var data = lstGroupList[0].Elements;
                inputElement.focus();

                setSingleLevelAutoComplete(inputElement, data, newScope, "ID");
                if ($(inputElement).data('ui-autocomplete')) $(inputElement).autocomplete("search", $(inputElement).val());
            }
            else {
                setSingleLevelAutoComplete(inputElement, [], newScope, "ID");
            }


            if (event) {
                event.stopPropagation();
            }
        };

        newScope.validdateGroupList = function (property) {
            if (property) {
                var lstGroupList = createGroupList();
                var list = [];
                if (lstGroupList && lstGroupList.length > 0) {
                    angular.forEach(lstGroupList[0].Elements, function (obj) {
                        if (obj.dictAttributes && obj.dictAttributes.ID) {
                            list.push(obj.dictAttributes.ID);
                        }
                    });
                }
                var inputVal = newScope.FormModel.dictAttributes && newScope.FormModel.dictAttributes[property] ? newScope.FormModel.dictAttributes[property] : "";
                $ValidationService.checkValidListValue(list, newScope.FormModel, inputVal, property, property, CONST.VALIDATION.INVALID_GROUP, $scope.validationErrorList);
            }
        };
        var createGroupList = function () {
            if (newScope.FormModel.objExtraData) {

                var lstGroupList = newScope.FormModel.objExtraData.lstGroupsList;

                if (lstGroupList && lstGroupList.length > 0) {
                    return lstGroupList;
                } else {
                    lstGroupList = [];
                    return lstGroupList;
                }
            }
        };
        newScope.selectGroupClick = function (aGroupID, property) {
            if (property) {
                newScope.validdateGroupList(property);
            }

            if ((newScope.FormModel.errors && !newScope.FormModel.errors[property])) {
                if (aGroupID && aGroupID != " ") {
                    objNewDialog.close();
                    $NavigateToFileService.NavigateToFile(newScope.FormModel.dictAttributes.sfwEntity, "groupslist", aGroupID);
                }
            }
        };
        //#endregion

        //#region for changing MessageID for New message ID
        newScope.populateMessageForNewMessage = function (messageID) {

            var messageIDFound = false;
            if (messageID && messageID.trim().length > 0) {
                var messages = $scope.lstMessages.filter(function (x) {
                    return x.MessageID == messageID;
                });
                if (messages && messages.length > 0) {
                    $scope.newDisplayMessage = messages[0].DisplayMessage;

                    if (messages[0].SeverityValue == 'I') {
                        $scope.newSeverityValue = "Information";
                    }
                    else if (messages[0].SeverityValue == 'E') {
                        $scope.newSeverityValue = "Error";
                    }
                    else if (messages[0].SeverityValue == 'W') {
                        $scope.newSeverityValue = "Warnings";
                    }

                    messageIDFound = true;

                }
            }

            if (!messageIDFound) {
                $scope.newDisplayMessage = "";
                $scope.newSeverityValue = "";
            }
        };
        //#endregion

        //#region for changing MessageID for Open Message ID
        newScope.populateMessageForOpenMessage = function (messageID) {

            var messageIDFound = false;
            if (messageID && messageID.trim().length > 0) {
                var messages = $scope.lstMessages.filter(function (x) {
                    return x.MessageID == messageID;
                });
                if (messages && messages.length > 0) {
                    $scope.openDisplayMessage = messages[0].DisplayMessage;

                    if (messages[0].SeverityValue == 'I') {
                        $scope.openSeverityValue = "Information";
                    }
                    else if (messages[0].SeverityValue == 'E') {
                        $scope.openSeverityValue = "Error";
                    }
                    else if (messages[0].SeverityValue == 'W') {
                        $scope.openSeverityValue = "Warnings";
                    }

                    messageIDFound = true;

                }
            }

            if (!messageIDFound) {
                $scope.openDisplayMessage = "";
                $scope.openSeverityValue = "";
            }
        };
        //#endregion

        //#region InitialLoad for CallMethods(Maintenance Entity Tab)

        //#region Populate Xml Methods while changing the Entity Name
        newScope.populateXmlMethodsForEntityChange = function (entityName) {
            newScope.isReset = true;
            var entity = entityName;
            newScope.XmlNewMethodsCollection = [];
            newScope.XmlUpdateMethodsCollection = [];
            newScope.lstLogRules = [];
            newScope.FormModel.objExtraData = {
            };
            if (newScope.MethodType == "XmlMethod") {
                if (newScope.SelectedNewMethod && newScope.SelectedNewMethod.dictAttributes.sfwMethodName) {
                    newScope.SelectedNewMethod.dictAttributes.sfwMethodName = "";
                }
                if (newScope.SelectedUpdateMethod && newScope.SelectedUpdateMethod.dictAttributes.sfwMethodName) {
                    newScope.SelectedUpdateMethod.dictAttributes.sfwMethodName = "";
                }
                newScope.paramtersForUpdateMethod = [];
                newScope.paramtersForNewMethod = [];
            }
            var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
            var lst = entityIntellisenseList.filter(function (x) { return x.ID == entityName; });
            //$scope.entityTreeName = entityName;
            if (lst && lst.length > 0) {
                $.connection.hubMain.server.getFormExtraData(entity).done(function (extradata) {
                    newScope.FormModel.objExtraData = extradata;
                    newScope.populateXmlMethods(newScope.MethodType);
                    newScope.lstLogRules = newScope.FormModel.objExtraData.lstRulesList;
                    newScope.lstLogRules.splice(0, 0, { dictAttributes: { ID: '' } });
                });
            }
            //  createRuledata(); // when entity change rule data list also update

            //if ($scope.SessionFields) {
            //    $rootScope.EditPropertyValue($scope.SessionFields.Elements, $scope.SessionFields, "Elements", []);
            //}

            // when entity change validate seesion field present in current entity
            if (newScope.SessionFields) {
                newScope.valiidateSessionField();
            }
        };
        //#endregion

        //#region Load Parameters for New Method
        newScope.populateParamtersForNew = function (xmlMethod) {
            newScope.paramtersForNewMethod = [];
            if (!newScope.SelectedNewMethod) {
                newScope.SelectedNewMethod = {
                    Name: "callmethods", Value: '', Elements: [], dictAttributes: { sfwMethodName: xmlMethod.dictAttributes.sfwMethodName }
                };
            }
            if (newScope.InitialLoad.Elements.indexOf(newScope.SelectedNewMethod) <= -1) {
                newScope.InitialLoad.Elements.push(newScope.SelectedNewMethod);
            }
            function iAddparamtersForNewMethod(itm) {
                if (itm.Name == "parameter") {
                    newScope.paramtersForNewMethod.push(itm);
                }
            }
            if (xmlMethod.dictAttributes.sfwMethodName && newScope.XmlNewMethodsCollection) {

                var lst = newScope.XmlNewMethodsCollection.filter(function (x) {
                    return x.dictAttributes.ID == xmlMethod.dictAttributes.sfwMethodName && x.dictAttributes.sfwMode != "Update";
                });
                if (lst && lst.length > 0) {

                    angular.forEach(lst[0].Elements, iAddparamtersForNewMethod);

                }
            }

            if (newScope.XmlUpdateMethodsCollection) {
                var lst = newScope.XmlUpdateMethodsCollection.filter(function (x) {
                    return xmlMethod.dictAttributes.sfwMethodName && x.dictAttributes.ID == xmlMethod.dictAttributes.sfwMethodName && x.dictAttributes.sfwMode != "New";
                });
                if (lst && lst.length > 0) {
                    newScope.IsSameAsNewDisabled = false;
                }
                else {
                    newScope.IsSameAsNewDisabled = true;
                    newScope.FormModel.IsSameAsNew = false;
                }
            }

            if (!newScope.FormModel.IsSameAsNew && newScope.SelectedNewMethod) {
                newScope.SelectedNewMethod.dictAttributes.sfwMode = "New";
            }
        };

        newScope.populateSrvParamtersForNew = function (srvMethod) {
            if (!newScope.SelectedNewMethod) {
                newScope.SelectedNewMethod = {
                    Name: "callmethods", Value: '', Elements: [], dictAttributes: { sfwMethodName: srvMethod.dictAttributes.sfwMethodName }
                };
            }
            if (newScope.InitialLoad.Elements.indexOf(newScope.SelectedNewMethod) <= -1) {
                newScope.InitialLoad.Elements.push(newScope.SelectedNewMethod);
            }
            newScope.paramtersForNewMethod = [];
            function iAddparamtersForNewMethod(itm) {
                if (itm.Name == "parameter") {
                    newScope.paramtersForNewMethod.push(itm);
                }
            }

            if (srvMethod.dictAttributes.sfwMethodName && newScope.SrvNewMethodCollection) {

                var lst = newScope.SrvNewMethodCollection.filter(function (x) {
                    return x.dictAttributes.ID == srvMethod.dictAttributes.sfwMethodName && x.dictAttributes.sfwMode != "Update";
                });
                if (lst && lst.length > 0) {

                    angular.forEach(lst[0].Elements, iAddparamtersForNewMethod);

                }
            }
            if (newScope.SrvUpdateMethodCollection) {
                var lst = newScope.SrvUpdateMethodCollection.filter(function (x) { return x.dictAttributes.ID == srvMethod.dictAttributes.sfwMethodName && x.dictAttributes.sfwMode != "New"; });
                if (lst && lst.length > 0) {
                    newScope.IsSameAsNewDisabled = false;
                }
                else {
                    newScope.IsSameAsNewDisabled = true;
                    newScope.FormModel.IsSameAsNew = false;
                }
            }
            if (!newScope.FormModel.IsSameAsNew && newScope.SelectedNewMethod) {
                newScope.SelectedNewMethod.dictAttributes.sfwMode = "New";
            }
        };
        //#endregion

        //#region Load Parameters for Update Method
        newScope.populateParamtersForUpdate = function (xmlMethod) {
            newScope.paramtersForUpdateMethod = [];
            if (!newScope.SelectedUpdateMethod) {
                newScope.SelectedUpdateMethod = {
                    Name: "callmethods", Value: '', Elements: [], dictAttributes: { sfwMethodName: xmlMethod.dictAttributes.sfwMethodName, sfwMode: "Update" }
                };
            }
            if (newScope.InitialLoad.Elements.indexOf(newScope.SelectedUpdateMethod) <= -1) {
                newScope.InitialLoad.Elements.push(newScope.SelectedUpdateMethod);
            }
            xmlMethod.dictAttributes.sfwMode = "Update";
            newScope.paramtersForUpdateMethod = [];
            function iAddparamtersForUpdateMethod(itm) {
                if (itm.Name == "parameter") {
                    newScope.paramtersForUpdateMethod.push(itm);
                }
            }
            if (xmlMethod.dictAttributes.sfwMethodName && newScope.XmlUpdateMethodsCollection) {

                var lst = newScope.XmlUpdateMethodsCollection.filter(function (x) {
                    return x.dictAttributes.ID == xmlMethod.dictAttributes.sfwMethodName && x.dictAttributes.sfwMode != "New";
                });
                if (lst && lst.length > 0) {

                    angular.forEach(lst[0].Elements, iAddparamtersForUpdateMethod);

                }
            }
        };
        newScope.populateSrvParamtersForUpdate = function (srvMethod) {
            if (!newScope.SelectedUpdateMethod) {
                newScope.SelectedUpdateMethod = {
                    Name: "callmethods", Value: '', Elements: [], dictAttributes: { sfwMethodName: srvMethod.dictAttributes.sfwMethodName, sfwMode: "Update" }
                };
            }
            if (newScope.InitialLoad.Elements.indexOf(newScope.SelectedUpdateMethod) <= -1) {
                newScope.InitialLoad.Elements.push(newScope.SelectedUpdateMethod);
            }
            srvMethod.dictAttributes.sfwMode = "Update";
            newScope.paramtersForUpdateMethod = [];
            function iparamtersForUpdateMethod(itm) {
                if (itm.Name == "parameter") {
                    newScope.paramtersForUpdateMethod.push(itm);
                }
            }
            if (srvMethod.dictAttributes.sfwMethodName && newScope.SrvUpdateMethodCollection) {

                var lst = newScope.SrvUpdateMethodCollection.filter(function (x) {
                    return x.dictAttributes.ID == srvMethod.dictAttributes.sfwMethodName && x.dictAttributes.sfwMode != "New";
                });
                if (lst && lst.length > 0) {

                    angular.forEach(lst[0].Elements, iparamtersForUpdateMethod);

                }
            }
        };
        //#endregion

        //#endregion

        //#region SubQuery Dialog

        newScope.openSubQueryDialog = function () {
            var newQueryScope = $scope.$new();
            newQueryScope.subQueryType = "SubSelectQuery";

            newQueryScope.QueryDialog = $rootScope.showDialog(newQueryScope, "Browse For Query", "Form/views/BrowseForQuery.html", { width: 1000, height: 700 });


            newQueryScope.$on('onQueryClick', function (event, data) {

                var objSubQuery = {
                    Name: 'query', Value: '', dictAttributes: {}, Elements: [], Children: []
                };


                if (data.contains('.')) {
                    var lstQuery = newScope.InitialLoad.Elements.filter(function (itm) { return itm.dictAttributes.ID && itm.dictAttributes.ID.contains(data.split('.')[0]); });
                    if (lstQuery && lstQuery.length > 0) {
                        objSubQuery.dictAttributes.ID = GetInitialLoadQueryID(data.split('.')[0], newScope.InitialLoad.Elements, 1);
                    }
                    else {
                        objSubQuery.dictAttributes.ID = GetInitialLoadQueryID(data.split('.')[0], newScope.SubQueryCollection.Elements, 1);
                    }
                }
                objSubQuery.dictAttributes.sfwQueryRef = data;
                if (newScope.InitialLoad) {
                    newScope.InitialLoad.Elements.push(objSubQuery);
                    newScope.SubQueryCollection.Elements.push(objSubQuery);

                    newScope.SelectedSubQuery = objSubQuery;
                }
                if (event) {
                    event.stopPropagation();
                }
            });

        };

        newScope.onChangeSubQuery = function (QueryID) {
            if (newScope.SelectedSubQuery) {
                if (QueryID && QueryID.contains('.')) {
                    var strQueryId = newScope.GetQueryId(QueryID.split('.')[0]);
                    newScope.SelectedSubQuery.dictAttributes.ID = strQueryId;
                }
            }
        };

        newScope.GetQueryId = function (QueryId) {
            var iItemNum = 0;
            var strItemKey = QueryId;

            var strItemName = strItemKey;
            if (newScope.InitialLoad) {
                var newTemp = newScope.InitialLoad.Elements.filter(function (x) {
                    return x.dictAttributes.ID == strItemName;
                });

                while (newTemp && newTemp.length > 0) {
                    iItemNum++;
                    strItemName = strItemKey + iItemNum;
                    newTemp = newScope.InitialLoad.Elements.filter(function (x) {
                        return x.dictAttributes.ID == strItemName;
                    });
                }
            }
            return strItemName;
        };

        //#endregion

        //#region Edit Query
        newScope.openEditQueryDialog = function () {
            var newQueryScope = newScope.$new();
            if (newScope.SelectedSubQuery) {
                newQueryScope.strSelectedQuery = newScope.SelectedSubQuery.dictAttributes.sfwQueryRef;
                newQueryScope.subQueryType = "SubSelectQuery";
                newQueryScope.QueryDialog = $rootScope.showDialog(newQueryScope, "Browse For Query", "Form/views/BrowseForQuery.html", { width: 1000, height: 700 });

                newQueryScope.$on('onQueryClick', function (event, data) {
                    if (data.contains('.')) {
                        newScope.SelectedSubQuery.dictAttributes.ID = data.split('.')[0];
                    }
                    newScope.SelectedSubQuery.dictAttributes.sfwQueryRef = data;
                });
                if (event) {
                    event.stopPropagation();
                }
            }
        };
        //#endregion

        //#region delete Subquery Item
        newScope.deleteSelectedSubQuery = function () {
            if (newScope.SelectedSubQuery) {
                var Fieldindex = -1;
                if (newScope.SelectedSubQuery) {
                    Fieldindex = newScope.SubQueryCollection.Elements.indexOf(newScope.SelectedSubQuery);
                }
                newScope.SubQueryCollection.Elements.splice(Fieldindex, 1);


                var index = -1;
                if (newScope.SelectedSubQuery) {
                    index = newScope.InitialLoad.Elements.indexOf(newScope.SelectedSubQuery);
                }
                if (index > -1) {
                    newScope.InitialLoad.Elements.splice(index, 1);
                }
                newScope.SelectedSubQuery = undefined;

                if (Fieldindex < newScope.SubQueryCollection.Elements.length) {

                    newScope.SelectedSubQuery = newScope.SubQueryCollection.Elements[Fieldindex];
                }
                else if (newScope.SubQueryCollection.Elements.length > 0) {
                    newScope.SelectedSubQuery = newScope.SubQueryCollection.Elements[Fieldindex - 1];
                }
            }
        };

        // disable if there is no element for SFW row
        newScope.canDelete = function () {
            if (newScope.SelectedSubQuery) {
                return true;
            }
            else {
                return false;
            }
        };
        //#endregion

        //#region Move up for Subquery
        newScope.moveUpClick = function () {
            if (newScope.SelectedSubQuery) {
                var index = newScope.SubQueryCollection.Elements.indexOf(newScope.SelectedSubQuery);
                var item = newScope.SubQueryCollection.Elements[index - 1];
                newScope.SubQueryCollection.Elements[index - 1] = newScope.SelectedSubQuery;
                newScope.SubQueryCollection.Elements[index] = item;
                $scope.scrollBySelectedField(".manage-subquery-scroll", ".selected", { offsetTop: 480, offsetLeft: 0 });
            }
        };

        // disable the move up button if there is no element to move up
        newScope.canmoveUp = function () {
            newScope.Flag = true;
            if (newScope.SelectedSubQuery != undefined) {
                for (var i = 0; i < newScope.SubQueryCollection.Elements.length; i++) {
                    if (newScope.SubQueryCollection.Elements[i] == newScope.SelectedSubQuery) {
                        if (i > 0) {
                            newScope.Flag = false;
                        }
                    }
                }
            }

            return newScope.Flag;
        };

        //#endregion

        //#region Move down for Sub query    

        newScope.moveDownClick = function () {
            if (newScope.SelectedSubQuery) {
                var index = newScope.SubQueryCollection.Elements.indexOf(newScope.SelectedSubQuery);
                var item = newScope.SubQueryCollection.Elements[index + 1];
                newScope.SubQueryCollection.Elements[index + 1] = newScope.SelectedSubQuery;
                newScope.SubQueryCollection.Elements[index] = item;
                $scope.scrollBySelectedField(".manage-subquery-scroll", ".selected", { offsetTop: 480, offsetLeft: 0 });
            }
        };


        // disable move down when there is no element to move down
        newScope.canMoveDown = function () {
            newScope.Flag = true;
            if (newScope.SelectedSubQuery != undefined) {
                for (var i = 0; i < newScope.SubQueryCollection.Elements.length; i++) {
                    if (newScope.SubQueryCollection.Elements[i] == newScope.SelectedSubQuery) {
                        if (i < newScope.SubQueryCollection.Elements.length - 1) {
                            newScope.Flag = false;
                        }
                    }
                }

            }

            return newScope.Flag;
        };
        //#endregion

        //#region Default Button functionality 
        newScope.getButtonList = function (event) {
            if (newScope.lstButtons && newScope.lstButtons.length > 0) {
                if (!newScope.inputElement) {
                    newScope.inputElement = $(event.target);
                }

                if (event.ctrlKey && event.keyCode == $.ui.keyCode.SPACE) {
                    setSingleLevelAutoComplete($(newScope.inputElement), newScope.lstButtons, newScope, "ID");
                    if ($(newScope.inputElement).data('ui-autocomplete')) $(newScope.inputElement).autocomplete("search", $(newScope.inputElement).val());
                    event.preventDefault();
                }
                setSingleLevelAutoComplete($(newScope.inputElement), newScope.lstButtons, newScope, "ID");
            }
        };

        newScope.showButtonList = function (event) {
            if (!newScope.inputElement) {
                newScope.inputElement = $(event.target).prevAll("input[type='text']");
            }
            newScope.inputElement.focus();
            if (newScope.inputElement) {
                setSingleLevelAutoComplete(newScope.inputElement, newScope.lstButtons, newScope, "ID");
                if ($(newScope.inputElement).data('ui-autocomplete')) $(newScope.inputElement).autocomplete("search", $(newScope.inputElement).val());
            }
            if (event) {
                event.stopPropagation();
            }
        };

        newScope.validateButtonName = function () {
            var list = [];
            if (newScope.lstButtons) {
                angular.forEach(newScope.lstButtons, function (btnObj) {
                    if (btnObj.dictAttributes && btnObj.dictAttributes.ID) {
                        list.push(btnObj.dictAttributes.ID);
                    }
                });
            }
            $ValidationService.checkValidListValue(list, newScope.FormModel, $(newScope.inputElement).val(), "sfwDefaultButtonID", "sfwDefaultButtonID", CONST.VALIDATION.BUTTON_NOT_EXISTS, $scope.validationErrorList);
        };
        //#endregion

        //#region Session Mathods
        //#region adding session fields and object fields

        newScope.CheckAndAddSessionFields = function () {
            if (newScope.InitialLoad) {
                if (!newScope.InitialLoad.Elements.some(function (itm) { return itm.Name == "session"; })) {
                    newScope.InitialLoad.Elements.push(newScope.SessionFields);
                }
            }
        };

        newScope.addSessionFields = function () {
            function iAddSessionFields(item) {
                var DisplayedEntity = getDisplayedEntity(newScope.SessionFields.LstDisplayedEntities);
                var itempath = item.ID;
                if (DisplayedEntity && DisplayedEntity.strDisplayName != "") {
                    itempath = DisplayedEntity.strDisplayName + "." + item.ID;
                }
                if (item.IsSelected.toLowerCase() == "true") {
                    if (!newScope.SessionFields.Elements.some(function (x) { return x.dictAttributes.ID == item.ID; })) {
                        var strField = itempath;// GetItemPathForEntityObject(item);
                        var objField = {
                            Name: 'field', Value: '', dictAttributes: {
                                ID: item.ID, sfwEntityField: strField
                            }, Elements: []
                        };
                        newScope.SessionFields.Elements.push(objField);
                    }
                    item.IsRecordSelected = false;
                }
            }
            newScope.CheckAndAddSessionFields();
            var lst = [];
            lst = GetSelectedFieldList(newScope.SessionFields.lstselectedobjecttreefields, lst);//GetSelectedFieldList($scope.SessionFields.lstEntity[0].Attributes, lst);
            if (lst && lst.length > 0) {

                angular.forEach(lst, iAddSessionFields);
            }
            if (newScope.SessionFields.lstselectedobjecttreefields && newScope.SessionFields.lstselectedobjecttreefields.length > 0) {
                ClearSelectedFieldList(newScope.SessionFields.lstselectedobjecttreefields);
            }
        };

        //#endregion

        //#region click on selected sessionfield row
        newScope.selectedSessionFieldClick = function (obj) {
            if (obj) {
                newScope.selectedCurrentSessionRow = obj;
            }
        };

        //#endregion

        //#region Delete for  Session Fields

        // delete selected column details
        newScope.deleteSelectedRow = function () {
            var Fieldindex = -1;
            if (newScope.selectedCurrentSessionRow) {
                Fieldindex = newScope.SessionFields.Elements.indexOf(newScope.selectedCurrentSessionRow);
            }
            newScope.SessionFields.Elements.splice(Fieldindex, 1);
            $ValidationService.removeObjInToArray($scope.validationErrorList, newScope.SessionFields);
            newScope.selectedCurrentSessionRow = undefined;

            if (Fieldindex < newScope.SessionFields.Elements.length) {

                newScope.selectedCurrentSessionRow = newScope.SessionFields.Elements[Fieldindex];
            }
            else if (newScope.SessionFields.Elements.length > 0) {
                newScope.selectedCurrentSessionRow = newScope.SessionFields.Elements[Fieldindex - 1];
            }

        };

        // disable if there is no element for SFW row
        newScope.canDeleteRow = function () {
            if (newScope.selectedCurrentSessionRow) {
                return true;
            }
            else {
                return false;
            }
        };
        //#endregion


        //#region  Move up for session Fields
        // Move up functionality for Row from Record Layout
        newScope.moveSelectedRowUp = function () {
            if (newScope.selectedCurrentSessionRow) {
                var index = newScope.SessionFields.Elements.indexOf(newScope.selectedCurrentSessionRow);
                var index = newScope.SessionFields.Elements.indexOf(newScope.selectedCurrentSessionRow);
                var item = newScope.SessionFields.Elements[index - 1];
                newScope.SessionFields.Elements[index - 1] = newScope.selectedCurrentSessionRow;
                newScope.SessionFields.Elements[index] = item;
                $scope.scrollBySelectedField(".details-session-panel-body", ".selected", { offsetTop: 300, offsetLeft: 0 });
            }
        };

        // disable the move up button if there is no element to move up
        newScope.canmoveSelectedRowUp = function () {
            var Flag = true;
            if (newScope.selectedCurrentSessionRow != undefined) {
                for (var i = 0; i < newScope.SessionFields.Elements.length; i++) {
                    if (newScope.SessionFields.Elements[i] == newScope.selectedCurrentSessionRow) {
                        if (i > 0) {
                            Flag = false;
                        }
                    }
                }

            }

            return Flag;
        };
        //#endregion


        //#region Move down for session fields
        // Move Down function for Row from Record Layout

        newScope.moveSelectedRowDown = function () {
            if (newScope.selectedCurrentSessionRow) {
                var index = newScope.SessionFields.Elements.indexOf(newScope.selectedCurrentSessionRow);
                var index = newScope.SessionFields.Elements.indexOf(newScope.selectedCurrentSessionRow);
                var item = newScope.SessionFields.Elements[index + 1];
                newScope.SessionFields.Elements[index + 1] = newScope.selectedCurrentSessionRow;
                newScope.SessionFields.Elements[index] = item;
                $scope.scrollBySelectedField(".details-session-panel-body", ".selected", { offsetTop: 300, offsetLeft: 0 });
            }
        };


        // disable move down when there is no element to move down
        newScope.canmoveSelectedRowDown = function () {
            var Flag = true;
            if (newScope.selectedCurrentSessionRow != undefined) {
                for (var i = 0; i < newScope.SessionFields.Elements.length; i++) {
                    if (newScope.SessionFields.Elements[i] == newScope.selectedCurrentSessionRow) {
                        if (i < newScope.SessionFields.Elements.length - 1) {
                            Flag = false;
                        }
                    }
                }

            }

            return Flag;
        };

        //#endregion

        //#endregion

        //#region Call Init Method
        newScope.InitialLoadSectionForDetail();
        //newScope.Init();

        //#endregion

        //#region Select Tab
        newScope.OnSelectDetailTab = function (tabName) {
            newScope.selectedDetailTab = tabName;
            if (tabName == 'Entity') {
                if (!newScope.IsEntityTabSelected) {
                    newScope.IsEntityTabSelected = true;
                }
            }
            if (tabName == 'Group') {
                if (!newScope.IsGroupTabSelected) {
                    newScope.IsGroupTabSelected = true;
                }
            }
            if (tabName == 'Session') {
                if (!newScope.IsSessionTabSelected) {
                    newScope.IsSessionTabSelected = true;
                }
            }
            if (tabName == 'ExtraFields') {
                if (!newScope.IsExtraFieldTabSelected) {
                    newScope.IsExtraFieldTabSelected = true;
                }
            }
        };
        //#endregion

        //#region Ok click
        newScope.OkClick = function () {
            objNewDialog.close();


            if (entityname != newScope.FormModel.dictAttributes.sfwEntity) {
                $scope.entityTreeName = newScope.FormModel.dictAttributes.sfwEntity;
                for (var i = 0; i < $scope.lstLoadedEntityTrees.length; i++) {
                    if ($scope.lstLoadedEntityTrees[i].EntityName == entityname) {
                        $scope.lstLoadedEntityTrees[i].EntityName = newScope.FormModel.dictAttributes.sfwEntity;
                        break;
                    }
                }
            }

            $rootScope.UndRedoBulkOp("Start");
            if (newScope.objDirFunctions.prepareExtraFieldData) {
                newScope.objDirFunctions.prepareExtraFieldData();// calling extraFieldDirective function for getting extra field data
            }
            angular.forEach(newScope.FormModel.dictAttributes, function (val, key) {
                $rootScope.EditPropertyValue($scope.FormModel.dictAttributes[key], $scope.FormModel.dictAttributes, key, val);
                // $scope.FormModel.dictAttributes[key] = val;
            });
            // for updating entitytree - when selected control is inside 
            $scope.selectControl($scope.FormModel.SelectedControl);
            $scope.FormModel.errors = {};
            if (newScope.FormModel.errors) {
                $scope.FormModel.errors = newScope.FormModel.errors;
                $ValidationService.removeObjInToArray($scope.validationErrorList, newScope.FormModel);
                if ($ValidationService.isEmptyObj(newScope.FormModel.errors)) {
                    $scope.validationErrorList.push($scope.FormModel);
                }
            }

            if (newScope.MainQuery && $scope.MainQuery && newScope.MainQuery.dictAttributes.ID != $scope.MainQuery.dictAttributes.ID) {
                var objCriteriaPanel = GetCriteriaPanel($scope.FormModel);
                $scope.setNewQueryIdForLookupControl(objCriteriaPanel, $scope.MainQuery.dictAttributes.ID, newScope.MainQuery.dictAttributes.ID, true);
            }

            newScope.removeObjectFromErrorList();

            if ($scope.FormModel.dictAttributes.sfwType == "Lookup") {
                if (newScope.MainQuery && !newScope.MainQuery.dictAttributes.sfwQueryRef) {
                    newScope.MainQuery = undefined;
                    newScope.InitialLoad = undefined;
                    $rootScope.EditPropertyValue($scope.MainQuery, $scope, "MainQuery", undefined);
                    $rootScope.EditPropertyValue($scope.SelectedQuery, $scope, "SelectedQuery", undefined);
                }

                if (newScope.MainQuery && newScope.SubQueryCollection.Elements && $scope.SubQueryCollection && $scope.MainQuery) {
                    var objCriteriaPanel = GetCriteriaPanel($scope.FormModel);
                    angular.forEach($scope.SubQueryCollection, function (itemOld) {
                        var IsSubQueryIDChanged = false;
                        var IsSubQueryDeleted = true;
                        var newQueryID = "";
                        if (newScope.SubQueryCollection && newScope.SubQueryCollection.Elements.length > 0) {
                            angular.forEach(newScope.SubQueryCollection.Elements, function (item) {
                                if (itemOld.dictAttributes.ID != item.dictAttributes.ID && itemOld.dictAttributes.sfwQueryRef == item.dictAttributes.sfwQueryRef) {
                                    IsSubQueryIDChanged = true;
                                    newQueryID = item.dictAttributes.ID;
                                    IsSubQueryDeleted = false;
                                }
                                if (itemOld.dictAttributes.ID == item.dictAttributes.ID) {
                                    IsSubQueryDeleted = false;
                                }
                            });
                        }
                        else {
                            IsSubQueryIDChanged = true;
                        }
                        if (IsSubQueryIDChanged) {
                            $scope.setNewQueryIdForLookupControl(objCriteriaPanel, itemOld.dictAttributes.ID, newQueryID);
                        }
                        if (IsSubQueryDeleted) {
                            $scope.setNewQueryIdForLookupControl(objCriteriaPanel, itemOld.dictAttributes.ID, "");
                        }
                    });

                }
                else if ($scope.SubQueryCollection) {
                    var objCriteriaPanel = GetCriteriaPanel($scope.FormModel);
                    angular.forEach($scope.SubQueryCollection, function (item) {
                        if (item.dictAttributes && item.dictAttributes.ID) {
                            $scope.setNewQueryIdForLookupControl(objCriteriaPanel, item.dictAttributes.ID, "");
                        }
                    });
                }
                else if (!newScope.MainQuery && $scope.MainQuery && $scope.MainQuery.dictAttributes && $scope.MainQuery.dictAttributes.ID) {
                    var objCriteriaPanel = GetCriteriaPanel($scope.FormModel);
                    $scope.setNewQueryIdForLookupControl(objCriteriaPanel, $scope.MainQuery.dictAttributes.ID, newScope.MainQuery.dictAttributes.ID, true);
                }
                if (newScope.MainQuery && newScope.InitialLoad) {
                    for (var i = 0; i < newScope.InitialLoad.Elements.length; i++) {
                        if (newScope.InitialLoad.Elements[i].dictAttributes.sfwQueryRef == newScope.MainQuery.dictAttributes.sfwQueryRef) {
                            newScope.InitialLoad.Elements[i] = newScope.MainQuery;
                            break;
                        }
                    }
                    if ($scope.FormModel.Elements.some(function (x) { return x.Name == "initialload"; })) {
                        for (var i = 0; i < $scope.FormModel.Elements.length; i++) {
                            if ($scope.FormModel.Elements[i].Name == "initialload") {
                                $rootScope.DeleteItem($scope.FormModel.Elements[i], $scope.FormModel.Elements);
                                $rootScope.InsertItem(newScope.InitialLoad, $scope.FormModel.Elements, i);
                                $scope.FormModel.Elements[i] = newScope.InitialLoad;
                                break;
                            }
                        }
                    }
                    else if (newScope.InitialLoad && !$scope.FormModel.Elements.some(function (x) { return x.Name == "initialload"; })) {
                        $rootScope.InsertItem(newScope.InitialLoad, $scope.FormModel.Elements, 0);
                    }
                }
                else {
                    for (var i = 0; i < $scope.FormModel.Elements.length; i++) {
                        if ($scope.FormModel.Elements[i].Name == "initialload") {
                            $rootScope.DeleteItem($scope.FormModel.Elements[i], $scope.FormModel.Elements);
                            break;
                        }
                    }
                }
            }
            else if ($scope.FormModel && ($scope.FormModel.dictAttributes.sfwType == "Maintenance" || $scope.FormModel.dictAttributes.sfwType == "Wizard")) {

                if (newScope.SelectedNewMethod && (newScope.SelectedNewMethod.dictAttributes.sfwMethodName == undefined || newScope.SelectedNewMethod.dictAttributes.sfwMethodName == "")) {
                    var NewMethodIndex = newScope.InitialLoad.Elements.indexOf(newScope.SelectedNewMethod);
                    if (NewMethodIndex > -1) {
                        newScope.InitialLoad.Elements.splice(NewMethodIndex, 1);
                        newScope.SelectedNewMethod = undefined;
                    }
                }
                if (newScope.SelectedUpdateMethod && (newScope.SelectedUpdateMethod.dictAttributes.sfwMethodName == undefined || newScope.SelectedUpdateMethod.dictAttributes.sfwMethodName == "")) {
                    var UpdateMethodIndex = newScope.InitialLoad.Elements.indexOf(newScope.SelectedUpdateMethod);
                    if (UpdateMethodIndex > -1) {
                        newScope.InitialLoad.Elements.splice(UpdateMethodIndex, 1);
                        newScope.SelectedUpdateMethod = undefined;
                    }
                }


                if (!newScope.InitialLoad.Elements.some(function (itm) { return itm.Name == "session"; })) {
                    if (newScope.SessionFields && newScope.SessionFields.Elements.length > 0) {
                        newScope.InitialLoad.Elements.push(newScope.SessionFields);
                    }
                }
                else {
                    for (var i = 0; i < newScope.InitialLoad.Elements.length; i++) {
                        if (newScope.InitialLoad.Elements[i].Name == "session") {
                            if (newScope.SessionFields && newScope.SessionFields.Elements.length > 0) {
                                newScope.InitialLoad.Elements[i] = newScope.SessionFields;
                            }
                            else {
                                newScope.InitialLoad.Elements.splice(i, 1);
                            }
                            break;
                        }
                    }
                }

                if (!newScope.SelectedNewMethod && !newScope.SelectedUpdateMethod && (!newScope.SessionFields || (newScope.SessionFields && newScope.SessionFields.Elements.length == 0))) {
                    newScope.InitialLoad = undefined;
                }

                if (newScope.InitialLoad && !$scope.FormModel.Elements.some(function (x) { return x.Name == "initialload"; })) {
                    $rootScope.InsertItem(newScope.InitialLoad, $scope.FormModel.Elements, 0);
                }
                else if (newScope.InitialLoad && $scope.FormModel.Elements.some(function (x) { return x.Name == "initialload"; })) {
                    for (var i = 0; i < $scope.FormModel.Elements.length; i++) {
                        if ($scope.FormModel.Elements[i].Name == "initialload") {
                            $rootScope.DeleteItem($scope.FormModel.Elements[i], $scope.FormModel.Elements);
                            $rootScope.InsertItem(newScope.InitialLoad, $scope.FormModel.Elements, i);
                            break;
                        }
                    }
                }
                else if (!newScope.InitialLoad) {
                    for (var i = 0; i < $scope.FormModel.Elements.length; i++) {
                        if ($scope.FormModel.Elements[i].Name == "initialload") {
                            $rootScope.DeleteItem($scope.FormModel.Elements[i], $scope.FormModel.Elements);
                            //$scope.FormModel.Elements.splice(i, 1);
                            break;
                        }
                    }
                }

            }

            $rootScope.EditPropertyValue($scope.InitialLoad, $scope, "InitialLoad", newScope.InitialLoad);
            //$scope.InitialLoad = newScope.InitialLoad;
            $scope.InitialLoadSection();

            $rootScope.UndRedoBulkOp("End");


            //if (!$scope.FormModel.Elements.some(function (x) { return x.Name == "initialload" })) {
            //    if ($scope.InitialLoad) {
            //        if ($scope.FormModel && ($scope.FormModel.dictAttributes.sfwType == "Maintenance" || $scope.FormModel.dictAttributes.sfwType == "Wizard")) {
            //            if (($scope.SelectedNewMethod && $scope.SelectedNewMethod.dictAttributes.sfwMethodName != undefined && $scope.SelectedNewMethod.dictAttributes.sfwMethodName != "")
            //                || ($scope.SelectedUpdateMethod && $scope.SelectedUpdateMethod.dictAttributes.sfwMethodName != undefined && $scope.SelectedUpdateMethod.dictAttributes.sfwMethodName != "")
            //                || ($scope.SessionFields && $scope.SessionFields.Elements && $scope.SessionFields.Elements.length > 0)) {
            //                $scope.FormModel.Elements.splice(0, 0, $scope.InitialLoad);
            //            }
            //        }
            //        else if ($scope.FormModel && $scope.FormModel.dictAttributes.sfwType == "Lookup") {
            //            if (($scope.MainQuery && $scope.MainQuery.dictAttributes.sfwQueryRef != undefined && $scope.MainQuery.dictAttributes.sfwQueryRef != "") || ($scope.SubQueryCollection && $scope.SubQueryCollection.length > 0)) {
            //                $scope.FormModel.Elements.splice(0, 0, $scope.InitialLoad);
            //            }
            //            else {
            //                $scope.MainQuery = undefined;
            //            }
            //        }
            //    }
            //}
            //else {
            //    if ($scope.InitialLoad) {
            //        var index = $scope.FormModel.Elements.indexOf($scope.InitialLoad);
            //        if (index > -1) {
            //            if ($scope.FormModel && ($scope.FormModel.dictAttributes.sfwType == "Maintenance" || $scope.FormModel.dictAttributes.sfwType == "Wizard")) {
            //                if ($scope.SelectedNewMethod && ($scope.SelectedNewMethod.dictAttributes.sfwMethodName == undefined || $scope.SelectedNewMethod.dictAttributes.sfwMethodName == "")) {
            //                    var NewMethodIndex = $scope.InitialLoad.Elements.indexOf($scope.SelectedNewMethod);
            //                    $scope.InitialLoad.Elements.splice(NewMethodIndex, 1);
            //                    $scope.SelectedNewMethod = undefined;
            //                }
            //                if ($scope.SelectedUpdateMethod && ($scope.SelectedUpdateMethod.dictAttributes.sfwMethodName == undefined || $scope.SelectedUpdateMethod.dictAttributes.sfwMethodName == "")) {
            //                    var UpdateMethodIndex = $scope.InitialLoad.Elements.indexOf($scope.SelectedUpdateMethod);
            //                    $scope.InitialLoad.Elements.splice(UpdateMethodIndex, 1);
            //                    $scope.SelectedUpdateMethod = undefined;
            //                }
            //                if ((!$scope.SelectedNewMethod || ($scope.SelectedNewMethod && ($scope.SelectedNewMethod.dictAttributes.sfwMethodName == undefined || $scope.SelectedNewMethod.dictAttributes.sfwMethodName == "")))
            //                    && (!$scope.SelectedUpdateMethod || ($scope.SelectedUpdateMethod && ($scope.SelectedUpdateMethod.dictAttributes.sfwMethodName == undefined || $scope.SelectedUpdateMethod.dictAttributes.sfwMethodName == "")))
            //                    && (!$scope.SessionFields || ($scope.SessionFields && $scope.SessionFields.Elements.length == 0))) {
            //                    $scope.FormModel.Elements.splice(index, 1);
            //                }
            //            }
            //            else if ($scope.FormModel && $scope.FormModel.dictAttributes.sfwType == "Lookup") {
            //                if ($scope.MainQuery && ($scope.MainQuery.dictAttributes.sfwQueryRef == undefined || $scope.MainQuery.dictAttributes.sfwQueryRef == "")) {
            //                    var MainQueryIndex = $scope.InitialLoad.Elements.indexOf($scope.MainQuery);
            //                    $scope.InitialLoad.Elements.splice(MainQueryIndex, 1);
            //                    $scope.MainQuery = undefined;
            //                }
            //                if ((!$scope.MainQuery || ($scope.MainQuery && ($scope.MainQuery.dictAttributes.sfwQueryRef == undefined || $scope.MainQuery.dictAttributes.sfwQueryRef == ""))) && ($scope.SubQueryCollection && $scope.SubQueryCollection.length == 0)) {
            //                    $scope.FormModel.Elements.splice(index, 1);
            //                }
            //            }
            //        }
            //    }
            //}

            if ($scope.FormModel.dictAttributes.sfwType == "Lookup") {
                var isVisible = false;
                if ($scope.FormModel.IsLookupCriteriaEnabled) {
                    isVisible = true;
                }
                $scope.PopulateQueryId(isVisible);
            }
            //  createRuledata();
        };
        $scope.setNewQueryIdForLookupControl = function (aModel, astrOldQueryID, astrNewQueryID, aIsMainQuery) {
            if (aModel) {
                angular.forEach(aModel.Elements, function (objModel) {
                    if (objModel.dictAttributes && objModel.dictAttributes.sfwQueryID && objModel.dictAttributes.sfwQueryID == astrOldQueryID) {
                        if (astrNewQueryID && astrNewQueryID != "") {
                            $rootScope.EditPropertyValue(objModel.dictAttributes.sfwQueryID, objModel.dictAttributes, "sfwQueryID", "");
                            objModel.dictAttributes.sfwQueryID = astrNewQueryID;
                        }
                        else {
                            $rootScope.EditPropertyValue(objModel.dictAttributes.sfwQueryID, objModel.dictAttributes, "sfwQueryID", "");
                            objModel.dictAttributes.sfwQueryID = "";
                            if (!aIsMainQuery) {
                                $rootScope.EditPropertyValue(objModel.dictAttributes.sfwDataField, objModel.dictAttributes, "sfwDataField", "");
                                objModel.dictAttributes.sfwDataField = "";
                            }
                        }
                    }
                    if (objModel.Elements) {
                        $scope.setNewQueryIdForLookupControl(objModel, astrOldQueryID, astrNewQueryID, aIsMainQuery);
                    }

                });
            }
        };
        newScope.validateFormDetails = function () {
            if (!newScope.IsPrototypeDetails) {
                newScope.FormDetailsErrorMessage = "";
                if (newScope.objDirFunctions.getExtraFieldData) {
                    newScope.objExtraFields = newScope.objDirFunctions.getExtraFieldData(); // getting extra field data from extraFieldDirective
                }

                var flag = validateExtraFields(newScope);
                return flag;
            }

        };
        newScope.NavigateToEntityQuery = function (aQueryID) {
            if (aQueryID && aQueryID != "" && aQueryID.contains(".")) {
                //objNewDialog.close();
                newScope.OkClick();
                var query = aQueryID.split(".");
                $NavigateToFileService.NavigateToFile(query[0], "queries", query[1]);
            }
        };
        newScope.openEntityClick = function (aEntityID) {
            if (aEntityID && aEntityID != "") {
                //objNewDialog.close();
                newScope.OkClick();
                $NavigateToFileService.NavigateToFile(aEntityID, "", "");
            }
        };

        newScope.openQueryEditClick = function (obj, astrTitle) {
            var newQueryScope = newScope.$new();
            newQueryScope.Title = astrTitle;
            newQueryScope.newID = "";
            if (obj && obj.dictAttributes.ID) {
                newQueryScope.newID = obj.dictAttributes.ID;
            }
            newQueryScope.QueryEditDialog = $rootScope.showDialog(newQueryScope, newQueryScope.Title, "Form/views/SetQueryName.html", {
                width: 500, height: 150
            });
            newQueryScope.setQueryName = function () {
                obj.dictAttributes.ID = newQueryScope.newID;
                newQueryScope.closeQueryDialog();
            };

            newQueryScope.closeQueryDialog = function () {
                newQueryScope.QueryEditDialog.close();
            };
        };

        newScope.IsSameAsNewChecked = function (value) {
            function iterationInitialLoadElements(objcustommethod) {
                if (objcustommethod.Name == "callmethods") {
                    if (objcustommethod.dictAttributes.sfwMode == 'Update') {
                        blnfound = true;
                    }
                    if (!objcustommethod.dictAttributes.sfwMode) {
                        objcustommethod.dictAttributes.sfwMode = 'New';
                    }
                }

            }
            function Getindexforupdate(objcustommethod) {
                if (objcustommethod.Name == "callmethods") {

                    if (objcustommethod.dictAttributes.sfwMode == 'New') {
                        objcustommethod.dictAttributes.sfwMode = "";
                    }
                    if (objcustommethod.dictAttributes.sfwMode == 'Update') {
                        indexforupdate = newScope.InitialLoad.Elements.indexOf(objcustommethod);
                    }
                }

            }
            newScope.SelectedUpdateMethod = {
                Name: "callmethods", Value: '', Elements: [], dictAttributes: { sfwMethodName: "", sfwMode: "Update" }
            };
            if (newScope.FormModel.IsSameAsNew) {
                newScope.paramtersForUpdateMethod = [];
                var indexforupdate = -1;

                angular.forEach(newScope.InitialLoad.Elements, Getindexforupdate);
                if (indexforupdate > -1) {
                    newScope.InitialLoad.Elements.splice(indexforupdate, 1);
                    //$rootScope.DeleteItem($scope.InitialLoad.Elements[indexforupdate], $scope.InitialLoad.Elements);
                }
            }
            else {
                var blnfound = false;


                angular.forEach(newScope.InitialLoad.Elements, iterationInitialLoadElements);

                if (!blnfound) {
                    var acallmethods = {
                        Name: "callmethods", value: '', prefix: "", dictAttributes: {}, Elements: [], Children: []
                    };
                    acallmethods.ParentVM = $scope.InitialLoad;
                    acallmethods.dictAttributes.sfwMode = 'Update';
                    //$rootScope.PushItem(acallmethods, $scope.InitialLoad.Elements);
                    newScope.InitialLoad.Elements.push(acallmethods);
                    newScope.SelectedUpdateMethod = acallmethods;
                }
            }
        };
        newScope.validateSeesionID = function (obj) {
            $ValidationService.validateID(obj, $scope.validationErrorList, obj.dictAttributes.ID, undefined, true);
            angular.forEach(newScope.SessionFields.Elements, function (field) {
                $ValidationService.checkDuplicateId(field, newScope.SessionFields, $scope.validationErrorList, true, ["session", "field"]);
            });
        };

        newScope.valiidateSessionField = function () {
            angular.forEach(newScope.SessionFields.Elements, function (obj) {
                $ValidationService.checkValidListValueForMultilevel([], obj, obj.dictAttributes.sfwEntityField, newScope.FormModel.dictAttributes.sfwEntity, "sfwEntityField", "sfwEntityField", CONST.VALIDATION.ENTITY_FIELD_INCORRECT, $scope.validationErrorList, false, '');
            });
        };

        newScope.validateQueryID = function () {
            if (newScope.SubQueryCollection && $scope.FormModel.dictAttributes.sfwType == "Lookup") {
                angular.forEach(newScope.SubQueryCollection.Elements, function (query) {
                    $ValidationService.checkDuplicateId(query, newScope.SubQueryCollection, $scope.validationErrorList, true, ["query"]);
                    $ValidationService.checkValidQuery($EntityIntellisenseFactory.getEntityIntellisense(), query, query.dictAttributes.sfwQueryRef, "SubSelectQuery", "sfwQueryRef", "sfwQueryRef", CONST.VALIDATION.INVALID_QUERY, $scope.validationErrorList);
                });
            }
        };
        newScope.removeObjectFromErrorList = function () {
            $ValidationService.removeObjInToArray($scope.validationErrorList, newScope.FormModel);
            if (newScope.SessionFields && newScope.SessionFields.Elements) {
                angular.forEach(newScope.SessionFields.Elements, function (field) {
                    $ValidationService.removeObjInToArray($scope.validationErrorList, field);
                });
            }
            if (newScope.SubQueryCollection && newScope.SubQueryCollection.Elements.length > 0) {
                angular.forEach(newScope.SubQueryCollection.Elements, function (query) {
                    $ValidationService.removeObjInToArray($scope.validationErrorList, query);
                });
            }
        };
        newScope.closeDetailDialog = function () {
            newScope.removeObjectFromErrorList();
            objNewDialog.close();
        };

    };
    //#endregion


    //#region Receive User Control Table Model
    $scope.receiveUcMainTable = function (data) {

        $scope.tableTemp;
        for (var i = 0; i < $scope.FormModel.Elements.length; i++) {
            if ($scope.FormModel.Elements[i].Name == "sfwTable") {
                $scope.tableTemp = $scope.FormModel.Elements[i];
                break;
            }
        }
        for (var i = 0; i < data.length; i++) {
            var ucControl = FindControlByID($scope.tableTemp, data[i].ID);
            //console.log("table: ", $scope.tableTemp);
            if (ucControl) {
                $scope.$apply(function () {
                    ucControl.UcChild = data ? [data[i].udcModel] : []; // converting object to array 
                    setParentControlName(ucControl.UcChild[0]);
                });
            }
        }
    };

    //removed by neha as we dont need that functionality now
    //$scope.OnOpenValidationRuleDetailsClick = function () {
    //    if ($scope.FormModel && $scope.FormModel.Data) {
    //        var newScope = $scope.$new(true);
    //        newScope.lstMessages = $scope.lstMessages;
    //        newScope.FormModel = $scope.FormModel;
    //        newScope.EntityValidationDialog = $rootScope.showDialog(newScope, "Validation Rules Details", "Form/views/EntityValidationRules.html", { width: 800, height: 600 });
    //    }
    //}
    //#endregion

    //#region Entity Intellisense
    $scope.onActionKeyDown = function (eargs) {
        var input = eargs.target;
        var data = [];
        var entityName;
        if ($scope.ObjgridBoundedQuery && !$scope.ObjgridBoundedQuery.IsQuery) {
            var entitytree = $scope.lstLoadedEntityTrees.filter(function (x) { return x.IsVisible; });
            if (entitytree && entitytree.length > 0) {
                entityName = entitytree[0].EntityName;
            }
            else if ($scope.FormModel.SelectedControl && !$scope.FormModel.IsLookupCriteriaEnabled && FindParent($scope.FormModel.SelectedControl, "sfwDialogPanel")) {
                entityName = "";
            }
            else {
                entityName = $scope.FormModel.dictAttributes.sfwEntity;
            }

            if ($scope.FormModel.SelectedControl && $scope.FormModel.SelectedControl.dictAttributes.sfwRelatedGrid) {
                var model = FindControlByID($scope.FormModel, $scope.FormModel.SelectedControl.dictAttributes.sfwRelatedGrid);
                if (model && model.dictAttributes.sfwEntityField) {
                    var object = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.FormModel.dictAttributes.sfwEntity, model.dictAttributes.sfwEntityField);
                    if (object) {
                        entityName = object.Entity;
                    }
                } else {
                    entityName = "";
                }
            }
            if ($scope.FormModel.SelectedControl && $scope.FormModel.SelectedControl.IsChildOfGrid) {
                var objGrid = FindParent($scope.FormModel.SelectedControl, "sfwGridView");
                if (objGrid && objGrid.dictAttributes.sfwParentGrid && objGrid.dictAttributes.sfwEntityField) {
                    entityName = $scope.FindEntityName(objGrid, $scope.FormModel.dictAttributes.sfwEntity, true);
                }
            }

            var isshowExpression = false;
            if ($scope.FormModel.SelectedControl.Name == "sfwLabel") {
                isshowExpression = true;
            }
            var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
            var entities = entityIntellisenseList;
            var parententityName = entityName;
            while (parententityName) {
                data = data.concat($rootScope.getEntityAttributeIntellisense(parententityName, false, false, false, false, false, isshowExpression));
                var entity = entities.filter(function (x) {
                    return x.ID == parententityName;
                });
                if (entity.length > 0) {
                    parententityName = entity[0].ParentId;
                } else {
                    parententityName = "";
                }
            }
        } else {
            if ($scope.ObjgridBoundedQuery.lstselectedobjecttreefields && $scope.ObjgridBoundedQuery.lstselectedobjecttreefields.length > 0) {
                data = $scope.ObjgridBoundedQuery.lstselectedobjecttreefields;
            }
        }
        var arrText = getSplitArray(input.innerText, getCaretCharacterOffsetWithin(input));

        if (arrText.length > 0) {
            for (var index = 0; index < arrText.length; index++) {
                var item = data.filter(function (x) { return x.ID == arrText[index]; });
                if (item.length > 0) {
                    if (item[0].Type == "Constant" && item[0].ID == arrText[index]) {
                        // data = $rootScope.getConstants(arrText.join("."));
                        break;
                    }
                    else if (item[0].ID == "RFunc" && arrText[index] == "RFunc") {
                        data = $rootScope.rFuncMethods;
                    }
                    else {
                        if (typeof item[0].DataType != "undefined" && (item[0].DataType == "Object" || item[0].DataType == "Collection" || item[0].DataType == "CDOCollection" || item[0].DataType == "List") && typeof item[0].Entity != "undefined" && item[0].ID == arrText[index] && index < arrText.length - 1) {
                            parententityName = item[0].Entity;
                            data = [];
                            while (parententityName) {
                                //expression should not come for second level
                                data = data.concat($rootScope.getEntityAttributeIntellisense(parententityName, false, false, false, false, false, isshowExpression, false));
                                var entity = entities.filter(function (x) {
                                    return x.ID == parententityName;
                                });
                                if (entity.length > 0) {
                                    parententityName = entity[0].ParentId;
                                } else {
                                    parententityName = "";
                                }
                            }
                        }
                        //else if (item[0].DataType != "undefined" && item[0].DataType == "AliasObject" && index < arrText.length - 1) {
                        //    data=item[0].lstobjCollection;
                        //}
                        else if (item[0].DataType != "undefined" && item[0].DataType != "Object" && item[0].DataType != "Collection" && item[0].DataType != "CDOCollection" && item[0].DataType != "List" && item[0].DataType != "AliasObject") {
                            data = [];
                        }
                        else {
                            data = item;
                        }
                    }
                }
            }
        }

        // filter expression
        var item = [];
        if (arrText.length > 0) {
            for (var index = 0; index < arrText.length; index++) {
                item = data.filter(function (x) { if (x.ID) { return x.ID.toLowerCase().contains(arrText[index].toLowerCase()); } });
            }
            data = item;
        }
        setRuleIntellisense($(input), data);

        if (eargs.ctrlKey && eargs.keyCode == $.ui.keyCode.SPACE && $(input).data('ui-autocomplete')) {
            $(input).autocomplete("search", $(input).val());
            eargs.preventDefault();
        }
    };



    //#endregion

    //#region Validate New
    $scope.OpenValidateNewDialog = function () {

        var newScope = $scope.$new();

        newScope.lstButton = [];
        newScope.lstButton = PopulateButtonID($scope.FormModel, newScope.lstButton);
        if ($scope.ValidateNew) {
            newScope.objValidateNew = {};
            angular.copy($scope.ValidateNew, newScope.objValidateNew);
            if (newScope.objValidateNew.Elements.length > 0) {
                for (var j = 0; j < newScope.objValidateNew.Elements.length; j++) {
                    newScope.objValidateNew.Elements[j].IsFieldVisibility = false;
                }
            }
        }
        else {
            newScope.objValidateNew = {
                dictAttributes: {}, Children: [], Elements: [], Name: "validatenew", Value: ""
            };
        }
        //for (var i = 0; i < $scope.FormModel.Elements.length; i++) {
        //    if ($scope.FormModel.Elements[i].Name == "validatenew") {
        //        newScope.objValidateNew = $scope.FormModel.Elements[i];
        //        if (newScope.objValidateNew.Elements.length > 0) {
        //            for (var j = 0; j < newScope.objValidateNew.Elements.length; j++) {
        //                newScope.objValidateNew.Elements[j].IsFieldVisibility = false;
        //            }
        //        }
        //    }
        //}
        //if (newScope.objValidateNew == undefined) {
        //    newScope.objValidateNew = {
        //        dictAttributes: {}, Children: [], Elements: [], Name: "validatenew", Value: ""
        //    };
        //    $scope.FormModel.Elements.push(newScope.objValidateNew);
        //}
        dialog = $rootScope.showDialog(newScope, "Set New Validation", "Form/views/ValidateNewDialog.html", { width: 1280, height: 450 });
        newScope.onOkClick = function () {

            var lst = $scope.FormModel.Elements.filter(function (x) { return x.Name === "validatenew" });
            if (lst && lst.length > 0) {
                $rootScope.UndRedoBulkOp("Start");
                if ($scope.ValidateNew) {
                    $rootScope.EditPropertyValue($scope.ValidateNew.Elements, $scope.ValidateNew, "Elements", []);
                }

                if (newScope.objValidateNew && newScope.objValidateNew.Elements) {
                    for (var i = 0; i < newScope.objValidateNew.Elements.length > 0; i++) {
                        $rootScope.PushItem(newScope.objValidateNew.Elements[i], $scope.ValidateNew.Elements);
                    }
                }
                $rootScope.UndRedoBulkOp("End");
            }
            else {


                $rootScope.UndRedoBulkOp("Start");
                $rootScope.PushItem(newScope.objValidateNew, $scope.FormModel.Elements);
                $rootScope.EditPropertyValue($scope.ValidateNew, $scope, "ValidateNew", newScope.objValidateNew);
                $rootScope.UndRedoBulkOp("End");


            }

            newScope.onCancelClick();
        };
        newScope.onCancelClick = function () {
            dialog.close();
        }
        newScope.GetButtonIntellisense = function (event) {
            if (event.type == 'click') {
                var input = $(event.target).prevAll('input');
                if (input) {
                    $(input).focus();
                    setSingleLevelAutoComplete(input, newScope.lstButton, newScope, "ID");
                    if ($(input).data('ui-autocomplete')) $(input).autocomplete("search", $(input).val());
                }
                event.preventDefault();
            }
            else {
                var input = $(event.target);
                if (event.ctrlKey && event.keyCode == $.ui.keyCode.SPACE && $(input).data('ui-autocomplete')) {
                    $(input).autocomplete("search", $(input).val());
                    event.preventDefault();
                }
                else {
                    setSingleLevelAutoComplete(input, newScope.lstButton, newScope, "ID");
                }
            }
        };
        newScope.validateButtonID = function (model) {
            var list = [];
            if (newScope.lstButton && newScope.lstButton.length > 0) {
                angular.forEach(newScope.lstButton, function (btn) {
                    if (btn.dictAttributes && btn.dictAttributes.ID) {
                        list.push(btn.dictAttributes.ID);
                    }
                });
            }
            $ValidationService.checkValidListValue(list, model, model.dictAttributes.ButtonID, "ButtonID", "inValid_id", CONST.VALIDATION.NOT_VALID_ID, $scope.validationErrorList);
        };
        newScope.AddNewValidationRule = function () {
            var objNewRule = {
                dictAttributes: {}, Elements: [], Children: [], Name: "button", Value: ""
            };
            newScope.objValidateNew.Elements.push(objNewRule);
            newScope.objSelectedRule = newScope.objValidateNew.Elements[newScope.objValidateNew.Elements.length - 1];
            newScope.ExpandRule(objNewRule);
        };
        newScope.selectedValidateRule = function (obj) {
            newScope.selectedItem = null;
            newScope.objSelectedRule = obj;
        };
        newScope.canDeleteRule = function () {
            if (newScope.objSelectedRule) {
                return true;
            }
            else {
                return false;
            }
        };
        newScope.DeleteValidationRule = function () {
            var index = newScope.objValidateNew.Elements.indexOf(newScope.objSelectedRule);
            if (index > -1) {
                newScope.objValidateNew.Elements.splice(index, 1);
                if (newScope.objValidateNew.Elements.length == 0) {
                    newScope.objSelectedRule = undefined;
                }
                else if (newScope.objValidateNew.Elements.length > index) {
                    newScope.objSelectedRule = newScope.objValidateNew.Elements[index];
                }
                else if (newScope.objValidateNew.Elements.length > 0) {
                    newScope.objSelectedRule = newScope.objValidateNew.Elements[index - 1];
                }
            }
        };
        newScope.ExpandRule = function (objPara) {
            if (!objPara.IsFieldVisibility && newScope.objValidateNew.Elements.length > 0) {
                for (var j = 0; j < newScope.objValidateNew.Elements.length; j++) {
                    newScope.objValidateNew.Elements[j].IsFieldVisibility = false;
                }
            }

            objPara.IsFieldVisibility = !objPara.IsFieldVisibility;
        };
        newScope.selectItem = function (item, obj) {
            newScope.selectedItem = item;
            newScope.objSelectedRule = obj;
        };
        newScope.canMoveItemsDown = function () {

            if (newScope.selectedItem) {
                var index = newScope.objSelectedRule.Elements.indexOf(newScope.selectedItem);
                if (index < newScope.objSelectedRule.Elements.length - 1) {
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        };
        newScope.canMoveItemsUp = function () {
            if (newScope.selectedItem) {
                var index = newScope.objSelectedRule.Elements.indexOf(newScope.selectedItem);
                if (index <= newScope.objSelectedRule.Elements.length && index > 0) {
                    return true;
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        };
        newScope.canDeleteItems = function () {
            if (newScope.selectedItem) {
                if (newScope.objSelectedRule) {
                    if (newScope.objSelectedRule.Elements.indexOf(newScope.selectedItem) > -1) {
                        return true;
                    }
                }
            }
            else {
                return false;
            }
        };
        newScope.moveItemsDown = function (obj) {

            var index = obj.Elements.indexOf(newScope.selectedItem);
            if (index > -1) {
                var item = obj.Elements[index];
                obj.Elements[index] = obj.Elements[index + 1];
                obj.Elements[index + 1] = item;
            }
        };
        newScope.moveItemsUp = function (obj) {

            var index = obj.Elements.indexOf(newScope.selectedItem);
            if (index > -1) {
                var item = obj.Elements[index];
                obj.Elements[index] = obj.Elements[index - 1];
                obj.Elements[index - 1] = item;
            }
        };
        newScope.deleteItems = function (obj) {
            newScope.objSelectedRule = obj;
            var index = obj.Elements.indexOf(newScope.selectedItem);
            if (index > -1) {
                obj.Elements.splice(index, 1);
                if (obj.Elements.length == 0) {
                    newScope.selectedItem = undefined;
                }
                else if (obj.Elements.length > index) {
                    newScope.selectedItem = obj.Elements[index];
                }
                else if (obj.Elements.length > 0) {
                    newScope.selectedItem = obj.Elements[index - 1];
                }
            }
        };

        newScope.EditItems = function (objSelectedRule, objItem) {
            newScope.selectedItem = objItem;
            newScope.addItems(objSelectedRule, "Update");
        }
        newScope.addItems = function (obj, Flag) {
            newScope.objSelectedRule = obj;
            var newItemScope = $scope.$new();
            newItemScope.lstControlID = [];
            newItemScope.lstControlID = PopulateControlID($scope.FormModel, newItemScope.lstControlID);
            newItemScope.lstMethodParam = [];
            if (newScope.lstButton.length > 0 && newScope.objSelectedRule && newScope.objSelectedRule.dictAttributes.ButtonID) {
                for (var i = 0; i < newScope.lstButton.length; i++) {
                    if (newScope.lstButton[i].dictAttributes.ID == newScope.objSelectedRule.dictAttributes.ButtonID) {
                        if (newScope.lstButton[i].dictAttributes.sfwNavigationParameter != "" && newScope.lstButton[i].dictAttributes.sfwNavigationParameter != undefined) {
                            var templstNavParam = newScope.lstButton[i].dictAttributes.sfwNavigationParameter.split(";");
                            for (var j = 0; j < templstNavParam.length; j++) {
                                if (templstNavParam[i] != "") {
                                    var tmpPara = templstNavParam[j].split("=");
                                    newItemScope.lstMethodParam.push(tmpPara[0]);
                                }

                            }

                        }
                    }
                }
            }
            if (Flag == "Add") {
                newItemScope.objItem = {
                    dictAttributes: { sfwValidationType: "Required", sfwRequired: 'True' }, Name: "item", Value: "", Children: [], Elements: []
                };
            }
            else {
                newItemScope.objItem = newScope.selectedItem;
            }
            newItemScope.lstoperator = ["", "=", "!=", "<", ">", "<=", ">="];
            dialogItem = $rootScope.showDialog(newItemScope, "Add New Items", "Form/views/AddNewItemsInValidationRule.html", { width: 690, height: 420 });
            newItemScope.onOkClick = function (objItemParam) {
                if (Flag == "Add") {
                    $rootScope.PushItem(objItemParam, newScope.objSelectedRule.Elements);
                    //newScope.objSelectedRule.Elements.push();
                }
                dialogItem.close();
            };
            newItemScope.getControlIDIntellisense = function (event) {
                if (event) {
                    if (event.type == 'click') {
                        var input = $(event.target).prevAll('input');
                        if (input) {
                            setSingleLevelAutoComplete(input, newItemScope.lstControlID);
                            if ($(input).data('ui-autocomplete')) $(input).autocomplete("search", $(input).val());
                        }
                        event.preventDefault();
                    }
                    else {
                        var input = $(event.target);
                        if (event.ctrlKey && event.keyCode == $.ui.keyCode.SPACE && $(input).data('ui-autocomplete')) {
                            $(input).autocomplete("search", $(input).val());
                            event.preventDefault();
                        }
                        else {
                            setSingleLevelAutoComplete(input, newItemScope.lstControlID);
                        }
                    }
                }
            };
            newItemScope.validateNewItem = function (obj) {
                if (obj) {
                    var list = newItemScope.lstControlID && newItemScope.lstControlID.length > 0 ? newItemScope.lstControlID : [];
                    $ValidationService.checkValidListValue(list, obj, obj.dictAttributes.sfwControlID, "sfwControlID", "sfwControlID", CONST.VALIDATION.NOT_VALID_ID, $scope.validationErrorList);
                }
            };
            newItemScope.QueryChange = function () {
                newItemScope.objItem.dictAttributes.sfwParameters = "";
            };
            if (newItemScope.objItem && !newItemScope.objItem.TempQueryParameters) {
                if (newItemScope.objItem.dictAttributes.sfwQueryID != undefined && newItemScope.objItem.dictAttributes.sfwQueryID != "") {
                    newItemScope.objItem.TempQueryParameters = $getQueryparam.get(newItemScope.objItem.dictAttributes.sfwQueryID);
                }
            }
            newItemScope.openQueryParameterDialog = function () {
                var newParamScope = newItemScope.$new();
                newParamScope.objParameter = [];
                newParamScope.lstParameters = newItemScope.lstMethodParam;
                if (newItemScope.objItem.dictAttributes.sfwParameters) {
                    var tempparameter = newItemScope.objItem.dictAttributes.sfwParameters.split(";");
                    for (var i = 0; i < tempparameter.length; i++) {
                        var paraField = tempparameter[i].split("=");
                        if (paraField[0] != "") {
                            newParamScope.objParameter.push({ ParameterField: paraField[0], ParameterValue: paraField[1] });
                        }
                    }
                }
                if (newItemScope.objItem.TempQueryParameters) {
                    var lstTempQueryParameter = newItemScope.objItem.TempQueryParameters.split(";");
                    for (var i = 0; i < lstTempQueryParameter.length; i++) {
                        var flag = true;
                        for (var j = 0; j < newParamScope.objParameter.length; j++) {
                            if (newParamScope.objParameter[j].ParameterField == lstTempQueryParameter[i].replace("=", "")) {
                                flag = false;
                                break;
                            }
                        }
                        if (flag && lstTempQueryParameter[i] != "") {
                            newParamScope.objParameter.push({ ParameterField: lstTempQueryParameter[i].replace("=", ""), ParameterValue: "" });
                        }
                    }
                }
                dialogParam = $rootScope.showDialog(newParamScope, "Set Query Parameters", "Form/views/SetQueryParameter.html", { width: 550, height: 300 });
                newParamScope.paraOkClick = function (objItemParam) {
                    var strpaameter = "";
                    for (var i = 0; i < newParamScope.objParameter.length; i++) {
                        if (newParamScope.objParameter[i].ParameterValue && newParamScope.objParameter[i].ParameterValue != "") {
                            strpaameter += newParamScope.objParameter[i].ParameterField + "=" + newParamScope.objParameter[i].ParameterValue + ";";
                        }
                    }
                    newItemScope.objItem.dictAttributes.sfwParameters = strpaameter;
                    dialogParam.close();
                };
                newParamScope.paraCancelClick = function () {
                    dialogParam.close();
                };
            };
        };
    };

    //#endregion

    $scope.showWizardProperty = function () {
        //$scope.FormModel.SelectedControl.Name = "sfwWizard";
        SetFormSelectedControl($scope.FormModel, $scope.objWizard);
        $scope.ActiveTabForForm = 'Properties';
        $scope.IsToolsDivCollapsed = false;
    };

    //#region Add Panel and Wizard Step
    $scope.OnAddPanelClick = function (index, isInsert) {
        var newScope = $scope.$new();
        newScope.formmodel = $scope.FormModel;
        newScope.AddPanelType = "AddPanel";
        newScope.OkClick = function () {
            if (newScope.AddPanelType === "AddPanel") {
                $scope.AddPanel(index, isInsert);
                newScope.closeDetailDialog();
            }
            else if (newScope.AddPanelType === "AddPanelWithTab") {
                $scope.AddPanelWithTabContainer(index, isInsert);
                newScope.closeDetailDialog();
            }
            else if (newScope.AddPanelType === "AddPanelWithGrid") {

                $scope.AddPanelWithGrid(index, isInsert);
                newScope.closeDetailDialog();
            }
        }

        newScope.validatePanel = function () {
            var retVal = false;
            newScope.ErrorMessage = "";

            if (!newScope.AddPanelType) {
                newScope.ErrorMessage = "Select Option.";
                retVal = true;
            }
            return retVal;
        };

        newScope.closeDetailDialog = function () {
            newScope.dialogToAddPanel.close();
        }

        newScope.dialogToAddPanel = $rootScope.showDialog(newScope, "Add Panel", "Form/views/AddPanels.html", { width: 500, height: 195 });

    };

    $scope.AddPanel = function (index, isInsert) {
        var strPanelId;
        $rootScope.UndRedoBulkOp("Start");
        var sfxRowModel = {
            Name: 'sfwRow', prefix: "swc", Value: '', dictAttributes: {}, Elements: []
        };
        sfxRowModel.ParentVM = $scope.SfxMainTable;

        var sfxColumnModel = {
            Name: 'sfwColumn', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
        };
        sfxColumnModel.ParentVM = sfxRowModel;

        strPanelId = CreateControlID($scope.FormModel, "NewPanel", "sfwPanel", false);


        var sfxPanelModel = {
            Name: "sfwPanel", prefix: "swc", Value: '', dictAttributes: { ID: strPanelId, sfwCaption: "New Page" }, Elements: [], Children: []
        };
        sfxPanelModel.ParentVM = sfxColumnModel;
        $rootScope.PushItem(sfxPanelModel, sfxColumnModel.Elements);
        $rootScope.PushItem(sfxColumnModel, sfxRowModel.Elements);

        var strCtrlId = CreateControlID($scope.FormModel, "NewPage", "sfwTable", false);
        var sfxTableModel = {
            Name: "sfwTable", prefix: "swc", Value: '', dictAttributes: { ID: strCtrlId }, Elements: [], Children: []
        };
        sfxTableModel.ParentVM = sfxPanelModel;

        var newSfxRowModel = {
            Name: 'sfwRow', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
        };
        newSfxRowModel.ParentVM = sfxTableModel;
        var newSfxCellModel = {
            Name: 'sfwColumn', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
        };
        newSfxCellModel.ParentVM = newSfxRowModel;
        $rootScope.PushItem(newSfxCellModel, newSfxRowModel.Elements);

        newSfxCellModel = {
            Name: 'sfwColumn', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
        };
        newSfxCellModel.ParentVM = newSfxRowModel;
        $rootScope.PushItem(newSfxCellModel, newSfxRowModel.Elements);

        newSfxCellModel = {
            Name: 'sfwColumn', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
        };
        newSfxCellModel.ParentVM = newSfxRowModel;
        $rootScope.PushItem(newSfxCellModel, newSfxRowModel.Elements);

        newSfxCellModel = {
            Name: 'sfwColumn', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
        };
        newSfxCellModel.ParentVM = newSfxRowModel;
        $rootScope.PushItem(newSfxCellModel, newSfxRowModel.Elements);

        $rootScope.PushItem(newSfxRowModel, sfxTableModel.Elements);
        $rootScope.PushItem(sfxTableModel, sfxPanelModel.Elements);

        //$('.form-panel-wrapper .panel-collapse').each(function () {
        //    if ($(this).hasClass('in')) {
        //        $(this).collapse('hide');
        //        return true;
        //    }
        //});

        $scope.MainPanels.some(function (panel) {
            if (panel.dictAttributes.ID == $scope.CurrPanel.dictAttributes.ID) {
                panel.initialvisibilty = false;
                panel.IsVisible = false;
                panel.IsPanelToggle = false;
                return true;
            }
        });

        // when we add panel for the first 
        if (!$scope.SfxMainTable) {
            $scope.SfxMainTable = { Name: "sfwTable", prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: [] };
            $rootScope.PushItem($scope.SfxMainTable, $scope.FormModel.Elements);
        }
        if (isInsert && index > -1) {

            $rootScope.InsertItem(sfxRowModel, $scope.SfxMainTable.Elements, index);
            $rootScope.InsertItem(sfxPanelModel, $scope.MainPanels, index);

        }
        else {
            $rootScope.PushItem(sfxRowModel, $scope.SfxMainTable.Elements);
            $rootScope.PushItem(sfxPanelModel, $scope.MainPanels);
        }
        sfxPanelModel.initialvisibilty = true;
        sfxPanelModel.TableVM = sfxTableModel;
        sfxPanelModel.IsMainPanel = true;

        $scope.selectPanelControl(sfxPanelModel);
        $rootScope.UndRedoBulkOp("End");
    };

    $scope.AddPanelWithTabContainer = function (index, isInsert) {
        var strPanelId;
        $rootScope.UndRedoBulkOp("Start");
        var sfxRowModel = {
            Name: 'sfwRow', prefix: "swc", Value: '', dictAttributes: {
            }, Elements: []
        };
        sfxRowModel.ParentVM = $scope.SfxMainTable;

        var sfxColumnModel = {
            Name: 'sfwColumn', prefix: "swc", Value: '', dictAttributes: {
            }, Elements: [], Children: []
        };
        sfxColumnModel.ParentVM = sfxRowModel;

        strPanelId = CreateControlID($scope.FormModel, "NewPanel", "sfwPanel", false);


        var sfxPanelModel = {
            Name: "sfwPanel", prefix: "swc", Value: '', dictAttributes: {
                ID: strPanelId, sfwCaption: "New Page"
            }, Elements: [], Children: []
        };
        sfxPanelModel.ParentVM = sfxColumnModel;
        $rootScope.PushItem(sfxPanelModel, sfxColumnModel.Elements);
        $rootScope.PushItem(sfxColumnModel, sfxRowModel.Elements);

        var strCtrlId = CreateControlID($scope.FormModel, "NewPage", "sfwTable", false);
        var sfxTableModel = {
            Name: "sfwTable", prefix: "swc", Value: '', dictAttributes: { ID: strCtrlId }, Elements: [], Children: []
        };
        sfxTableModel.ParentVM = sfxPanelModel;

        var newSfxRowModel = {
            Name: 'sfwRow', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
        };
        newSfxRowModel.ParentVM = sfxTableModel;
        var newSfxCellModel = {
            Name: 'sfwColumn', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
        };
        newSfxCellModel.ParentVM = newSfxRowModel;
        var newTabContainer = CreateTabContainer($scope.FormModel, newSfxCellModel);
        $rootScope.PushItem(newTabContainer, newSfxCellModel.Elements);
        $rootScope.PushItem(newSfxCellModel, newSfxRowModel.Elements);

        $rootScope.PushItem(newSfxRowModel, sfxTableModel.Elements);
        $rootScope.PushItem(sfxTableModel, sfxPanelModel.Elements);

        $scope.MainPanels.some(function (panel) {
            if (panel.dictAttributes.ID == $scope.CurrPanel.dictAttributes.ID) {
                panel.initialvisibilty = false;
                panel.IsVisible = false;
                panel.IsPanelToggle = false;
                return true;
            }
        });

        // when we add panel for the first 
        if (!$scope.SfxMainTable) {
            $scope.SfxMainTable = {
                Name: "sfwTable", prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
            };
            $rootScope.PushItem($scope.SfxMainTable, $scope.FormModel.Elements);
        }
        if (isInsert && index > -1) {

            $rootScope.InsertItem(sfxRowModel, $scope.SfxMainTable.Elements, index);
            $rootScope.InsertItem(sfxPanelModel, $scope.MainPanels, index);

        }
        else {
            $rootScope.PushItem(sfxRowModel, $scope.SfxMainTable.Elements);
            $rootScope.PushItem(sfxPanelModel, $scope.MainPanels);
        }
        sfxPanelModel.initialvisibilty = true;
        sfxPanelModel.TableVM = sfxTableModel;
        sfxPanelModel.IsMainPanel = true;

        $scope.selectPanelControl(sfxPanelModel);
        $rootScope.UndRedoBulkOp("End");
    };

    $scope.AddPanelWithGrid = function (index, isInsert) {
        var strPanelId;
        $rootScope.UndRedoBulkOp("Start");
        var sfxRowModel = {
            Name: 'sfwRow', prefix: "swc", Value: '', dictAttributes: {
            }, Elements: []
        };
        sfxRowModel.ParentVM = $scope.SfxMainTable;

        var sfxColumnModel = {
            Name: 'sfwColumn', prefix: "swc", Value: '', dictAttributes: {
            }, Elements: [], Children: []
        };
        sfxColumnModel.ParentVM = sfxRowModel;

        strPanelId = CreateControlID($scope.FormModel, "NewPanel", "sfwPanel", false);


        var sfxPanelModel = {
            Name: "sfwPanel", prefix: "swc", Value: '', dictAttributes: {
                ID: strPanelId, sfwCaption: "New Page"
            }, Elements: [], Children: []
        };
        sfxPanelModel.ParentVM = sfxColumnModel;
        $rootScope.PushItem(sfxPanelModel, sfxColumnModel.Elements);
        $rootScope.PushItem(sfxColumnModel, sfxRowModel.Elements);

        var strCtrlId = CreateControlID($scope.FormModel, "NewPage", "sfwTable", false);
        var sfxTableModel = {
            Name: "sfwTable", prefix: "swc", Value: '', dictAttributes: { ID: strCtrlId }, Elements: [], Children: []
        };
        sfxTableModel.ParentVM = sfxPanelModel;

        var newSfxRowModel = {
            Name: 'sfwRow', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
        };
        newSfxRowModel.ParentVM = sfxTableModel;
        var newSfxCellModel = {
            Name: 'sfwColumn', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
        };
        newSfxCellModel.ParentVM = newSfxRowModel;

        var newScope = $scope.$new();
        newScope.formobject = $scope.FormModel;
        newScope.model = undefined;
        newScope.dropdata = newSfxCellModel;
        newScope.IsAddNewGrid = true;
        newScope.IsAddGridWithPanel = true;
        newScope.BindToQueryDialog = $rootScope.showDialog(newScope, "Bind to Query", "Form/views/BindToQuery.html", { width: 600, height: 250 });

        newScope.onAfterOkClick = function () {
            $scope.AddPanelToList(sfxRowModel, sfxTableModel, isInsert, index);
        }

        $rootScope.PushItem(newSfxCellModel, newSfxRowModel.Elements);

        $rootScope.PushItem(newSfxRowModel, sfxTableModel.Elements);
        $rootScope.PushItem(sfxTableModel, sfxPanelModel.Elements);

    };

    $scope.AddPanelToList = function (sfxRowModel, sfxTableModel, isInsert, index) {
        var sfxPanelModel = FindParent(sfxTableModel, "sfwPanel");

        $scope.MainPanels.some(function (panel) {
            if (panel.dictAttributes.ID == $scope.CurrPanel.dictAttributes.ID) {
                panel.initialvisibilty = false;
                panel.IsVisible = false;
                panel.IsPanelToggle = false;
                return true;
            }
        });

        // when we add panel for the first 
        if (!$scope.SfxMainTable) {
            $scope.SfxMainTable = {
                Name: "sfwTable", prefix: "swc", Value: '', dictAttributes: {
                }, Elements: [], Children: []
            };
            $rootScope.PushItem($scope.SfxMainTable, $scope.FormModel.Elements);
        }
        if (isInsert && index > -1) {

            $rootScope.InsertItem(sfxRowModel, $scope.SfxMainTable.Elements, index);
            $rootScope.InsertItem(sfxPanelModel, $scope.MainPanels, index);

        }
        else {
            $rootScope.PushItem(sfxRowModel, $scope.SfxMainTable.Elements);
            $rootScope.PushItem(sfxPanelModel, $scope.MainPanels);
        }
        sfxPanelModel.initialvisibilty = true;
        sfxPanelModel.TableVM = sfxTableModel;
        sfxPanelModel.IsMainPanel = true;

        $scope.selectPanelControl(sfxPanelModel);
        $rootScope.UndRedoBulkOp("End");
    };

    $scope.OnAddWizardStepClick = function (index, isInsert) {
        var newScope = $scope.$new();
        newScope.formmodel = $scope.FormModel;
        newScope.AddPanelType = "AddWizardStep";
        newScope.OkClick = function () {
            if (newScope.AddPanelType === "AddWizardStep") {
                $scope.OnAddWizardStep(index, isInsert);
                newScope.closeDetailDialog();
            }
            else if (newScope.AddPanelType === "AddWizardStepWithTab") {
                $scope.OnAddWizardStepWithTabContainer(index, isInsert);
                newScope.closeDetailDialog();
            }
            else if (newScope.AddPanelType === "AddWizardStepWithGrid") {

                $scope.OnAddWizardStepWithGridView(index, isInsert);
                newScope.closeDetailDialog();
            }
        }

        newScope.validatePanel = function () {
            var retVal = false;
            newScope.ErrorMessage = "";

            if (!newScope.AddPanelType) {
                newScope.ErrorMessage = "Select Option.";
                retVal = true;
            }
            return retVal;
        };

        newScope.closeDetailDialog = function () {
            newScope.dialogToAddPanel.close();
        }

        newScope.dialogToAddPanel = $rootScope.showDialog(newScope, "Add Panel", "Form/views/AddPanels.html", {
            width: 620, height: 195
        });
    };

    $scope.OnAddWizardStep = function (index, isInsert) {
        $rootScope.UndRedoBulkOp("Start");
        var lst = [];
        var objWizardSteps;
        FindControlListByName($scope.SfxMainTable, "WizardSteps", lst);
        if (lst.length > 0) {
            objWizardSteps = lst[0];
        }
        if (objWizardSteps) {
            var strClientId = CreateControlID($scope.FormModel, "wzsStep", "sfwWizardStep", false);
            var objModel = objWizardSteps.Elements.filter(function (itm) {
                return itm.dictAttributes.ID == strClientId;
            });

            var iNum = 0;
            var strID = strClientId;
            while (objModel && objModel.length > 0) {
                iNum++;
                strClientId = strID + iNum;
                objModel = objWizardSteps.Elements.filter(function (itm) {
                    return itm.dictAttributes.ID == strClientId;
                });
            }
            var strTitle = strClientId;
            var objStep = {
                Name: 'sfwWizardStep', prefix: "swc", Value: '', dictAttributes: {}, Elements: []
            };
            objStep.ParentVM = objWizardSteps;
            objStep.dictAttributes.runat = "server";
            objStep.dictAttributes.sfwShowInHeader = "True";
            objStep.dictAttributes.ID = strClientId;
            objStep.dictAttributes.Title = strTitle.replace('wzsStep', 'New Step ');


            var objTable = {
                Name: 'sfwTable', prefix: "swc", Value: '', dictAttributes: {}, Elements: []
            };
            objTable.ParentVM = objStep;
            objTable.dictAttributes.runat = "server";
            objTable.dictAttributes.CssClass = "Table";

            var strTableID = "tblStep1";
            var objtableModel = objWizardSteps.Elements.filter(function (itm) {
                return itm.Elements[0].dictAttributes.ID == strTableID;
            });

            var iNum = 0;
            var strNewTableID = strTableID;
            while (objtableModel && objtableModel.length > 0) {
                iNum++;
                strTableID = strNewTableID + iNum;
                objtableModel = objWizardSteps.Elements.filter(function (itm) {
                    return itm.Elements[0].dictAttributes.ID == strTableID;
                });
            }
            objTable.dictAttributes.ID = strTableID;

            $rootScope.PushItem(objTable, objStep.Elements);


            var objRow = {
                Name: 'sfwRow', prefix: "swc", Value: '', dictAttributes: {}, Elements: []
            };
            objRow.ParentVM = objTable;

            $rootScope.PushItem(objRow, objTable.Elements);

            for (var i = 0; i < 4; i++) {

                var objCell = {
                    Name: 'sfwColumn', prefix: "swc", Value: '', dictAttributes: {}, Elements: []
                };
                objCell.ParentVM = objRow;
                $rootScope.PushItem(objCell, objRow.Elements);
            }

            $scope.MainPanels.some(function (panel) {
                if (panel.dictAttributes.ID == $scope.CurrPanel.dictAttributes.ID) {
                    panel.initialvisibilty = false;
                    panel.IsVisible = false;
                    panel.IsPanelToggle = false;
                    return true;
                }
            });

            if (isInsert && index > -1) {
                $rootScope.InsertItem(objStep, objWizardSteps.Elements, index);
                $rootScope.InsertItem(objStep, $scope.MainPanels, index);
            }
            else {
                $rootScope.PushItem(objStep, objWizardSteps.Elements);
                $rootScope.PushItem(objStep, $scope.MainPanels);
            }

            objStep.initialvisibilty = true;
            objStep.TableVM = objTable;

            $scope.selectPanelControl(objStep);

        }
        $rootScope.UndRedoBulkOp("End");
    }

    $scope.OnAddWizardStepWithTabContainer = function (index, isInsert) {
        $rootScope.UndRedoBulkOp("Start");
        var lst = [];
        var objWizardSteps;
        FindControlListByName($scope.SfxMainTable, "WizardSteps", lst);
        if (lst.length > 0) {
            objWizardSteps = lst[0];
        }
        if (objWizardSteps) {
            var strClientId = CreateControlID($scope.FormModel, "wzsStep", "sfwWizardStep", false);
            var objModel = objWizardSteps.Elements.filter(function (itm) {
                return itm.dictAttributes.ID == strClientId;
            });

            var iNum = 0;
            var strID = strClientId;
            while (objModel && objModel.length > 0) {
                iNum++;
                strClientId = strID + iNum;
                objModel = objWizardSteps.Elements.filter(function (itm) {
                    return itm.dictAttributes.ID == strClientId;
                });
            }
            var strTitle = strClientId;
            var objStep = {
                Name: 'sfwWizardStep', prefix: "swc", Value: '', dictAttributes: {}, Elements: []
            };
            objStep.ParentVM = objWizardSteps;
            objStep.dictAttributes.runat = "server";
            objStep.dictAttributes.sfwShowInHeader = "True";
            objStep.dictAttributes.ID = strClientId;
            objStep.dictAttributes.Title = strTitle.replace('wzsStep', 'New Step ');


            var objTable = {
                Name: 'sfwTable', prefix: "swc", Value: '', dictAttributes: {}, Elements: []
            };
            objTable.ParentVM = objStep;
            objTable.dictAttributes.runat = "server";
            objTable.dictAttributes.CssClass = "Table";

            var strTableID = "tblStep1";
            var objtableModel = objWizardSteps.Elements.filter(function (itm) {
                return itm.Elements[0].dictAttributes.ID == strTableID;
            });

            var iNum = 0;
            var strNewTableID = strTableID;
            while (objtableModel && objtableModel.length > 0) {
                iNum++;
                strTableID = strNewTableID + iNum;
                objtableModel = objWizardSteps.Elements.filter(function (itm) {
                    return itm.Elements[0].dictAttributes.ID == strTableID;
                });
            }
            objTable.dictAttributes.ID = strTableID;

            $rootScope.PushItem(objTable, objStep.Elements);


            var objRow = {
                Name: 'sfwRow', prefix: "swc", Value: '', dictAttributes: {}, Elements: []
            };
            objRow.ParentVM = objTable;

            $rootScope.PushItem(objRow, objTable.Elements);

            var objCell = {
                Name: 'sfwColumn', prefix: "swc", Value: '', dictAttributes: {}, Elements: []
            };
            objCell.ParentVM = objRow;
            var newTabContainer = CreateTabContainer($scope.FormModel, objCell);
            $rootScope.PushItem(newTabContainer, objCell.Elements);
            $rootScope.PushItem(objCell, objRow.Elements);


            $scope.MainPanels.some(function (panel) {
                if (panel.dictAttributes.ID == $scope.CurrPanel.dictAttributes.ID) {
                    panel.initialvisibilty = false;
                    panel.IsVisible = false;
                    panel.IsPanelToggle = false;
                    return true;
                }
            });

            if (isInsert && index > -1) {
                $rootScope.InsertItem(objStep, objWizardSteps.Elements, index);
                $rootScope.InsertItem(objStep, $scope.MainPanels, index);
            }
            else {
                $rootScope.PushItem(objStep, objWizardSteps.Elements);
                $rootScope.PushItem(objStep, $scope.MainPanels);
            }

            objStep.initialvisibilty = true;
            objStep.TableVM = objTable;

            $scope.selectPanelControl(objStep);

        }
        $rootScope.UndRedoBulkOp("End");
    }

    $scope.OnAddWizardStepWithGridView = function (index, isInsert) {
        $rootScope.UndRedoBulkOp("Start");
        var lst = [];
        var objWizardSteps;
        FindControlListByName($scope.SfxMainTable, "WizardSteps", lst);
        if (lst.length > 0) {
            objWizardSteps = lst[0];
        }
        if (objWizardSteps) {
            var strClientId = CreateControlID($scope.FormModel, "wzsStep", "sfwWizardStep", false);
            var objModel = objWizardSteps.Elements.filter(function (itm) {
                return itm.dictAttributes.ID == strClientId;
            });

            var iNum = 0;
            var strID = strClientId;
            while (objModel && objModel.length > 0) {
                iNum++;
                strClientId = strID + iNum;
                objModel = objWizardSteps.Elements.filter(function (itm) {
                    return itm.dictAttributes.ID == strClientId;
                });
            }
            var strTitle = strClientId;
            var objStep = {
                Name: 'sfwWizardStep', prefix: "swc", Value: '', dictAttributes: {}, Elements: []
            };
            objStep.ParentVM = objWizardSteps;
            objStep.dictAttributes.runat = "server";
            objStep.dictAttributes.sfwShowInHeader = "True";
            objStep.dictAttributes.ID = strClientId;
            objStep.dictAttributes.Title = strTitle.replace('wzsStep', 'New Step ');


            var objTable = {
                Name: 'sfwTable', prefix: "swc", Value: '', dictAttributes: {}, Elements: []
            };
            objTable.ParentVM = objStep;
            objTable.dictAttributes.runat = "server";
            objTable.dictAttributes.CssClass = "Table";

            var strTableID = "tblStep1";
            var objtableModel = objWizardSteps.Elements.filter(function (itm) {
                return itm.Elements[0].dictAttributes.ID == strTableID;
            });

            var iNum = 0;
            var strNewTableID = strTableID;
            while (objtableModel && objtableModel.length > 0) {
                iNum++;
                strTableID = strNewTableID + iNum;
                objtableModel = objWizardSteps.Elements.filter(function (itm) {
                    return itm.Elements[0].dictAttributes.ID == strTableID;
                });
            }
            objTable.dictAttributes.ID = strTableID;

            $rootScope.PushItem(objTable, objStep.Elements);


            var objRow = {
                Name: 'sfwRow', prefix: "swc", Value: '', dictAttributes: {}, Elements: []
            };
            objRow.ParentVM = objTable;

            $rootScope.PushItem(objRow, objTable.Elements);

            var objCell = {
                Name: 'sfwColumn', prefix: "swc", Value: '', dictAttributes: {}, Elements: []
            };
            objCell.ParentVM = objRow;


            var newScope = $scope.$new();
            newScope.formobject = $scope.FormModel;
            newScope.model = undefined;
            newScope.dropdata = objCell;
            newScope.IsAddNewGrid = true;
            newScope.IsAddGridWithPanel = true;
            newScope.BindToQueryDialog = $rootScope.showDialog(newScope, "Bind to Query", "Form/views/BindToQuery.html", {
                width: 600, height: 250
            });

            newScope.onAfterOkClick = function () {
                $scope.AddWizardStepToList(objStep, objTable, objWizardSteps, isInsert, index);
            }

            $rootScope.PushItem(objCell, objRow.Elements);
        }
    }

    $scope.AddWizardStepToList = function (objStep, objTable, objWizardSteps, isInsert, index) {
        $scope.MainPanels.some(function (panel) {
            if (panel.dictAttributes.ID == $scope.CurrPanel.dictAttributes.ID) {
                panel.initialvisibilty = false;
                panel.IsVisible = false;
                panel.IsPanelToggle = false;
                return true;
            }
        });

        if (isInsert && index > -1) {
            $rootScope.InsertItem(objStep, objWizardSteps.Elements, index);
            $rootScope.InsertItem(objStep, $scope.MainPanels, index);
        }
        else {
            $rootScope.PushItem(objStep, objWizardSteps.Elements);
            $rootScope.PushItem(objStep, $scope.MainPanels);
        }

        objStep.initialvisibilty = true;
        objStep.TableVM = objTable;

        $scope.selectPanelControl(objStep);

        $rootScope.UndRedoBulkOp("End");

    }

    //#endregion


    $scope.addExtraFieldsDataInToMainModel = function () {
        if ($scope.objFormExtraFields && $scope.objFormExtraFields.Elements && $scope.objFormExtraFields.Elements.length > 0) {
            var index = $scope.FormModel.Elements.indexOf($scope.objFormExtraFields);
            if (index == -1) {
                $scope.FormModel.Elements.push($scope.objFormExtraFields);
            }
        }
    };

    $scope.BeforeSaveToFile = function () {
        $scope.addExtraFieldsDataInToMainModel();

        //usercontrol and tooltip will be supported by fwk later
        if (!$scope.IsPrototype && $scope.FormModel && $scope.FormModel.dictAttributes && $scope.FormModel.dictAttributes.sfwType != "UserControl" && $scope.FormModel.dictAttributes.sfwType != "Lookup") {
            $scope.dummyLstLoadDetails = LoadDetails($scope.FormModel, $scope.objLoadDetails, false, $rootScope, false);
        }
    };

    $scope.AfterSaveToFile = function () {
    };

    $scope.ClearSelectFields = function () {
        lstEntityTreeFieldData = null;
    };

    //#region Load Details
    $scope.OpenLoadDetailsDialog = function (IsSave) {
        var newScope = $scope.$new();

        $scope.dummyLstLoadDetails = LoadDetails($scope.FormModel, $scope.objLoadDetails, true, $rootScope, false);
        dialog = $rootScope.showDialog(newScope, "Load Details", "Form/views/LoadDetails.html", { width: 500, height: 400 });
        newScope.onOkClick = function () {

            dialog.close();
        };
    };


    //#endregion

    $scope.createValidationRuleList = function (objExtraData, isWizard, strRuleGroup) {
        var list = [];

        if (isWizard) {
            lstHardErrorsTemp = GetBuisnessRules(objExtraData, "", "", strRuleGroup, true);
            angular.forEach(lstHardErrorsTemp, function (strCodeDescription) {
                if (strCodeDescription != undefined && strCodeDescription != "") {
                    list.push(strCodeDescription);
                }
            });
        }
        else {
            if (objExtraData && objExtraData.lstHardErrorList) {
                var hardErrorModel = objExtraData.lstHardErrorList[0];
                if (hardErrorModel && hardErrorModel.Elements.length > 0) {

                    angular.forEach(hardErrorModel.Elements, function (item) {
                        if (item != undefined && item.dictAttributes.ID != "") {
                            list.push(item.dictAttributes.ID);
                        }
                    });
                }
            }
        }
        return list;
    };

    var setEntity = function (objChild) {
        var ObjGrid;
        // console.log(objChild);
        if (objChild && objChild.Name == "sfwGridView") {
            ObjGrid = objChild;
        }
        else {
            ObjGrid = FindParent(objChild, "sfwGridView");
        }
        if (ObjGrid) {
            $scope.loadGridEntityTree(ObjGrid);
        }
        else {
            if (!$scope.FormModel.IsLookupCriteriaEnabled) {
                var Objdialog = FindParent(objChild, "sfwDialogPanel");
                if (Objdialog) {
                    $scope.loadGridEntityTree(Objdialog);
                }
                else {
                    var Objlist = FindParent(objChild, "sfwListView");
                    if (Objlist) {
                        $scope.loadGridEntityTree(Objlist);
                    }
                    else {
                        $scope.loadFormEntityTree(objChild);
                    }
                }
            }
        }
    };

    $scope.loadGridEntityTree = function (item) {
        $scope.IsGridSeleected = true;
        $scope.IsListViewSelected = false;
        $scope.FormModel.SelectedControl.IsGridChildOfListView = false;
        var isItemTemplate = false;
        var blnFoundEntity = false;
        $scope.IsGridCollectionEmpty = false;
        var listViewparent = FindParent(item, "sfwListView");
        if (item) {
            var entityfieldname;
            if (item.Name == "sfwGridView" && listViewparent) {


                $scope.FormModel.SelectedControl.IsGridChildOfListView = true;
                var objParentField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.FormModel.dictAttributes.sfwEntity, listViewparent.dictAttributes.sfwEntityField);
                if (objParentField) {
                    objField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(objParentField.Entity, item.dictAttributes.sfwEntityField);
                    if (objField) {
                        entityfieldname = objField.Entity;
                    }
                }

            }

            else if (item.Name == "sfwGridView") {

                if (item.dictAttributes.sfwParentGrid) {
                    var objGrid = FindControlByID($scope.SfxMainTable, item.dictAttributes.sfwParentGrid);
                    if (objGrid && objGrid.dictAttributes.sfwEntityField) {
                        var entityName = null;
                        var object = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.FormModel.dictAttributes.sfwEntity, objGrid.dictAttributes.sfwEntityField);
                        if (object) {
                            entityfieldname = object.ID;
                            entityName = object.Entity;
                            if (entityName && $scope.FormModel.SelectedControl && item.dictAttributes.sfwEntityField) {
                                var entObj = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(entityName, item.dictAttributes.sfwEntityField);
                                if (entObj) {
                                    if (entObj.DataType && entObj.DataType.toLowerCase() == "collection") {
                                        entityfieldname = entObj.Entity;
                                        blnFoundEntity = true;
                                    }
                                }
                            }
                            else if ($scope.FormModel.SelectedControl.Name != "TemplateField") {
                                $scope.IsGridCollectionEmpty = true;
                            }

                        }
                    }
                } else {
                    entityfieldname = item.dictAttributes.sfwEntityField;
                }
            }

            else if (item.Name == "sfwDialogPanel") {

                var strdialogpanelid = item.dictAttributes.ID;
                if (strdialogpanelid) {
                    var button = GetFieldFromFormObject($scope.SfxMainTable, 'sfwButton', 'sfwRelatedDialogPanel', strdialogpanelid);
                    if (button && button.length > 0 && button[0].dictAttributes.sfwRelatedControl) {
                        var gridview = GetFieldFromFormObject($scope.SfxMainTable, 'sfwGridView', 'ID', button[0].dictAttributes.sfwRelatedControl);
                        if (gridview && gridview.length > 0) {
                            entityfieldname = gridview[0].dictAttributes.sfwEntityField;
                        }
                    }
                    else {
                        var objScheduler = GetFieldFromFormObject($scope.SfxMainTable, 'sfwScheduler', 'sfwRelatedDialogPanel', strdialogpanelid);
                        if (objScheduler && objScheduler.length > 0) {
                            entityfieldname = objScheduler[0].dictAttributes.sfwEntityField;
                        }
                    }
                }
            }
            else if (item.Name == "sfwListView") {

                $scope.IsListViewSelected = true;
                entityfieldname = item.dictAttributes.sfwEntityField;
            }
            // if (entityfieldname && isLoadEntityTreeFromList) {
            if (entityfieldname) {
                if (entityfieldname == "InternalErrors" || entityfieldname == "ExternalErrors") {
                    entityfieldname = "entError";
                }
                else {
                    var objField = undefined;
                    if (item.Name == "sfwGridView" && listViewparent) {

                        $scope.FormModel.SelectedControl.IsGridChildOfListView = true;
                        var objParentField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.FormModel.dictAttributes.sfwEntity, listViewparent.dictAttributes.sfwEntityField);
                        if (objParentField) {
                            objField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(objParentField.Entity, entityfieldname);
                            if (objField) {
                                entityfieldname = objField.Entity;
                            }
                        }

                    }
                    else if ($scope.FormModel.SelectedControl && $scope.FormModel.SelectedControl.IsChildOfGrid && $scope.FormModel.SelectedControl && $scope.FormModel.SelectedControl.Name != "TemplateField") {
                        var objGrid = FindParent($scope.FormModel.SelectedControl, "sfwGridView");
                        if (objGrid && objGrid.dictAttributes.sfwParentGrid && objGrid.dictAttributes.sfwEntityField) {
                            var objParentGrid = FindControlByID($scope.FormModel, objGrid.dictAttributes.sfwParentGrid);
                            if (objParentGrid && objParentGrid.dictAttributes.sfwEntityField) {
                                var entObject = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.FormModel.dictAttributes.sfwEntity, objParentGrid.dictAttributes.sfwEntityField);
                                if (entObject) {
                                    entityfieldname = entObject.Entity;
                                    if (FindParent($scope.FormModel.SelectedControl, "ItemTemplate")) {
                                        var entObj = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(entityfieldname, objGrid.dictAttributes.sfwEntityField);
                                        if (entObj) {
                                            entityfieldname = entObj.Entity;
                                        }
                                    }
                                }
                            }
                        } else if (objGrid && objGrid.dictAttributes.sfwEntityField) {
                            var objField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.FormModel.dictAttributes.sfwEntity, objGrid.dictAttributes.sfwEntityField);
                            if (objField) {
                                entityfieldname = objField.Entity;
                            }

                        }
                    }
                    else if (!blnFoundEntity) {
                        var objField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.FormModel.dictAttributes.sfwEntity, entityfieldname);
                        if (objField && item.Name != "sfwGridView") {
                            entityfieldname = objField.Entity;
                        } else if (objField && item.Name == "sfwGridView" && objField.DataType && objField.DataType.toLowerCase() != "object") {
                            entityfieldname = objField.Entity;
                        } else {
                            entityfieldname = '';
                        }
                    }
                }
                $scope.CheckAndLoadEntityTree(entityfieldname);
            }
            else {
                if ($scope.FormModel.dictAttributes.sfwType !== "Lookup") {
                    $scope.$evalAsync(function () {

                        //if (item.Name == "sfwGridView" && listViewparent) {

                        //        $scope.FormModel.SelectedControl.IsGridChildOfListView = true;
                        //        var objParentField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.FormModel.dictAttributes.sfwEntity, listViewparent.dictAttributes.sfwEntityField);
                        //        if (objParentField) {
                        //            entityfieldname = objParentField.Entity;
                        //        }

                        //}

                        //else {
                        if (!(item.Name == "sfwGridView" && listViewparent)) {
                            for (var i = 0; i < $scope.lstLoadedEntityTrees.length; i++) {
                                $scope.lstLoadedEntityTrees[i].IsVisible = false;
                            }
                            $scope.entityTreeName = "";
                            $scope.currentEntiyTreeObject = undefined;
                        }
                        //}

                    });
                }
            }
        }
    };

    $scope.CheckAndLoadEntityTree = function (entityfieldname) {
        var blnFound = false;
        for (var i = 0; i < $scope.lstLoadedEntityTrees.length; i++) {
            if ($scope.lstLoadedEntityTrees[i].EntityName == entityfieldname && !$scope.lstLoadedEntityTrees[i].IsQuery) {
                blnFound = true;
                $scope.lstLoadedEntityTrees[i].IsVisible = true;
                $scope.entityTreeName = $scope.lstLoadedEntityTrees[i].EntityName;
                $scope.currentEntiyTreeObject = $scope.lstLoadedEntityTrees[i];
                break;
            }
            else {
                $scope.lstLoadedEntityTrees[i].IsVisible = false;

            }
        }
        if (!blnFound) {
            var objnew = {
                EntityName: entityfieldname, IsVisible: true, selectedobjecttreefield: undefined, lstselectedobjecttreefields: [], IsQuery: false
            };
            $scope.lstLoadedEntityTrees.push(objnew);
            $scope.entityTreeName = objnew.EntityName;
            $scope.currentEntiyTreeObject = objnew;
        }
    };

    $scope.PopulateEntityFieldsForOpenButton = function (obj, isLookup) {
        var alAvlFlds = [];
        PopulateControlsForActiveForm(alAvlFlds, $scope.FormModel, obj, isLookup);
        var lstEntityFields = [];
        var objGrid = FindParent(obj, "sfwGridView");
        if (obj.dictAttributes.sfwRelatedControl || objGrid) {
            if (alAvlFlds.length > 0) {
                for (var i = 0; i < alAvlFlds.length; i++) {
                    var s = alAvlFlds[i];
                    var strParamValue = "";
                    if (s.indexOf("~") > -1)
                        strParamValue = s.substring(0, s.indexOf("~"));
                    else
                        strParamValue = s;
                    lstEntityFields.push(strParamValue);
                }
            }
        }
        return lstEntityFields;
    };

    $scope.loadFormEntityTree = function (item) {
        if ($scope.FormModel && $scope.FormModel.IsLookupCriteriaEnabled == false) {
            $scope.IsGridSeleected = false;

            var blnFound = false;
            if ($scope.lstLoadedEntityTrees) {
                for (var i = 0; i < $scope.lstLoadedEntityTrees.length; i++) {
                    if ($scope.lstLoadedEntityTrees[i].EntityName == $scope.FormModel.dictAttributes.sfwEntity && !$scope.lstLoadedEntityTrees[i].IsQuery) {
                        blnFound = true;
                        $scope.lstLoadedEntityTrees[i].IsVisible = true;
                        $scope.entityTreeName = $scope.lstLoadedEntityTrees[i].EntityName;
                        $scope.currentEntiyTreeObject = $scope.lstLoadedEntityTrees[i];
                    }
                    else {
                        $scope.lstLoadedEntityTrees[i].IsVisible = false;

                    }

                }
                if (!blnFound) {
                    var objNew = {
                        EntityName: $scope.FormModel.dictAttributes.sfwEntity, IsVisible: true, selectedobjecttreefield: undefined, lstselectedobjecttreefields: [], IsQuery: false
                    };
                    $scope.lstLoadedEntityTrees.push(objNew);
                    $scope.entityTreeName = objNew.EntityName;
                    $scope.currentEntiyTreeObject = objNew;
                }
            }
        }
    };

    $scope.OnCutControlClick = function (model) {
        var arr = [];
        arr.push(model);
        $scope.CopyToClipBoard(arr, 'Control', true);
    };

    $scope.OnCopyControlClick = function (model) {
        var arr = [];
        arr.push(model);
        $scope.CopyToClipBoard(arr, 'Control', false);
    };

    $scope.GetParent = function (itm) {
        var control = FindParent(itm, "sfwGridView", true);
        if (!control) {
            control = FindParent(itm, "sfwDialogPanel", true);
            if (!control) {
                control = FindParent(itm, "sfwListView", true);
            }
        }
        return control;
    };

    $scope.CanPasteControl = function (cellVM, model, obj) {
        var retVal = true;
        if (model && model.Name == "sfwTable") {
            return false;
        }
        var dragElementParent = FindParent(obj, "sfwGridView");
        var dropElementParent = FindParent(cellVM, "sfwGridView");
        if (dragElementParent && dropElementParent && dragElementParent.dictAttributes.ID == dropElementParent.dictAttributes.ID) {
            retVal = true;
        }
        else if (FindParent(cellVM, "sfwTable") && FindParent(obj, "sfwGridView")) {
            return false;
        }
        var parent = $scope.GetParent(cellVM);
        if (["sfwScheduler", "sfwGridView", "sfwListView", "sfwChart", "sfwCalendar"].indexOf(model.Name) > -1 && FindParent(cellVM, "sfwDialogPanel")) {
            retVal = false;
        }
        else if (FindParent(cellVM, "sfwGridView") && FindParent(obj, "sfwDialogPanel")) {
            return false;
        }
        else if (FindParent(cellVM, "sfwListView") && FindParent(obj, "sfwDialogPanel")) {
            return false;
        }
        else if (["sfwScheduler", "sfwDialogPanel", "sfwListView", "sfwChart", "sfwCalendar"].indexOf(model.Name) > -1 && FindParent(cellVM, "sfwGridView")) {
            retVal = false;
        }

        else if ((model.Name === "sfwGridView" || model.Name === "sfwDialogPanel" || model.Name === "sfwListView" || model.Name === "sfwChart" || model.Name === "sfwCalendar" || model.Name === "sfwScheduler") && parent) {
            if (!CanaddGridInsideListView(obj, cellVM, "sfwListView")) {
                retVal = true;
            }
            else {
                retVal = false;
            }
        }
        else if (model.Name === "sfwGridView" && !parent && CanaddGridInsideListView(obj, cellVM, "sfwListView")) {

            retVal = false;

        }
        else if (CanaddGridInsideListView(obj, cellVM, "sfwGridView")) {
            return false;
        }
        return retVal;
    }
    function CanaddGridInsideListView(obj, cellVM, ParentName) {
        var retValue = false;
        var dragDataParent = FindParent(obj, ParentName);
        var dropDataParent = FindParent(cellVM, ParentName);
        if (!dragDataParent && !dropDataParent) {
            retValue = false;
        }
        else {
            if (dragDataParent && dropDataParent && dragDataParent.dictAttributes && dropDataParent.dictAttributes) {
                if (dragDataParent.dictAttributes.ID != dropDataParent.dictAttributes.ID) {
                    retValue = true;
                }
            }
            else if (!dragDataParent || !dropDataParent) {
                retValue = true;
            }
        }
        return retValue;
    }
    $scope.OnPasteControl = function (cellVM) {

        if ($scope.ClipboardData) {
            $scope.$evalAsync(function () {
                $rootScope.UndRedoBulkOp("Start");
                function iteratorClipboardData(obj) {
                    var model = GetBaseModel(obj);
                    if (!($scope.FormModel.dictAttributes && $scope.FormModel.dictAttributes.sfwType == "Lookup" && $scope.FormModel.IsLookupCriteriaEnabled && model && model.Name == "sfwLabel" && !model.dictAttributes.sfwIsCaption)) {

                        if ($scope.CanPasteControl(cellVM, model, obj)) {
                            var dropItemTemplate = FindParent(cellVM, "ItemTemplate");
                            var dragItemTemplate = FindParent(obj, "ItemTemplate");
                            if (dropItemTemplate && dragItemTemplate) {
                                $rootScope.PushItem(model, dropItemTemplate.Elements);
                            }

                            else {
                                $rootScope.PushItem(model, cellVM.Elements);
                            }

                            if ($scope.IsCutOper) {
                                $scope.OnDeleteControlClick(obj);
                            }
                            else {
                                if (obj.Name == "sfwLabel" && obj.dictAttributes && obj.dictAttributes.sfwIsCaption && model.dictAttributes.ID) {
                                    model.dictAttributes.ID = GetControlIDForCaption($scope.FormModel, obj.Name, true);
                                }
                                else if (model.dictAttributes.ID) {
                                    model.dictAttributes.ID = GetControlID($scope.FormModel, obj.Name);
                                }
                                if (model && model.Elements.length > 0) {
                                    $scope.ChangeControlID(model);
                                }
                            }
                            if (obj.Name == "udc") {
                                model.UcChild = [];
                                model.UcChild.push(obj.UcChild[0]);
                            }
                            if ($scope.FormModel.dictAttributes && $scope.FormModel.dictAttributes.sfwType == "Lookup") {
                                if ($scope.FormModel.IsLookupCriteriaEnabled && (model.dictAttributes.sfwEntityField || model.dictAttributes.sfwLinkable || model.dictAttributes.sfwRelatedControl)) {
                                    if (model.dictAttributes.sfwEntityField) {
                                        delete model.dictAttributes.sfwEntityField;
                                    }
                                    if (model.dictAttributes.sfwLinkable) {
                                        delete model.dictAttributes.sfwLinkable;
                                    }
                                    if (model.dictAttributes.sfwRelatedControl) {
                                        delete model.dictAttributes.sfwRelatedControl;
                                    }
                                }
                                else if (!$scope.FormModel.IsLookupCriteriaEnabled && (model.dictAttributes.sfwDataField || model.dictAttributes.sfwQueryId)) {
                                    if (model.dictAttributes.sfwDataField) {
                                        delete model.dictAttributes.sfwDataField;
                                    }
                                    if (model.dictAttributes.sfwQueryID) {
                                        delete model.dictAttributes.sfwQueryID;
                                    }
                                }
                            }

                            if ($scope.IsCutOper) {
                                $scope.CheckForFilterGrid(obj, model);
                            }
                            model.ParentVM = cellVM;
                        }
                    }
                }

                angular.forEach($scope.ClipboardData, iteratorClipboardData);
                if ($scope.IsCutOper) {
                    $scope.ClipboardData = [];
                    $scope.ClipboardDataOpeType = "";
                    $scope.IsCutOper = false;
                }
                $rootScope.UndRedoBulkOp("End");
            });
        }
    };


    //#region Select Control Methods
    $scope.ChangeControlID = function (objModel) {
        angular.forEach(objModel.Elements, function (obj) {
            var model = obj;
            if (obj.Name == "sfwLabel" && obj.dictAttributes && obj.dictAttributes.sfwIsCaption && model.dictAttributes.ID) {
                model.dictAttributes.ID = GetControlIDForCaption($scope.FormModel, obj.Name, true);
            }
            else if (model.dictAttributes.ID) {
                model.dictAttributes.ID = GetControlID($scope.FormModel, obj.Name);
            }
            if (model && model.Elements && model.Elements.length > 0) {
                $scope.ChangeControlID(model);
            }
        });
    };

    $scope.selectControlOnDoubleClick = function (objChild, event) {
        $scope.selectControl(objChild, event);
        $scope.OnSelectLeftFormTab('Properties');
        if ($scope.IsToolsDivCollapsed) {
            $scope.IsToolsDivCollapsed = !$scope.IsToolsDivCollapsed;
        }
    };

    $scope.selectControl = function (objChild, event) {
        $scope.isTemplateFieldSelected = false;
        $scope.IsGridCollectionEmpty = false;
        if (objChild) {
            if (!objChild.isLoaded) {
                objChild.isLoaded = true;
            }
            if ($scope.FormModel) {
                if ($scope.FormModel.SelectedControl && ($scope.FormModel.SelectedControl.Name == "sfwPanel" || $scope.FormModel.SelectedControl.Name == "sfwDialogPanel" || $scope.FormModel.SelectedControl.Name == "sfwListView")) {
                    $scope.FormModel.SelectedControl.IsVisible = false;
                }

                SetFormSelectedControl($scope.FormModel, objChild, event);

                if (objChild.Name == "sfwTabSheet") {
                    objChild.ParentVM.SelectedTabSheet = objChild;
                    objChild.ParentVM.SelectedTabSheet.IsSelected = true;
                }

                if (objChild.Name == "sfwPanel" || objChild.Name == "sfwDialogPanel" || objChild.Name == "sfwListView") {
                    //objChild.initialvisibilty = !objChild.initialvisibilty;
                    objChild.IsVisible = true;
                }
                if (objChild.Name == "sfwGridView") {
                    if (objChild.dictAttributes.sfwBoundToQuery && objChild.dictAttributes.sfwBoundToQuery.toLowerCase() == "true") {
                        $scope.setQueryFieldsIfGridisBoundedToQuery(objChild);
                    } else {

                        $scope.loadGridEntityTree(objChild);
                        $scope.ObjgridBoundedQuery.IsQuery = false;
                    }
                }
                else if (objChild.Name == "sfwDialogPanel") {
                    $scope.loadGridEntityTree(objChild);
                    $scope.ObjgridBoundedQuery.IsQuery = false;
                }
                else if (objChild.Name == "sfwListView") {
                    $scope.loadGridEntityTree(objChild);
                    $scope.ObjgridBoundedQuery.IsQuery = false;
                }
                else {
                    var ObjGrid = FindParent(objChild, "sfwGridView");

                    if (ObjGrid && objChild.Name == "TemplateField") {
                        $scope.isTemplateFieldSelected = true;
                    }

                    //For template field we need from main entity
                    if (ObjGrid) {
                        if (ObjGrid.dictAttributes.sfwBoundToQuery && ObjGrid.dictAttributes.sfwBoundToQuery.toLowerCase() == "true") {
                            $scope.setQueryFieldsIfGridisBoundedToQuery(ObjGrid);
                        } else {
                            $scope.FormModel.SelectedControl.IsChildOfGrid = true;
                            $scope.loadGridEntityTree(ObjGrid);
                            $scope.ObjgridBoundedQuery.IsQuery = false;
                        }

                    }
                    else {
                        $scope.ObjgridBoundedQuery.IsQuery = false;
                        if (!$scope.FormModel.IsLookupCriteriaEnabled) {
                            var Objdialog = FindParent(objChild, "sfwDialogPanel");
                            if (Objdialog) {
                                $scope.loadGridEntityTree(Objdialog);
                            }
                            else {
                                var Objlist = FindParent(objChild, "sfwListView");
                                if (Objlist) {
                                    $scope.loadGridEntityTree(Objlist);
                                }
                                else {
                                    var gridModel = FindParent(objChild, "sfwGridView");
                                    if (gridModel && gridModel.dictAttributes.sfwParentGrid) {
                                        $scope.loadGridEntityTree(gridModel);
                                    } else {
                                        $scope.loadFormEntityTree(objChild);
                                    }
                                }
                            }
                        }
                    }
                }
                //$scope.AddRowsAndColumns(objChild, event);
                if ($scope.setDisplayNoneToTable) {
                    $scope.setDisplayNoneToTable();
                }

                if (event && event.stopPropagation) {
                    event.stopPropagation();
                }
            }
        }
    };

    $scope.onRefreshBoundtoQueryFields = function () {
        if ($scope.FormModel.SelectedControl) {
            $scope.selectControl($scope.FormModel.SelectedControl, event);
            $scope.ShowRefreshCompletedDialog();
        }
    };

    $scope.setQueryFieldsIfGridisBoundedToQuery = function (objChild) {
        if ((objChild && objChild.dictAttributes.sfwBoundToQuery && objChild.dictAttributes.sfwBoundToQuery.toLowerCase() == "true") || ObjGrid) {
            var QueryID = objChild.dictAttributes.sfwBaseQuery;
            $scope.ObjgridBoundedQuery.lstselectedobjecttreefields = [];
            $scope.ObjgridBoundedQuery.SortedColumns = [];
            //dummy dialog id is given as second parameter in below call, so that it gets the column alias name from query instead of actual columns.
            $.connection.hubForm.server.getEntityQueryColumns(QueryID, "dummy").done(function (data) {
                //$scope.receiveQueryFields(data, query.dictAttributes.sfwQueryRef);
                $scope.$evalAsync(function () {
                    if (data && data.length > 0) {
                        var lstDataFields = data;
                        sortListBasedOnproperty(lstDataFields, "", "CodeID");
                        $scope.ObjgridBoundedQuery.lstselectedobjecttreefields = $scope.getModelForBoundedQueryList(lstDataFields);
                        $scope.ObjgridBoundedQuery.SortedColumns = $scope.ObjgridBoundedQuery.lstselectedobjecttreefields;
                    }
                });
            });
            $scope.IsGridSeleected = true;
            if (QueryID) {
                $scope.ObjgridBoundedQuery.IsQuery = true;
            }
            $scope.entityTreeName = $scope.FormModel.dictAttributes.sfwEntity;
        } else {
            $scope.ObjgridBoundedQuery.IsQuery = false;
        }
    };

    $scope.getModelForBoundedQueryList = function (lstfields) {
        var lst = [];
        lst = $getModelList.getModelListFromQueryFieldlist(lstfields);
        return lst;
    };

    $scope.OnDeleteControlClick = function (aParam) {
        if (aParam) {
            $rootScope.DeleteItem(aParam, aParam.ParentVM.Elements);
            if (aParam.ParentVM) {
                $scope.selectControl(aParam.ParentVM, null);
            }
        }
    };


    $scope.OnCreateCompatibleLabelClickForPanel = function (panelModel) {
        if (panelModel) {
            $rootScope.UndRedoBulkOp("Start");
            $scope.CreateCompatibleLabelForControls(panelModel);
            $rootScope.UndRedoBulkOp("End");
        }
    };

    $scope.CreateCompatibleLabelForControls = function (objModel) {
        if ($scope.ValidateControl(objModel)) {
            CreateCompatibleLabel(objModel, $scope.FormModel, $EntityIntellisenseFactory, $rootScope);
        }

        function iterator(itm) {
            $scope.CreateCompatibleLabelForControls(itm);
        }
        angular.forEach(objModel.Elements, iterator);
    };

    $scope.ValidateControl = function (objModel) {
        if ((objModel && objModel.dictAttributes.sfwIsCaption)) {
            return false;
        }
        else if (objModel && (objModel.Name == "sfwGridView" || objModel.Name == "sfwChart" || objModel.Name == "sfwPanel" ||
            objModel.Name == "sfwDialogPanel" || objModel.Name == "sfwButton" || objModel.Name == "sfwTabContainer" || objModel.Name == "sfwTabSheet"
            || objModel.Name == "udc" || objModel.Name == "sfwListViewer")) {
            return false;
        }
        else {
            objModel.IsChildOfGrid = false;
            var objGridView = FindParent(objModel, "sfwGridView");
            if (objGridView) {
                objModel.IsChildOfGrid = true;
            }
            if (objModel.IsChildOfGrid) {
                return false;
            }
            else if (objModel.dictAttributes && (!objModel.dictAttributes.sfwEntityField && !objModel.dictAttributes.sfwDataField)) {
                return false;
            }
            else if (hasCaption(objModel)) {
                return false;
            }
            return true;
        }
    };

    //#region Cut/Copy/Paste Cell

    $scope.OnCutCell = function (cellVM) {
        $scope.CopyToClipBoard(cellVM.Elements, 'Cell', true);
    };

    $scope.OnCopyCell = function (cellVM) {
        $scope.CopyToClipBoard(cellVM.Elements, 'Cell', false);
    };

    $scope.CopyToClipBoard = function (data, opetype, iscutoper) {
        $scope.ClipboardData = [];
        $scope.ClipboardDataOpeType = opetype;
        $scope.IsCutOper = iscutoper;
        function iterator(obj) {
            //var model = GetBaseModel(obj);
            $scope.ClipboardData.push(obj);
        }
        angular.forEach(data, iterator);
    };

    $scope.OnPasteCell = function (cellVM) {
        if ($scope.ClipboardData) {
            $scope.$evalAsync(function () {
                $rootScope.UndRedoBulkOp("Start");
                function iteratorClipboardData(obj) {
                    if ($scope.IsCutOper) {
                        $scope.ClearCell(obj.ParentVM);
                    }
                    var model = GetBaseModel(obj);
                    $rootScope.PushItem(model, cellVM.Elements);
                    if (!$scope.IsCutOper) {
                        if (obj.Name == "sfwLabel" && obj.dictAttributes && obj.dictAttributes.sfwIsCaption) {
                            model.dictAttributes.ID = GetControlIDForCaption($scope.FormModel, obj.Name, true);
                        }
                        else {
                            model.dictAttributes.ID = GetControlID($scope.FormModel, obj.Name);
                        }
                        if (model && model.Elements.length > 0) {
                            $scope.ChangeControlID(model);
                        }
                    }

                    if ($scope.IsCutOper) {
                        $scope.CheckForFilterGrid(obj, model);
                    }
                    if (obj.Name == "udc") {
                        model.UcChild = [];
                        model.UcChild.push(obj.UcChild[0]);
                    }

                    model.ParentVM = cellVM;
                }

                angular.forEach($scope.ClipboardData, iteratorClipboardData);
                if ($scope.IsCutOper) {
                    $scope.ClipboardData = [];
                    $scope.ClipboardDataOpeType = "";
                    $scope.IsCutOper = false;
                }
                $rootScope.UndRedoBulkOp("End");
            });
        }
    };

    $scope.CheckForFilterGrid = function (oldModel, newModel) {
        if (oldModel.IsShowDataField) {
            newModel.IsShowDataField = oldModel.IsShowDataField;
        }
        function iterator(itm) {
            for (var i = 0; i < oldModel.Elements.length; i++) {
                if (itm.Name == oldModel.Elements[i].Name && itm.dictAttributes.ID == oldModel.Elements[i].dictAttributes.ID) {
                    $scope.CheckForFilterGrid(oldModel.Elements[i], itm);
                }
            }
        }

        angular.forEach(newModel.Elements, iterator);
    };

    $scope.ClearCell = function (cellVM) {
        while (cellVM.Elements.length > 0) {
            $rootScope.DeleteItem(cellVM.Elements[0], cellVM.Elements);
        }
    };
    //#endregion

    $scope.OnCopyCutPasteControlClick = function (operation) {
        //cut
        if ($scope.FormModel && $scope.FormModel.SelectedControl && $scope.FormModel.dictAttributes.sfwType == "Lookup" && ($scope.FormModel.SelectedControl.Name == "sfwTabContainer" || $scope.FormModel.SelectedControl.Name == "sfwGridView")) {
            return;
        }
        else if ($scope.FormModel && $scope.FormModel.SelectedControl && $scope.FormModel.SelectedControl.Name == "sfwToolTipButton") {
            return;
        }
        else if ($scope.FormModel && $scope.FormModel.SelectedControl && $scope.FormModel.SelectedControl.Name == "sfwPanel" && $scope.FormModel.SelectedControl.IsMainPanel) {
            return;
        }
        else if ($scope.FormModel && $scope.FormModel.SelectedControl && $scope.FormModel.SelectedControl.Name != "TemplateField") {
            if (operation == "cut") {
                if ($scope.FormModel.SelectedControl.Name != "sfwColumn") {
                    $scope.OnCutControlClick($scope.FormModel.SelectedControl);
                }
                else if ($scope.FormModel.SelectedControl.Name == "sfwColumn" || $scope.FormModel.SelectedControl.Name == "sfwButtonGroup") {
                    $scope.OnCutCell($scope.FormModel.SelectedControl);
                }
            }
            //copy
            else if (operation == "copy") {
                if ($scope.FormModel.SelectedControl.Name != "sfwColumn") {
                    $scope.OnCopyControlClick($scope.FormModel.SelectedControl);
                }
                else if ($scope.FormModel.SelectedControl.Name == "sfwColumn" || $scope.FormModel.SelectedControl.Name == "sfwButtonGroup") {
                    $scope.OnCopyCell($scope.FormModel.SelectedControl);
                }
            }
            //paste
            else if (operation == "paste" && $scope.FormModel.SelectedControl.Name == "sfwColumn" || $scope.FormModel.SelectedControl.Name == "sfwButtonGroup") {
                if ($scope.ClipboardData && $scope.ClipboardDataOpeType == "Control") {
                    $scope.OnPasteControl($scope.FormModel.SelectedControl);
                }
                else if ($scope.ClipboardData && $scope.ClipboardDataOpeType == "Cell") {
                    $scope.OnPasteCell($scope.FormModel.SelectedControl);
                }
            }
            else if (operation == "paste" && FindParent($scope.FormModel.SelectedControl, "sfwGridView")) {
                if ($scope.ClipboardData && $scope.ClipboardDataOpeType == "Control") {
                    $scope.OnPasteControl($scope.FormModel.SelectedControl);
                }
            }
        }
        else if ($scope.FormModel && $scope.FormModel.SelectedControl && $scope.FormModel.SelectedControl.Name == "TemplateField" && operation == "paste") {
            if ($scope.ClipboardData && $scope.ClipboardDataOpeType == "Control") {
                $scope.OnPasteControl($scope.FormModel.SelectedControl.Elements[0]);
            }
        }
    };

    $scope.OnRowColumnInsertMoveClick = function (operation) {
        if ($scope.FormModel && $scope.FormModel.SelectedControl) {
            if ($scope.FormModel.SelectedControl.Name == "sfwPanel" && $scope.FormModel.SelectedControl.IsMainPanel) {
                return;
            }
            else {
                var cellVM = null;
                var tableVM = null;
                if ($scope.FormModel.SelectedControl.Name == "sfwColumn") {
                    cellVM = $scope.FormModel.SelectedControl;
                }
                else {
                    cellVM = FindParent($scope.FormModel.SelectedControl, "sfwColumn");
                }
                tableVM = cellVM && cellVM.ParentVM ? cellVM.ParentVM.ParentVM : null;
                if (tableVM && cellVM) {
                    $scope.$evalAsync(function () {
                        if (operation == "InsertRowAbove") {
                            var iRowIndex = tableVM.Elements.indexOf(cellVM.ParentVM);

                            var sfxRowModel = InsertRow(cellVM, iRowIndex, tableVM);
                            var index = GetIndexToInsert(false, iRowIndex);

                            $rootScope.InsertItem(sfxRowModel, tableVM.Elements, index);
                        }
                        else if (operation == "InsertRowBelow") {
                            var iRowIndex = tableVM.Elements.indexOf(cellVM.ParentVM);

                            var sfxRowModel = InsertRow(cellVM, iRowIndex, tableVM);
                            var index = GetIndexToInsert(true, iRowIndex);
                            $rootScope.InsertItem(sfxRowModel, tableVM.Elements, index);
                        }
                        else if (operation == "InsertColumnLeft") {
                            var iColumnIndex = cellVM.ParentVM.Elements.indexOf(cellVM);
                            $scope.InsertColumn(cellVM, false, iColumnIndex, tableVM);
                        }
                        else if (operation == "InsertColumnRight") {
                            var iColumnIndex = cellVM.ParentVM.Elements.indexOf(cellVM);
                            $scope.InsertColumn(cellVM, true, iColumnIndex, tableVM);
                        }
                        else if (operation == "MoveRowUp") {
                            $scope.MoveRowUp(cellVM, tableVM)
                        }
                        else if (operation == "MoveRowDown") {
                            $scope.MoveRowDown(cellVM, tableVM);
                        }
                        else if (operation == "MoveColumnLeft") {
                            $scope.MoveColumnLeft(cellVM, tableVM);
                        }
                        else if (operation == "MoveColumnRight") {
                            $scope.MoveColumnRight(cellVM, tableVM);
                        }
                    });
                }
            }
        }
    };

    //#region Insert Column Left Or Right
    $scope.InsertColumn = function (aParam, isRight, curColIndex, tableVM) {
        function iAddColumn(rowVM) {
            var cellVM;
            for (var i = 0; i < rowVM.Elements.length; i++) {
                var acellvm = rowVM.Elements[i];
                if (rowVM.Elements.indexOf(acellvm) == curColIndex) {
                    cellVM = acellvm;
                    break;
                }
            }

            if (!cellVM) {
                $scope.CheckAndAddColumnsToRow(rowVM, curColIndex, curColIndex);
            }

            if (cellVM) {
                var index = rowVM.Elements.indexOf(cellVM);

                var prefix = "swc";
                var sfxCellModel = {
                    Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {
                    }, Elements: [], Children: []
                };
                sfxCellModel.ParentVM = rowVM;

                if (index < rowVM.Elements.length) {
                    $rootScope.InsertItem(sfxCellModel, rowVM.Elements, index);
                }
                else {
                    $rootScope.PushItem(sfxCellModel, rowVM.Elements);
                }
            }
        }
        function iAddcolumnToRight(rowVM) {
            $scope.CheckAndAddColumnsToRow(rowVM, nextColIndex, curColIndex);
        }
        if (aParam) {

            if (isRight)//inserting next to current column
            {

                var nextColIndex = $scope.GetNextColIndex(aParam);
                $rootScope.UndRedoBulkOp("Start");


                angular.forEach(tableVM.Elements, iAddcolumnToRight);

                $rootScope.UndRedoBulkOp("End");

            }
            else //inserting before to current column
            {
                $rootScope.UndRedoBulkOp("Start");

                angular.forEach(tableVM.Elements, iAddColumn);

                $rootScope.UndRedoBulkOp("End");
            }
        }
    };

    $scope.CheckAndAddColumnsToRow = function (arowVM, aintnextColIndex, aintCurColIndex) {
        var colIndex = 0;
        var isAdded = false;
        while (colIndex <= aintnextColIndex) {
            var obj = undefined;
            for (var i = 0; i < arowVM.Elements.length; i++) {
                var cellvm = arowVM.Elements[i];
                if (arowVM.Elements.indexOf(cellvm) == colIndex) {
                    obj = cellvm;
                    break;
                }
            }

            if (obj) {
                colIndex = $scope.GetNextColIndex(obj);
            }

            else {
                var prefix = "swc";
                var sfxCellModel = {
                    Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                };
                sfxCellModel.ParentVM = arowVM;

                $rootScope.PushItem(sfxCellModel, arowVM.Elements);


                isAdded = true;
                colIndex++;
            }
        }

        if (!isAdded) {
            var prefix = "swc";
            var sfxCellModel = {
                Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
            };
            sfxCellModel.ParentVM = arowVM;


            if (aintnextColIndex < arowVM.Elements.length) {
                $rootScope.InsertItem(sfxCellModel, arowVM.Elements, aintCurColIndex + 1);
            }
            else {
                $rootScope.PushItem(sfxCellModel, arowVM.Elements);
            }
        }
    };

    $scope.GetNextColIndex = function (aCellVM) {

        var nextColIndex = aCellVM.ParentVM.Elements.indexOf(aCellVM);

        var colSpan = $scope.getColspan(aCellVM);
        if (colSpan > 0) {
            nextColIndex = aCellVM.ParentVM.Elements.indexOf(aCellVM) + colSpan;
        }
        else {
            nextColIndex++;
        }

        return nextColIndex;
    };

    $scope.getColspan = function (item) {
        if (item && item.dictAttributes.ColumnSpan && parseInt(item.dictAttributes.ColumnSpan)) {
            return item.dictAttributes.ColumnSpan;
        }
        else {
            return 1;
        }
    };


    //#endregion

    //#region Insert Cell / Delete Cell

    $scope.InsertCell = function (arowVM, acellVM, isRight) {
        var icurColIndex = -1;
        if (isRight) {
            icurColIndex = arowVM.Elements.indexOf(acellVM) + 1;
        }
        else {
            icurColIndex = arowVM.Elements.indexOf(acellVM);

            if (icurColIndex > 0) {
                icurColIndex -= icurColIndex;
            }
        }
        if (icurColIndex > -1) {
            var prefix = "swc";
            var sfxCellModel = {
                Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {
                }, Elements: [], Children: []
            };
            sfxCellModel.ParentVM = arowVM;

            if (icurColIndex < arowVM.Elements.length) {
                $rootScope.InsertItem(sfxCellModel, arowVM.Elements, icurColIndex);
            }
            else {
                $rootScope.PushItem(sfxCellModel, arowVM.Elements);
            }
        }
    };

    $scope.deleteCellClick = function () {
        if ($scope.FormModel && $scope.FormModel.SelectedControl) {
            if ($scope.FormModel.SelectedControl.Name == "sfwPanel" && $scope.FormModel.SelectedControl.IsMainPanel) {
                return;
            }
            else {
                var cellVM = null;
                //var objGridView = FindParent($scope.FormModel.SelectedControl, "sfwGridView");
                if ($scope.FormModel.SelectedControl.Name == "sfwColumn") {
                    cellVM = $scope.FormModel.SelectedControl;
                }
                else {
                    cellVM = FindParent($scope.FormModel.SelectedControl, "sfwColumn");
                }
                $scope.deleteCell(cellVM);
            }
        }
    };

    $scope.deleteCell = function (aCellVM) {
        //if table has only one cell it cannot be deleted
        if (aCellVM.ParentVM && aCellVM.ParentVM.ParentVM && aCellVM.ParentVM.ParentVM.Name == 'sfwTable' && aCellVM.ParentVM.ParentVM.Elements.length == 1 && aCellVM.ParentVM.Elements.length == 1) {
            $SgMessagesService.Message("Message", "Cannot delete as only one cell present.");

        }
        else {
            $rootScope.DeleteItem(aCellVM, aCellVM.ParentVM.Elements);
            if ($scope.FormModel && $scope.FormModel.SelectedControl && $scope.FormModel.SelectedControl.ParentVM) {
                if ($scope.FormModel.SelectedControl.ParentVM.Elements.length == 0 && $scope.FormModel.SelectedControl.ParentVM.Name == "sfwRow") {
                    $rootScope.DeleteItem($scope.FormModel.SelectedControl.ParentVM, $scope.FormModel.SelectedControl.ParentVM.ParentVM.Elements);
                    $scope.selectControl($scope.FormModel.SelectedControl.ParentVM.ParentVM, null);
                } else {
                    $scope.selectControl($scope.FormModel.SelectedControl.ParentVM, null);
                }
            }
        }
    };

    $scope.OnInsertCellClick = function (operation) {
        if ($scope.FormModel && $scope.FormModel.SelectedControl) {
            if ($scope.FormModel.SelectedControl.Name == "sfwPanel" && $scope.FormModel.SelectedControl.IsMainPanel) {
                return;
            }
            else {
                var cellVM = null;
                var tableVM = null;
                //var objGridView = FindParent($scope.FormModel.SelectedControl, "sfwGridView");
                if ($scope.FormModel.SelectedControl.Name == "sfwColumn") {
                    cellVM = $scope.FormModel.SelectedControl;
                }
                else {
                    cellVM = FindParent($scope.FormModel.SelectedControl, "sfwColumn");
                }
                tableVM = cellVM && cellVM.ParentVM ? cellVM.ParentVM.ParentVM : null;
                if (tableVM && cellVM) {
                    $scope.$evalAsync(function () {
                        if (operation == "InsertCellLeft") {
                            $scope.InsertCell(cellVM.ParentVM, cellVM, false);
                        }
                        else if (operation == "InsertCellRight") {
                            $scope.InsertCell(cellVM.ParentVM, cellVM, true);
                        }
                    });
                }
            }
        }
    };

    //#endregion

    //#region Move Row/Column Up/Down

    $scope.MoveRowUp = function (aParam, tableVM) {
        if (aParam) {
            var cellVM = aParam;
            var RowIndex = tableVM.Elements.indexOf(cellVM.ParentVM);
            if (RowIndex > 0) {
                //Removing
                $rootScope.UndRedoBulkOp("Start");
                $rootScope.DeleteItem(cellVM.ParentVM, tableVM.Elements);

                //Adding
                $rootScope.InsertItem(cellVM.ParentVM, tableVM.Elements, RowIndex - 1);
                $rootScope.UndRedoBulkOp("End");

            }
        }
    };

    $scope.MoveRowDown = function (aParam, tableVM) {
        if (aParam) {
            {
                var cellVM = aParam;

                var RowCount = tableVM.Elements.length;
                var RowIndex = tableVM.Elements.indexOf(cellVM.ParentVM);
                if (RowIndex < RowCount - 1) {

                    //Removing
                    $rootScope.UndRedoBulkOp("Start");
                    $rootScope.DeleteItem(cellVM.ParentVM, tableVM.Elements);


                    //Adding
                    $rootScope.InsertItem(cellVM.ParentVM, tableVM.Elements, RowIndex + 1);
                    $rootScope.UndRedoBulkOp("End");
                }
            }
        }
    };

    $scope.MoveColumnLeft = function (aParam, tableVM) {
        var objGridView = FindParent($scope.FormModel.SelectedControl, "sfwGridView");
        if (objGridView) {
            var col = FindParent($scope.FormModel.SelectedControl, "TemplateField");
            if ($scope.FormModel.SelectedControl.Name == "TemplateField") {
                col = $scope.FormModel.SelectedControl;
            }
            if (col) {
                var ColIndex = col.ParentVM.Elements.indexOf(col);
                if (ColIndex > 0) {
                    $rootScope.UndRedoBulkOp("Start");

                    var model = col.ParentVM.Elements[ColIndex];
                    //Removing
                    $rootScope.DeleteItem(col.ParentVM.Elements[ColIndex], col.ParentVM.Elements);

                    //Adding
                    $rootScope.InsertItem(model, col.ParentVM.Elements, ColIndex - 1);

                    $rootScope.UndRedoBulkOp("End");

                    // this.SelectControlAfterMoveOpe(selectedControlVM, curRowVM.RowIndex, cellVM.ColIndex - 1);
                }
            }
        }
        else {
            function iMoveColumnLeft(rowVM) {
                var model = rowVM.Elements[ColIndex];
                if (model) {
                    //Removing
                    $rootScope.DeleteItem(rowVM.Elements[ColIndex], rowVM.Elements);

                    //Adding
                    $rootScope.InsertItem(model, rowVM.Elements, ColIndex - 1);
                }
            }

            if (aParam) {
                var ColIndex = aParam.ParentVM.Elements.indexOf(aParam);
                if (ColIndex > 0) {
                    $rootScope.UndRedoBulkOp("Start");

                    angular.forEach(tableVM.Elements, iMoveColumnLeft);

                    $rootScope.UndRedoBulkOp("End");

                }
            }
        }
    };

    $scope.MoveColumnRight = function (aParam, tableVM) {
        var objGridView = FindParent($scope.FormModel.SelectedControl, "sfwGridView");
        if (objGridView) {
            var col = FindParent($scope.FormModel.SelectedControl, "TemplateField");
            if ($scope.FormModel.SelectedControl.Name == "TemplateField") {
                col = $scope.FormModel.SelectedControl;
            }
            if (col) {
                var ColCount = col.ParentVM.Elements.length;
                var ColIndex = col.ParentVM.Elements.indexOf(col);
                if (ColIndex < ColCount - 1) {
                    $rootScope.UndRedoBulkOp("Start");

                    var model = col.ParentVM.Elements[ColIndex];
                    //Removing
                    $rootScope.DeleteItem(col.ParentVM.Elements[ColIndex], col.ParentVM.Elements);

                    //Adding
                    $rootScope.InsertItem(model, col.ParentVM.Elements, ColIndex + 1);

                    $rootScope.UndRedoBulkOp("End");
                }
            }
        }
        else {
            function iMoveColumnRight(rowVM) {
                var model = rowVM.Elements[ColIndex];
                if (model) {
                    //Removing
                    $rootScope.DeleteItem(rowVM.Elements[ColIndex], rowVM.Elements);

                    //Adding
                    $rootScope.InsertItem(model, rowVM.Elements, ColIndex + 1);
                }
            }

            if (aParam) {
                var ColCount = GetMaxColCount(aParam.ParentVM, tableVM);
                var ColIndex = aParam.ParentVM.Elements.indexOf(aParam);
                if (ColIndex < ColCount - 1) {
                    $rootScope.UndRedoBulkOp("Start");

                    angular.forEach(tableVM.Elements, iMoveColumnRight);

                    $rootScope.UndRedoBulkOp("End");
                }
            }
        }
    };

    //#endregion


    //#region create button method list
    $scope.ButtonsDetailsCollection = [];
    $scope.LoadButtonDetails = function () {
        var type = $scope.currentfile.FileType;
        var lstMethod = [];
        if (type) {
            if (type == "Lookup") {
                lstMethod = $rootScope.LstButtonMethodLookup;
            }
            else if (type == "Wizard") {
                lstMethod = $rootScope.LstButtonMethodWizard;
            }
            else if (type == "Maintenance" || type == "UserControl") {
                lstMethod = $rootScope.LstButtonMethodMaintenance;
            }

            if (lstMethod.length > 0) {
                //console.log(lstMethod);
                angular.forEach(lstMethod, function (objBtnMethod) {
                    var buttonDetails = {
                    };
                    var attr = null;
                    attr = objBtnMethod.Attribute;
                    buttonDetails.Method = objBtnMethod.Code;
                    buttonDetails.Description = objBtnMethod.Description;
                    buttonDetails.Category = objBtnMethod.Category;

                    $scope.ButtonsDetailsCollection.push(buttonDetails);
                });
            }
        }
    };
    $scope.LoadButtonDetails();
    //#endregion of create method list section

    $scope.FindEntityName = function (model, entityid, isChildOfGrid) {
        var entityName = entityid;
        if (model.dictAttributes.sfwParentGrid && model.dictAttributes.sfwEntityField) {
            var parentGrid = FindControlByID($scope.FormModel, model.dictAttributes.sfwParentGrid);
            var objParentField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.FormModel.dictAttributes.sfwEntity, parentGrid.dictAttributes.sfwEntityField);
            if (objParentField) {
                entityName = objParentField.Entity;
                if (isChildOfGrid) {
                    var objField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(objParentField.Entity, model.dictAttributes.sfwEntityField);
                    if (objField) {
                        entityName = objField.Entity;
                    }
                }
            }
        } else {
            var objmodel = FindControlByID($scope.FormModel, model.dictAttributes.sfwRelatedGrid);
            if (objmodel && objmodel.dictAttributes.sfwEntityField) {
                entityName = getEntityName(objmodel.dictAttributes.sfwEntityField, entityid);
            }
        }
        return entityName;
    };

    //#region Functions for Clear Panel, Delete Row and Delete Column.

    $scope.clearCell = function (cell) {
        while (cell.Elements.length > 0) {
            $rootScope.DeleteItem(cell.Elements[0], cell.Elements);
        }
    };
    $scope.clearPanel = function () {
        if ($scope.FormModel.SelectedControl) {
            if ($scope.FormModel.dictAttributes.sfwType && $scope.FormModel.dictAttributes.sfwType.toLowerCase() == "lookup" && !$scope.FormModel.IsLookupCriteriaEnabled && !$scope.FormModel.IsPrototypeLookupCriteriaEnabled) {
                return;
            }
            if ($scope.FormModel.dictAttributes.sfwType === "Lookup") {
                var cellVM = FindParent($scope.FormModel.SelectedControl, "sfwColumn", true);
                if (cellVM && cellVM.Elements && cellVM.Elements.length > 0 && cellVM.Elements[0].Name === "sfwTabContainer") {
                    return;
                }
            }


            var table = null;
            if ($scope.FormModel.SelectedControl.Name === "sfwPanel") {
                table = $scope.FormModel.SelectedControl.Elements[0];
            }
            else {
                table = FindParent($scope.FormModel.SelectedControl, "sfwTable", true);
            }

            if (table) {
                $rootScope.UndRedoBulkOp("Start");
                for (var rowIndex = 0; rowIndex < table.Elements.length; rowIndex++) {
                    var row = table.Elements[rowIndex];
                    if (row) {
                        for (var cellIndex = 0; cellIndex < row.Elements.length; cellIndex++) {
                            $scope.clearCell(row.Elements[cellIndex]);
                        }
                    }
                }
                if ($scope.FormModel.SelectedControl.Name !== "sfwPanel" && $scope.FormModel.SelectedControl.Name !== "sfwTable" && $scope.FormModel.SelectedControl.Name !== "sfwColumn") {
                    var parentCell = FindParent($scope.FormModel.SelectedControl, "sfwColumn", true);
                    if (parentCell) {
                        $scope.selectControl(parentCell);
                    }
                }
                $rootScope.UndRedoBulkOp("End");
            }
        }
    };
    $scope.deleteRow = function () {
        if ($scope.FormModel.SelectedControl) {
            var row = FindParent($scope.FormModel.SelectedControl, "sfwRow", true);
            if (row && row.ParentVM && row.ParentVM.Elements) {
                if (row.ParentVM.Elements.length > 1) {

                    var rowIndex = row.ParentVM.Elements.indexOf(row);
                    $rootScope.UndRedoBulkOp("Start");
                    $rootScope.DeleteItem(row, row.ParentVM.Elements);

                    if (rowIndex === row.ParentVM.Elements.length) {
                        rowIndex--;
                    }

                    //sselecting the first cell of next row.
                    if (rowIndex > -1 && row.ParentVM.Elements.length > 0 && row.ParentVM.Elements[rowIndex].Elements.length > 0) {
                        $scope.selectControl(row.ParentVM.Elements[rowIndex].Elements[0]);
                    }

                    $rootScope.UndRedoBulkOp("End");
                }
                else {
                    $SgMessagesService.Message("Message", "Atleast one row should be present");

                }
            }
        }
    };
    $scope.deleteColumn = function () {
        if ($scope.FormModel.SelectedControl) {
            var cell = FindParent($scope.FormModel.SelectedControl, "sfwColumn", true);
            if (cell && cell.Elements && cell.Elements.length > 0 && cell.Elements[0].Name === "sfwTabContainer") {
                return;
            }
            if (cell && cell.ParentVM && cell.ParentVM.ParentVM) {
                var table = cell.ParentVM.ParentVM;
                var ColCount = GetMaxColCount(cell.ParentVM, table);
                if (ColCount > 1) {
                    var colIndex = cell.ParentVM.Elements.indexOf(cell);

                    var deleteCellFromRow = function (row) {
                        if (row.Elements.length > colIndex) {
                            $rootScope.DeleteItem(row.Elements[colIndex], row.Elements);
                            if (row.Elements && row.Elements.length == 0 && row.ParentVM) {
                                $rootScope.DeleteItem(row, row.ParentVM.Elements);
                            }
                        }
                    };

                    $rootScope.UndRedoBulkOp("Start");

                    angular.forEach(table.Elements, deleteCellFromRow);

                    if (colIndex === cell.ParentVM.Elements.length) {
                        colIndex--;
                    }

                    //selecting the cell just after the selected cell.
                    if (colIndex > -1 && (cell.ParentVM.Elements.length > colIndex)) {
                        $scope.selectControl(cell.ParentVM.Elements[colIndex]);
                    }

                    $rootScope.UndRedoBulkOp("End");
                }
                else {
                    $SgMessagesService.Message("Message", "Atleast one column should be present");
                }
            }
        }
    };


    //#endregion


    //#region Show controls according to selected type form Entity Tree
    $scope.showControlbasedOnType = function (controlName) {
        var isShow = false;
        var SelectedField = undefined;
        if ($scope.FormModel) {
            if (!$scope.FormModel.IsLookupCriteriaEnabled) {
                for (var i = 0; i < $scope.lstLoadedEntityTrees.length; i++) {
                    if ($scope.lstLoadedEntityTrees[i].IsVisible == true) {
                        SelectedField = $scope.lstLoadedEntityTrees[i].selectedobjecttreefield;
                        break;
                    }
                }
            } else if ($scope.FormModel.IsLookupCriteriaEnabled == true && (!$scope.MainQuery && (!$scope.SelectedQuery || ($scope.SelectedQuery && !$scope.SelectedQuery.dictAttributes.ID)))) {
                SelectedField = $scope.selectedobjecttreefield;
            } else {
                for (var i = 0; i < $scope.lstLoadedEntityColumnsTree.length; i++) {
                    if ($scope.lstLoadedEntityColumnsTree[i].IsVisible == true) {

                        SelectedField = $scope.selectedfield;
                        break;
                    }
                }
            }
        }


        if ($scope.FormModel && $scope.FormModel.dictAttributes && $scope.FormModel.dictAttributes.sfwType && SelectedField) {

            if (controlName == "sfwLabel" && ["Lookup", "Tooltip"].indexOf($scope.FormModel.dictAttributes.sfwType) === -1 && !$scope.FormModel.IsLookupCriteriaEnabled && ["Collection", "Object", "List", "CDOCollection"].indexOf(SelectedField.Type) == -1 && SelectedField.DataType && SelectedField.DataType.toLowerCase() != "datetime") {
                isShow = true;
            }
            else if (controlName == "sfwLabel" && $scope.FormModel.dictAttributes.sfwType === "Tooltip" && !$scope.FormModel.IsLookupCriteriaEnabled && ["Collection", "Object", "List", "CDOCollection"].indexOf(SelectedField.Type) == -1) {
                isShow = true;
            }
            else if ((controlName == "sfwTextBox" || controlName == "sfwRadioButtonList" || controlName == "sfwDropDownList" || controlName == "sfwMultiSelectDropDownList" || controlName == "sfwCheckBox") && $scope.FormModel.dictAttributes.sfwType != "Tooltip" && ["Collection", "Object", "CDOCollection", "List",].indexOf(SelectedField.Type) == -1 && SelectedField.DataType && SelectedField.DataType.toLowerCase() != "datetime") {
                isShow = true;
            }
            else if (controlName == "sfwCascadingDropDownList" && $scope.FormModel.dictAttributes.sfwType != "Tooltip" && !$scope.IsGridSeleected && ["Collection", "Object", "CDOCollection", "List",].indexOf(SelectedField.Type) == -1 && SelectedField.DataType && SelectedField.DataType.toLowerCase() != "datetime") {
                isShow = true;
            }

            else if (controlName == "sfwRadioButton" && ["Tooltip", "Lookup"].indexOf($scope.FormModel.dictAttributes.sfwType) == -1 && ["Collection", "Object", "CDOCollection", "List",].indexOf(SelectedField.Type) == -1 && SelectedField.DataType && SelectedField.DataType.toLowerCase() != "datetime") {
                isShow = true;
            }
            else if (controlName == "sfwCheckBoxList" && !$scope.IsGridSeleected && $scope.FormModel.dictAttributes.sfwType != 'Tooltip' && ["CDOCollection"].indexOf(SelectedField.Type) > -1) {
                isShow = true;
            }
            else if ((controlName == "Grid" || controlName == "SfxChart") && !$scope.IsGridSeleected && $scope.FormModel.dictAttributes.sfwType != 'Lookup' && ["Collection", "List"].indexOf(SelectedField.Type) > -1) {
                isShow = true;
            }
            else if (controlName == "UserControl" && !$scope.IsGridSeleected && ["Lookup", "UserControl", "Tooltip"].indexOf($scope.FormModel.dictAttributes.sfwType) == -1 && ["Object"].indexOf(SelectedField.Type) > -1) {
                isShow = true;
            }

            else if (controlName == "sfwRange" && !$scope.IsGridSeleected && ["Lookup"].indexOf($scope.FormModel.dictAttributes.sfwType) > -1 && SelectedField.DataType && ["DateTime", "Int", "Decimal", "Double"].indexOf(SelectedField.DataType) > -1) {
                isShow = true;
            }

            else if (controlName == "sfwDateTimePicker" && ["Tooltip"].indexOf($scope.FormModel.dictAttributes.sfwType) == -1 && SelectedField.DataType && ["DateTime", "datetime"].indexOf(SelectedField.DataType) > -1) {
                isShow = true;
            }
            else if (controlName == "sfwCalendar" && !$scope.IsGridSeleected && ["Maintenance", "Wizard"].indexOf($scope.FormModel.dictAttributes.sfwType) > -1 && ["Collection", "List"].indexOf(SelectedField.Type) > -1) {
                isShow = true;
            }
            else if ((controlName == "sfwListView") && ["Maintenance", "Wizard"].indexOf($scope.FormModel.dictAttributes.sfwType) > -1 && !$scope.IsGridSeleected && ["Collection", "List"].indexOf(SelectedField.Type) > -1) {
                isShow = true;
            }
            else if ((controlName == "sfwJSONData") && ["Maintenance", "Wizard", "UserControl"].indexOf($scope.FormModel.dictAttributes.sfwType) > -1 && !$scope.IsGridSeleected && ["string", "String"].indexOf(SelectedField.DataType) > -1) {
                isShow = true;
            }
            else if (controlName == "sfwScheduler" && !$scope.IsGridSeleected && ["Maintenance", "Wizard"].indexOf($scope.FormModel.dictAttributes.sfwType) > -1 && ["Collection", "List"].indexOf(SelectedField.Type) > -1) {
                isShow = true;
            }
        }

        return isShow;
    };



    $scope.scrollBySelectedField = function (parentDiv, selectedElement, settings) {
        $timeout(function () {
            var $divDom = $(parentDiv);
            if ($divDom && $divDom.hasScrollBar()) {
                $divDom.scrollTo($divDom.find(selectedElement), settings, null);
                return false;
            }
        });
    }
    //#endregion


    //#region Centre Left Dialog
    $scope.OpenCentreLeftDialog = function () {
        var newScope = $scope.$new();
        newScope.formmodel = $scope.FormModel;
        if ($scope.CenterLeft) {
            newScope.CenterLeft = {};
            angular.copy($scope.CenterLeft, newScope.CenterLeft);
        }
        else {
            newScope.CenterLeft = { Name: 'centerleft', Value: '', dictAttributes: {}, Elements: [], Children: [] };
        }


        dialog = $rootScope.showDialog(newScope, "Centre Left", "Form/views/CentreLeft.html", {
            width: 900, height: 600
        });

        newScope.onOkClick = function () {

            var lst = $scope.FormModel.Elements.filter(function (x) {
                return x.Name === "centerleft"
            });
            if (lst && lst.length > 0) {
                $rootScope.UndRedoBulkOp("Start");
                if ($scope.CenterLeft) {
                    $rootScope.EditPropertyValue($scope.CenterLeft.Elements, $scope.CenterLeft, "Elements", []);
                }

                if (newScope.CenterLeft && newScope.CenterLeft.Elements) {
                    for (var i = 0; i < newScope.CenterLeft.Elements.length > 0; i++) {
                        $rootScope.PushItem(newScope.CenterLeft.Elements[i], $scope.CenterLeft.Elements);
                    }
                }
                $rootScope.UndRedoBulkOp("End");
            }
            else {

                $rootScope.UndRedoBulkOp("Start");
                $rootScope.PushItem(newScope.CenterLeft, $scope.FormModel.Elements);
                $rootScope.EditPropertyValue($scope.CenterLeft, $scope, "CenterLeft", newScope.CenterLeft);
                $rootScope.UndRedoBulkOp("End");
            }

            newScope.onCancelClick();
        };

        newScope.onCancelClick = function () {
            dialog.close();
        }

    };
    //#endregion

    $scope.showFormTreeMap = function () {
        $scope.viewTreeMap = !$scope.viewTreeMap;
        if ($scope.viewTreeMap) {
            $timeout(function () {
                $("#" + $scope.FormModel.dictAttributes.ID).find(".xml-control-tree").slideDown();
            });
        } else {
            $timeout(function () {
                $("#" + $scope.FormModel.dictAttributes.ID).find(".xml-control-tree").slideUp();
            });
        }
        $scope.TreeObject = {};
        $scope.TreeObject.btnLabel = "Expand All";
        $scope.TreeObject.formTableModel = $scope.formTableModel;
    };
    $scope.searchControlID = function (event) {
        $rootScope.$broadcast('searchById', { model: $scope.TreeObject.formTableModel, input: $scope.TreeObject.ID });
        if (event && event.keyCode == 13) {

        }
    };
    $scope.expandOrCollapseAll = function () {
        var isExpand = true;
        if ($scope.TreeObject.btnLabel == "Expand All") {
            isExpand = true;
            $scope.TreeObject.btnLabel = "Collapse All";
        } else if ($scope.TreeObject.btnLabel == "Collapse All") {
            isExpand = false;
            $scope.TreeObject.btnLabel = "Expand All"
        }
        expandOrCollpase($scope.formTableModel.Elements, isExpand);
    };
    var expandOrCollpase = function (controls, isExpand) {
        angular.forEach(controls, function (control) {
            control.isExpand = isExpand;
            if (control.Elements.length) {
                expandOrCollpase(control.Elements, isExpand);
            }
        });
    };
}]);
app.directive("panelaccordiantemplate", ["$compile", "$rootScope", "$EntityIntellisenseFactory", "$timeout", "$SgMessagesService", function ($compile, $rootScope, $EntityIntellisenseFactory, $timeout, $SgMessagesService) {
    return {
        restrict: "E",
        scope: {
            model: '=',
            formodel: '=',
            objparent: '=',
            parentaccordianid: '=',
            initialvisibilty: '=',
            panelindex: '@',
            lstloadedentitytrees: '=',
            lstloadedentitycolumnstree: '=',
            lstdisplayentities: '=',
            entitytreename: '=',
            buttonsCollection: '='
        },
        replace: true,
        templateUrl: "Form/views/Controls/PanelControlView.html",
        link: function (scope, element, attributes) {
            var curscope = getCurrentFileScope();
            scope.ShowPanelButtons = function () {
                if (curscope && curscope.CurrPanel && curscope.CurrPanel.Name != "sfwDialogPanel") {
                    if (curscope.CurrPanel.dictAttributes.ID && curscope.CurrPanel.dictAttributes.ID == scope.model.dictAttributes.ID) {
                        return true;
                    }
                }
                return false;
            };
            scope.setInitialVisibility = function () {
                scope.initialvisibilty = !scope.initialvisibilty;
            };
            scope.objSelectionClassAttributes = {};
            scope.ChangeSelection = function (value, param) {
                if (curscope) {
                    if (param == "LookupAdvCriteria") {
                        if (value == 'panel-adv-criteria-icon active') {
                            curscope.IsLookupAdvCriteriaSelected = true;
                        }
                        else {
                            curscope.IsLookupAdvCriteriaSelected = false;
                        }
                    }
                    if (param == "LookupAdvSort") {
                        if (value == 'panel-adv-sort-icon active') {
                            curscope.IsLookupAdvSortSelected = true;
                        }
                        else {
                            curscope.IsLookupAdvSortSelected = false;
                        }
                    }

                    if (param == "LookupQuery") {
                        if (value == 'panel-query-icon active') {
                            curscope.IsLookupQuerySelected = true;
                        }
                        else {
                            curscope.IsLookupQuerySelected = false;
                        }
                    }
                }
            };
            Object.defineProperty(scope.objSelectionClassAttributes, "LookupAdvCriteria", {
                get: function () {
                    if (curscope && curscope.IsLookupAdvCriteriaSelected) {
                        return 'panel-adv-criteria-icon active';
                    }
                    else {
                        return 'panel-adv-criteria-icon';
                    }
                },
                set: function (value) {
                    scope.ChangeSelection(value, "LookupAdvCriteria");
                },
            });
            Object.defineProperty(scope.objSelectionClassAttributes, "LookupAdvSort", {
                get: function () {
                    if (curscope && curscope.IsLookupAdvSortSelected) {
                        return 'panel-adv-sort-icon active';
                    }
                    else {
                        return 'panel-adv-sort-icon';
                    }
                },
                set: function (value) {
                    scope.ChangeSelection(value, "LookupAdvSort");
                },
            });
            Object.defineProperty(scope.objSelectionClassAttributes, "LookupQuery", {
                get: function () {
                    if (curscope && curscope.IsLookupQuerySelected) {
                        return 'panel-query-icon active';
                    }
                    else {
                        return 'panel-query-icon';
                    }
                },
                set: function (value) {
                    scope.ChangeSelection(value, "LookupQuery");
                },
            });
            //scope.setSelection();
            scope.SetParentVM = function (parent, model) {
                model.ParentVM = parent;
            };

            if (scope.objparent) {
                scope.model.ParentVM = scope.objparent;
            }

            scope.getValue = function (item) {
                return getDisplayValue(item);
            };

            scope.getColspan = function (item) {
                if (item && item.dictAttributes.ColumnSpan != undefined && item.dictAttributes.ColumnSpan != "") {
                    return item.dictAttributes.ColumnSpan;
                }
                else {
                    return 1;
                }
            };


            scope.loadFormEntityTree = function (item) {
                if (scope.FormModel.IsLookupCriteriaEnabled == false) {
                    curscope.IsGridSeleected = false;

                    var blnFound = false;
                    for (var i = 0; i < curscope.lstLoadedEntityTrees.length; i++) {
                        if (curscope.lstLoadedEntityTrees[i].EntityName == scope.formodel.dictAttributes.sfwEntity && !curscope.lstLoadedEntityTrees[i].IsQuery) {
                            blnFound = true;
                            curscope.lstLoadedEntityTrees[i].IsVisible = true;
                            curscope.entityTreeName = curscope.lstLoadedEntityTrees[i].EntityName;
                            curscope.currentEntiyTreeObject = curscope.lstLoadedEntityTrees[i];
                        }
                        else {
                            curscope.lstLoadedEntityTrees[i].IsVisible = false;

                        }

                    }
                    if (!blnFound) {
                        var objNew = { EntityName: scope.formodel.dictAttributes.sfwEntity, IsVisible: true, selectedobjecttreefield: undefined, lstselectedobjecttreefields: [], IsQuery: false };
                        curscope.lstLoadedEntityTrees.push(objNew);
                        curscope.entityTreeName = objNew.EntityName;
                        curscope.currentEntiyTreeObject = objNew;
                    }
                }
            };

            scope.selectControl = function (objChild, event) {
                SetFormSelectedControl(scope.formodel, objChild, event);

                scope.loadFormEntityTree(objChild);

            };


            //#region lookup functionality for criteria tabs


            scope.OnAdvCriteriaClick = function (event) {
                scope.CheckAndUpdateCriteria("AdvCriteria", event);
            };

            scope.OnAdvSortClick = function (event) {
                scope.CheckAndUpdateCriteria("AdvSort", event);
            };

            scope.OnQueryClick = function (event) {
                scope.CheckAndUpdateCriteria("Query", event);
            };

            scope.ChangeSelectionProperty = function (criteriaName) {
                if (curscope && criteriaName == "Query") {
                    if (curscope.IsLookupQuerySelected) {
                        $rootScope.EditPropertyValue('panel-query-icon', scope.objSelectionClassAttributes, "LookupQuery", 'panel-query-icon active');
                    }
                    else {
                        $rootScope.EditPropertyValue('panel-query-icon active', scope.objSelectionClassAttributes, "LookupQuery", 'panel-query-icon');
                    }
                }
                if (curscope && criteriaName == "AdvSort") {
                    if (curscope.IsLookupAdvSortSelected) {
                        $rootScope.EditPropertyValue('panel-adv-sort-icon', scope.objSelectionClassAttributes, "LookupAdvSort", 'panel-adv-sort-icon active');
                    }
                    else {
                        $rootScope.EditPropertyValue('panel-adv-sort-icon active', scope.objSelectionClassAttributes, "LookupAdvSort", 'panel-adv-sort-icon');
                    }
                }
                if (curscope && criteriaName == "AdvCriteria") {
                    if (curscope.IsLookupAdvCriteriaSelected) {
                        $rootScope.EditPropertyValue('panel-adv-criteria-icon', scope.objSelectionClassAttributes, "LookupAdvCriteria", 'panel-adv-criteria-icon active');
                    }
                    else {
                        $rootScope.EditPropertyValue('panel-adv-criteria-icon active', scope.objSelectionClassAttributes, "LookupAdvCriteria", 'panel-adv-criteria-icon');
                    }
                }

            };
            scope.CheckAndUpdateCriteria = function (criteriaName, event) {
                $rootScope.UndRedoBulkOp("Start");

                var sfxTabContainerModel = null;
                var TableVM = curscope.CurrPanel.Elements[0];


                if (TableVM) {
                    var RowCount = TableVM.Elements.length;
                    var rowVM = TableVM.Elements[0];
                    var ColCount = rowVM.Elements.length;
                    if (RowCount == 1 && ColCount == 1) {
                        var sfxCellVM = rowVM.Elements[0];
                        if (sfxCellVM.Elements.length > 0 && sfxCellVM.Elements[0].Name == "sfwTabContainer") {
                            sfxTabContainerModel = sfxCellVM.Elements[0];
                        }
                    }
                }

                if (!sfxTabContainerModel) {
                    var strPanelID = curscope.CurrPanel.dictAttributes.ID;
                    var strMainTableID = "";
                    var strTabContainerID = "";

                    if (startsWith(strPanelID, "pnl", 0)) {
                        strMainTableID = strPanelID.substring(3);
                        strTabContainerID = strPanelID.substring(3);
                    }
                    else {
                        strMainTableID = strPanelID;
                        strTabContainerID = strPanelID;
                    }

                    var prefix = "swc";
                    var sfxTableModel = { Name: "sfwTable", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                    sfxTableModel.ParentVM = curscope.CurrPanel;
                    sfxTableModel.dictAttributes.ID = strMainTableID;

                    sfxTabContainerModel = { Name: "sfwTabContainer", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                    sfxTabContainerModel.ParentVM = sfxTableModel;
                    strTabContainerID = CreateControlID(scope.formodel, strTabContainerID, "sfwTabContainer", false);
                    sfxTabContainerModel.dictAttributes.ID = strTabContainerID;

                    var tabsModel = { Name: "Tabs", value: '', prefix: "", dictAttributes: {}, Elements: [], Children: [] };
                    tabsModel.ParentVM = sfxTabContainerModel;

                    var sfxTabSheetModel = { Name: "sfwTabSheet", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                    sfxTabSheetModel.ParentVM = tabsModel;

                    var strTabSheetID = "";

                    var strTableID = TableVM.dictAttributes.ID;

                    if (startsWith(strTableID, "tbl", 0)) {
                        strTabSheetID = strTableID.substring(3);
                    }
                    else {
                        strTabSheetID = strTableID;
                    }

                    strTabSheetID = CreateControlID(scope.formodel, strTabSheetID, "sfwTabSheet", false);
                    sfxTabSheetModel.dictAttributes.ID = strTabSheetID;
                    sfxTabSheetModel.dictAttributes.HeaderText = "Criteria";

                    sfxTabSheetModel.Elements.push(TableVM);
                    tabsModel.Elements.push(sfxTabSheetModel);
                    sfxTabContainerModel.Elements.push(tabsModel);


                    var sfxRowModel = { Name: "sfwRow", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                    sfxRowModel.ParentVM = sfxTableModel;

                    var sfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                    sfxCellModel.ParentVM = sfxRowModel;


                    sfxCellModel.Elements.push(sfxTabContainerModel);

                    sfxRowModel.Elements.push(sfxCellModel);
                    sfxTableModel.Elements.push(sfxRowModel);

                    while (curscope.CurrPanel.Elements.length > 0) {
                        $rootScope.DeleteItem(curscope.CurrPanel.Elements[0], curscope.CurrPanel.Elements);
                    }

                    $rootScope.PushItem(sfxTableModel, curscope.CurrPanel.Elements);

                }

                function iUpdateCriteriaState(sfxtabSheet) {
                    var strTabName = sfxtabSheet.dictAttributes.ID;
                    if (criteriaName == "AdvCriteria" && strTabName.contains("tshAdvCriteria")) {
                        tabSheetVMToRemove = sfxtabSheet;
                        isTabContain = true;
                        curscope.IsLookupAdvCriteriaSelected = false;

                    }
                    else if (criteriaName == "AdvSort" && strTabName.contains("tshAdvSort")) {
                        tabSheetVMToRemove = sfxtabSheet;
                        isTabContain = true;
                        curscope.IsLookupAdvSortSelected = false;

                    }
                    else if (criteriaName == "Query" && strTabName.contains("tshSql")) {
                        tabSheetVMToRemove = sfxtabSheet;
                        isTabContain = true;
                        curscope.IsLookupQuerySelected = false;
                    }
                }
                if (sfxTabContainerModel) {
                    var tabsVM = sfxTabContainerModel.Elements[0];
                    if (tabsVM) {
                        tabsVM.LookupCriPanelVM = curscope.CurrPanel;
                        var tabSheetVMToRemove;
                        var isTabContain = false;

                        angular.forEach(tabsVM.Elements, iUpdateCriteriaState);

                        if (isTabContain) {
                            $rootScope.DeleteItem(tabSheetVMToRemove, tabsVM.Elements);

                            if (tabsVM.Elements.length == 1) {
                                if (tabsVM.Elements[0].Elements[0].Name == "sfwTable") {
                                    var tableModel = tabsVM.Elements[0].Elements[0];

                                    while (curscope.CurrPanel.Elements.length > 0) {
                                        $rootScope.DeleteItem(curscope.CurrPanel.Elements[0], curscope.CurrPanel.Elements);
                                    }

                                    $rootScope.PushItem(tableModel, curscope.CurrPanel.Elements);
                                }
                            }
                        }
                        else {
                            var sfxTabSheetModel;
                            if (criteriaName == "AdvCriteria") {
                                sfxTabSheetModel = scope.AddAdvCriteriaPanel(tabsVM);
                                curscope.IsLookupAdvCriteriaSelected = true;

                            }
                            else if (criteriaName == "AdvSort") {
                                sfxTabSheetModel = scope.AddAdvSortPanel(tabsVM);
                                curscope.IsLookupAdvSortSelected = true;

                            }
                            else if (criteriaName == "Query") {
                                sfxTabSheetModel = scope.AddQueryPanel(tabsVM);
                                curscope.IsLookupQuerySelected = true;

                            }

                            if (tabsVM) {
                                $rootScope.PushItem(sfxTabSheetModel, tabsVM.Elements);
                                if (!sfxTabSheetModel.isLoaded) {
                                    sfxTabSheetModel.isLoaded = true;
                                }
                                tabsVM.SelectedTabSheet = sfxTabSheetModel;
                                tabsVM.SelectedTabSheet.IsSelected = true;
                                SetFormSelectedControl(scope.formodel, sfxTabSheetModel, undefined);
                            }
                        }

                    }
                }
                scope.ChangeSelectionProperty(criteriaName);
                $rootScope.UndRedoBulkOp("End");
                if (event) {
                    event.stopPropagation();
                }
            };



            scope.AddAdvCriteriaPanel = function (aParent) {
                var prefix = "swc";
                var newSfxTabSheetModel = { Name: "sfwTabSheet", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                newSfxTabSheetModel.ParentVM = aParent;
                newSfxTabSheetModel.dictAttributes.ID = "tshAdvCriteria";
                newSfxTabSheetModel.dictAttributes.HeaderText = "Adv. Criteria";

                var newSfxTableModel = { Name: "sfwTable", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                newSfxTableModel.ParentVM = newSfxTabSheetModel;
                newSfxTableModel.dictAttributes.ID = "tblAdvCriteria";

                var newSfxRowModel = { Name: "sfwRow", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                newSfxRowModel.ParentVM = newSfxTableModel;

                var newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                newSfxCellModel.ParentVM = newSfxRowModel;

                var newControl = { Name: "sfwButton", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                newControl.ParentVM = newSfxCellModel;
                newControl.dictAttributes.ID = "btnAdvSearch";
                newControl.dictAttributes.sfwMethodName = "btnSearch_Click";
                newControl.dictAttributes.sfwOperateOn = "tblAdvCriteria";
                newControl.dictAttributes.Text = "Adv Search";
                newSfxCellModel.Elements.push(newControl);

                newControl = {
                    Name: "sfwButton", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                };
                newControl.ParentVM = newSfxCellModel;
                newControl.dictAttributes.ID = "btnAdvReset";
                newControl.dictAttributes.sfwMethodName = "btnReset_Click";
                newControl.dictAttributes.sfwOperateOn = "tblAdvCriteria";
                newControl.dictAttributes.Text = "Adv Reset";
                newSfxCellModel.Elements.push(newControl);

                newSfxRowModel.Elements.push(newSfxCellModel);

                newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                newSfxCellModel.ParentVM = newSfxRowModel;

                newControl = {
                    Name: "sfwButton", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                };
                newControl.ParentVM = newSfxCellModel;
                newControl.dictAttributes.ID = "btnAdvStoreSearch";
                newControl.dictAttributes.sfwMethodName = "btnStoreUserDefaults_Click";
                newControl.dictAttributes.sfwOperateOn = "tblAdvCriteria";
                newControl.dictAttributes.Text = "Adv Store Search";
                newSfxCellModel.Elements.push(newControl);

                newSfxRowModel.Elements.push(newSfxCellModel);


                newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                newSfxCellModel.ParentVM = newSfxRowModel;

                newSfxRowModel.Elements.push(newSfxCellModel);

                newSfxTableModel.Elements.push(newSfxRowModel);
                newSfxTabSheetModel.Elements.push(newSfxTableModel);

                return newSfxTabSheetModel;
            };

            scope.AddAdvSortPanel = function (aParent) {
                var prefix = "swc";
                var newSfxTabSheetModel = { Name: "sfwTabSheet", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                newSfxTabSheetModel.ParentVM = aParent;
                newSfxTabSheetModel.dictAttributes.ID = "tshAdvSort";
                newSfxTabSheetModel.dictAttributes.HeaderText = "Adv. Sort";

                var newSfxTableModel = { Name: "sfwTable", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                newSfxTableModel.ParentVM = newSfxTabSheetModel;
                newSfxTableModel.dictAttributes.ID = "tblAdvSort";

                var newSfxRowModel = { Name: "sfwRow", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                newSfxRowModel.ParentVM = newSfxTableModel;

                var newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                newSfxCellModel.ParentVM = newSfxRowModel;

                var newControl = { Name: "sfwAdvSort", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                newControl.ParentVM = newSfxCellModel;
                newControl.dictAttributes.ID = "AdvSort";
                newControl.dictAttributes.sfwRelatedControl = "dgrResult";

                newSfxCellModel.Elements.push(newControl);
                newSfxRowModel.Elements.push(newSfxCellModel);
                newSfxTableModel.Elements.push(newSfxRowModel);

                newSfxRowModel = { Name: "sfwRow", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                newSfxRowModel.ParentVM = newSfxTableModel;

                newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                newSfxCellModel.ParentVM = newSfxRowModel;

                var newControl = { Name: "sfwButton", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                newControl.ParentVM = newSfxCellModel;
                newControl.dictAttributes.ID = "btnApplySort";
                newControl.dictAttributes.sfwMethodName = "btnApplySort_Click";
                newControl.dictAttributes.sfwOperateOn = "tblAdvSort";
                newControl.dictAttributes.sfwRelatedControl = "dgrResult";
                newControl.dictAttributes.Text = "Apply Sort";

                newSfxCellModel.Elements.push(newControl);
                newSfxRowModel.Elements.push(newSfxCellModel);
                newSfxTableModel.Elements.push(newSfxRowModel);

                newSfxTabSheetModel.Elements.push(newSfxTableModel);

                return newSfxTabSheetModel;




            };

            scope.AddQueryPanel = function (aParent) {
                var prefix = "swc";
                var newSfxTabSheetModel = { Name: "sfwTabSheet", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                newSfxTabSheetModel.ParentVM = aParent;
                newSfxTabSheetModel.dictAttributes.ID = "tshSql";
                newSfxTabSheetModel.dictAttributes.HeaderText = "Query";

                var newSfxTableModel = { Name: "sfwTable", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                newSfxTableModel.ParentVM = newSfxTabSheetModel;
                newSfxTableModel.dictAttributes.ID = "tblSql";

                var newSfxRowModel = { Name: "sfwRow", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                newSfxRowModel.ParentVM = newSfxTableModel;

                var newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                newSfxCellModel.ParentVM = newSfxRowModel;

                var newControl = { Name: "sfwTextBox", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                newControl.ParentVM = newSfxCellModel;
                newControl.dictAttributes.ID = "txbSql";
                newControl.dictAttributes.TextMode = "MultiLine";
                newControl.dictAttributes.Rows = "5";

                newSfxCellModel.Elements.push(newControl);
                newSfxRowModel.Elements.push(newSfxCellModel);
                newSfxTableModel.Elements.push(newSfxRowModel);
                newSfxTabSheetModel.Elements.push(newSfxTableModel);

                return newSfxTabSheetModel;
            };

            //#endregion

            //#region Wizard Functionality(Add, Delete, Move Up , Move Down)


            //#region Delete Step
            scope.DeleteWizardStepClick = function () {
                if (curscope.CurrPanel) {
                    if (curscope.CurrPanel.Name == "HeaderTemplate") {
                        $SgMessagesService.Message('Message', 'HeaderTemplate can not be deleted.');
                    }
                    else {
                        $SgMessagesService.Message('Delete', "The selected wizard " + curscope.CurrPanel.dictAttributes.Title + " will be deleted.\nAre you sure you want to delete it?", true, function (result) {
                            if (result) {
                                $rootScope.UndRedoBulkOp("Start");
                                var sfxRow = curscope.CurrPanel.ParentVM;
                                var index = curscope.MainPanels.indexOf(curscope.CurrPanel);
                                $rootScope.DeleteItem(curscope.CurrPanel, curscope.MainPanels, "selectPanelControl");

                                if (sfxRow) {
                                    $rootScope.DeleteItem(curscope.CurrPanel, sfxRow.Elements);
                                }

                                if (index < curscope.MainPanels.length) {
                                    curscope.selectPanelControl(curscope.MainPanels[index]);
                                }
                                else if (curscope.MainPanels.length > 0) {
                                    curscope.selectPanelControl(curscope.MainPanels[index - 1]);
                                }
                                $rootScope.UndRedoBulkOp("End");
                            }
                        });
                    }
                }
            };

            //#endregion

            //#region Move Up
            scope.scrollPanel = function () {
                $timeout(function () {
                    var $divDom = $("#" + scope.formodel.dictAttributes.ID).find(".form-area-editable");
                    if ($divDom && $divDom.hasScrollBar()) {
                        $divDom.scrollTo($divDom.find(".active.form-panel-wrapper"), { offsetTop: 0, offsetLeft: 0 }, null);
                        return false;
                    }

                });
            }

            scope.MoveUpWizardClick = function () {
                if (curscope.CurrPanel) {
                    var sfxRow = curscope.CurrPanel.ParentVM;
                    if (sfxRow) {
                        var index = sfxRow.Elements.indexOf(curscope.CurrPanel);
                        if (index > -1) {
                            if (index == 0) {
                                $SgMessagesService.Message('Message', "Wizard step cannot be arranged before header template.");
                            }
                            else {
                                $rootScope.UndRedoBulkOp("Start");
                                $rootScope.DeleteItem(curscope.CurrPanel, sfxRow.Elements);
                                $rootScope.InsertItem(curscope.CurrPanel, sfxRow.Elements, index - 1);

                                var panelIndex = curscope.MainPanels.indexOf(curscope.CurrPanel);
                                $rootScope.DeleteItem(curscope.CurrPanel, curscope.MainPanels);
                                $rootScope.InsertItem(curscope.CurrPanel, curscope.MainPanels, panelIndex - 1);
                                $rootScope.UndRedoBulkOp("End");
                                scope.scrollPanel();
                            }
                        }
                    }
                }
            };

            scope.canMoveUpWizardDisable = function () {
                var retVal = false;
                if (curscope.CurrPanel) {
                    var sfxRow = curscope.CurrPanel.ParentVM;
                    if (sfxRow) {
                        var index = sfxRow.Elements.indexOf(curscope.CurrPanel);
                        if (index == 0) {
                            retVal = true;
                        }
                    }
                }
                else {
                    retVal = true;
                }
                return retVal;
            };


            //#endregion

            //#region Move Down


            scope.MoveDownWizardClick = function () {
                if (curscope.CurrPanel) {
                    var sfxRow = curscope.CurrPanel.ParentVM;
                    if (sfxRow) {
                        var index = sfxRow.Elements.indexOf(curscope.CurrPanel);
                        if (index > -1) {
                            if (curscope.MainPanels.length > index + 1) {
                                $rootScope.UndRedoBulkOp("Start");

                                $rootScope.DeleteItem(curscope.CurrPanel, sfxRow.Elements);
                                $rootScope.InsertItem(curscope.CurrPanel, sfxRow.Elements, index + 1);

                                var panelIndex = curscope.MainPanels.indexOf(curscope.CurrPanel);
                                $rootScope.DeleteItem(curscope.CurrPanel, curscope.MainPanels);
                                $rootScope.InsertItem(curscope.CurrPanel, curscope.MainPanels, panelIndex + 1);
                                $rootScope.UndRedoBulkOp("End");
                                scope.scrollPanel();
                            }
                        }
                    }
                }
            };


            scope.canMoveDownWizardDisable = function () {
                var retVal = false;
                if (curscope.CurrPanel) {
                    var sfxRow = curscope.CurrPanel.ParentVM;
                    if (sfxRow) {
                        var index = sfxRow.Elements.indexOf(curscope.CurrPanel);
                        if (sfxRow.Elements.length == index + 1) {
                            retVal = true;
                        }
                    }
                }
                else {
                    retVal = true;
                }
                return retVal;
            };

            //#endregion
            //#endregion

            //#region Panel Functions
            scope.addPanel = function (type, index) {
                event.stopPropagation();
                switch (type) {
                    case "wizard":
                        curscope.OnAddWizardStepClick(index, true);
                        break;
                    case "maintenance":
                    case "tooltip":
                        curscope.OnAddPanelClick(index, true);
                        break;
                }
            };


            scope.DeleteMainPanelClick = function () {
                if (curscope.CurrPanel) {
                    $SgMessagesService.Message('Delete', "The selected panel " + curscope.CurrPanel.dictAttributes.ID + " will be deleted.\nAre you sure you want to delete it?", true, function (result) {
                        if (result) {
                            $rootScope.UndRedoBulkOp("Start");
                            var sfxRow = FindParent(curscope.CurrPanel, "sfwRow");
                            var index = curscope.MainPanels.indexOf(curscope.CurrPanel);
                            $rootScope.DeleteItem(curscope.CurrPanel, curscope.MainPanels, "selectPanelControl");

                            if (index < curscope.MainPanels.length) {
                                curscope.selectPanelControl(curscope.MainPanels[index]);
                            }
                            else if (curscope.MainPanels.length > 0) {
                                curscope.selectPanelControl(curscope.MainPanels[index - 1]);
                            }

                            if (sfxRow) {
                                $rootScope.DeleteItem(sfxRow, curscope.SfxMainTable.Elements);
                            }

                            $rootScope.UndRedoBulkOp("End");
                        }
                    });
                }
            };

            scope.MoveUpMainPanelClick = function () {
                if (curscope.CurrPanel) {
                    var sfxRow = FindParent(curscope.CurrPanel, "sfwRow");
                    if (sfxRow) {
                        var index = curscope.SfxMainTable.Elements.indexOf(sfxRow);
                        if (index > -1) {
                            if (index > 0) {
                                $rootScope.UndRedoBulkOp("Start");
                                $rootScope.DeleteItem(sfxRow, curscope.SfxMainTable.Elements);
                                $rootScope.InsertItem(sfxRow, curscope.SfxMainTable.Elements, index - 1);

                                var panelIndex = curscope.MainPanels.indexOf(curscope.CurrPanel);
                                $rootScope.DeleteItem(curscope.CurrPanel, curscope.MainPanels);
                                $rootScope.InsertItem(curscope.CurrPanel, curscope.MainPanels, panelIndex - 1);
                                $rootScope.UndRedoBulkOp("End");
                                scope.scrollPanel();
                            }
                        }
                    }
                }
            };

            scope.MoveDownMainPanelClick = function () {
                if (curscope.CurrPanel) {
                    var sfxRow = FindParent(curscope.CurrPanel, "sfwRow");
                    if (sfxRow) {
                        var index = curscope.SfxMainTable.Elements.indexOf(sfxRow);
                        if (index > -1) {
                            if (curscope.MainPanels.length > index + 1) {
                                $rootScope.UndRedoBulkOp("Start");

                                $rootScope.DeleteItem(sfxRow, curscope.SfxMainTable.Elements);
                                $rootScope.InsertItem(sfxRow, curscope.SfxMainTable.Elements, index + 1);

                                var panelIndex = curscope.MainPanels.indexOf(curscope.CurrPanel);
                                $rootScope.DeleteItem(curscope.CurrPanel, curscope.MainPanels);
                                $rootScope.InsertItem(curscope.CurrPanel, curscope.MainPanels, panelIndex + 1);
                                $rootScope.UndRedoBulkOp("End");
                                scope.scrollPanel();
                            }
                        }
                    }
                }
            };

            scope.canMoveUpDisable = function () {
                var retVal = false;
                if (curscope.CurrPanel) {
                    var sfxRow = FindParent(curscope.CurrPanel, "sfwRow");
                    if (sfxRow) {
                        var index = curscope.SfxMainTable.Elements.indexOf(sfxRow);
                        if (index == 0) {
                            retVal = true;
                        }
                    }
                }
                else {
                    retVal = true;
                }
                return retVal;
            };

            scope.canMoveDownDisable = function () {
                var retVal = false;
                if (curscope.CurrPanel) {
                    var sfxRow = FindParent(curscope.CurrPanel, "sfwRow");
                    if (sfxRow) {
                        var index = curscope.SfxMainTable.Elements.indexOf(sfxRow);
                        if (curscope.SfxMainTable.Elements.length == index + 1) {
                            retVal = true;
                        }
                    }
                }
                else {
                    retVal = true;
                }
                return retVal;
            };

            scope.getAddpanelTrigger = function (event, sfwType, index) {
                sfwType = sfwType ? sfwType.trim().toLowerCase() : "";
                var insertindex = index != undefined ? parseInt(index) + 1 : 0;
                var title = "Add Panel";
                if (scope.formodel.dictAttributes.sfwType == "Wizard") {
                    title = "Add Wizard Step";
                }
                if (scope.formodel.dictAttributes.sfwType != "Lookup") {
                    elhover = $compile('<button class="addPanelDivTrigger" ng-click="addPanel(' + '\'' + sfwType + '\'' + ',' + insertindex + ')">' + title + '</button>')(scope);
                    elhover.css({
                        left: event.clientX - 50
                    });
                    if (curscope && !curscope.IsToolsDivCollapsed) {
                        var toolboxwrapper = $("div[id='" + curscope.currentfile.FileName + "']").find(".toolbox-wrapper");
                        elhover.css({
                            left: event.clientX - 20 - toolboxwrapper.width()
                        });
                    }
                    event.currentTarget.appendChild(elhover[0]);
                }
            };

            scope.deleteAddpanelTrigger = function () {
                $(".addPanelDivTrigger").remove();
            };

            scope.panelMenuOption = [
                ['Create Compatible Caption', function ($itemScope) {
                    var filescope = getCurrentFileScope();
                    if (scope.model) {
                        if (filescope && filescope.OnCreateCompatibleLabelClickForPanel) {
                            filescope.OnCreateCompatibleLabelClickForPanel(scope.model);
                        }
                    }
                }]
            ];

            //#endregion
        }
    };
}]);

function growtextbox(event, isCurrentElemet, text) {
    var comfortZone = 10;
    var newWidth = 0;
    var maxWidth = 1000;
    var minWidth = 100;
    var input = "";
    var val = "";
    if (!isCurrentElemet) {
        input = $(event.currentTarget);
        val = input.val();
    } else {
        input = event;
        val = text;
    }
    var orginalwidth = input.width();
    input.width("auto");
    var defaultwidth = input.width();
    var testSubject = $('<tester/>').css({
        position: 'absolute',
        top: -9999,
        left: -9999,
        width: 'auto',
        fontSize: input.css('fontSize'),
        fontFamily: input.css('fontFamily'),
        fontWeight: input.css('fontWeight'),
        letterSpacing: input.css('letterSpacing'),
        whiteSpace: 'nowrap',
        display: 'block',
        visibility: 'hidden'
    });
    var escaped = val.replace(/&/g, '&amp;').replace(/\s/g, '&nbsp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    testSubject.html(escaped);
    $("body").append(testSubject);
    var width = testSubject.width();
    // Calculate new width + whether to change
    var testerWidth = testSubject.width();
    testSubject.remove();
    if (testerWidth < minWidth) {
        newWidth = minWidth;
    } else if (testerWidth > minWidth) {
        newWidth = testerWidth;
    }
    input.width(newWidth + comfortZone);
}

function funcontrolDragEnter(element, model, formodel) {
    if (model && model.IsSelected && element && ((!(element.draggable) && ($(element).children("[content-editable]").length <= 0)) || (($(element).children("[content-editable]").length > 0) && $(element).children("[drag-handler-btn]").length <= 0))) {
        if (formodel.dictAttributes.sfwType == "Lookup" && formodel.SelectedControl.Name == "sfwGridView") {
            return;
        }
        //var htmldragTrigger = $('<i class="fa fa-circle select-label-control" drag-handler-btn aria-hidden="true" style="z-index:999;position:absolute;left:-2px;top:-5px;font-size:8px;"></i><i class="fa fa-circle select-label-control" drag-handler-btn aria-hidden="true" style="z-index:999;position:absolute;right:-2px;top:-5px;font-size:8px;"></i><i class="fa fa-circle select-label-control" drag-handler-btn aria-hidden="true" style="z-index:999;position:absolute;left:-2px;bottom:-5px;font-size:8px;"></i><i class="fa fa-circle select-label-control" drag-handler-btn aria-hidden="true" style="z-index:999;position:absolute;right:-2px;bottom:-5px;font-size:8px;"></i><div drag-handler-btn style="clear: both"></div>');
        //var htmlcontroldragwrapper = $("<div drag-handler-wrapper class='control-drag-wrapper' style='position:relative;border:1px solid #e77b21;box-shadow:0 0 8px #e77b21;'></div>");
        //// check if any parent has been activated for drag - drop
        //var lstDragParents = $(e.currentTarget).parents("[drag-handler-wrapper]");
        //if (lstDragParents.length > 0) {
        //    lstDragParents.find("[drag-handler-btn]").remove();
        //    lstDragParents.children().first().unwrap();
        //}
        //$(e.currentTarget).wrap(htmlcontroldragwrapper);
        //$(e.currentTarget).parent("[drag-handler-wrapper]").append(htmldragTrigger);
        //var el = $(e.currentTarget).parent("[drag-handler-wrapper]")[0];
        var el = element;
        if ($(element).children("[content-editable]").length > 0) {
            $(element).prepend("<span drag-handler-btn  class='drag-text-control'></span>");
            el = $(element).children("[drag-handler-btn]")[0];
        }
        el.draggable = true;
        el.addEventListener('dragstart', handleDragStart, false);
        function handleDragStart(e) {
            $(e.currentTarget).closest("[formcontroldroppable]").find("[add-control-hover-trigger]").remove();
            dragDropData = null;
            dragDropDataObject = null;
            dragfromleft = undefined;
            var imgObj = $(e.currentTarget)[0];
            if ($(e.currentTarget).siblings("[content-editable]").length > 0) {
                imgObj = $(e.currentTarget).parent()[0];
            }
            if (!detectIE()) {
                e.dataTransfer.setDragImage(imgObj, 5, 5);
            }
            dragDropData = model;
            draggingDataFromLeft = null;
            dragDropDataObject = null;
            e.stopPropagation();
        }
    }
}
function getDisplayValue(item) {
    if (item != undefined) {
        var strReturn = "";
        if (item.Name == "udc") {
            strReturn = item.dictAttributes.ID;
        }
        else {
            if (item.dictAttributes && item.dictAttributes.Text) {
                strReturn = item.dictAttributes.Text;
            }
            else if (item.dictAttributes && item.dictAttributes.sfwCaption) {
                strReturn = item.dictAttributes.sfwCaption;
            }
            else if (item.dictAttributes && item.dictAttributes.sfwEntityField) {
                var str = item.dictAttributes.sfwEntityField;
                var lastdot = str.lastIndexOf(".");
                strReturn = str.substring(lastdot + 1);
            }
            else if (item.dictAttributes && item.dictAttributes.sfwDataField) {
                var str = item.dictAttributes.sfwDataField;
                var lastdot = str.lastIndexOf(".");
                strReturn = str.substring(lastdot + 1);
            }
            else if (item.dictAttributes && item.dictAttributes.sfwObjectField) {
                strReturn = item.dictAttributes.sfwObjectField;
            }
            else if (item.dictAttributes && item.dictAttributes.Title) {
                strReturn = item.dictAttributes.Title;
            }
            else if (item.dictAttributes && item.dictAttributes.ID) {
                strReturn = item.dictAttributes.ID;
            }
            else {
                strReturn = item.Name;
            }

            if (item.Name == "sfwLiteral") {
                strReturn = "|" + strReturn + "|";
            }
        }
        return strReturn;
    }
    else {
        return "";
    }
}

//#region Object Tree Methods
function GetSelectedFieldList(attributes, selectedfields) {
    angular.forEach(attributes, function (obj) {
        if (obj.IsSelected && obj.IsSelected.toLowerCase() == "true") {
            selectedfields.push(obj);
        }
        if (obj.Attributes && obj.Attributes.length > 0) {
            GetSelectedFieldList(obj.Attributes, selectedfields);
        }
    });
    return selectedfields;

}

function getDisplayedEntity(lstdisplayedentities) {
    var displayedentity;
    if (lstdisplayedentities && lstdisplayedentities.length > 0) {
        for (var i = 0; i < lstdisplayedentities.length; i++) {
            if (lstdisplayedentities[i].IsVisible) {
                displayedentity = lstdisplayedentities[i];
                break;
            }
        }
    }

    return displayedentity;
}

function ClearSelectedFieldList(attributes) {
    angular.forEach(attributes, function (obj) {
        if (obj.IsSelected && obj.IsSelected.toLowerCase() == "true") {
            obj.IsSelected = "false";
            obj.IsRecordSelected = false;
        }
        //if (obj.Attributes && obj.Attributes.length > 0) {
        //    ClearSelectedFieldList(obj.Attributes);
        //}
    });
}

function GetItemPathForEntityObject(field) {
    var itempath = field.ID;
    var parent = field.objParent;
    while (parent && !parent.IsMainEntity && parent.ID) {
        itempath = parent.ID + "." + itempath;
        parent = parent.objParent;
    }
    return itempath;
}

function GetCodeIDByValue(astrEntityName, astrFieldName, entityIntellisenseList) {
    var lstrCodeID = "";

    if (astrEntityName) {
        var lst = entityIntellisenseList.filter(function (x) { return x.ID == astrEntityName; });
        if (lst && lst.length > 0) {
            if (lst[0].Attributes.length > 0) {
                var attribute = lst[0].Attributes.filter(function (x) { return x.Value == astrFieldName; });
                if (attribute.length > 0 && attribute[0].Value) {
                    var attributeidfield = lst[0].Attributes.filter(function (x) { return x.Value == attribute[0].Value.replace("_value", "_id"); });
                    if (attributeidfield && attributeidfield.length > 0) {
                        lstrCodeID = attributeidfield[0].CodeID;
                    }
                }
            }
        }
    }
    return lstrCodeID;
}
function GetCodeID(astrEntityName, astrFieldName, entityIntellisenseList) {
    var lstrCodeID = "";
    var lstFieldNames = [];
    var lstAttributes = [];
    if (astrFieldName) {
        lstFieldNames = astrFieldName.split('.');
    }
    if (astrEntityName) {
        var lst = entityIntellisenseList.filter(function (x) { return x.ID == astrEntityName; });
        for (var i = 0; i < lstFieldNames.length; i++) {
            if (lst && lst.length > 0) {
                lstAttributes = getEntityAttributes(lst[0].EntityName, entityIntellisenseList);
                if (lstAttributes.length > 0) {
                    var attribute = lstAttributes.filter(function (x) { return x.ID == lstFieldNames[i]; });
                    if (attribute.length > 0 && attribute[0].Value) {
                        var attributeidfield = lstAttributes.filter(function (x) { return x.Value == attribute[0].Value.replace("_value", "_id"); });
                        if (attributeidfield && attributeidfield.length > 0) {
                            lstrCodeID = attributeidfield[0].CodeID;
                        }
                    }
                    if (attribute.length > 0 && attribute[0].Entity) {
                        lst = entityIntellisenseList.filter(function (x) { return x.ID == attribute[0].Entity; });
                    }
                }
            }
        }
    }
    return lstrCodeID;
}
function getEntityAttributes(entity, entityIntellisenseList) {
    var data = [];
    var entityId = entity;
    while (entityId) {
        var lst = entityIntellisenseList.filter(function (x) { return x.ID == entityId; });
        if (lst && lst.length > 0 && lst[0].Attributes.length > 0) {
            data = data.concat(lst[0].Attributes);
        }
        if (entityIntellisenseList) {
            var entity = entityIntellisenseList.filter(function (x) {
                return x.ID == entityId;
            });
            if (entity.length > 0) {
                entityId = entity[0].ParentId;
            } else {
                entityId = "";
            }
        }
    }
    return data;
}

function GetCodeIDForLookup(astrEntityName, astrFieldName, entityIntellisenseList) {
    var lstrCodeID = "";
    if (astrEntityName) {
        var lst = entityIntellisenseList.filter(function (x) { return x.ID == astrEntityName; });
        if (lst && lst.length > 0) {
            if (lst[0].Attributes.length > 0) {
                var attribute = lst[0].Attributes.filter(function (x) { return x.Value == astrFieldName; });
                if (attribute.length > 0 && attribute[0].Value) {
                    var attributeidfield = lst[0].Attributes.filter(function (x) { return x.Value == attribute[0].Value.replace("_value", "_id"); });
                    if (attributeidfield && attributeidfield.length > 0) {
                        lstrCodeID = attributeidfield[0].CodeID;
                    }
                }
            }
        }
    }
    return lstrCodeID;
}

function GetFieldFromFormObject(objvm, controltype, attribute, matchingvalue, objret) {

    if (objret && objret.length > 0) {
        return objret;
    }
    else {
        if (objvm) {
            for (var i = 0; i < objvm.Elements.length; i++) {
                var selobj = objvm.Elements[i];
                var field = selobj.Elements.filter(function (x) { return x.Name == controltype && x.dictAttributes[attribute] == matchingvalue; });
                if (field.length > 0) {
                    return field;

                }
                else {
                    objret = GetFieldFromFormObject(selobj, controltype, attribute, matchingvalue, objret);

                }
            }
        }
    }
    return objret;

}



function GetTableKeyFields(astrEntityName, entityIntellisenseList) {
    var lstrKeyFields = "";
    if (astrEntityName) {
        var lst = entityIntellisenseList.filter(function (x) { return x.ID == astrEntityName; });
        if (lst && lst.length > 0) {
            if (lst[0].Attributes.length > 0) {

                angular.forEach(lst[0].Attributes, function (attribute) {
                    var iKeyNo = attribute.KeyNo;

                    if (iKeyNo > 0) {
                        if (lstrKeyFields.length == 0)
                            lstrKeyFields = attribute.ID;
                        else
                            lstrKeyFields += "," + attribute.ID;
                    }
                });
            }
        }
    }
    return lstrKeyFields;
}

//#endregion

//#region Load Entity Fields


function PopulateAvailableFields(strProperty, sfxTable, mainItem, isCheckBoxVisible, isLookup, isNewButton) {
    var strTreeCaption = "";
    if (sfxTable) {
        angular.forEach(sfxTable.Elements, function (sfxRow) {
            angular.forEach(sfxRow.Elements, function (sfxCell) {
                if (sfxCell) {
                    angular.forEach(sfxCell.Elements, function (sfxCtrl) {
                        if (sfxCtrl.Name == "sfwPanel") {
                            strTreeCaption = sfxCtrl.dictAttributes.sfwCaption;
                            if (strTreeCaption == "" || strTreeCaption == undefined) {
                                strTreeCaption = sfxCtrl.dictAttributes.ID;
                            }
                            var childItem = { Text: strTreeCaption, Items: [], IsSelected: false, IsCheckBoxVisible: isCheckBoxVisible };
                            angular.forEach(sfxCtrl.Elements, function (model) {
                                PopulateAvailableFields(strProperty, model, childItem, isCheckBoxVisible, isLookup, isNewButton);
                            });
                            if (childItem.Items.length > 0) {
                                mainItem.Items.push(childItem);
                            }
                        }
                        else if (sfxCtrl.Name == "sfwTabContainer") {
                            strTreeCaption = sfxCtrl.dictAttributes.HeaderText;
                            if (strTreeCaption == "" || strTreeCaption == undefined) {
                                strTreeCaption = sfxCtrl.dictAttributes.ID;
                            }
                            var childItem = { Text: strTreeCaption, Items: [], IsSelected: false, IsCheckBoxVisible: isCheckBoxVisible };
                            var objTabs = sfxCtrl.Elements[0];
                            if (objTabs) {
                                angular.forEach(objTabs.Elements, function (model) {
                                    if (model.Elements.length > 0 && model.Elements[0].Name == "sfwTable") {
                                        PopulateAvailableFields(strProperty, model.Elements[0], childItem, isCheckBoxVisible, isLookup, isNewButton);
                                    }
                                });
                            }
                            if (childItem.Items.length > 0) {
                                mainItem.Items.push(childItem);
                            }
                        }
                        else if (sfxCtrl.Name == "sfwGridView") {
                            var strGridId = sfxCtrl.dictAttributes.ID;
                            var childItem = { Text: strGridId, Items: [], IsSelected: false, IsCheckBoxVisible: isCheckBoxVisible };

                            //var strDataKeys = sfxCtrl.dictAttributes.sfwDataKeyNames;
                            //if(strDataKeys)
                            //{
                            //var strDataKeyNames = strDataKeys.split(',');
                            //}

                            if (sfxCtrl.Elements.length > 0 && sfxCtrl.Elements[0].Name == "Columns") {
                                for (var j = 0; j < sfxCtrl.Elements[0].Elements.length; j++) {
                                    var objTempField = sfxCtrl.Elements[0].Elements[j];
                                    if (objTempField.Elements.length > 0 && objTempField.Elements[0].Name == "ItemTemplate") {
                                        var objItemTempField = objTempField.Elements[0];
                                        angular.forEach(objItemTempField.Elements, function (sfxControl) {

                                            var strFieldName = "";

                                            //strFieldName = sfxCtrl.dictAttributes.sfwEntityField.trim();//[ApplicationConstants.XMLFacade.SFWDATAFIELD].Trim();

                                            strFieldName = sfxControl.dictAttributes.sfwEntityField;//[ApplicationConstants.XMLFacade.SFWDATAFIELD];
                                            if (strFieldName != undefined && strFieldName != "") {
                                                //childItem.Items.Add(new clsField(strFieldName) { IsCheckBoxVisible = true });
                                                childItem.Items.push({ Text: strFieldName, Items: [], IsSelected: false, IsCheckBoxVisible: isCheckBoxVisible });
                                            }
                                        });
                                    }
                                }
                                if (childItem.Items.length > 0) {
                                    mainItem.Items.push(childItem);
                                }
                            }
                        }
                        else if (sfxCtrl.Name == "sfwWizard") {
                            var WizardSteps = sfxCtrl.Elements.filter(function (itm) { return itm.Name == "WizardSteps"; });
                            if (WizardSteps && WizardSteps.length > 0) {
                                angular.forEach(WizardSteps[0].Elements, function (sfxWizardStep) {
                                    var sfxHeaderTemplate = sfxWizardStep.Name == "HeaderTemplate" ? sfxWizardStep : undefined;
                                    if (sfxHeaderTemplate) {
                                        strTreeCaption = "HeaderTemplate";
                                        var childItem = { Text: strTreeCaption, Items: [], IsSelected: false, IsCheckBoxVisible: false };

                                        if (sfxHeaderTemplate.Elements.length > 0) {
                                            PopulateAvailableFields(strProperty, sfxHeaderTemplate.Elements[0], childItem, isCheckBoxVisible, isLookup, isNewButton);
                                            if (childItem.Items.length > 0) {
                                                mainItem.Items.push(childItem);
                                            }
                                        }
                                    }
                                    else {
                                        angular.forEach(sfxWizardStep.Elements, function (wizardStep) {
                                            strTreeCaption = wizardStep.dictAttributes.Title;
                                            if (strTreeCaption == "" || strTreeCaption == undefined) {
                                                strTreeCaption = wizardStep.dictAttributes.ID;
                                            }
                                            var childItem = { Text: strTreeCaption, Items: [], IsSelected: false, IsCheckBoxVisible: false };
                                            if (wizardStep.Elements.length > 0) {
                                                PopulateAvailableFields(strProperty, wizardStep, childItem, isCheckBoxVisible, isLookup, isNewButton);
                                                if (childItem.Items.length > 0) {
                                                    mainItem.Items.push(childItem);
                                                }
                                            }
                                        });
                                    }
                                });
                            }
                        }
                        else {
                            var strFieldName = "";
                            if (isLookup && !IsCriteriaField(sfxCtrl) && strProperty == "sfwDataField") {
                                strProperty = 'sfwEntityField';
                            }

                            strFieldName = sfxCtrl.dictAttributes[strProperty];
                            if (!isNewButton || (isNewButton && sfxCtrl.Name !== "sfwButton" && sfxCtrl.Name !== "sfwLinkButton" && sfxCtrl.Name !== "sfwImageButton")) {
                                var childItem = { Text: strFieldName, Items: [], IsSelected: false, IsCheckBoxVisible: isCheckBoxVisible };//new clsField(strFieldName) { IsCheckBoxVisible = true };
                                if (strFieldName != undefined && strFieldName != "") {
                                    mainItem.Items.push(childItem);
                                }
                            }
                        }
                    });
                }
            });
        });
    }
}

function PopulateAvailableFieldsForFormLink(strProperty, objItems, mainItem, isCheckBoxVisible) {
    var strTreeCaption = "";
    angular.forEach(objItems.Elements, function (sfxCtrl) {
        if (sfxCtrl.Name == "items") {
            PopulateAvailableFieldsForFormLink(strProperty, sfxCtrl, mainItem);
        }
        else if (sfxCtrl.Name == "sfwPanel") {
            strTreeCaption = sfxCtrl.dictAttributes.sfwCaption;
            if (strTreeCaption == "" || strTreeCaption == undefined) {
                strTreeCaption = sfxCtrl.dictAttributes.ID;
            }
            var childItem = { Text: strTreeCaption, Items: [], IsSelected: false };
            angular.forEach(sfxCtrl.Elements, function (model) {
                PopulateAvailableFieldsForFormLink(strProperty, model, childItem, isCheckBoxVisible);
            });
            if (childItem.Items.length > 0) {
                mainItem.Items.push(childItem);
            }
        }
        else if (sfxCtrl.Name == "sfwTabContainer") {
            strTreeCaption = sfxCtrl.dictAttributes.HeaderText;
            if (strTreeCaption == "" || strTreeCaption == undefined) {
                strTreeCaption = sfxCtrl.dictAttributes.ID;
            }
            var childItem = { Text: strTreeCaption, Items: [], IsSelected: false, IsCheckBoxVisible: isCheckBoxVisible };
            var objTabs = sfxCtrl.Elements[0];
            if (objTabs) {
                angular.forEach(objTabs.Elements, function (model) {
                    PopulateAvailableFieldsForFormLink(strProperty, model, childItem, isCheckBoxVisible);
                });
            }
            if (childItem.Items.length > 0) {
                mainItem.Items.push(childItem);
            }
        }
        else if (sfxCtrl.Name == "sfwGridView") {
            var strGridId = sfxCtrl.dictAttributes.ID;
            var childItem = { Text: strGridId, Items: [], IsSelected: false };
            if (sfxCtrl.Elements.length > 0 && sfxCtrl.Elements[0].Name == "Columns") {
                for (var j = 0; j < sfxCtrl.Elements[0].Elements.length; j++) {
                    var objTempField = sfxCtrl.Elements[0].Elements[j];
                    if (objTempField.Elements.length > 0 && objTempField.Elements[0].Name == "ItemTemplate") {
                        var objItemTempField = objTempField.Elements[0];
                        angular.forEach(objItemTempField.Elements, function (sfxControl) {
                            var strFieldName = "";

                            strFieldName = sfxControl.dictAttributes.sfwEntityField;
                            if (strFieldName != undefined && strFieldName != "") {
                                childItem.Items.push({ Text: strFieldName, Items: [], IsSelected: false, IsCheckBoxVisible: isCheckBoxVisible });
                            }
                        });

                    }
                }
                if (childItem.Items.length > 0) {
                    mainItem.Items.push(childItem);
                }
            }
        }
        else if (sfxCtrl.Name == "sfwWizard") {
            //foreach (BaseModel sfxWizardStep in sfxCtrl.Elements)
            var items = sfxCtrl.Elements.filter(function (itm) { return itm.Name == "items"; });
            if (items && items.length > 0) {
                angular.forEach(items[0].Elements, function (sfxWizardStep) {
                    var sfxHeaderTemplate = sfxWizardStep.Name == "HeaderTemplate" ? sfxWizardStep : undefined;
                    if (sfxHeaderTemplate) {
                        strTreeCaption = "HeaderTemplate";
                        var childItem = { Text: strTreeCaption, Items: [], IsSelected: false, IsCheckBoxVisible: false };
                        if (sfxHeaderTemplate.Elements.length > 0) {
                            PopulateAvailableFieldsForFormLink(strProperty, sfxHeaderTemplate.Elements[0], childItem, isCheckBoxVisible);
                            if (childItem.Items.length > 0) {
                                mainItem.Items.push(childItem);
                            }
                        }
                    }
                    else {
                        angular.forEach(sfxWizardStep.Elements, function (wizardStep) {
                            strTreeCaption = sfxWizardStep.dictAttributes.Title;
                            if (!strTreeCaption || strTreeCaption == "") {
                                strTreeCaption = sfxWizardStep.dictAttributes.ID;
                            }
                            var childItem = { Text: strTreeCaption, Items: [], IsSelected: false, IsCheckBoxVisible: false };
                            if (wizardStep.Elements.length > 0) {
                                PopulateAvailableFieldsForFormLink(strProperty, wizardStep, childItem, isCheckBoxVisible);
                                if (childItem.Items.length > 0) {
                                    mainItem.Items.push(childItem);
                                }
                            }
                        });
                    }
                });
            }
        }
        else {
            var strFieldName = "";
            strFieldName = sfxCtrl.dictAttributes[strProperty];
            var childItem = n = { Text: strFieldName, Items: [], IsSelected: false, IsCheckBoxVisible: true };
            if (strFieldName && strFieldName != "") {
                mainItem.Items.push(childItem);
            }
        }
    });
}

function GetFormLinkItemsModel(model, formObject) {
    var retVal = { Name: "sfwLabel", Value: '', prefix: 'swc', dictAttributes: {}, Elements: [], Children: [] };
    //if (formObject.dictAttributes.sfwType == "FormLinkWizard") {
    //    retVal = formObject.Elements.filter(function (x) { return x.Name.toLowerCase() == "items"; });
    //    if (retVal && retVal.length > 0) {
    //        return retVal[0].Elements;
    //    }
    //}
    //else {
    retVal = formObject.Elements.filter(function (x) { return x.Name.toLowerCase() == "items"; });
    if (retVal && retVal.length > 0) {
        return retVal[0];
    }
    //}
    return retVal;
}
//#endregion

function SetFormSelectedControl(formModel, objControl, event) {
    if (formModel && objControl) {
        if (formModel.SelectedControl) {
            formModel.SelectedControl.IsSelected = false;
            if (formModel.SelectedControl.Name == "sfwPanel" || formModel.SelectedControl.Name == "sfwDialogPanel" || formModel.SelectedControl.Name == "sfwListView") {
                formModel.SelectedControl.IsVisible = false;
            }
        }
        formModel.SelectedControl = objControl;
        formModel.SelectedControl.IsSelected = true;
        if (formModel.SelectedControl.Name == "sfwPanel" || formModel.SelectedControl.Name == "sfwDialogPanel" || formModel.SelectedControl.Name == "sfwListView") {
            formModel.SelectedControl.IsVisible = true;
        }
    }
    if (event) {
        event.stopPropagation();
    }
}

function GetCaptionFromFieldName(str) {
    if (str) {
        if (startsWith(str, "icdo", 0))
            str = str.replace("icdo", "");

        var strCaption = "";
        var blnCapsNext = true;

        for (var i = 0; i < str.length; i++) {
            if ("._".contains("" + str[i])) {
                blnCapsNext = true;
                strCaption += " ";
            }
            else {
                strCaption += blnCapsNext ? str.toUpperCase()[i] : str[i];
                blnCapsNext = false;
            }
        }

        if (endsWith(strCaption, " Id"))
            strCaption = strCaption.replace(" Id", " ID");
        if (strCaption.contains("Ssn"))
            strCaption = strCaption.replace("Ssn", "SSN");

        var intValuePos = strCaption.indexOf(" Value");
        if (intValuePos > 0)
            strCaption = strCaption.substring(0, intValuePos);

        var intDescPos = strCaption.indexOf(" Description");
        if (intDescPos > 0)
            strCaption = strCaption.substring(0, intDescPos);
    }
    return strCaption;
}
function GetCaptionFromField(field) {
    if (field) {
        if (field.Caption && field.Caption.trim().length > 0) {
            return field.Caption;
        }
        else {
            return GetCaptionFromFieldName(field.ID);
        }
    }
}
function CreateControl(formodel, cellVM, cntrlName, blnIsGrid) {
    var lst = cntrlName.split('.');
    var cntrlClass = "";
    var methodName = "";
    if (null != lst) {
        cntrlClass = lst[0];
        if (lst.length == 2) {
            methodName = lst[1];
        }
    }

    var sfxControlModel = CreateControlWithMethod(formodel, cntrlClass, methodName, cellVM, blnIsGrid);

    return sfxControlModel;
}

function CreateControlWithMethod(formodel, astrCntrlName, astrMethodName, cellVM, blnIsGrid) {
    var sfxControl = null;
    switch (astrCntrlName) {
        case "Panel":
            sfxControl = AddNewPanel(formodel, "sfwPanel", astrCntrlName, "NewPanel", cellVM);
            break;

        case "DialogPanel":
            sfxControl = AddNewPanel(formodel, "sfwDialogPanel", astrCntrlName, "DialogPanel", cellVM);
            break;

        //case "GridView":
        //    bool blnIsPrototype = false;
        //    if (aObjVM is FormObjectVM)
        //    {
        //        blnIsPrototype = (aObjVM as FormObjectVM).IsPrototype;
        //    }
        //    sfxControl = UtilityFunctions.CreateGridView(aObjVM, cellVM as SfxCellVM, blnIsPrototype);
        //    break;
        case "TabContainer":
            sfxControl = CreateTabContainer(formodel, cellVM);
            break;
        //case "NewButton":
        //    sfxControl = UtilityFunctions.CreateNewButton(aObjVM, cellVM as SfxCellVM, aModel);
        //    break;
        case "UserControl":
            sfxControl = { Name: "udc", value: '', prefix: "", dictAttributes: {}, Elements: [], Children: [] };
            sfxControl.ParentVM = cellVM;


            sfxControl.dictAttributes.ID = GetControlID(formodel, sfxControl.Name);
            break;
        case "Caption":
            prefix = "swc";
            sfxControl = { Name: "sfwLabel", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
            sfxControl.ParentVM = cellVM;
            sfxControl.dictAttributes.ID = GetControlIDForCaption(formodel, sfxControl.Name, true);
            sfxControl.dictAttributes.sfwIsCaption = "True";
            break;
        case "sfwSwitchCheckBox":
            prefix = "swc";
            sfxControl = { Name: "sfwCheckBox", value: '', prefix: prefix, dictAttributes: { sfwIsSwitch: "True" }, Elements: [], Children: [] };
            sfxControl.ParentVM = cellVM;
            sfxControl.dictAttributes.ID = GetControlID(formodel, sfxControl.Name);
            break;
        default:
            var contrlname = astrCntrlName;
            var prefix = "";

            if (astrCntrlName == "sfwCommandButton") {
                contrlname = "sfwCommandButton";
                prefix = "swc";
            }
            else if (astrCntrlName == "sfwEmployerSoftErrors") {
                contrlname = "sfwSoftErrors";
                prefix = "swc";
            }
            else if (astrCntrlName == "br" || astrCntrlName == "hr") {
                contrlname = astrCntrlName;
            }

            else {
                contrlname = astrCntrlName;
                prefix = "swc";
            }
            sfxControl = { Name: contrlname, value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
            sfxControl.ParentVM = cellVM;
            if (!blnIsGrid) {
                sfxControl.dictAttributes.ID = GetControlID(formodel, sfxControl.Name);
            }
            else if (blnIsGrid && contrlname && contrlname == "sfwCascadingDropDownList") {
                sfxControl.dictAttributes.ID = GetControlID(formodel, sfxControl.Name);
            }
            if (contrlname && contrlname === "sfwDateTimePicker") {
                sfxControl.dictAttributes.sfwDataFormat = "{0:d}";
            }
            CheckAndSetControlDefaultValues(formodel, sfxControl, sfxControl.Name, astrMethodName, astrCntrlName);
            break;
    }
    return sfxControl;
}

function CreateTabContainer(formodel, sfxCellVM) {
    var prefix = "swc";
    var newTabContainerModel = { Name: "sfwTabContainer", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
    newTabContainerModel.ParentVM = sfxCellVM;
    newTabContainerModel.dictAttributes.ID = CreateControlID(formodel, "sfwTabContainer", "sfwTabContainer", false);

    var newtabsModel = { Name: "Tabs", value: '', prefix: "", dictAttributes: {}, Elements: [], Children: [] };
    newtabsModel.ParentVM = newTabContainerModel;
    newTabContainerModel.Elements.push(newtabsModel);

    var newTabSheetModel = { Name: "sfwTabSheet", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
    newTabSheetModel.ParentVM = newtabsModel;
    newTabSheetModel.dictAttributes.ID = CreateControlID(formodel, "NewPage", "sfwTabSheet", false);
    newTabSheetModel.dictAttributes.HeaderText = "New Page";
    newtabsModel.Elements.push(newTabSheetModel);

    var newSfxTableModel = { Name: "sfwTable", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
    newSfxTableModel.ParentVM = newTabSheetModel;
    newSfxTableModel.dictAttributes.ID = CreateControlID(formodel, "Table", "sfwTable", false);
    newTabSheetModel.Elements.push(newSfxTableModel);

    var newSfxRowModel = { Name: "sfwRow", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
    newSfxRowModel.ParentVM = newSfxTableModel;


    var newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
    newSfxCellModel.ParentVM = newSfxRowModel;
    newSfxRowModel.Elements.push(newSfxCellModel);

    newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
    newSfxCellModel.ParentVM = newSfxRowModel;
    newSfxRowModel.Elements.push(newSfxCellModel);


    newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
    newSfxCellModel.ParentVM = newSfxRowModel;
    newSfxRowModel.Elements.push(newSfxCellModel);

    newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
    newSfxCellModel.ParentVM = newSfxRowModel;
    newSfxRowModel.Elements.push(newSfxCellModel);


    newSfxTableModel.Elements.push(newSfxRowModel);



    return newTabContainerModel;


}

function AddNewPanel(formodel, astrCntrlName, astrID, strPanelName, aModel) {
    var prefix = "swc";
    var sfxPanelModel = { Name: astrCntrlName, value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
    sfxPanelModel.ParentVM = aModel;

    sfxPanelModel.dictAttributes.ID = CreateControlID(formodel, strPanelName, astrCntrlName, false);
    sfxPanelModel.dictAttributes.sfwCaption = "New Page";

    var strCtrlId = CreateControlID(formodel, "NewPage", "sfwTable", false);

    var sfxTableModel = { Name: "sfwTable", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
    sfxTableModel.ParentVM = sfxPanelModel;

    sfxTableModel.dictAttributes.ID = strCtrlId;

    var sfxRowModel = { Name: "sfwRow", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
    sfxRowModel.ParentVM = sfxTableModel;

    var newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
    sfxRowModel.ParentVM = sfxRowModel;
    sfxRowModel.Elements.push(newSfxCellModel);

    newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
    sfxRowModel.ParentVM = sfxRowModel;
    sfxRowModel.Elements.push(newSfxCellModel);

    newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
    sfxRowModel.ParentVM = sfxRowModel;
    sfxRowModel.Elements.push(newSfxCellModel);

    newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
    sfxRowModel.ParentVM = sfxRowModel;
    sfxRowModel.Elements.push(newSfxCellModel);

    sfxTableModel.Elements.push(sfxRowModel);

    sfxPanelModel.Elements.push(sfxTableModel);

    return sfxPanelModel;
}

function CheckAndSetControlDefaultValues(formodel, aModel, astrDropOpeName, astrMethodName, astrControlName) {
    //if (aModel.Name === "sfwCaptcha") {
    //    aModel.dictAttributes.sfwAudio = "Y";
    //    aModel.dictAttributes.sfwMode = "text";
    //    aModel.dictAttributes.sfwRefreshImageUrl = "/Icon_captcharefresh.jfif";
    //    aModel.dictAttributes.sfwSpeakerImageUrl = "/Icon_captchspeaker.jfif";
    //}
    if (aModel.Name == "sfwImageButton") {
        aModel.dictAttributes.sfwMethodName = "btnRetrieve_Click";
        aModel.dictAttributes.ImageUrl = "~/Image/Lookup.jpg";
        aModel.dictAttributes.ImageAlign = "AbsMiddle";


    }
    if (aModel.Name == "sfwSoftErrors") {
        if (astrControlName == "sfwSoftErrors") {
            aModel.dictAttributes.sfwEntityField = "InternalErrors";
        }
        else if (astrControlName == "sfwEmployerSoftErrors") {
            aModel.dictAttributes.sfwEntityField = "ExternalErrors";
            //var strBusObject = scope.GetBusinessObjectName(aObjVM);
            //aModel.dictAttributes.sfwObjectID = string.Format("{0}.ibusSoftErrors.iclbEmployerError", strBusObject);
        }
    }
    else if ((astrControlName != "sfwCommandButton") && (aModel.Name == "sfwButton" || aModel.Name == "sfwLinkButton" || aModel.Name == "sfwImageButton")) {
        CheckAndSetSfwButtonDefaultValues(formodel, aModel, astrMethodName);
    }
    else if (astrControlName == "sfwCommandButton") {
        var astrCommandName = "Cancel";
        aModel.dictAttributes.CommandName = astrCommandName;
        var strButtonID = CreateControlID(formodel, astrCommandName, "sfwButton", false);
        aModel.dictAttributes.Text = astrCommandName;
        aModel.dictAttributes.ID = strButtonID;
        aModel.dictAttributes.sfwCheckChanges = "True";
    }
    else if (astrControlName == "sfwCheckBox") {
        aModel.dictAttributes.sfwIsSwitch = "False";
    }
    else if (aModel.Name === "sfwTextBox" || aModel.Name === "sfwLabel") {
        aModel.dictAttributes.sfwRenderType = "None";
    }
    else if (aModel.Name === "sfwCheckBoxList") {
        aModel.dictAttributes.sfwDisplayInDialog = "True";
    }
}

function GetControlIDForCaption(formmodel, astrName, IsCaption) {
    var strID = astrName;
    if (startsWith(strID, "sfw", 0)) {
        strID = strID.substring(3);
    }
    strID = CreateControlID(formmodel, strID, astrName, IsCaption);

    return strID;
}

function GetControlID(formodel, astrName) {
    var strID = astrName;
    if (startsWith(strID, "sfw", 0)) {
        strID = strID.substring(3);
    }

    strID = CreateControlID(formodel, strID, astrName, false);

    return strID;
}

function CheckAndSetSfwButtonDefaultValues(formodel, aModel, astrMethodName) {
    if (astrMethodName) {
        var strButtonText = "";
        var strBtnID = "";
        switch (astrMethodName) {
            // Common Buttons
            case "btnNew_Click":
                strButtonText = "New";
                break;
            case "btnDelete_Click":
                strButtonText = "Delete";
                break;
            case "btnColumnsToExport_Click":
                strButtonText = "Export To Excel";
                break;
            case "btnNewUpdate_Click":
                strButtonText = "New Update";
                break;
            case "btnOpenLookup_Click":
                strButtonText = "Open Lookup";
                break;
            case "btnOpen_Click":
                strButtonText = "Open";
                break;
            case "btnOpenDoc_Click":
                strButtonText = "Open Document";
                break;

            // Lookup Buttons
            case "btnApplySort_Click":
                strButtonText = "Apply Sort";
                break;
            case "btnReset_Click":
                strButtonText = "Reset";
                break;
            case "btnSearch_Click":
                strButtonText = "Search";
                break;
            case "btnSearchCriteriaRequired_Click":
                strButtonText = "Search Criteria";
                break;
            case "btnStoreUserDefaults_Click":
                strButtonText = "Store Defaults";
                break;

            // Maintetance Buttons
            case "btnAddNewChild_Click":
                strButtonText = "Add New Child";
                break;
            case "btnAuditHistory_Click":
                strButtonText = "Audit History";

                var strNavParams = "primary_key=;form_name=#" + formodel.dictAttributes.ID;
                aModel.dictAttributes.sfwActiveForm = "wfmAuditMaintenance";
                aModel.dictAttributes.sfwNavigationParameter = strNavParams;

                break;
            case "btnCorrespondence_Click":
                strButtonText = "Correspondence";
                break;
            case "btnDownload_Click":
                strButtonText = "Download";
                break;
            case "btnExecuteBusinessMethodSelectRows_Click":
                strButtonText = "Execute Pass Selected Rows";
                break;
            case "btnValidateExecuteBusinessMethod_Click":
                strButtonText = "Execute Refresh From Object";
                break;
            case "btnExecuteBusinessMethod_Click":
                strButtonText = "Execute Refresh Data";
                break;
            case "btnExecuteServerMethod_Click":
                strButtonText = "Execute Server Method";
                break;
            case "btnForceSave_Click":
                strButtonText = "Force Save";
                break;
            case "btnNext_Click":
                strButtonText = "Next Record";
                break;
            case "btnPrev_Click":
                strButtonText = "Previous Record";
                break;
            case "btnCancel_Click":
                strButtonText = "Refresh Data";
                break;
            case "btnRefreshServers_Click":
                strButtonText = "Refresh Servers";
                break;
            case "btnSaveAndNext_Click":
                strButtonText = "Save And Next";
                break;
            case "btnSaveNew_Click":
                strButtonText = "Save And New";
                break;
            case "btnSave_Click":
                strButtonText = "Save";
                break;
            case "btnSaveIgnoreReadOnly_Click":
                strButtonText = "Save ReadOnly";
                break;
            case "btnNoChangesSave_Click":
                strButtonText = "Save No Changes";
                break;
            case "btnGridViewAdd_Click":
                strButtonText = "Add";
                break;
            case "btnGridViewUpdate_Click":
                strButtonText = "Update";
                break;
            case "btnGridViewSelect_Click":
                strButtonText = "Select";
                break;
            case "btnGridViewDelete_Click":
                strButtonText = "Delete";
                break;
            case "btnWizardPrevious_Click":
                strButtonText = "Previous";
                break;
            case "btnWizardSaveAndPrevious_Click":
                strButtonText = "Previous";
                strBtnID = "Save And Previous";
                break;
            case "btnWizardNext_Click":
                strButtonText = "Next";
                break;
            case "btnWizardFindAndNext_Click":
                strButtonText = "Next";
                strBtnID = "Find And Next";
                break;
            case "btnWizardSaveAndNext_Click":
                strButtonText = "Next";
                strBtnID = "Save And Next";
                break;
            case "btnWizardFinish_Click":
                strButtonText = "Finish";
                break;
            case "btnPdfCorrespondence_Click":
                strButtonText = "PDF Correspondence";
                aModel.dictAttributes.sfwTriggerPostBack = "True";
                break;

            case "btnBpmApprove_Click":
                strButtonText = "BPM Approve";
                aModel.dictAttributes.sfwMode = "Update";
                aModel.dictAttributes.sfwRefreshUpdatePanels = "uppWorkflowNew;uppCenterMiddle";
                break;
            case "btnBpmReject_Click":
                strButtonText = "BPM Reject";
                aModel.dictAttributes.sfwMode = "Update";
                aModel.dictAttributes.sfwRefreshUpdatePanels = "uppWorkflowNew;uppCenterMiddle";
                break;
            case "btnBpmSubmit_Click":
                strButtonText = "BPM Submit";
                aModel.dictAttributes.sfwMode = "Update";
                aModel.dictAttributes.sfwRefreshUpdatePanels = "uppWorkflowNew;uppCenterMiddle";
                break;
            default:
                strButtonText = astrMethodName.replace("btn", "");
                break;
        }

        aModel.dictAttributes.sfwMethodName = astrMethodName;

        if (strButtonText != undefined && strButtonText != "") {
            if (strBtnID == undefined || strBtnID == "") {
                strBtnID = strButtonText;
            }
            aModel.dictAttributes.Text = strButtonText;

            var strButtonID = "";
            strButtonID = CreateControlID(formodel, strBtnID, aModel.Name);
            aModel.dictAttributes.ID = strButtonID;
        }
    }
}

function GetMaxColCount(arowVM, tableVM) {

    var MaxColCount = arowVM.Elements.length;
    if (tableVM) {
        angular.forEach(tableVM.Elements, function (rowVM) {
            if (rowVM.Elements.length > MaxColCount) {
                MaxColCount = rowVM.Elements.length;
            }
        });
    }

    return MaxColCount;
}

function CreateControlIDInCamelCase(astrFieldName) {
    var strCtrlID = "";
    var strSep = "~`!@#$%^&*_-–+=[{()}]|:;<,.>?/. ";

    var blnCapsNext = true;
    for (i = 0; i < astrFieldName.length; i++) {
        if (strSep.contains("" + astrFieldName[i]))
            blnCapsNext = true;
        else {
            strCtrlID += blnCapsNext ? astrFieldName.toUpperCase()[i] : astrFieldName[i];
            blnCapsNext = false;
        }
    }

    if ((strCtrlID.toLowerCase().indexOf("iclb") > -1 && strCtrlID.toLowerCase().startsWith("iclb")) || (strCtrlID.toLowerCase().indexOf("icol") > -1 && strCtrlID.toLowerCase().startsWith("icol")))
        strCtrlID = strCtrlID.substring(4);

    return strCtrlID;
}

function SetDefultValuesBasedOnDataType(aField, astrClassName, sfxCntrlModel) {
    if (astrClassName == "sfwLabel" || astrClassName == "sfwTextBox" || astrClassName == "sfwDateTimePicker") {
        if (astrClassName == "sfwLabel" && aField.Value && (aField.Value.toLowerCase() == "created_date" || aField.Value.toLowerCase() == "modified_date")) {
            sfxCntrlModel.dictAttributes.sfwDataFormat = "{0:G}";
        }
        else if (aField.DataType && (aField.DataType.toLowerCase() == "datetime" || aField.DataType.toLowerCase() == "date")) {
            sfxCntrlModel.dictAttributes.sfwDataFormat = "{0:d}";
        }
        else if (aField.DataType == "Decimal" && endsWith(aField.Value, "_amt") || endsWith(aField.Value, "_amount")) {
            sfxCntrlModel.dictAttributes.sfwDataFormat = "{0:C}";
        }
        else if (aField.Value.contains("ssn")) {
            sfxCntrlModel.dictAttributes.sfwDataFormat = "{0:000-##-####}";
        }
        else if (aField.Value.contains("phone") || aField.Value.contains("fax")) {
            sfxCntrlModel.dictAttributes.sfwDataFormat = "{0:(###)###-####}";
        }
    }
}

function CreateControlID(formodel, astrFieldName, astrControlClass, ablnIsCaption) {
    var strCtrlID = CreateControlIDWithPrefix(formodel, astrFieldName, astrControlClass, ablnIsCaption);

    if (strCtrlID == "")
        return "";

    if (formodel) {
        var objModel = FindControlByID(formodel, strCtrlID);

        var iNum = 0;
        var strID = strCtrlID;
        while (objModel != null) {
            iNum++;
            strCtrlID = String.format("{0}{1}", strID, iNum);
            objModel = FindControlByID(formodel, strCtrlID);
        }
    }
    return strCtrlID;
}

function CreateControlIDWithPrefix(formodel, astrFieldName, astrControlClass, ablnIsCaption) {
    var strCtrlID = "";
    strCtrlID = getControlIDPrefix(astrControlClass, ablnIsCaption);

    if (startsWith(astrFieldName, strCtrlID, 0)) {
        astrFieldName = astrFieldName.substring(strCtrlID.length);
    }

    if (strCtrlID.length > 0)
        strCtrlID += CreateActualControlID(astrFieldName);

    return strCtrlID;
}

function getControlIDPrefix(controlName, isCaption) {
    var prefix = "";
    switch (controlName) {
        case "sfwTable":
            prefix = "tbl";
            break;
        case "sfwPanel":
            prefix = "pnl";
            break;
        case "sfwTabContainer":
            prefix = "tct";
            break;
        case "sfwTabSheet":
            prefix = "tsh";
            break;
        case "sfwLabel":
            if (isCaption)
                prefix = "cap";
            else
                prefix = "lbl";
            break;
        case "sfwLiteral":
            prefix = "ltr";
            break;
        case "sfwCheckBox":
            prefix = "chk";
            break;
        case "sfwTextBox":
            prefix = "txt";
            break;
        case "sfwDropDownList":
        case "sfwMultiSelectDropDownList":
            prefix = "ddl";
            break;
        case "sfwCheckBoxList":
            prefix = "cbl";
            break;
        case "sfwRadioButtonList":
            prefix = "rbl";
            break;
        case "sfwGridView":
            prefix = "grv";
            break;
        case "sfwButton":
        case "sfwToolTipButton":
            prefix = "btn";
            break;
        case "sfwLinkButton":
            prefix = "btn";
            break;
        case "sfwImageButton":
            prefix = "btn";
            break;
        case "sfwFileLayout":
            prefix = "flo";
            break;
        case "RequiredFieldValidator":
            prefix = "rfv";
            break;
        case "CompareValidator":
            prefix = "cmv";
            break;
        case "RangeValidator":
            prefix = "rnv";
            break;
        case "RegularExpressionValidator":
            prefix = "rev";
            break;
        case "ValidationSummary":
            prefix = "vls";
            break;
        case "sfwRadioButton":
            prefix = "rdb";
            break;
        case "sfwMultiCorrespondence":
            prefix = "mcr";
            break;
        case "sfwCRViewer":
            prefix = "crv";
            break;
        case "sfwHyperLink":
            prefix = "hyp";
            break;
        case "sfwFileUpload":
            prefix = "flu";
            break;
        case "sfwSoftErrors":
            prefix = "egr";
            break;
        case "sfwListBox":
            prefix = "lst";
            break;
        case "sfwImage":
            prefix = "img";
            break;
        case "sfwWizard":
            prefix = "wiz";
            break;
        case "sfwWizardStep":
            prefix = "wzs";
            break;
        case "sfwCascadingDropDownList":
            prefix = "ddl";
            break;
        case "sfwListPicker":
            prefix = "lv";
            break;
        case "sfwTargetList":
            prefix = "lv";
            break;
        case "sfwSourceList":
            prefix = "lv";
            break;

        case "sfwChart":
            prefix = "chrt";
            break;
        case "sfwSeries":
            prefix = "ser";
            break;
        case "sfwChartArea":
            prefix = "chrta";
            break;

        case "sfwDialogPanel":
            prefix = "pnl";
            break;

        case "udc":
        case "UserControl":
            prefix = "UserControl";
            break;

        case "sfwListView":
            prefix = "lst";
            break;
        case "sfwRuleViewer":
            prefix = "rvw";
            break;
        case "sfwSlider":
            prefix = "sld";
            break;
        case "sfwQuestionnairePanel":
            prefix = "qnp";
            break;
        case "sfwDateTimePicker":
            prefix = "dtp";
            break;

        case "sfwKnob":
            prefix = "knb";
            break;
        case "sfwCalendar":
            prefix = 'cal';
            break;
        case "hr":
        case "br":
            prefix = controlName;
            break;
        case "sfwUserDefaults":
            prefix = "uds";
            break;
        case "sfwOpenDetail":
            prefix = 'od';
            break;
        case "sfwWizardProgress":
            prefix = "wp";
            break;
        case "sfwJSONData":
            prefix = "jdata";
            break;
        case "sfwScheduler":
            prefix = "sch";
            break;
        case "sfwButtonGroup":
            prefix = "btngrp";
            break;
        case "sfwCaptcha":
            prefix = "cpt";
            break;
    }
    return prefix;
}

function CreateActualControlID(astrFieldName) {
    var strCtrlID = "";
    var strSep = "~`!@#$%^&*_-–+=[{()}]|:;<,.>?/. ";

    var blnCapsNext = true;
    for (var i = 0; i < astrFieldName.length; i++) {
        if (strSep.indexOf("" + astrFieldName[i]) !== -1) {
            blnCapsNext = true;
        }
        else {
            strCtrlID += blnCapsNext ? astrFieldName.toUpperCase()[i] : astrFieldName[i];
            blnCapsNext = false;
        }
    }

    if (startsWith(strCtrlID.toLowerCase(), "iclb", 0) || startsWith(strCtrlID.toLowerCase(), "icol", 0))
        strCtrlID = strCtrlID.substring(4);

    return strCtrlID;
}

function FindParent(aModel, parentCtrlName, includeSelf) {
    if (aModel) {
        var retValue = null;
        if (aModel.Name === parentCtrlName && includeSelf) {
            retValue = aModel;
        }
        else {
            var parent = aModel.ParentVM;

            while (parent && parent.Name != parentCtrlName) {
                parent = parent.ParentVM;
            }

            retValue = parent;
        }
        return retValue;
    }
}

function PopulateAssociatedControls(aModel) {
    //Populate Associated Control
    var lstAssociatedControls = [];
    var sfxAssociatedCell = [];
    lstAssociatedControls.push("");
    if (aModel.dictAttributes) {
        var strEntityField = aModel.dictAttributes.sfwEntityField;//[ApplicationConstants.XMLFacade.SFWDATAFIELD];
        var strDataField = aModel.dictAttributes.sfwDataField;
        if ((strEntityField == undefined || strEntityField == "") && (strDataField == undefined || strDataField == "")) {

            var sfxRow = aModel;
            var sfxAssociatedCell;
            sfxRow = FindParent(aModel, "sfwRow");
            var blnCellFound = false;

            if (sfxRow) {
                var iRow = -1;
                angular.forEach(sfxRow.Elements, function (sfxCell) {
                    iRow++;
                    if (blnCellFound) {
                        return;
                    }
                    angular.forEach(sfxCell.Elements, function (sfxCtrl) {
                        if (sfxCtrl) {
                            if (sfxCtrl.dictAttributes.ID == aModel.dictAttributes.ID) {
                                blnCellFound = true;
                                sfxAssociatedCell.push(sfxRow.Elements[iRow]);
                                if (sfxRow.Elements.length > iRow + 1 && sfxRow.Elements[iRow + 1] != undefined) {
                                    sfxAssociatedCell.push(sfxRow.Elements[iRow + 1]);
                                }
                                return;
                            }
                        }
                    });
                });
                if (sfxAssociatedCell != undefined) {
                    if (sfxAssociatedCell.length > 0) {
                        angular.forEach(sfxAssociatedCell, function (sfxCell) {
                            if (sfxCell && sfxCell.Elements.length > 0) {
                                angular.forEach(sfxCell.Elements, function (sfxCtrl) {
                                    if (!sfxCtrl.dictAttributes.sfwIsCaption) {
                                        var strID = sfxCtrl.dictAttributes.ID;
                                        if (strID) {
                                            if (sfxCtrl.Name != "sfwGridView" &&
                                                sfxCtrl.Name != "sfwChart" &&
                                                sfxCtrl.Name != "sfwPanel" &&
                                                sfxCtrl.Name != "sfwDialogPanel" &&
                                                sfxCtrl.Name != "sfwButton" &&
                                                sfxCtrl.Name != "sfwTabContainer" &&
                                                sfxCtrl.Name != "sfwTabSheet"
                                                && sfxCtrl.Name != "udc"
                                                && sfxCtrl.Name != "sfwListViewer") {

                                                lstAssociatedControls.push(strID);
                                            }
                                        }
                                    }

                                });
                            }
                        });
                    }
                    else {
                        lstAssociatedControls.push("");
                    }
                }
            }
        }
    }
    return lstAssociatedControls;
}

function PopulateAssociatedControlsForRetriveButton(aModel) {
    //Populate Associated Control
    var lstAssociatedControls = [];
    lstAssociatedControls.push("");
    var strEntityField = aModel.dictAttributes.sfwEntityField;//[ApplicationConstants.XMLFacade.SFWDATAFIELD];
    var strDataField = aModel.dictAttributes.sfwDataField;
    if ((strEntityField == undefined || strEntityField == "") && (strDataField == undefined || strDataField == "")) {
        var sfxRow = aModel;
        var sfxAssociatedCell;
        sfxRow = FindParent(aModel, "sfwRow");
        var blnCellFound = false;

        if (sfxRow != undefined) {
            var iRow = -1;
            angular.forEach(sfxRow.Elements, function (sfxCell) {
                iRow++;
                if (blnCellFound) {
                    return;
                }
                angular.forEach(sfxCell.Elements, function (sfxCtrl) {
                    if (sfxCtrl) {
                        if (sfxCtrl.dictAttributes.ID == aModel.dictAttributes.ID) {
                            blnCellFound = true;
                            if (sfxRow.Elements.length > iRow + 1 && sfxRow.Elements[iRow] != undefined) {
                                sfxAssociatedCell = sfxRow.Elements[iRow];
                            }
                            return;
                        }
                    }
                });
            });
            if (sfxAssociatedCell != undefined) {
                if (sfxAssociatedCell.Elements.length > 0) {
                    angular.forEach(sfxAssociatedCell.Elements, function (sfxCtrl) {
                        var strID = sfxCtrl.dictAttributes.ID;//[ApplicationConstants.XMLFacade.ID];
                        if (strID != undefined && strID != "") {
                            if (sfxCtrl.Name == "sfwLabel" ||
                                sfxCtrl.Name == "sfwTextBox" ||
                                sfxCtrl.Name == "sfwDropDownList" ||
                                sfxCtrl.Name == "sfwMultiSelectDropDownList" ||
                                sfxCtrl.Name == "sfwCheckBoxList" ||
                                sfxCtrl.Name == "sfwRadioButtonList" ||
                                sfxCtrl.Name == "sfwCheckBox" ||
                                sfxCtrl.Name == "sfwRadioButton" ||
                                sfxCtrl.Name == "sfwCascadingDropDownList") {
                                lstAssociatedControls.push(strID);
                            }
                        }
                    });
                }
                else {
                    lstAssociatedControls.push("");
                }
            }
        }
    }
    return lstAssociatedControls;
}

function PopulateRelatedGrid(aModel, lstParentGrid, isFilterReset) {
    if (isFilterReset) {
        if (aModel.Name == "sfwButton" ||
            aModel.Name == "sfwLinkButton" ||
            aModel.Name == "sfwImageButton") {
            if (aModel.dictAttributes.sfwMethodName == "btnGridSearch_Click"
                || aModel.dictAttributes.sfwMethodName == "btnGridSearchCriteriaReq_Click") {
                var strBtnCtrlID = aModel.dictAttributes.ID;//[ApplicationConstants.XMLFacade.ID];
                if (strBtnCtrlID && strBtnCtrlID.length > 0) {
                    lstParentGrid.push(strBtnCtrlID);
                }
            }
        }
        angular.forEach(aModel.Elements, function (itm) {
            PopulateRelatedGrid(itm, lstParentGrid, true);
        });
    }
    else {
        if (aModel.Name == "sfwGridView" || aModel.Name == "sfwScheduler") {
            var strCtrlID = aModel.dictAttributes.ID;
            if (strCtrlID && strCtrlID.length > 0 && !strCtrlID.match("^idsfw")) {
                lstParentGrid.push(strCtrlID);
            }
        }
        angular.forEach(aModel.Elements, function (itm) {
            PopulateRelatedGrid(itm, lstParentGrid);
        });
    }
}

function PopulateEntityRules(entityModel, isWizard, astrInitialLoadGroup, strGroupName) {
    var lstBusinessRules = [];

    if (astrInitialLoadGroup != undefined && astrInitialLoadGroup != "") {
        var groupListModel;
        var lstGrouplist = entityModel.lstGroupsList;
        if (lstGrouplist && lstGrouplist.length > 0) {
            groupListModel = lstGrouplist[0];
        }
        if (groupListModel != null) {
            var groupModel;
            var lstGroups = groupListModel.Elements.filter(function (ele) { return ele.dictAttributes.ID == astrInitialLoadGroup; });
            if (lstGroups && lstGroups.length > 0) {
                groupModel = lstGroups[0];
            }
            if (groupModel) {
                angular.forEach(groupModel.Elements, function (itmModel) {
                    lstBusinessRules.push(itmModel.dictAttributes.ID);
                });
            }
        }
    }
    else {
        var initialLoad;
        if (entityModel) {
            var lstinitialLoad = entityModel.lstInitialLoadList;
            if (lstinitialLoad && lstinitialLoad.length > 0) {
                initialLoad = lstinitialLoad[0];
            }
            if (initialLoad) {
                angular.forEach(initialLoad.Elements, function (lxmlItem) {
                    lstBusinessRules.push(lxmlItem.dictAttributes.ID);
                });
            }
        }
    }

    return lstBusinessRules;
}

function IsAuditField(strField) {
    strField = strField.toLowerCase();

    if (strField == "created_by") return true;
    if (strField == "created_date") return true;
    if (strField == "modified_by") return true;
    if (strField == "modified_date") return true;
    if (strField == "update_seq") return true;

    return false;
}

function FindControlByID(sfxControl, strId) {
    var objControl;
    if (strId && strId != "" && sfxControl.dictAttributes.ID == strId) {
        objControl = sfxControl;
        return objControl;
    }

    angular.forEach(sfxControl.Elements, function (ctrl) {
        if (objControl == undefined) {
            objControl = FindControlByID(ctrl, strId);
        }
    });

    return objControl;
}

function CheckforDuplicateID(model, strID, lstIds) {
    if (model.dictAttributes.ID != undefined && model.dictAttributes.ID != "") {
        if (model.dictAttributes.ID == strID) {
            lstIds.push(strID);
        }
    }

    angular.forEach(model.Elements, function (ctrl) {

        CheckforDuplicateID(ctrl, strID, lstIds);

    });
}

function GetBuisnessRules(entityModel, astrSection, nodeName, sfwRuleGroup, isWizard) {
    var arrResult = [];
    //arrResult.Add(string.Empty);
    if (entityModel != null) {

        if (isWizard && entityModel.lstGroupsList) {
            var groupsModel = entityModel.lstGroupsList[0];
            if (groupsModel && groupsModel.Elements.length > 0) {
                angular.forEach(groupsModel.Elements, function (groupModel) {
                    if (groupModel.dictAttributes.ID == sfwRuleGroup) {
                        angular.forEach(groupModel.Elements, function (itemModel) {
                            arrResult.push(itemModel.dictAttributes.ID);
                        });
                    }
                });
            }
        }
        else {
            if (entityModel.Elements.length > 0) {
                var lstRuleList = entityModel.Elements.filter(function (itm) { return itm.Name == astrSection; });
                if (lstRuleList && lstRuleList.length > 0) {
                    var objRuleList = lstRuleList[0];
                    if (objRuleList != null) {
                        var rules = [];
                        GetRulesList(objRuleList, nodeName, rules);

                        if (null != rules) {
                            angular.forEach(rules, function (objRule) {
                                arrResult.push(objRule.dictAttributes.ID);
                            });
                        }
                    }
                }
            }
        }
    }

    return arrResult;
}

function GetRulesList(objRuleList, nodeName, rules) {
    if (objRuleList.Name == nodeName) {
        rules.push(objRuleList);
    }

    angular.forEach(objRuleList.Elements, function (itm) {
        GetRulesList(itm, nodeName, rules);
    });

    angular.forEach(objRuleList.Children, function (itm) {
        GetRulesList(itm, nodeName, rules);
    });
}

function FindControlListByNameForTextBox(sfxControl, name, list, formobject) {
    if (name && name != "" && sfxControl && sfxControl.Name == name) {
        if (formobject && formobject.SelectedControl && formobject.SelectedControl.Name == name && formobject.SelectedControl.dictAttributes.ID && formobject.SelectedControl.dictAttributes.ID != sfxControl.dictAttributes.ID) {
            list.push(sfxControl);
        }
    }

    angular.forEach(sfxControl.Elements, function (ctrl) {
        if (ctrl.Name != "sfwGridView") { // done by neha : we donot want to search for the controls inside grid
            FindControlListByNameForTextBox(ctrl, name, list, formobject);
        }
    });
}
function FindControlListByName(sfxControl, name, list) {
    if (name && name != "" && sfxControl && sfxControl.Name == name) {
        list.push(sfxControl);
    }
    if (sfxControl) {
        angular.forEach(sfxControl.Elements, function (ctrl) {
            if (ctrl.Name != "sfwGridView") { // done by neha : we donot want to search for the controls inside grid
                FindControlListByName(ctrl, name, list);
            }
        });
    }
}

function FindCaptionControlList(sfxControl, list) {
    if (sfxControl && sfxControl.Name == "sfwLabel" && sfxControl.dictAttributes && sfxControl.dictAttributes.sfwIsCaption && sfxControl.dictAttributes.sfwIsCaption.toLowerCase() == "true") {
        list.push(sfxControl);
    }

    angular.forEach(sfxControl.Elements, function (ctrl) {
        if (ctrl.Name != "sfwGridView") { // done by neha : we donot want to search for the controls inside grid
            FindCaptionControlList(ctrl, list);
        }
    });
}

function FindControlListByNames(sfxControl, controlNames, list) {
    if (controlNames && controlNames.length > 0 && sfxControl && controlNames.some(function (itm) { return itm == sfxControl.Name; })) {
        list.push(sfxControl);
    }

    angular.forEach(sfxControl.Elements, function (ctrl) {
        if (ctrl.Name != "sfwGridView") { // done by neha : we donot want to search for the controls inside grid
            FindControlListByNames(ctrl, controlNames, list);
        }
    });
}

function PopulateRelatedDialogList(sfxTable, model) {
    var lstRelatedDialog = [];
    lstRelatedDialog.push("");
    if (sfxTable != null) {
        PopulateRelatedDialogs(sfxTable, lstRelatedDialog, model);
    }
    return lstRelatedDialog;
}

function PopulateRelatedDialogs(sfxTable, lstRelatedDialog, model) {
    if (sfxTable != null) {
        angular.forEach(sfxTable.Elements, function (sfxRow) {

            if (sfxRow.Name == "sfwDialogPanel") {
                var strCtrlID = sfxRow.dictAttributes.ID;
                if (strCtrlID.length > 0) {
                    lstRelatedDialog.push(strCtrlID);
                }
            }
            else if (sfxRow.Name == "sfwWizardStep") {
                if (model) {
                    var parent = FindParent(model, "sfwWizardStep");
                    if (parent && sfxRow.dictAttributes.ID == parent.dictAttributes.ID) {
                        if (sfxRow.Elements.length > 0) {
                            PopulateRelatedDialogs(sfxRow, lstRelatedDialog, model);
                        }
                    }
                }
            }
            else {
                PopulateRelatedDialogs(sfxRow, lstRelatedDialog, model);
            }

        });
    }
}




function PopulateServerMethod(lstObjectMethods, objControl, objRemoteObject, isLoadRemoteObjectMethod) {
    var lstServerMethod = [];
    lstServerMethod.push("");
    if (objControl.dictAttributes.sfwMethodName == "btnExecuteServerMethod_Click" || objControl.dictAttributes.sfwMethodName == "btnWizardFindAndNext_Click"
        || objControl.dictAttributes.sfwMethodName == "btnWorkflowExecuteMethod_Click" || objControl.dictAttributes.sfwMethodName == "btnDownload_Click"
        || objControl.dictAttributes.sfwMethodName == "btnExecuteServerMethodFromLookup_Click" || isLoadRemoteObjectMethod) {
        if (objRemoteObject) {
            angular.forEach(objRemoteObject.Elements, function (method) {
                if (method.dictAttributes.ID) {
                    lstServerMethod.push(method.dictAttributes.ID);
                }
            });
        }
    }
    else if (objControl.dictAttributes.sfwMethodName == "btnExecuteBusinessMethod_Click" || objControl.dictAttributes.sfwMethodName == "btnExecuteBusinessMethodSelectRows_Click"
        || objControl.dictAttributes.sfwMethodName == "btnValidateExecuteBusinessMethod_Click" || objControl.dictAttributes.sfwMethodName == "btnCopyRecord_Click"
        || objControl.dictAttributes.sfwMethodName == "btnGridSearchCriteriaReq_Click" || objControl.dictAttributes.sfwMethodName == "btnBack_Click"
        || objControl.dictAttributes.sfwMethodName == "btnCompleteWorkflowActivities_Click" || objControl.dictAttributes.sfwMethodName == "btnWizardCancel_Click" || objControl.dictAttributes.sfwMethodName == "btnCompleteWorkflowActivities_Click") {
        angular.forEach(lstObjectMethods, function (method) {
            if (method.ID) {
                lstServerMethod.push(method.ID);
            }
        });

    }
    return lstServerMethod;
}

function GetServerMethodObject(RemoteObject, lstRemoteObject) {
    var objServerObject;
    if (RemoteObject != undefined && RemoteObject != "") {
        if (lstRemoteObject && lstRemoteObject.length > 0) {

            var lst = lstRemoteObject.filter(function (itm) {
                return itm.dictAttributes.ID == RemoteObject;
            });
            if (lst && lst.length > 0) {
                objServerObject = lst[0];
            }
        }
    }
    return objServerObject;
}


function IsCriteriaField(model) {
    var retVal = true;

    var parentObj = model.ParentVM;
    while (null != parentObj) {
        if (parentObj.Name == "sfwGridView") {
            {
                retVal = false;
            }

            break;
        }
        parentObj = parentObj.ParentVM;
    }

    return retVal;
}

function LoadAttributeButton(model, formType) {
    var lstAttributes = [];
    if (formType == "Lookup" || formType == "FormLinkLookup") {
        if ((model.dictAttributes.sfwMethodName == "btnNew_Click") ||
            (model.dictAttributes.sfwMethodName == "btnOpenDoc_Click")) {
            if (model.dictAttributes.sfwMethodName == "btnNew_Click") {
                lstAttributes.push("sfwActiveForm");
            }
            lstAttributes.push("sfwCustomAttributes");
            lstAttributes.push("sfwNavigationParameter");
            lstAttributes.push("OnClientClick");
            if ((model.dictAttributes.sfwMethodName == "btnNew_Click")) {
                lstAttributes.push("sfwEntityField");
            }
            if (!(model.dictAttributes.sfwMethodName == "btnNew_Click")) {
                lstAttributes.push("sfwRelatedControl");
            }
            lstAttributes.push("sfwSecurityLevel");
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameter");
            lstAttributes.push("Visible");
        }
        else if ((model.dictAttributes.sfwMethodName == "btnOpen_Click") ||
            (model.dictAttributes.sfwMethodName == "btnOpenLookup_Click")) {
            if ((model.dictAttributes.sfwMethodName == "btnOpenLookup_Click")) {
                lstAttributes.push("sfwActiveForm");
            }
            if (model.dictAttributes.sfwMethodName == "btnOpen_Click") {
                lstAttributes.push("sfwActiveForm");
                lstAttributes.push("sfwFormTitleField");
                lstAttributes.push("sfwFormToolTipField");
            }
            lstAttributes.push("sfwCustomAttributes");

            lstAttributes.push("sfwNavigationParameter");

            lstAttributes.push("OnClientClick");
            if (model.dictAttributes.sfwMethodName == "btnOpen_Click") {
                lstAttributes.push("sfwEntityField");
                lstAttributes.push("sfwRelatedControl");
            }
            lstAttributes.push("sfwSecurityLevel");
            if (model.dictAttributes.sfwMethodName == "btnOpen_Click") {
                lstAttributes.push("sfwSelection");
            }
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("Visible");
        }
        else if ((model.dictAttributes.sfwMethodName == "btnDelete_Click") ||
            (model.dictAttributes.sfwMethodName == "btnColumnsToExport_Click") ||
            (model.dictAttributes.sfwMethodName == "btnExportToExcel_Click")) {
            lstAttributes.push("sfwCustomAttributes");
            if (!(model.dictAttributes.sfwMethodName == "btnColumnsToExport_Click") &&
                !(model.dictAttributes.sfwMethodName == "btnExportToExcel_Click")) {
                lstAttributes.push("sfwMessageId");
            }
            lstAttributes.push("OnClientClick");
            if (model.dictAttributes.sfwMethodName != "btnExportToExcel_Click") {
                lstAttributes.push("sfwRelatedControl");
            }
            lstAttributes.push("sfwSecurityLevel");
            if (!(model.dictAttributes.sfwMethodName == "btnColumnsToExport_Click") &&
                !(model.dictAttributes.sfwMethodName == "btnExportToExcel_Click")) {
                lstAttributes.push("sfwSelection");
            }
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("Visible");
        }
        else if (model.dictAttributes.sfwMethodName == "btnExecuteBusinessMethodSelectRows_Click") {
            lstAttributes.push("sfwCustomAttributes");
            lstAttributes.push("sfwMessageId");
            lstAttributes.push("sfwNavigationParameter");
            lstAttributes.push("OnClientClick");
            lstAttributes.push("sfwRelatedControl");
            lstAttributes.push("sfwSecurityLevel");
            lstAttributes.push("sfwSelection");
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("Visible");
        }
        else if ((model.dictAttributes.sfwMethodName == "btnCorrespondenceRows_Click") ||
            (model.dictAttributes.sfwMethodName == "btnNewUpdate_Click")) {
            if (model.dictAttributes.sfwMethodName == "btnNewUpdate_Click") {
                lstAttributes.push("sfwActiveForm");
                lstAttributes.push("sfwCustomAttributes");
                lstAttributes.push("sfwMessageId");
            }
            if (model.dictAttributes.sfwMethodName == "btnCorrespondenceRows_Click") {
                lstAttributes.push("sfwActiveForm");
                lstAttributes.push("sfwCustomAttributes");
            }
            lstAttributes.push("sfwNavigationParameter");
            lstAttributes.push("OnClientClick");
            lstAttributes.push("sfwSecurityLevel");
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("Visible");
        }
        else if ((model.dictAttributes.sfwMethodName == "btnReset_Click") ||
            (model.dictAttributes.sfwMethodName == "btnSearch_Click") ||
            (model.dictAttributes.sfwMethodName == "btnSearchCriteriaRequired_Click") ||
            (model.dictAttributes.sfwMethodName == "btnStoreUserDefaults_Click") ||
            (model.dictAttributes.sfwMethodName == "btnApplySort_Click")) {
            lstAttributes.push("sfwCustomAttributes");
            lstAttributes.push("sfwMessageId");
            lstAttributes.push("OnClientClick");
            lstAttributes.push("sfwObjectMethod");
            if (model.dictAttributes.sfwMethodName == "btnApplySort_Click") {
                lstAttributes.push("sfwRelatedControl");
            }
            lstAttributes.push("sfwSecurityLevel");
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("Visible");
        }
        else {//LookUp
            lstAttributes.push("sfwActiveForm");
            lstAttributes.push("sfwCustomAttributes");
            lstAttributes.push("sfwMessageId");
            lstAttributes.push("sfwNavigationParameter");
            lstAttributes.push("sfwObjectMethod");
            lstAttributes.push("OnClientClick");
            lstAttributes.push("sfwRelatedControl");
            lstAttributes.push("sfwSelection");
            lstAttributes.push("sfwSecurityLevel");
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("Visible");

        }
    }
    else if ((formType == "Maintenance" || formType == "FormLinkMaintenance") || (formType == "FormLinkWizard")) {

        if (model.dictAttributes.sfwMethodName == "btnColumnsToExport_Click") {
            lstAttributes.push("sfwCheckChanges");
            lstAttributes.push("sfwCustomAttributes");
            if (!(model.Name == "sfwLinkButton")) {
                lstAttributes.push("sfwEnableRule");
            }
            lstAttributes.push("sfwMode");
            lstAttributes.push("OnClientClick");
            lstAttributes.push("sfwRelatedControl");
            lstAttributes.push("sfwResource");
            lstAttributes.push("sfwSecurityLevel");
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("sfwVisibleRule");
            lstAttributes.push("Visible");
        }
        else if ((model.dictAttributes.sfwMethodName == "btnGridViewAddEmpty_Click") ||
            (model.dictAttributes.sfwMethodName == "btnGridViewDelete_Click") ||
            (model.dictAttributes.sfwMethodName == "btnGridViewDeleteLast_Click") ||
            (model.dictAttributes.sfwMethodName == "btnGridViewSelect_Click")) {
            lstAttributes.push("sfwCheckChanges");
            lstAttributes.push("sfwCustomAttributes");
            if (!(model.Name == "sfwLinkButton")) {
                lstAttributes.push("sfwEnableRule");
            }
            lstAttributes.push("sfwMode");
            lstAttributes.push("sfwRelatedControl");
            lstAttributes.push("sfwResource");
            lstAttributes.push("sfwSecurityLevel");
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("sfwVisibleRule");
            lstAttributes.push("Visible");
        }
        else if ((model.dictAttributes.sfwMethodName == "btnGridViewAdd_Click") ||
            (model.dictAttributes.sfwMethodName == "btnGridViewUpdate_Click")) {
            lstAttributes.push("sfwCheckChanges");
            lstAttributes.push("sfwCustomAttributes");
            if (!(model.Name == "sfwLinkButton")) {
                lstAttributes.push("sfwEnableRule");
            }
            lstAttributes.push("sfwMode");
            lstAttributes.push("sfwRelatedControl");
            lstAttributes.push("sfwResource");
            lstAttributes.push("sfwSecurityLevel");
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("sfwVisibleRule");
            lstAttributes.push("Visible");
        }
        else if (model.dictAttributes.sfwMethodName == "btnNew_Click") {
            lstAttributes.push("sfwActiveForm");
            lstAttributes.push("sfwCheckChanges");
            lstAttributes.push("sfwCustomAttributes");
            if (!(model.Name == "sfwLinkButton")) {
                lstAttributes.push("sfwEnableRule");
            }
            lstAttributes.push("sfwMode");
            lstAttributes.push("sfwNavigationParameter");
            lstAttributes.push("OnClientClick");
            lstAttributes.push("sfwResource");
            lstAttributes.push("sfwSecurityLevel");
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("sfwVisibleRule");
            lstAttributes.push("Visible");
        }
        else if (model.dictAttributes.sfwMethodName == "btnDelete_Click") {
            lstAttributes.push("sfwCheckChanges");
            lstAttributes.push("sfwCustomAttributes");
            if (!(model.Name == "sfwLinkButton")) {
                lstAttributes.push("sfwEnableRule");
            }
            lstAttributes.push("sfwMessageId");
            lstAttributes.push("sfwMode");
            lstAttributes.push("OnClientClick");
            lstAttributes.push("sfwRelatedControl");
            lstAttributes.push("sfwResource");
            lstAttributes.push("sfwSecurityLevel");
            lstAttributes.push("sfwSelection");
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("sfwVisibleRule");
            lstAttributes.push("Visible");
        }
        else if (model.dictAttributes.sfwMethodName == "btnExportToExcel_Click") {
            lstAttributes.push("sfwCheckChanges");
            lstAttributes.push("sfwCustomAttributes");
            if (!(model.Name == "sfwLinkButton")) {
                lstAttributes.push("sfwEnableRule");
            }
            lstAttributes.push("sfwMode");
            lstAttributes.push("OnClientClick");
            lstAttributes.push("sfwResource");
            lstAttributes.push("sfwSecurityLevel");
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("sfwVisibleRule");
            lstAttributes.push("Visible");
        }
        else if ((model.dictAttributes.sfwMethodName == "btnCorrespondenceRows_Click") ||
            (model.dictAttributes.sfwMethodName == "btnOpenLookup_Click") ||
            (model.dictAttributes.sfwMethodName == "btnAuditHistory_Click")) {
            if ((model.dictAttributes.sfwMethodName == "btnCorrespondenceRows_Click") ||
                (model.dictAttributes.sfwMethodName == "btnOpenLookup_Click")) {
                lstAttributes.push("sfwActiveForm");
            }
            if ((model.dictAttributes.sfwMethodName == "btnAuditHistory_Click")) {
                lstAttributes.push("sfwActiveForm");
            }
            lstAttributes.push("sfwCheckChanges");
            lstAttributes.push("sfwCustomAttributes");
            if (!(model.Name == "sfwLinkButton")) {
                lstAttributes.push("sfwEnableRule");
            }
            lstAttributes.push("sfwMode");
            lstAttributes.push("sfwNavigationParameter");
            lstAttributes.push("OnClientClick");
            lstAttributes.push("sfwResource");
            lstAttributes.push("sfwSecurityLevel");
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("sfwVisibleRule");
            lstAttributes.push("Visible");
        }
        else if (model.dictAttributes.sfwMethodName == "btnNewUpdate_Click") {
            lstAttributes.push("sfwActiveForm");
            lstAttributes.push("sfwCheckChanges");
            lstAttributes.push("sfwCustomAttributes");
            if (!(model.Name == "sfwLinkButton")) {
                lstAttributes.push("sfwEnableRule");
            }
            lstAttributes.push("sfwMode");
            lstAttributes.push("sfwNavigationParameter");
            lstAttributes.push("OnClientClick");
            lstAttributes.push("sfwResource");
            lstAttributes.push("sfwSecurityLevel");
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("sfwVisibleRule");
            lstAttributes.push("Visible");
        }
        else if ((model.dictAttributes.sfwMethodName == "btnOpen_Click") ||
            (model.dictAttributes.sfwMethodName == "btnPrototypeSearch_Click")) {
            lstAttributes.push("sfwActiveForm");
            lstAttributes.push("sfwCheckChanges");
            lstAttributes.push("sfwCustomAttributes");
            if (!(model.Name == "sfwLinkButton")) {
                lstAttributes.push("sfwEnableRule");
            }
            if (model.dictAttributes.sfwMethodName == "btnPrototypeSearch_Click") {
                lstAttributes.push("sfwMessageId");
            }
            lstAttributes.push("sfwMode");

            lstAttributes.push("sfwNavigationParameter");
            lstAttributes.push("OnClientClick");
            if (model.dictAttributes.sfwMethodName == "btnPrototypeSearch_Click") {
                lstAttributes.push("sfwObjectMethod");
            }
            if ((model.dictAttributes.sfwMethodName == "btnOpen_Click")) {
                lstAttributes.push("sfwEntityField");
                lstAttributes.push("sfwFormTitleField");
                lstAttributes.push("sfwFormToolTipField");
            }
            lstAttributes.push("sfwRelatedControl");
            lstAttributes.push("sfwResource");
            lstAttributes.push("sfwSecurityLevel");
            lstAttributes.push("sfwSelection");
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("sfwVisibleRule");
            lstAttributes.push("Visible");
        }
        else if (model.dictAttributes.sfwMethodName == "btnGridSearch_Click") {
            lstAttributes.push("sfwCheckChanges");
            lstAttributes.push("sfwCustomAttributes");
            if (!(model.Name == "sfwLinkButton")) {
                lstAttributes.push("sfwEnableRule");
            }
            lstAttributes.push("sfwMode");
            lstAttributes.push("sfwNavigationParameter");
            lstAttributes.push("OnClientClick");
            lstAttributes.push("sfwRelatedControl");
            lstAttributes.push("sfwResource");
            lstAttributes.push("sfwSecurityLevel");
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("sfwVisibleRule");
            lstAttributes.push("sfwMessageId");
            lstAttributes.push("Visible");
        }
        else if ((model.dictAttributes.sfwMethodName == "btnForceSave_Click") ||
            (model.dictAttributes.sfwMethodName == "btnSaveNew_Click") ||
            (model.dictAttributes.sfwMethodName == "btnSaveAndNext_Click") ||
            (model.dictAttributes.sfwMethodName == "btnSave_Click") ||
            (model.dictAttributes.sfwMethodName == "btnSaveIgnoreReadOnly_Click") ||
            (model.dictAttributes.sfwMethodName == "btnNoChangesSave_Click")) {
            lstAttributes.push("sfwCheckChanges");
            lstAttributes.push("sfwCustomAttributes");
            if (!(model.Name == "sfwLinkButton")) {
                lstAttributes.push("sfwEnableRule");
            }
            lstAttributes.push("sfwMessageId");
            lstAttributes.push("sfwMode");
            lstAttributes.push("sfwNavigationParameter");
            lstAttributes.push("OnClientClick");
            lstAttributes.push("sfwResource");
            lstAttributes.push("sfwSecurityLevel");
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("sfwVisibleRule");
            lstAttributes.push("Visible");
        }
        else if (model.dictAttributes.sfwMethodName == "btnOpenDoc_Click") {
            lstAttributes.push("sfwCheckChanges");
            lstAttributes.push("sfwCustomAttributes");
            if (!(model.Name == "sfwLinkButton")) {
                lstAttributes.push("sfwEnableRule");
            }
            lstAttributes.push("sfwMode");
            lstAttributes.push("sfwNavigationParameter");
            lstAttributes.push("OnClientClick");
            lstAttributes.push("sfwRelatedControl");
            lstAttributes.push("sfwResource");
            lstAttributes.push("sfwSecurityLevel");
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("sfwVisibleRule");
            lstAttributes.push("Visible");
        }
        else if ((model.dictAttributes.sfwMethodName == "btnAddNewChild_Click") ||
            (model.dictAttributes.sfwMethodName == "btnClearControls_Click") ||
            (model.dictAttributes.sfwMethodName == "btnClosePopupDialog_Click") ||
            (model.dictAttributes.sfwMethodName == "btnCorrespondence_Click") ||
            (model.dictAttributes.sfwMethodName == "btnDownload_Click") ||
            (model.dictAttributes.sfwMethodName == "btnGridSearchCriteriaReq_Click") ||
            (model.dictAttributes.sfwMethodName == "btnFinishPopupDialog_Click") ||
            (model.dictAttributes.sfwMethodName == "btnLoadOnDemand_Click") ||
            (model.dictAttributes.sfwMethodName == "btnNewPopupDialog_Click") ||
            (model.dictAttributes.sfwMethodName == "btnNext_Click") ||
            (model.dictAttributes.sfwMethodName == "btnOpenDetail_Click") ||
            (model.dictAttributes.sfwMethodName == "btnOpenPopupDialog_Click") ||
            (model.dictAttributes.sfwMethodName == "btnPrev_Click") ||
            (model.dictAttributes.sfwMethodName == "btnCancel_Click") ||
            (model.dictAttributes.sfwMethodName == "btnRefreshServers_Click") ||
            (model.dictAttributes.sfwMethodName == "btnReturnMaintenance_Click")) {
            lstAttributes.push("OnClientClick");
            lstAttributes.push("sfwCheckChanges");
            lstAttributes.push("sfwCustomAttributes");
            if (!(model.Name == "sfwLinkButton")) {
                lstAttributes.push("sfwEnableRule");
            }
            if (!(model.dictAttributes.sfwMethodName == "btnNewPopupDialog_Click") &&
                !(model.dictAttributes.sfwMethodName == "btnOpenPopupDialog_Click") &&
                !(model.dictAttributes.sfwMethodName == "btnFinishPopupDialog_Click") &&
                !(model.dictAttributes.sfwMethodName == "btnClosePopupDialog_Click")) {
                lstAttributes.push("sfwMessageId");
            }
            lstAttributes.push("sfwMode");
            if (!(model.dictAttributes.sfwMethodName == "btnNewPopupDialog_Click") &&
                !(model.dictAttributes.sfwMethodName == "btnOpenPopupDialog_Click") &&
                !(model.dictAttributes.sfwMethodName == "btnFinishPopupDialog_Click") &&
                !(model.dictAttributes.sfwMethodName == "btnClosePopupDialog_Click") &&
                !(model.dictAttributes.sfwMethodName == "btnCorrespondence_Click")) {
                lstAttributes.push("sfwObjectMethod");
            }

            if (model.dictAttributes.sfwMethodName == "btnCorrespondence_Click") {
                lstAttributes.push("sfwTriggerPostBack");
            }

            if ((model.dictAttributes.sfwMethodName == "btnAddNewChild_Click") ||
                (model.dictAttributes.sfwMethodName == "btnOpenPopupDialog_Click") ||
                (model.dictAttributes.sfwMethodName == "btnNewPopupDialog_Click") ||
                (model.dictAttributes.sfwMethodName == "btnFinishPopupDialog_Click") ||
                (model.dictAttributes.sfwMethodName == "btnClosePopupDialog_Click")) {
                lstAttributes.push("sfwRelatedControl");
                if (!(model.dictAttributes.sfwMethodName == "btnAddNewChild_Click")) {
                    lstAttributes.push("sfwRelatedDialogPanel");
                }
            }
            lstAttributes.push("sfwResource");
            lstAttributes.push("sfwSecurityLevel");
            if (model.dictAttributes.sfwMethodName == "btnOpenPopupDialog_Click") {
                lstAttributes.push("sfwSelection");
            }
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("sfwVisibleRule");
            lstAttributes.push("Visible");
        }
        else if ((model.dictAttributes.sfwMethodName == "btnExecuteBusinessMethodSelectRows_Click") ||
            (model.dictAttributes.sfwMethodName == "btnValidateExecuteBusinessMethod_Click") ||
            (model.dictAttributes.sfwMethodName == "btnExecuteBusinessMethod_Click") ||
            (model.dictAttributes.sfwMethodName == "btnExecuteServerMethod_Click") || (model.dictAttributes.sfwMethodName == "btnCompleteWorkflowActivities_Click")) {
            lstAttributes.push("sfwCheckChanges");
            lstAttributes.push("sfwCustomAttributes");

            if (!(model.Name == "sfwLinkButton")) {
                lstAttributes.push("sfwEnableRule");
            }
            lstAttributes.push("sfwMessageId");
            lstAttributes.push("sfwMode");
            lstAttributes.push("sfwNavigationParameter");

            if (model.dictAttributes.sfwMethodName != "btnExecuteServerMethod_Click") {
                lstAttributes.push("sfwObjectMethod");
            }
            lstAttributes.push("OnClientClick");
            if (model.dictAttributes.sfwMethodName == "btnExecuteBusinessMethodSelectRows_Click") {
                lstAttributes.push("sfwRelatedControl");
            }
            lstAttributes.push("sfwResource");
            lstAttributes.push("sfwSecurityLevel");
            if (model.dictAttributes.sfwMethodName == "btnExecuteServerMethod_Click") {
                lstAttributes.push("sfwObjectMethod");
            }
            if (model.dictAttributes.sfwMethodName == "btnExecuteBusinessMethodSelectRows_Click") {
                lstAttributes.push("sfwSelection");
            }
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("sfwVisibleRule");
            lstAttributes.push("Visible");
        }
        else if ((model.dictAttributes.sfwMethodName == "btnWorkflowExecuteMethod_Click")) {

            lstAttributes.push("sfwCheckChanges");
            lstAttributes.push("sfwCustomAttributes");
            if (!(model.Name == "sfwLinkButton")) {
                lstAttributes.push("sfwEnableRule");
            }
            lstAttributes.push("sfwMessageId");
            lstAttributes.push("sfwMode");
            if (model.dictAttributes.sfwMethodName != "btnCompleteWorkflowActivities_Click") {
                lstAttributes.push("sfwNavigationParameter");
            }
            lstAttributes.push("sfwObjectMethod");
            lstAttributes.push("OnClientClick");
            lstAttributes.push("sfwRelatedControl");
            lstAttributes.push("sfwResource");
            lstAttributes.push("sfwSecurityLevel");
            lstAttributes.push("sfwSelection");
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("sfwVisibleRule");
            lstAttributes.push("Visible");
            lstAttributes.push("sfwWorkflowActivities");
        }
        else if (model.dictAttributes.sfwMethodName == "btnPdfCorrespondence_Click") {
            lstAttributes.push("sfwCheckChanges");
            lstAttributes.push("sfwCustomAttributes");
            if (!(model.Name == "sfwLinkButton")) {
                lstAttributes.push("sfwEnableRule");
            }

            lstAttributes.push("sfwMessageId");
            lstAttributes.push("sfwMode");

            lstAttributes.push("OnClientClick");
            lstAttributes.push("sfwDownloadFileName");
            lstAttributes.push("sfwRelatedControl");
            lstAttributes.push("sfwResource");
            lstAttributes.push("sfwSecurityLevel");
            lstAttributes.push("sfwTriggerPostBack");
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("sfwVisibleRule");
            lstAttributes.push("Visible");

            lstAttributes.push("sfwNavigationParameter");
            lstAttributes.push("sfwNavigationParameter");
        }
        else if ((model.dictAttributes.sfwMethodName == "btnWizardCancel_Click") ||
            (model.dictAttributes.sfwMethodName == "btnWizardFindAndNext_Click") ||
            (model.dictAttributes.sfwMethodName == "btnWizardFinish_Click") ||
            (model.dictAttributes.sfwMethodName == "btnWizardNext_Click") ||
            (model.dictAttributes.sfwMethodName == "btnWizardPrevious_Click") ||
            (model.dictAttributes.sfwMethodName == "btnWizardSaveAndNext_Click") ||
            (model.dictAttributes.sfwMethodName == "btnWizardSaveAndPrevious_Click")) {
            lstAttributes.push("sfwActiveForm");
            lstAttributes.push("sfwCheckChanges");
            lstAttributes.push("sfwCustomAttributes");
            lstAttributes.push("sfwMessageId");
            lstAttributes.push("sfwMode");
            lstAttributes.push("sfwNavigationParameter");
            lstAttributes.push("sfwObjectMethod");
            lstAttributes.push("sfwResource");
            lstAttributes.push("sfwSecurityLevel");
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("sfwVisibleRule");
            lstAttributes.push("Visible");


            if (!(model.Name == "sfwLinkButton")) {
                lstAttributes.push("sfwEnableRule");
            }
        }
        else if (model.dictAttributes.sfwMethodName == "btnGenerateReport_Click") {
            lstAttributes.push("sfwCheckChanges");
            lstAttributes.push("sfwCustomAttributes");
            if (!(model.Name == "sfwLinkButton")) {
                lstAttributes.push("sfwEnableRule");
            }
            lstAttributes.push("sfwMessageId");
            lstAttributes.push("sfwMode");
            lstAttributes.push("sfwObjectMethod");
            lstAttributes.push("OnClientClick");
            lstAttributes.push("sfwResource");
            lstAttributes.push("sfwSecurityLevel");
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("sfwVisibleRule");
            lstAttributes.push("Visible");
        }
        else if (model.dictAttributes.sfwMethodName == "btnMasterDetailHeader_Click") {
            lstAttributes.push("sfwCheckChanges");
            lstAttributes.push("sfwCustomAttributes");
            if (!(model.Name == "sfwLinkButton")) {
                lstAttributes.push("sfwEnableRule");
            }
            lstAttributes.push("sfwMessageId");
            lstAttributes.push("sfwMode");
            lstAttributes.push("sfwObjectMethod");
            lstAttributes.push("OnClientClick");
            lstAttributes.push("sfwResource");
            lstAttributes.push("sfwSecurityLevel");
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("sfwVisibleRule");
            lstAttributes.push("Visible");
        }
        else if (model.dictAttributes.sfwMethodName == "btnCopyRecord_Click") {

            lstAttributes.push("sfwCustomAttributes");
            if (!(model.Name == "sfwLinkButton")) {
                lstAttributes.push("sfwEnableRule");
            }
            lstAttributes.push("sfwExecuteAfterSuccess");

            lstAttributes.push("sfwMode");
            lstAttributes.push("sfwMessageId");
            lstAttributes.push("sfwNavigationParameter");
            lstAttributes.push("sfwObjectMethod");
            lstAttributes.push("OnClientClick");
            lstAttributes.push("sfwResource");
            lstAttributes.push("sfwRelatedControl");
            lstAttributes.push("sfwSelection");
            lstAttributes.push("sfwSetPageMode");
            lstAttributes.push("sfwSecurityLevel");
            lstAttributes.push("sfwTriggerPostBack");
            lstAttributes.push("sfwSaveBeforeAction");
            lstAttributes.push("Text");
            lstAttributes.push("sfwUserLogParameters");
            lstAttributes.push("sfwVisibleRule");
            lstAttributes.push("Visible");

        }
        else {//Wizard--Maintenance
            if (formType == "Wizard" && (model.dictAttributes.CommandName != undefined && model.dictAttributes.CommandName != "")) {
                lstAttributes.push("sfwCheckChanges");
                lstAttributes.push("sfwCustomAttributes");
                lstAttributes.push("CommandName");
                if (!(model.Name == "sfwLinkButton")) {
                    lstAttributes.push("sfwEnableRule");
                }
                lstAttributes.push("sfwMode");
                lstAttributes.push("OnClientClick");
                lstAttributes.push("sfwResource");
                lstAttributes.push("sfwSecurityLevel");
                lstAttributes.push("Text");
                lstAttributes.push("sfwUserLogParameters");
                lstAttributes.push("sfwVisibleRule");
                lstAttributes.push("Visible");
            }
            else {
                lstAttributes.push("sfwActiveForm");
                lstAttributes.push("sfwCheckChanges");
                lstAttributes.push("sfwCustomAttributes");
                if (!(model.Name == "sfwLinkButton")) {
                    lstAttributes.push("sfwEnableRule");
                }
                lstAttributes.push("sfwMode");
                lstAttributes.push("sfwMessageId");
                if (model.dictAttributes.sfwMethodName != "btnBpmApprove_Click" && model.dictAttributes.sfwMethodName != "btnBpmSubmit_Click" && model.dictAttributes.sfwMethodName != "btnBpmReject_Click") {
                    lstAttributes.push("sfwNavigationParameter");
                }
                lstAttributes.push("sfwObjectMethod");
                lstAttributes.push("OnClientClick");
                lstAttributes.push("sfwResource");
                lstAttributes.push("sfwRelatedControl");
                lstAttributes.push("sfwSelection");
                lstAttributes.push("sfwSecurityLevel");
                lstAttributes.push("Text");
                lstAttributes.push("sfwUserLogParameters");
                lstAttributes.push("sfwVisibleRule");
                lstAttributes.push("Visible");
            }
        }
    }

    return lstAttributes;
}

//#region Get Primary Key
function getPrimarykey(EntityList, EntityName) {
    var lstPrimaryKey = [];
    var lst = EntityList.filter(function (x) { return x.ID == EntityName; });
    if (lst && lst.length > 0) {
        if (lst[0].Attributes.length > 0) {
            var primarykeyattribute = lst[0].Attributes.filter(function (x) { return x.Type == "Column" && x.KeyNo == '1'; });
            if (primarykeyattribute.length > 0) {
                lstPrimaryKey.push(primarykeyattribute[0]);
            }
        }
    }
    return lstPrimaryKey;
}

//#endregion

//#region Get Title for Lookup
function GetFormTitle(strType, FormName) {
    var strFormTitle = "";
    var strFormName = FormName + strType;

    for (var i = 0; i < strFormName.length; i++) {
        var ch = strFormName[i];
        var blnCaseChanged = false;

        if (i > 0) {
            if (CharCase(strFormName[i - 1]) < CharCase(strFormName[i])) {
                blnCaseChanged = true;
            }
        }

        if (blnCaseChanged) {
            strFormTitle += " ";
        }
        strFormTitle += strFormName[i];
    }

    return strFormTitle;
}
function CharCase(ch) {
    return (ch >= 'a') && (ch <= 'z') ? 0 : 1;
}
//#endregion

//#region Populate Server Method for Entity


function PopulateServerMethodForEntity(entityModel) {
    var lstServerMethodForEntity = [];
    if (entityModel) {
        var lstMethods = entityModel.Elements.filter(function (x) { return x.Name == "methods"; });
        if (lstMethods && lstMethods.length > 0) {
            var objMethods = lstMethods[0];
            angular.forEach(objMethods.Elements, function (method) {
                //if (method.dictAttributes.sfwRemoteObject != undefined && method.dictAttributes.sfwRemoteObject != "") {
                lstServerMethodForEntity.push(method);
                //}
            });
        }
    }
    return lstServerMethodForEntity;
}
//#endregion

function IsAuditField(strField) {
    strField = strField.toLowerCase();

    if (strField == "created_by") { return true; }
    if (strField == "created_date") { return true; }
    if (strField == "modified_by") { return true; }
    if (strField == "modified_date") { return true; }
    if (strField == "update_seq") { return true; }

    return false;
}

function PopulateGridDataField(sfxControl, lstColumnName) {
    angular.forEach(sfxControl.Elements, function (ctrl) {
        if (ctrl.dictAttributes && ctrl.dictAttributes.sfwEntityField && ctrl.Name != "rowformat" && ctrl.Name != "cellformat" && ctrl.Name != "HeaderTemplate" && ctrl.Name != "FooterTemplate" && ctrl.Name != "Parameters" && ctrl.Name != "Data") {
            lstColumnName.push(ctrl.dictAttributes.sfwEntityField);
        }
        if (ctrl.Elements.length > 0 && ctrl.Name != "rowformat" && ctrl.Name != "cellformat" && ctrl.Name != "HeaderTemplate" && ctrl.Name != "FooterTemplate" && ctrl.Name != "Parameters" && ctrl.Name != "Data") {
            PopulateGridDataField(ctrl, lstColumnName);
        }
    });
}

function PopulateRetrievalControls(panel, lstRetrievalControl) {
    if (panel) {
        angular.forEach(panel.Elements, function (ctrl) {
            if (ctrl.Name == "sfwLabel" || ctrl.Name == "sfwDropDownList" || ctrl.Name == "sfwTextBox" || ctrl.Name == "sfwCascadingDropDownList" || ctrl.Name == "sfwMultiSelectDropDownList" || ctrl.Name == "sfwCheckBox" || ctrl.Name === "sfwLinkButton") {
                var obj = { ID: ctrl.dictAttributes.ID, ControlID: "" };
                lstRetrievalControl.push(obj);
            }
            if (ctrl.Elements.length > 0 && ctrl.Name != "sfwGridView") {
                PopulateRetrievalControls(ctrl, lstRetrievalControl);
            }
        });
    }
}

function PopulateSortExpressions(sfxControl, lstSortExpressions) {
    angular.forEach(sfxControl.Elements, function (ctrl) {
        if (ctrl.dictAttributes.sfwEntityField && ctrl.dictAttributes.sfwEntityField != "") {
            lstSortExpressions.push(ctrl.dictAttributes.sfwEntityField);
        }
        if (ctrl.Elements.length > 0 && ctrl.Name && (ctrl.Name == "Columns" || ctrl.Name == "ItemTemplate" || ctrl.Name == "TemplateField")) {
            PopulateSortExpressions(ctrl, lstSortExpressions);
        }
    });
}

function PopulateRetrievalOrAutoCompleteParameters(panel, lstParameters, formType, IsRetrieval) {
    if (panel) {
        angular.forEach(panel.Elements, function (ctrl) {

            if (ctrl.Name != "sfwPanel" && ctrl.Name != "sfwWizardStep" && ctrl.Name != "sfwGridView") {
                if (formType == "Lookup" && ctrl.dictAttributes.sfwDataField && ctrl.dictAttributes.ID) {
                    var obj = { ID: ctrl.dictAttributes.ID, Name: ctrl.Name, ControlID: "", Elements: [], IsExpanded: false };
                    lstParameters.push(obj);
                }
                else if ((formType == "Maintenance" || formType == "Wizard" || formType == "UserControl") && ctrl.dictAttributes.sfwEntityField && ctrl.dictAttributes.ID) {
                    var obj = { ID: ctrl.dictAttributes.ID, Name: ctrl.Name, ControlID: "", Elements: [], IsExpanded: false };
                    lstParameters.push(obj);
                }
                else if (formType == "Correspondence" && ctrl.dictAttributes.sfwQueryID && ctrl.dictAttributes.ID) {
                    var obj = { ID: ctrl.dictAttributes.ID, Name: ctrl.Name, ControlID: "", Elements: [], IsExpanded: false };
                    lstParameters.push(obj);
                }
            }

            if (ctrl.Elements.length > 0) {
                var lsttempParameters = lstParameters;
                if (ctrl.Name == "sfwPanel") {
                    var id = ctrl.dictAttributes.sfwCaption;
                    if (id == undefined || id == "") {
                        id = ctrl.dictAttributes.ID;
                    }
                    var obj = { ID: id, Elements: [], Name: ctrl.Name, IsExpanded: false };
                    lstParameters.push(obj);
                    lsttempParameters = lstParameters[lstParameters.length - 1].Elements;
                }
                if (ctrl.Name == "sfwWizardStep") {
                    var id = ctrl.dictAttributes.Title;
                    if (id == undefined || id == "") {
                        id = ctrl.dictAttributes.ID;
                    }
                    var obj = { ID: id, Elements: [], Name: ctrl.Name, IsExpanded: false };
                    lstParameters.push(obj);
                    lsttempParameters = lstParameters[lstParameters.length - 1].Elements;
                }
                //if (ctrl.Name == "sfwGridView") {
                //    var obj = { ID: ctrl.dictAttributes.ID + "(Data Keys)", Elements: [], IsExpanded: false }
                //    lstParameters.push(obj);
                //    lsttempParameters = lstParameters[lstParameters.length - 1].Elements;
                //    PopulateGridEntityField(ctrl, lsttempParameters);
                //}
                PopulateRetrievalOrAutoCompleteParameters(ctrl, lsttempParameters, formType, IsRetrieval);
            }
        });
    }
}

function PopulateGridEntityField(sfxControl, lstParameters) {
    angular.forEach(sfxControl.Elements, function (ctrl) {
        //if (ctrl.Name == "sfwLabel" || ctrl.Name == "sfwDropDownList" || ctrl.Name == "sfwTextBox" || ctrl.Name == "sfwCascadingDropDownList") {
        if (ctrl.dictAttributes.sfwEntityField && ctrl.Name != "rowformat" && ctrl.Name != "cellformat" && ctrl.Name != "HeaderTemplate" && ctrl.Name != "FooterTemplate") {
            var obj = { ID: ctrl.dictAttributes.sfwEntityField, ControlID: "", Elements: [], IsExpanded: false };
            lstParameters.push(obj);
        }

        //}
        if (ctrl.Elements.length > 0 && ctrl.Name != "rowformat" && ctrl.Name != "cellformat" && ctrl.Name != "HeaderTemplate" && ctrl.Name != "FooterTemplate") {
            PopulateGridEntityField(ctrl, lstParameters);
        }
    });
}

function PopulateFormEntityField(sfxControl, lstEntityField, IsLookup) {
    angular.forEach(sfxControl.Elements, function (ctrl) {
        if (ctrl.dictAttributes.sfwEntityField && !IsLookup) {
            lstEntityField.push(ctrl.dictAttributes.sfwEntityField);
        }
        else if (ctrl.dictAttributes.sfwDataField && IsLookup) {
            lstEntityField.push(ctrl.dictAttributes.sfwDataField);
        }
        if (ctrl.Elements.length > 0) {
            if (ctrl.Name != "sfwGridView" && ctrl.Name != "sfwDialogPanel") {
                PopulateFormEntityField(ctrl, lstEntityField, IsLookup);
            }
        }
    });
}

function PopulateFormLinkEntityField(sfxControl, lstEntityField, IsLookup) {
    angular.forEach(sfxControl.Elements, function (ctrl) {
        if (ctrl.dictAttributes.sfwEntityField && !IsLookup) {
            lstEntityField.push(ctrl.dictAttributes.sfwEntityField);
        }
        else if (ctrl.dictAttributes.sfwDataField && IsLookup) {
            lstEntityField.push(ctrl.dictAttributes.sfwDataField);
        }
        if (ctrl.Elements.length > 0) {
            PopulateFormLinkEntityField(ctrl, lstEntityField, IsLookup);
        }
    });
}

function PopulateGridID(sfxControl, currentGridID, lstParentGrid) {
    angular.forEach(sfxControl.Elements, function (ctrl) {
        if (ctrl.Name == "sfwGridView" && ctrl.dictAttributes.ID && ctrl.dictAttributes.ID != currentGridID) {
            lstParentGrid.push(ctrl.dictAttributes.ID);
        }
        if (ctrl.Elements && ctrl.Elements.length > 0) {
            PopulateGridID(ctrl, currentGridID, lstParentGrid);
        }
    });
}

function GetVMUsingID(ControlName, sfxControl, ctrlID, lstEntityField) {
    angular.forEach(sfxControl.Elements, function (ctrl) {
        if (ctrl.Name == ControlName && ctrl.dictAttributes.ID == ctrlID) {
            PopulateEntityField(ctrl, lstEntityField);
        }
        if (ctrl.Elements.length > 0) {
            GetVMUsingID(ControlName, ctrl, ctrlID, lstEntityField);
        }
    });
}
function PopulateEntityField(sfxControl, lstParameters) {
    angular.forEach(sfxControl.Elements, function (ctrl) {
        if (ctrl.dictAttributes.sfwEntityField) {
            lstParameters.push(ctrl.dictAttributes.sfwEntityField);
        }
        if (ctrl.Elements.length > 0) {
            PopulateEntityField(ctrl, lstParameters);
        }
    });
}

function GetAllControls(objSfxForm, astrControlClass, astrPanelID, astrGridID, IsFormLink, alControls, isAllPanel) {

    var iblnOnlyGrid = (astrGridID != "");
    angular.forEach(objSfxForm.Elements, function (objTable) {

        if (objTable.Name == "items" && IsFormLink) {
            GetAllFormControls(objTable, astrControlClass, astrPanelID, astrGridID, alControls, iblnOnlyGrid);

        }
        if (objTable.Name == "sfwTable") {
            GetAllControlsFormMainTable(objTable, astrControlClass, astrPanelID, astrGridID, alControls, iblnOnlyGrid, isAllPanel);
        }
    });
}

function GetAllControlsFormMainTable(sfxTable, astrControlClass, astrPanelID, astrGridID, alControls, iblnOnlyGrid, isAllPanel) {
    var strArrControlClass = astrControlClass.split(',');

    if (sfxTable) {
        var strTableID = sfxTable.dictAttributes.ID;
        function iterateWizardSteps(sfxWizardStep) {
            if (!iblnOnlyGrid) {
                if (!astrPanelID || (astrPanelID && strTableID != "" && strTableID != undefined && astrPanelID.toLowerCase() == strTableID.toLowerCase()))  //Apurba 12/09/2011
                {
                    if (strArrControlClass.length > 0) {
                        angular.forEach(strArrControlClass, function (strControlClass) {
                            if (strControlClass == sfxWizardStep.Name) {
                                if (sfxWizardStep.dictAttributes && sfxWizardStep.dictAttributes.ID) {
                                    alControls.push(sfxWizardStep);
                                }
                            }
                        });
                    }
                    else {
                        if (sfxWizardStep.dictAttributes && sfxWizardStep.dictAttributes.ID) {
                            alControls.push(sfxWizardStep);
                        }
                    }
                }
            }
            if (sfxWizardStep.Elements.length > 0 && sfxWizardStep.Elements[0].Name == "sfwTable") {
                GetAllControlsFormMainTable(sfxWizardStep.Elements[0], astrControlClass, astrPanelID, astrGridID, alControls, iblnOnlyGrid, isAllPanel);
            }
        }
        function iterateWizardItems(objWizard) {
            if (objWizard.Name == "HeaderTemplate") {
                strTreeCaption = "HeaderTemplate";
                if (!iblnOnlyGrid) {
                    if (!astrPanelID || (astrPanelID && strTableID != "" && strTableID != undefined && astrPanelID.toLowerCase() == strTableID.toLowerCase()))  //Apurba 12/09/2011
                    {
                        if (strArrControlClass.length > 0) {
                            angular.forEach(strArrControlClass, function (strControlClass) {
                                if (strControlClass == objWizard.Name) {
                                    if (objWizard.dictAttributes && objWizard.dictAttributes.ID) {
                                        alControls.push(objWizard);
                                    }
                                }
                            });
                        }
                        else {
                            if (objWizard.dictAttributes && objWizard.dictAttributes.ID) {
                                alControls.push(objWizard);
                            }
                        }
                    }
                }
                if (objWizard.Elements.length > 0 && objWizard.Elements[0].Name == "sfwTable") {
                    GetAllControlsFormMainTable(objWizard.Elements[0], astrControlClass, astrPanelID, astrGridID, alControls, iblnOnlyGrid, isAllPanel);
                }

            }
            else {

                angular.forEach(objWizard.Elements, iterateWizardSteps);
            }
        }
        angular.forEach(sfxTable.Elements, function (sfxRow) {
            angular.forEach(sfxRow.Elements, function (sfxCell) {
                if (sfxCell) {
                    angular.forEach(sfxCell.Elements, function (sfxCtrl) {
                        if (!iblnOnlyGrid) {
                            if (!astrPanelID || (astrPanelID && strTableID != undefined && strTableID != "" && (astrPanelID.toLowerCase() == strTableID.toLowerCase()) || isAllPanel)) {
                                if (strArrControlClass.length > 0) {
                                    angular.forEach(strArrControlClass, function (strControlClass) {
                                        if (strControlClass == sfxCtrl.Name) {
                                            if (sfxCtrl.dictAttributes && sfxCtrl.dictAttributes.ID) {
                                                alControls.push(sfxCtrl);
                                            }
                                        }
                                    });
                                }
                                else {
                                    if (sfxCtrl.dictAttributes && sfxCtrl.dictAttributes.ID) {
                                        alControls.push(sfxCtrl);
                                    }
                                }
                            }
                        }
                        if (sfxCtrl.Name == "sfwChart") {
                            var objSfxChart = sfxCtrl;
                            angular.forEach(objSfxChart.Elements, function (objChart) {
                                if (objChart.Name == "Series") {
                                    for (var i = 0; i < objChart.Elements.length; i++) {
                                        var objSeries = objChart.Elements[i];
                                        if (objSeries.Name == "sfwSeries") {
                                            if (objSeries.dictAttributes && objSeries.dictAttributes.ID) {
                                                alControls.push(objSeries);
                                            }
                                        }
                                    }
                                }
                                if (objChart.Name == "ChartAreas") {
                                    for (var i = 0; i < objChart.Elements.Count; i++) {
                                        var objChartArea = objChart.Elements[i];
                                        if (objChartArea.Name == "sfwChartArea") {
                                            if (objChartArea.dictAttributes && objChartArea.dictAttributes.ID) {
                                                alControls.push(objChartArea);
                                            }
                                        }
                                    }
                                }
                            });
                        }


                        if (sfxCtrl.Name == "sfwPanel") {
                            var sfxPanel = sfxCtrl;
                            if (sfxPanel.Elements.length > 0 && sfxPanel.Elements[0].Name == "sfwTable") {
                                GetAllControlsFormMainTable(sfxPanel.Elements[0], astrControlClass, astrPanelID, astrGridID, alControls, iblnOnlyGrid, isAllPanel);
                            }
                        }
                        else if (sfxCtrl.Name == "sfwTabContainer") {
                            var sfxTabContainer = sfxCtrl;
                            if (sfxTabContainer.Elements.length > 0 && sfxTabContainer.Elements[0].Name == "Tabs") {
                                var sfxTab = sfxTabContainer.Elements[0];
                                angular.forEach(sfxTab.Elements, function (sfxTabSheet) {
                                    if (!iblnOnlyGrid) {
                                        if (strTableID != undefined && strTableID != "" && astrPanelID.toLowerCase() == strTableID.toLowerCase())  //Apurba 12/09/2011
                                        {
                                            if (strArrControlClass.length > 0) {
                                                angular.forEach(strArrControlClass, function (strControlClass) {
                                                    if (strControlClass == sfxTabSheet.Name)
                                                        if (sfxTabSheet.dictAttributes && sfxTabSheet.dictAttributes.ID) {
                                                            alControls.push(sfxTabSheet);
                                                        }
                                                });
                                            }
                                            else
                                                if (sfxTabSheet.dictAttributes && sfxTabSheet.dictAttributes.ID) {
                                                    alControls.push(sfxTabSheet);
                                                }
                                        }
                                    }
                                    if (sfxTabSheet.Elements.length > 0 && sfxTabSheet.Elements[0].Name == "sfwTable") {
                                        GetAllControlsFormMainTable(sfxTabSheet.Elements[0], astrControlClass, astrPanelID, astrGridID, alControls, iblnOnlyGrid, isAllPanel);
                                    }
                                });
                            }
                        }
                        else if (sfxCtrl.Name == "sfwGridView") {
                            var strGridId = sfxCtrl.dictAttributes.ID;
                            if (iblnOnlyGrid) {
                                if (strGridId == astrGridID) {
                                    if (sfxCtrl.Elements.length > 0 && sfxCtrl.Elements[0].Name == "Columns") {
                                        var objColumn = sfxCtrl.Elements[0];
                                        for (var i = 0; i < objColumn.Elements.length; i++) {
                                            var objTempField = objColumn.Elements[i];
                                            if (objTempField.Elements.length > 0 && objTempField.Elements[0].Name == "ItemTemplate") {
                                                angular.forEach(objTempField.Elements[0].Elements, function (sfxControl) {
                                                    alControls.push(sfxControl);
                                                });
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (sfxCtrl.Name == "sfwWizard") {
                            angular.forEach(sfxCtrl.Elements, iterateWizardItems);
                        }
                        else if (sfxCtrl.Name == "sfwButtonGroup") {
                            for (var i = 0; i < sfxCtrl.Elements.length; i++) {
                                if (sfxCtrl.Elements[i].Name == "sfwScheduler") {
                                    if (sfxCtrl.Elements[i].dictAttributes && sfxCtrl.Elements[i].dictAttributes.ID) {
                                        alControls.push(sfxCtrl.Elements[i]);
                                        break;
                                    }
                                }
                            }
                        }
                    });
                }
            });
        });
    }
}
function GetAllFormControls(sfxItems, astrControlClass, astrPanelID, astrGridID, alControls, iblnOnlyGrid) {
    var strArrControlClass = astrControlClass.split(',');
    function iterateWizardSteps(sfxWizardStep) {
        if (!iblnOnlyGrid) {
            if (strArrControlClass.length > 0) {
                angular.forEach(strArrControlClass, function (strControlClass) {
                    if (strControlClass == sfxWizardStep.Name) {
                        if (sfxWizardStep.dictAttributes && sfxWizardStep.dictAttributes.ID) {
                            alControls.push(sfxWizardStep);
                        }
                    }
                });
            }
            else {
                if (sfxWizardStep.dictAttributes && sfxWizardStep.dictAttributes.ID) {
                    alControls.push(sfxWizardStep);
                }
            }
        }
        if (sfxWizardStep.Elements.length > 0 && sfxWizardStep.Elements[0].Name == "items") {
            GetAllFormControls(sfxWizardStep.Elements[0], astrControlClass, astrPanelID, astrGridID, alControls, iblnOnlyGrid);
        }
    }
    function iterateWizardItems(objWizard) {
        if (objWizard.Name == "HeaderTemplate") {
            strTreeCaption = "HeaderTemplate";
            if (!iblnOnlyGrid) {
                if (strArrControlClass.length > 0) {
                    angular.forEach(strArrControlClass, function (strControlClass) {
                        if (strControlClass == objWizard.Name) {
                            if (objWizard.dictAttributes && objWizard.dictAttributes.ID) {
                                alControls.push(objWizard);
                            }
                        }
                    });
                }
                else {
                    if (objWizard.dictAttributes && objWizard.dictAttributes.ID) {
                        alControls.push(objWizard);
                    }
                }
            }
            if (objWizard.Elements.length > 0 && objWizard.Elements[0].Name == "items") {
                GetAllFormControls(objWizard.Elements[0], astrControlClass, astrPanelID, astrGridID, alControls, iblnOnlyGrid);
            }

        }
        else {

            angular.forEach(objWizard.Elements, iterateWizardSteps);
        }
    }

    if (sfxItems) {
        var strTableID = sfxItems.dictAttributes.ID;
        angular.forEach(sfxItems.Elements, function (sfxCtrl) {
            {
                if (!iblnOnlyGrid) {
                    //if (strTableID != "" && strTableID != undefined && astrPanelID.toLowerCase() == strTableID.toLowerCase())  //Apurba 12/09/2011
                    //{
                    if (strArrControlClass.length > 0) {
                        angular.forEach(strArrControlClass, function (strControlClass) {
                            if (strControlClass == sfxCtrl.Name) {
                                if (sfxCtrl.dictAttributes && sfxCtrl.dictAttributes.ID) {
                                    alControls.push(sfxCtrl);
                                }
                            }
                        });

                    }
                    else {
                        if (sfxCtrl.dictAttributes && sfxCtrl.dictAttributes.ID) {
                            alControls.push(sfxCtrl);
                        }
                    }
                    //}
                }
                //Manish for SfwChart
                if (sfxCtrl.Name == "sfwChart") {
                    var objSfxChart = sfxCtrl;
                    angular.forEach(objSfxChart.Elements, function (objChart) {
                        if (objChart.Name == "Series") {
                            for (var i = 0; i < objChart.Elements.length; i++) {
                                var objSeries = objChart.Elements[i];
                                if (objSeries.Name == "sfwSeries") {
                                    if (objSeries.dictAttributes && objSeries.dictAttributes.ID) {
                                        alControls.push(objSeries);
                                    }
                                }
                            }
                        }
                        if (objChart.Name == "ChartAreas") {
                            for (var i = 0; i < objChart.Elements.Count; i++) {
                                var objChartArea = objSfxChart.Elements[i];
                                if (objChartArea.Name == "sfwChartArea") {
                                    if (objChartArea.dictAttributes && objChartArea.dictAttributes.ID) {
                                        alControls.push(objChartArea);
                                    }
                                }
                            }
                        }
                    });
                }


                if (sfxCtrl.Name == "sfwPanel") {
                    var sfxPanel = sfxCtrl;
                    if (sfxPanel.Elements.length > 0 && sfxPanel.Elements[0].Name == "items") {
                        GetAllFormControls(sfxPanel.Elements[0], astrControlClass, astrPanelID, astrGridID, alControls, iblnOnlyGrid);
                    }
                }
                else if (sfxCtrl.Name == "sfwTabContainer") {
                    var sfxTabContainer = sfxCtrl;
                    if (sfxTabContainer.Elements.length > 0 && sfxTabContainer.Elements[0].Name == "Tabs") {
                        var sfxTab = sfxTabContainer.Elements[0];
                        angular.forEach(sfxTab.Elements, function (sfxTabSheet) {
                            if (!iblnOnlyGrid) {
                                //if (strTableID != "" && strTableID != undefined && astrPanelID.toLowerCase() == strTableID.toLowerCase())  //Apurba 12/09/2011
                                //{
                                if (strArrControlClass.length > 0) {
                                    angular.forEach(strArrControlClass, function (strControlClass) {
                                        if (strControlClass == sfxTabSheet.Name) {
                                            if (sfxTabSheet.dictAttributes && sfxTabSheet.dictAttributes.ID) {
                                                alControls.push(sfxTabSheet);
                                            }
                                        }
                                    });
                                }
                                else {
                                    if (sfxTabSheet.dictAttributes && sfxTabSheet.dictAttributes.ID) {
                                        alControls.push(sfxTabSheet);
                                    }
                                }
                                //}
                            }
                            if (sfxTabSheet.Elements.length > 0 && sfxTabSheet.Elements[0].Name == "items") {
                                GetAllFormControls(sfxTabSheet.Elements[0], astrControlClass, astrPanelID, astrGridID, alControls, iblnOnlyGrid);
                            }
                        });
                    }
                }

                else if (sfxCtrl.Name == "sfwGridView") {
                    var strGridId = sfxCtrl.dictAttributes.ID;
                    if (iblnOnlyGrid) {
                        if (strGridId == astrGridID) {
                            if (sfxCtrl.Elements.length > 0 && sfxCtrl.Elements[0].Name == "Columns") {
                                var objColumn = sfxCtrl.Elements[0];
                                for (var i = 0; i < objColumn.Elements.length; i++) {
                                    var objTempField = objColumn.Elements[i];
                                    if (objTempField.Elements.length > 0 && objTempField.Elements[0].Name == "ItemTemplate") {
                                        angular.forEach(objTempField.Elements[0].Elements, function (sfxControl) {
                                            alControls.push(sfxControl);
                                        });
                                    }
                                }
                            }
                        }
                    }
                }
                else if (sfxCtrl.Name == "sfwWizard") {
                    angular.forEach(sfxCtrl.Elements, iterateWizardItems);
                }
            }
        });
    }
}

function GetEntityXMLMethodParameters(entityList, entityID, strMethod) {

    var entity = entityList.filter(function (x) { return x.ID == entityID; });
    var objMethod;

    if (entity && entity.length) {
        var objEntity = entity[0];
        angular.forEach(objEntity.XmlMethods, function (item) {
            if (!objMethod) {
                if (item.ID == strMethod) {
                    objMethod = item;
                }
            }
        });

    }
    if (objMethod) {
        return objMethod.Parameters;
    }
    else {
        return objMethod;
    }
}

function GetObjectMethodParameters(entityList, entityID, strMethod) {
    var entity = entityList.filter(function (x) { return x.ID == entityID; });
    var objMethod;

    if (entity && entity.length) {
        var objEntity = entity[0];
        angular.forEach(objEntity.ObjectMethods, function (item) {
            if (!objMethod) {
                if (item.ID == strMethod) {
                    objMethod = item;
                }
            }
        });

    }
    if (objMethod) {
        return objMethod.Parameters;
    }
    else {
        return objMethod;
    }
}

function GetObjectMethods(entityList, entityID) {
    var entity = entityList.filter(function (x) { return x.ID == entityID; });
    var lstMethod = [];

    if (entity && entity.length) {
        var objEntity = entity[0];
        angular.forEach(objEntity.ObjectMethods, function (item) {
            lstMethod.push(item);
        });
    }
    return lstMethod;
}

function GetSrvMethodParameters(objServerObject, strObjectMethod) {
    var objMethod;
    if (objServerObject) {
        angular.forEach(objServerObject.Elements, function (item) {
            if (!objMethod) {
                if (item.dictAttributes.ID == strObjectMethod) {
                    objMethod = item;
                }
            }
        });
    }
    if (objMethod) {
        return objMethod.Elements;
    }
    return objMethod;
}

function GetCriteriaPanel(sfxTable) {
    var sfxCriteriaTable;
    angular.forEach(sfxTable.Elements, function (objModel) {
        if (!sfxCriteriaTable) {
            if (objModel.dictAttributes.ID) {
                var strID = objModel.dictAttributes.ID.toLowerCase().trim();
            }
            if (strID == "tblcriteria")
                sfxCriteriaTable = objModel;
            else
                sfxCriteriaTable = GetCriteriaPanel(objModel);
        }
    });
    return sfxCriteriaTable;
}



function PopulateTextRelatedControls(aModel, lstRelatedControl) {
    if (aModel.Name == "sfwTextBox") {
        if (aModel.dictAttributes.ID) {
            var strCtrlID = aModel.dictAttributes.ID;
            if (strCtrlID.length > 0 && !strCtrlID.match("^idsfw")) {
                lstRelatedControl.push(strCtrlID);
            }
        }
    }
    angular.forEach(aModel.Elements, function (itm) {
        PopulateTextRelatedControls(itm, lstRelatedControl);
    });
}

function GetControlNames(objTable, lstSelectedIndex) {
    angular.forEach(objTable.Elements, function (objRows) {
        angular.forEach(objRows.Elements, function (objCell) {
            angular.forEach(objCell.Elements, function (objsfxControl) {
                if (objsfxControl.Name == "sfwTable") {
                    GetControlNames(objsfxControl, lstSelectedIndex);
                }
                else if (objsfxControl.Name == "sfwPanel") {
                    angular.forEach(objsfxControl.Elements, function (objPanelTable) {
                        if (objPanelTable.Name == "sfwTable") {
                            GetControlNames(objPanelTable, lstSelectedIndex);
                        }
                    });
                }
                else if (objsfxControl.Name == "sfwGridView") {

                    if (objsfxControl.Elements.length > 0 && objsfxControl.Elements[0].Name == "Columns") {
                        for (var j = 0; j < objsfxControl.Elements[0].Elements.length; j++) {
                            var objTempField = objsfxControl.Elements[0].Elements[j];
                            if (objTempField.Elements.length > 0 && objTempField.Elements[0].Name == "ItemTemplate") {
                                var objItemTempField = objTempField.Elements[0];
                                angular.forEach(objItemTempField.Elements, function (sfxControl) {
                                    if ("sfwEntityField" in sfxControl.dictAttributes) {
                                        var strFieldName = "";

                                        strFieldName = sfxControl.dictAttributes.sfwEntityField;

                                        lstSelectedIndex.push(strFieldName);
                                    }
                                });
                            }
                        }
                    }
                }

            });
        });
    });
}

function GetRetrievalTargetControls(panelObj, lstTargetFields) {
    angular.forEach(panelObj.Elements, function (ctrl) {
        if (ctrl.Name == "sfwTextBox" || ctrl.Name == "sfwCheckBox" || ctrl.Name == "sfwDropDownList" || ctrl.Name == "sfwRadioButtonList" || ctrl.Name == "sfwMultiSelectDropDownList" || ctrl.Name == "sfwCascadingDropDownList") {
            if (ctrl.dictAttributes.ID) {
                var obj = { ID: ctrl.dictAttributes.ID, sourceControl: "", isConstant: false };
                lstTargetFields.push(obj);
            }
        }
        if (ctrl.Elements.length > 0 && ctrl.Name != "sfwGridView") {
            GetRetrievalTargetControls(ctrl, lstTargetFields);
        }
    });
}

function GetRetrievalSourceControls(panelObj, lstSourceFields) {
    angular.forEach(panelObj.Elements, function (ctrl) {
        if (ctrl.Name == "sfwTextBox" || ctrl.Name == "sfwCheckBox" || ctrl.Name == "sfwDropDownList" || ctrl.Name == "sfwRadioButtonList" || ctrl.Name == "sfwMultiSelectDropDownList" || ctrl.Name == "sfwCascadingDropDownList") {
            if (ctrl.dictAttributes.ID) {
                var obj = { ID: ctrl.dictAttributes.ID, Elements: [], IsExpanded: false };
                lstSourceFields.push(obj);
            }
        }
        if (ctrl.Elements.length > 0 && ctrl.Name != "sfwGridView" && ctrl.Name != "sfwDialogPanel") {
            var lsttempSourceFields = lstSourceFields;
            if (ctrl.Name == "sfwPanel") {
                var obj = { ID: ctrl.dictAttributes.sfwCaption, Elements: [], IsExpanded: false };
                lstSourceFields.push(obj);
                lsttempSourceFields = lstSourceFields[lstSourceFields.length - 1].Elements;
            }
            else if (ctrl.Name == "sfwWizardStep") {
                var obj = { ID: ctrl.dictAttributes.Title, Elements: [], IsExpanded: false };
                lstSourceFields.push(obj);
                lsttempSourceFields = lstSourceFields[lstSourceFields.length - 1].Elements;
            }
            GetRetrievalSourceControls(ctrl, lsttempSourceFields);
        }
    });
}

//#region Get Query params

function onQueryChange(QueryRef, entityIntellisenseList) {
    var lstQryField = [];
    if (QueryRef) {

        var queryId = QueryRef;
        var lst = queryId.split('.');
        if (lst && lst.length == 2) {
            var entityName = lst[0];
            var strQueryID = lst[1];
            var lstEntity = entityIntellisenseList.filter(function (x) {
                return x.ID == entityName;
            });
            if (lstEntity && lstEntity.length > 0) {
                var objEntity = lstEntity[0];
                var lstQuery = objEntity.Queries.filter(function (x) {
                    return x.ID == strQueryID;
                });
                if (lstQuery && lstQuery.length > 0) {
                    var objQuery = lstQuery[0];
                    angular.forEach(objQuery.Parameters, function (x) {
                        lstQryField.push(x);
                    });
                }
            }
        }
    }
    return lstQryField;
}
//#endregion

function CheckIfObjectType(StrEntityField, entityName, lstEntity) {
    var retVal = false;
    if (entityName != undefined && entityName != "") {
        var lst = lstEntity.filter(function (itm) {
            return itm.ID == entityName;
        }
        );
        if (lst && lst.length > 0) {
            var objEntity = lst[0];
            if (StrEntityField.contains('.')) {
                var strEntityFields = StrEntityField.split(".");
                for (var i = 0; i < strEntityFields.length; i++) {
                    retVal = false;
                    var objAttribute = SearchAttributeInEntity(objEntity, strEntityFields[i]);
                    if (objAttribute && objAttribute.DataType == "Object") {
                        retVal = true;
                    }
                    if (objAttribute && objAttribute.Entity != undefined && objAttribute.Entity != "") {
                        lst = lstEntity.filter(function (itm) {
                            return itm.ID == objAttribute.Entity;
                        }
                        );
                        if (lst && lst.length > 0) {
                            objEntity = lst[0];
                        }
                    }
                }
            }
            else {
                var objAttribute = SearchAttributeInEntity(objEntity, StrEntityField);
                if (objAttribute && objAttribute.DataType == "Object") {
                    retVal = true;
                }
            }
        }
    }
    return retVal;
}

function SearchAttributeInEntity(objEntity, strAttr) {
    var objAttribute;

    var lstAttr = objEntity.Attributes.filter(function (itm) {
        return itm.ID == strAttr;
    }
    );
    if (lstAttr && lstAttr.length > 0) {
        objAttribute = lstAttr[0];
    }

    return objAttribute;
}

function GetQueryListFromObject(formObject) {
    var lstQueryID = [];
    var initialload = formObject.Elements.filter(function (x) { return x.Name == 'initialload'; });

    if (initialload.length > 0) {
        for (i = 0; i < initialload[0].Elements.length; i++) {
            if (initialload[0].Elements[i].Name == "query") {
                lstQueryID.push(initialload[0].Elements[i]);
            }
        }
    }
    return lstQueryID;
}

function GetMainQueryFromFormObject(formObject, entityIntellisenseList) {
    var initialload = formObject.Elements.filter(function (x) { return x.Name == 'initialload'; });
    var MainQuery;
    if (initialload && initialload.length > 0) {
        for (i = 0; i < initialload[0].Elements.length; i++) {
            var sfwQueryRef = initialload[0].Elements[i].dictAttributes.sfwQueryRef;
            if (!IsSubQuery(sfwQueryRef, entityIntellisenseList)) {
                MainQuery = initialload[0].Elements[i];
            }
        }
    }
    return MainQuery;
}

function IsSubQuery(strQuery, entityIntellisenseList) {
    var retValue = false;
    function iterator(Query) {
        if (!retValue) {
            if (Query.ID == strQueryName && Query.QueryType && Query.QueryType.toLowerCase() == "subselectquery") {
                retValue = true;
            }
        }
    }
    if (strQuery != "" && strQuery != undefined) {
        var strCDOName = strQuery.substring(0, strQuery.indexOf("."));
        var lstObj = entityIntellisenseList.filter(function (x) {
            return x.ID == strCDOName;
        });
        if (lstObj && lstObj.length > 0) {

            var strQueryName = strQuery.substring(strQuery.indexOf(".") + 1);

            angular.forEach(lstObj[0].Queries, iterator);
        }
    }

    return retValue;
}


function getEntityBasedOnControl(item) {
    var entityfieldname = "";
    var curscope = getCurrentFileScope();

    if (item.Name == "sfwGridView") {
        entityfieldname = item.dictAttributes.sfwEntityField;
    }
    else if (item.Name == "sfwDialogPanel") {
        var strdialogpanelid = item.dictAttributes.ID;
        if (strdialogpanelid) {
            var button = GetFieldFromFormObject(curscope.FormLinkModel, 'sfwButton', 'sfwRelatedDialogPanel', strdialogpanelid);
            if (button && button.length > 0 && button[0].dictAttributes.sfwRelatedControl) {
                var gridview = GetFieldFromFormObject(curscope.FormLinkModel, 'sfwGridView', 'ID', button[0].dictAttributes.sfwRelatedControl);
                if (gridview && gridview.length > 0) {
                    entityfieldname = gridview[0].dictAttributes.sfwEntityField;
                }
            }
            else {
                var objScheduler = GetFieldFromFormObject(curscope.FormLinkModel, 'sfwScheduler', 'sfwRelatedDialogPanel', strdialogpanelid);
                if (objScheduler && objScheduler.length > 0) {
                    entityfieldname = objScheduler[0].dictAttributes.sfwEntityField;
                }
            }
        }
    }
    else if (item.Name == "sfwListView") {
        entityfieldname = item.dictAttributes.sfwEntityField;
    }
    return entityfieldname;
}

function GetNewSeriesName(strItemKey, objRules, iItemNum) {

    var strItemName = String.format("{0}{1}", strItemKey, iItemNum.toString());
    while (CheckForDuplicateName(strItemName, objRules)) {
        iItemNum++;
        strItemName = String.format("{0}{1}", strItemKey, iItemNum.toString());
    }

    return strItemName;
}

function CheckForDuplicateName(strId, objRules) {
    var blnReturn = false;
    if (objRules) {
        if (objRules.dictAttributes.Name) {
            blnReturn = objRules.dictAttributes.Name == strId;
        }
        else if (objRules.dictAttributes.ID) {
            blnReturn = objRules.dictAttributes.ID == strId;
        }
        if (!blnReturn) {
            angular.forEach(objRules.Elements, function (item) {
                if (!blnReturn) {
                    blnReturn = CheckForDuplicateName(strId, item);
                    if (blnReturn) {
                        return;
                    }
                }
            });
        }
    }
    return blnReturn;
}

function GetNavParamCollection(objSfxForm, objControl, ParameterCollection, entityIntellisenseList, formodel) {
    if (objSfxForm) {
        if (objSfxForm.dictAttributes.sfwType == "Lookup") {
            var lstTable = objSfxForm.Elements.filter(function (itm) { return itm.Name == "sfwTable"; });
            if (lstTable && lstTable.length > 0)
                var sfxCriteriaPanel = GetCriteriaPanel(lstTable[0]);

            if (sfxCriteriaPanel) {
                angular.forEach(sfxCriteriaPanel.Elements, function (sfxRow) {
                    angular.forEach(sfxRow.Elements, function (sfxCell) {
                        if (sfxCell) {
                            angular.forEach(sfxCell.Elements, function (sfxCtrl) {
                                if ("sfwDataField" in sfxCtrl.dictAttributes) {
                                    var strFieldName = sfxCtrl.dictAttributes.sfwDataField;
                                    var strControlID = sfxCtrl.dictAttributes.ID;
                                    if (strFieldName != "" && strFieldName != undefined)
                                        AddParamGridRow("Criteria Field", strFieldName, "", strControlID, ParameterCollection);
                                }
                            });
                        }
                    });
                });
            }
        }
        else {
            var astrMethodName = objControl.dictAttributes.sfwMethodName;

            var blnNewButton = astrMethodName == "btnNew_Click"
                || astrMethodName == "btnUpdate_Click" || astrMethodName == "btnSaveNew_Click";

            var InitialLoadVM;
            var lst = objSfxForm.Elements.filter(function (x) { return x.Name == "initialload"; });
            if (lst && lst.length > 0) {
                InitialLoadVM = lst[0];
            }

            if (InitialLoadVM) {
                var strMethod = "";
                var lst = InitialLoadVM.Elements.filter(function (x) { return x.Name == "callmethods" && (x.dictAttributes.sfwMode == "" || x.dictAttributes.sfwMode == undefined || x.dictAttributes.sfwMode == "Update"); });
                if (lst && lst.length) {
                    strMethod = lst[0].dictAttributes.sfwMethodName;
                }

                if (blnNewButton) {
                    var lst = InitialLoadVM.Elements.filter(function (x) { return x.Name == "callmethods" && (x.dictAttributes.sfwMode == "" || x.dictAttributes.sfwMode == undefined || x.dictAttributes.sfwMode == "New"); });
                    if (lst && lst.length) {
                        strMethod = lst[0].dictAttributes.sfwMethodName;
                    }
                }

                if (strMethod != undefined && strMethod != "") {
                    if (objSfxForm.dictAttributes.sfwRemoteObject != undefined && objSfxForm.dictAttributes.sfwRemoteObject != "") {
                        var objServerObject = GetServerMethodObject(objSfxForm.dictAttributes.sfwRemoteObject, formodel.RemoteObjectCollection);
                        var paramerters = GetSrvMethodParameters(objServerObject, strMethod);
                        if (paramerters) {
                            for (j = 0; j < paramerters.length; j++) {
                                AddParamGridRow(paramerters[j].dictAttributes.sfwDataType, paramerters[j].dictAttributes.ID, "", "", ParameterCollection);
                            }
                        }
                    }
                    else {
                        var paramerters = GetEntityXMLMethodParameters(entityIntellisenseList, objSfxForm.dictAttributes.sfwEntity, strMethod);
                        if (paramerters) {
                            angular.forEach(paramerters, function (objParam) {
                                AddParamGridRow(objParam.DataType, objParam.ID, objParam.Value, "", ParameterCollection);
                            });
                        }
                    }

                }
                if (blnNewButton) {
                    var lst = InitialLoadVM.Elements.filter(function (x) { return x.Name == "session"; });
                    if (lst && lst.length > 0) {
                        angular.forEach(lst[0].Elements, function (objSessionField) {
                            AddParamGridRow("Session Field", objSessionField.dictAttributes.ID, "", "", ParameterCollection);
                        });
                    }
                }
            }
        }
    }
}


function AddParamGridRow(astrParamType, astrParamField, astrParamValue, astrControlID, ParameterCollection) {
    var objParameter = {};
    objParameter.Type = astrParamType;
    objParameter.ParameterField = astrParamField;
    if (astrParamValue != undefined && astrParamValue != "") {
        if (astrParamValue.match("^#")) {
            objParameter.Constants = true;
            objParameter.ParameterValue = astrParamValue.substring(1);
        }
        else {
            objParameter.ParameterValue = astrParamValue;
        }
        objParameter.IsReadOnly = true;

    }
    objParameter.ControlID = astrControlID;
    ParameterCollection.push(objParameter);
}

function PopulateParamValues(ParameterCollection, istrParameters) {
    if (istrParameters != undefined && istrParameters != "") {
        if (istrParameters.match("^@")) {
            istrParameters = istrParameters.substring(1);
            var alParams = istrParameters.split(';');
            angular.forEach(alParams, function (strParam) {
                var strControlID = strParam;
                var strParamsValue = strParam;
                var blnConstant = false;

                if (strParam.contains("=")) {
                    strControlID = strParam.substring(0, strParam.indexOf('='));
                    strParamsValue = strParam.substring(strParam.indexOf('=') + 1);

                    if (strParamsValue.match("^#")) {
                        strParamsValue = strParamsValue.substring(1);
                        blnConstant = true;
                    }
                }

                angular.forEach(ParameterCollection, function (objParameter) {
                    if (objParameter.ControlID == strControlID) {
                        objParameter.ParameterValue = strParamsValue;
                        objParameter.Constants = blnConstant;
                    }
                });
            });
        }
        else {
            var alParams = istrParameters.split(';');
            angular.forEach(alParams, function (strParam) {
                var strParamField = strParam;
                var strParamsValue = strParam;
                var blnConstant = false;

                if (strParam.contains("=")) {
                    strParamField = strParam.substring(0, strParam.indexOf('='));
                    strParamsValue = strParam.substring(strParam.indexOf('=') + 1);

                    if (strParamsValue.match("^#")) {
                        strParamsValue = strParamsValue.substring(1);
                        blnConstant = true;
                    }
                    else if (strParamsValue.match("^~")) {
                        strParamsValue = strParamsValue.substring(1);
                    }
                }

                angular.forEach(ParameterCollection, function (objParameter) {
                    if (objParameter.ParameterField.toLowerCase() == strParamField.toLowerCase()) {
                        objParameter.ParameterValue = strParamsValue;
                        objParameter.Constants = blnConstant;
                    }
                });
            });
        }
    }
}

function GetNavigationParameterValue(ParameterCollection) {
    var strReturn = "";
    angular.forEach(ParameterCollection, function (objParams) {
        var strParamField = objParams.ParameterField;
        var strParamValue = objParams.ParameterValue;
        if ((strParamValue != undefined && strParamValue != "") || (strParamField != undefined && strParamField != "")) {
            var blnConstatnt = objParams.Constants;

            if (blnConstatnt) {
                strParamValue = "#" + strParamValue;
            }

            var strParam = strParamValue;

            if (strParamValue != undefined && strParamValue != "" && strParamValue.toLowerCase() != strParamField.toLowerCase()) {
                strParam = strParamField + '=' + strParamValue;
            }
            if (strParam != undefined && strParam != "") {

                if (strReturn == "") {
                    strReturn = strParam;
                }
                else {
                    strReturn += ';' + strParam;
                }
            }
        }
    });
    return strReturn;
}

function GetAttribute(attribute, objEntity) {
    var objAttribute;
    var attrs = objEntity.Attributes.filter(function (attr) {
        return attr.ID == attribute;
    }
    );
    if (attrs && attrs.length > 0) {
        objAttribute = attrs[0];
    }
    return objAttribute;
}

function getEntityObject(entityName, $EntityIntellisenseFactory) {
    var objEntity;
    var lstentitylist = $EntityIntellisenseFactory.getEntityIntellisense();
    var lstEntity = lstentitylist.filter(function (itm) {
        return itm.ID == entityName;
    }
    );
    if (lstEntity && lstEntity.length > 0) {
        objEntity = lstEntity[0];
    }
    return objEntity;
}

function persistAttributes(oldControlModel, newControlModel) {
    if (oldControlModel && newControlModel && oldControlModel.dictAttributes && newControlModel.dictAttributes) {

        //Retain General attributes if any.
        if (oldControlModel.dictAttributes.ID && oldControlModel.dictAttributes.ID.trim().length > 0) {
            var isCaption = oldControlModel.Name == "sfwLabel" && oldControlModel.dictAttributes.sfwIsCaption && oldControlModel.dictAttributes.sfwIsCaption == "True";
            var oldControlPrefix = getControlIDPrefix(oldControlModel.Name, isCaption);
            var id = getControlIDPrefix(newControlModel.Name);
            if (oldControlModel.Name == "sfwLabel" && (oldControlModel.dictAttributes.ID.startsWith("cap") || oldControlModel.dictAttributes.ID.startsWith("lbl"))) {
                id += oldControlModel.dictAttributes.ID.substring(3);
            }
            else if (oldControlModel.dictAttributes.ID.startsWith(oldControlPrefix)) {
                id += oldControlModel.dictAttributes.ID.substring(oldControlPrefix.length);
            }
            else {
                id += oldControlModel.dictAttributes.ID;
            }

            newControlModel.dictAttributes.ID = id;
        }
        if (oldControlModel.dictAttributes.Visible && oldControlModel.dictAttributes.Visible.trim().length > 0) {
            newControlModel.dictAttributes.Visible = oldControlModel.dictAttributes.Visible;
        }
        if (oldControlModel.dictAttributes.sfwResource && oldControlModel.dictAttributes.sfwResource.trim().length > 0) {
            newControlModel.dictAttributes.sfwResource = oldControlModel.dictAttributes.sfwResource;
        }
        if (oldControlModel.dictAttributes.sfwVisibleRule && oldControlModel.dictAttributes.sfwVisibleRule.trim().length > 0) {
            newControlModel.dictAttributes.sfwVisibleRule = oldControlModel.dictAttributes.sfwVisibleRule;
        }
        if (oldControlModel.dictAttributes.sfwEnableRule && oldControlModel.dictAttributes.sfwEnableRule.trim().length > 0 && newControlModel.Name == 'sfwButton') {
            newControlModel.dictAttributes.sfwEnableRule = oldControlModel.dictAttributes.sfwEnableRule;
        }
        if (oldControlModel.dictAttributes.CssClass && oldControlModel.dictAttributes.CssClass.trim().length > 0) {
            newControlModel.dictAttributes.CssClass = oldControlModel.dictAttributes.CssClass;
        }
        if (oldControlModel.dictAttributes.sfwCustomAttributes && oldControlModel.dictAttributes.sfwCustomAttributes.trim().length > 0) {
            newControlModel.dictAttributes.sfwCustomAttributes = oldControlModel.dictAttributes.sfwCustomAttributes;
        }
        if (oldControlModel.dictAttributes.sfwMode && oldControlModel.dictAttributes.sfwMode.trim().length > 0) {
            newControlModel.dictAttributes.sfwMode = oldControlModel.dictAttributes.sfwMode;
        }

        //Retains Entity Field or Data Field attributes if any.
        if (newControlModel.Name != "sfwButton" && newControlModel.Name != "sfwImageButton" && newControlModel.Name != "sfwSoftErrors" && newControlModel.Name != "sfwLinkButton" && newControlModel.Name != "sfwToolTipButton" && newControlModel.Name != "CompareValidator" && newControlModel.Name != "sfwDialogPanel" && newControlModel.Name != "sfwListBox" && newControlModel.Name != "sfwButtonGroup" && !(newControlModel.Name == "sfwLabel" && newControlModel.dictAttributes.sfwIsCaption == "True")) {
            if (oldControlModel.dictAttributes.sfwEntityField && oldControlModel.dictAttributes.sfwEntityField.trim().length > 0) {
                newControlModel.dictAttributes.sfwEntityField = oldControlModel.dictAttributes.sfwEntityField;

            }
            else if (oldControlModel.dictAttributes.sfwDataField && oldControlModel.dictAttributes.sfwDataField.trim().length > 0) {
                newControlModel.dictAttributes.sfwDataField = oldControlModel.dictAttributes.sfwDataField;
            }
            else if (oldControlModel.dictAttributes.sfwObjectField && oldControlModel.dictAttributes.sfwObjectField.trim().length > 0) {
                newControlModel.dictAttributes.sfwObjectField = oldControlModel.dictAttributes.sfwObjectField;
            }
        }

    }
}

function getEntityAttributeByType(entities, entityid, type) {
    var lstEntityColumnList = [];
    var entity = entities.filter(function (x) {
        return x.ID == entityid;
    });

    if (entity.length > 0) {
        var attributes = entity[0].Attributes;
        lstEntityColumnList = attributes.filter(function (itm) { return itm.Type == type; });
    }
    return lstEntityColumnList;
}
function PopulateColumnList(queryid, formodel, entityIntellisenseList, lstloadedentitycolumnstree) {
    var lstColumnList = [];
    var attributeName = "ID";
    var result = {};
    if (queryid) {
        lstColumnList = PopulateQueryColumnFromList(queryid, lstloadedentitycolumnstree, formodel);
    }
    else {
        if (formodel) {
            var MainQuery = GetMainQueryFromFormObject(formodel, entityIntellisenseList);
            if (MainQuery) {
                lstColumnList = PopulateQueryColumnFromList(MainQuery.dictAttributes.ID, lstloadedentitycolumnstree, formodel);
            }
            else {
                attributeName = "Value";
                if (formodel.dictAttributes.sfwEntity) {
                    var entities = entityIntellisenseList;
                    var entity = entities.filter(function (x) {
                        return x.ID == formodel.dictAttributes.sfwEntity;
                    });
                    if (entity.length > 0) {
                        var attributes = entity[0].Attributes;
                        lstColumnList = attributes.filter(function (itm) { return (itm.Type === "Column" && !(itm.Value && itm.Value.toLowerCase() === "app_json_data")) || itm.Type === "AppJsonData"; });
                    }
                }
            }
        }
    }
    result.list = lstColumnList;
    result.attribute = attributeName;
    return result;
}

function PopulateQueryColumnFromList(queryid, lstloadedentitycolumnstree, formodel) {
    var blnFound = false;
    var lstColumnList = [];
    if (lstloadedentitycolumnstree) {

        var lst = lstloadedentitycolumnstree.filter(function (itm) {
            return itm.EntityName == queryid;
        });
        if (lst && lst.length > 0) {
            lstColumnList = JSON.parse(JSON.stringify(lst[0].lstselectedobjecttreefields));
            blnFound = true;
        }
    }

    if (!blnFound && lstloadedentitycolumnstree) {
        var lstQueryID = GetQueryListFromObject(formodel);
        if (lstQueryID && lstQueryID.length > 0) {
            var lst = lstQueryID.filter(function (itm) {
                return itm.dictAttributes.ID == queryid;
            }
            );
            if (lst && lst.length > 0) {
                var objnew = { EntityName: lst[0].dictAttributes.ID, IsVisible: true, selectedobjecttreefield: undefined, lstselectedobjecttreefields: [], IsQuery: true };
                lstloadedentitycolumnstree.push(objnew);

                if (lst[0].dictAttributes.sfwQueryRef) {
                    $.connection.hubForm.server.getEntityQueryColumns(lst[0].dictAttributes.sfwQueryRef, "LoadQueryFieldsForLookup").done(function (data) {
                        var scope = GetFormFileScope(formodel);
                        if (scope && scope.receiveQueryFields) {
                            scope.receiveQueryFields(data, lst[0].dictAttributes.sfwQueryRef);
                        }
                    });
                }
                blnFound = true;
                if (!objnew.lstselectedobjecttreefields) {
                    objnew.lstselectedobjecttreefields = [];
                }
                lstColumnList = objnew.lstselectedobjecttreefields;
            }
        }
    }
    return lstColumnList;
}
function getQueryBookMarksID(formModel) {
    var lstQueryBookMarksID = [];
    var lstQueryBookMarks = formModel.Elements.filter(function (itm) { return itm.Name == "sfwQueryBookMarks"; });
    if (lstQueryBookMarks && lstQueryBookMarks.length > 0) {

        angular.forEach(lstQueryBookMarks[0].Elements, function (itm) {
            lstQueryBookMarksID.push(itm.dictAttributes.ID);
        });
    }

    return lstQueryBookMarksID;

}


function PopulateControlsForActiveForm(alControls, formmodel, model, iblnIsLookup) {
    var IsHtxForm = false;
    if (formmodel.dictAttributes.sfwType == "FormLinkLookup" ||
        formmodel.dictAttributes.sfwType == "FormLinkMaintenance" ||
        formmodel.dictAttributes.sfwType == "FormLinkWizard") {
        IsHtxForm = true;
    }
    var altmpControls = [];
    if (model.dictAttributes.sfwMethodName == "btnNew_Click" || model.dictAttributes.sfwMethodName == "btnNewUpdate_Click") {
        if (iblnIsLookup)
            GetAllControls(formmodel, "sfwLabel,sfwTextBox,sfwDropDownList,sfwCheckBox,sfwRadioButtonList,sfwLinkButton", "tblcriteria", "", IsHtxForm, altmpControls, false);
        else
            GetAllControls(formmodel, "sfwLabel,sfwTextBox,sfwDropDownList,sfwCheckBox,sfwRadioButtonList,sfwLinkButton,sfwScheduler", "", "", IsHtxForm, altmpControls, true);
    }
    else if (model.dictAttributes.sfwMethodName == "btnOpen_Click") {
        var strGridID = model.dictAttributes.sfwRelatedControl;
        var objGridView = FindParent(model, "sfwGridView");
        if (objGridView && objGridView.dictAttributes) {
            strGridID = objGridView.dictAttributes.ID;
        }
        if (strGridID != "")
            GetAllControls(formmodel, "", "", strGridID, IsHtxForm, altmpControls);
    }

    angular.forEach(altmpControls, function (objCtrl) {
        var strCodeGroup = "";
        if ("sfwLoadSource" in objCtrl.dictAttributes) {
            strCodeGroup = objCtrl.dictAttributes.sfwLoadSource;
        }
        if (strCodeGroup == "" || strCodeGroup == "0") {
            strCodeGroup = "~";
            if (objCtrl.Elements.length > 0) {
                // System.Web.UI.WebControls.ListItemCollection listItems = ((System.Web.UI.WebControls.ListControl)objCtrl.webctrl).Items;
                angular.forEach(objCtrl.Elements, function (item) {
                    if (item.Name == "ListItem") {
                        if (item.dictAttributes.Value != undefined && item.dictAttributes.Value != "") {
                            strCodeGroup += item.dictAttributes.Value + ",";
                        }
                    }
                });
            }
        }
        if ("sfwEntityField" in objCtrl.dictAttributes && (objCtrl.dictAttributes.sfwEntityField != undefined && objCtrl.dictAttributes.sfwEntityField != ""))
            alControls.push(objCtrl.dictAttributes.sfwEntityField + "~" + strCodeGroup);
    });
}
function CheckForFilterGrid(objForm) {
    var lst = [];
    FindControlListByNames(objForm, ['sfwButton', 'sfwLinkButton', 'sfwImageButton'], lst);
    if (lst && lst.length > 0) {
        lst = lst.filter(function (itm) { return itm.dictAttributes.sfwMethodName == "btnGridSearch_Click"; });
        if (lst && lst.length > 0) {
            for (var i = 0; i < lst.length; i++) {
                if (lst[i].dictAttributes.sfwNavigationParameter) {
                    var lstParam = lst[i].dictAttributes.sfwNavigationParameter.split(';');
                    if (lstParam && lstParam.length > 0) {
                        for (j = 0; j < lstParam.length; j++) {
                            var model = FindControlByID(objForm, lstParam[j]);
                            if (model) {
                                model.IsShowDataField = true;
                            }
                        }
                    }
                }
            }
        }
    }
}

function CanAddControlToDropList(objWebControl, formmodel, model) {
    var canAddControl = false;
    if (formmodel && formmodel.dictAttributes && formmodel.dictAttributes.sfwType == "Lookup" && objWebControl.lstCustom && objWebControl.lstCustom.some(function (x) { return x.PropertyName == "sfwDataField"; })) {
        canAddControl = true;
    }
    else if (formmodel && formmodel.dictAttributes && (formmodel.dictAttributes.sfwType == "Maintenance" || formmodel.dictAttributes.sfwType == "Wizard" || formmodel.dictAttributes.sfwType == "UserControl") && objWebControl.lstCustom && objWebControl.lstCustom.some(function (x) { return x.PropertyName == "sfwEntityField"; })) {
        canAddControl = true;
    }
    else if (formmodel && formmodel.dictAttributes && formmodel.dictAttributes.sfwType == "Correspondence" && objWebControl.lstCustom && objWebControl.lstCustom.some(function (x) { return x.PropertyName == "sfwQueryID"; })) {
        canAddControl = true;
    }

    if ((model.Name == "sfwLabel" && model.dictAttributes.sfwIsCaption == "True") || model.Name == "sfwGridView" ||
        model.Name == "sfwChart" || model.Name == "sfwListView" || model.Name == "sfwPanel" || model.Name == "sfwCheckBoxList" || model.Name == "sfwButton" || model.Name == "sfwLinkButton" || model.Name == "sfwImageButton") {
        canAddControl = false;
    }

    return canAddControl;
}


//#region Validate New

function PopulateButtonID(sfxControl, lstButton) {
    angular.forEach(sfxControl.Elements, function (ctrl) {
        if (ctrl.Name == "sfwButton" && ctrl.dictAttributes.sfwMethodName == "btnNew_Click" && ctrl.dictAttributes.ID) {
            lstButton.push(ctrl);
        }
        if (ctrl.Elements.length > 0) {
            PopulateButtonID(ctrl, lstButton);
        }
    });
    return lstButton;
}
function PopulateControlID(sfxControl, lstControlID) {
    angular.forEach(sfxControl.Elements, function (ctrl) {
        if ((ctrl.Name == "sfwTextBox" || ctrl.Name == "sfwDropDownList" || ctrl.Name == "sfwCascadingDropDownList" || ctrl.Name == "sfwMultiSelectDropDownList") && ctrl.dictAttributes.ID && ctrl.dictAttributes.ID != "") {
            lstControlID.push(ctrl.dictAttributes.ID);
        }
        if (ctrl.Elements.length > 0 && ctrl.Name != "sfwGridView") {
            PopulateControlID(ctrl, lstControlID);
        }
    });
    return lstControlID;
}

//#endregion

function CreateCompatibleLabel(objCtrl, formodel, $EntityIntellisenseFactory, $rootScope) {
    var strDisplayName = "";
    var strFieldName = objCtrl.dictAttributes.sfwDataField;
    if (!strFieldName) {
        strFieldName = objCtrl.dictAttributes.sfwEntityField;
        if (!strFieldName) {
            strFieldName = objCtrl.dictAttributes.sfwObjectField;
        }
        if (!strFieldName && formodel.dictAttributes.sfwType == "Correspondence") { // for correspondence
            strFieldName = objCtrl.dictAttributes.sfwQueryID;
        }
    }
    var formScope = getCurrentFileScope();
    var objAttribute;

    objAttribute = GetAttributesFromList(strFieldName, formodel, $EntityIntellisenseFactory);
    if (objAttribute) {
        if (formodel && !formodel.IsLookupCriteriaEnabled) {
            strDisplayName = GetCaptionFromField(objAttribute);
        }
        else if (formScope && formodel.IsLookupCriteriaEnabled == true && (!formScope.MainQuery && (!formScope.SelectedQuery || (formScope.SelectedQuery && !formScope.SelectedQuery.dictAttributes.ID)))) {
            strDisplayName = GetCaptionFromField(objAttribute);
        } else {
            strDisplayName = GetCaptionFromFieldName(strFieldName);
        }
    }

    if (strFieldName) {
        if (!strDisplayName) {
            strDisplayName = GetCaptionFromFieldName(strFieldName);
        }
        if (objCtrl.Name != "sfwGridView")
            if (strDisplayName && strDisplayName.trim().length > 0 && !strDisplayName.contains(":")) {
                strDisplayName += " :";
            }
    }
    else
        strDisplayName = "Error! No field is binded with the control";

    var cellVM = objCtrl.ParentVM;
    if (cellVM) {
        var rowVM = cellVM.ParentVM;
        if (rowVM) {
            var index = rowVM.Elements.indexOf(cellVM);
            if (index > 0) {
                var objcell = rowVM.Elements[index - 1];

                var prefix = "swc";
                var objLabel = {
                    Name: "sfwLabel", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                };
                objLabel.ParentVM = objcell;
                objLabel.dictAttributes.Text = strDisplayName;
                objLabel.dictAttributes.sfwIsCaption = "True";
                var strId = objLabel.Name;
                if (objLabel.Name && objLabel.Name.startsWith("sfw")) {
                    strId = objLabel.Name.substring(3);
                }
                objLabel.dictAttributes.ID = CreateControlID(formodel, strId, objLabel.Name, true);

                var strAssociatedID = objCtrl.dictAttributes.ID;
                if (strAssociatedID) {
                    objLabel.dictAttributes.AssociatedControlID = strAssociatedID;
                }

                $rootScope.PushItem(objLabel, objcell.Elements);
            }
        }
    }
}

function GetAttributesFromList(strFieldName, formodel, $EntityIntellisenseFactory) {
    var objEntity = getEntityObject(formodel.dictAttributes.sfwEntity, $EntityIntellisenseFactory);
    var objAttribute;
    var field = strFieldName;
    if (strFieldName != undefined && strFieldName != "" && strFieldName.contains(".")) {
        var lst = strFieldName.split(".");
        for (var i = 0; i < lst.length; i++) {
            if (objAttribute) {
                if (objAttribute.Entity != undefined && objAttribute.Entity != "") {
                    objEntity = getEntityObject(objAttribute.Entity, $EntityIntellisenseFactory);
                }
            }
            objAttribute = GetAttribute(lst[i], objEntity);
            field = lst[i];
        }
    }

    if (objEntity) {
        objAttribute = GetAttribute(field, objEntity);
    }
    return objAttribute;
}
function getFilteredAttribute(astrControlName, lstAttributes, ablnIsMultiLevel, propertyName) {
    var tempAttributes = [];
    if (astrControlName && lstAttributes && lstAttributes.length > 0) {
        if ("sfwChart" == astrControlName && propertyName && (propertyName == "XAxisTitle" || propertyName == "YAxisTitle" || propertyName == "ChartName")) {
            if (ablnIsMultiLevel) tempAttributes = lstAttributes.filter(function (x) { return x.Type && x.Type == "Object"; });
            else {
                tempAttributes = lstAttributes.filter(function (x) { return x.Type && x.Type.toLowerCase() != "expression"; });
            }
        }
        else if (["sfwGridView", "sfwChart", "sfwListView"].indexOf(astrControlName) > -1) {
            if (ablnIsMultiLevel) tempAttributes = lstAttributes.filter(function (x) { return x.Type && x.Type == "Object"; });
            else {
                tempAttributes = lstAttributes.filter(function (x) { return x.Type && (x.Type.toLowerCase() == "object" || x.Type.toLowerCase() == "collection"); });
            }
        } else if ("sfwCheckBoxList" == astrControlName && propertyName && propertyName == "sfwEntityField") {
            if (ablnIsMultiLevel) tempAttributes = lstAttributes.filter(function (x) { return x.Type && x.Type == "Object"; });
            else {
                tempAttributes = lstAttributes.filter(function (x) { return x.Type && (x.Type === "CDOCollection" || x.Type === "Collection" || x.Type === "List"); });
            }
        }
        else if ("sfwCalendar" == astrControlName && propertyName && propertyName == "sfwEntityField") {
            if (ablnIsMultiLevel) tempAttributes = lstAttributes.filter(function (x) { return x.Type && x.Type == "Object"; });
            else {
                tempAttributes = lstAttributes.filter(function (x) { return x.Type && (x.Type.toLowerCase() == "object" || x.Type.toLowerCase() == "collection"); });
            }
        } else if (astrControlName == "sfwLabel") {
            tempAttributes = lstAttributes;
        } else if (astrControlName == "udc") {
            tempAttributes = lstAttributes.filter(function (x) { return x.Type && x.Type == "Object"; });
        }
        else {
            tempAttributes = lstAttributes.filter(function (x) { return x.Type && x.Type.toLowerCase() != "expression"; });
        }
    }
    return tempAttributes;
}

function PopulateGridIDForNewButton(sfxControl, lstGrid) {
    angular.forEach(sfxControl.Elements, function (ctrl) {
        if (ctrl.Name == "sfwGridView" && ctrl.dictAttributes.ID) {
            lstGrid.push(ctrl.dictAttributes.ID);
        }
        if (ctrl.Elements && ctrl.Elements.length > 0) {
            PopulateGridIDForNewButton(ctrl, lstGrid);
        }
    });
}

function GetFormFileScope(formodel) {
    var formName = "";
    if (formodel && formodel.dictAttributes) {
        formName = formodel.dictAttributes.ID;
    }
    var mainScope = getScopeByFileName("MainPage");
    if (formName) {
        var scope = getScopeByFileName(formName);
        if (!scope) {
            formName = formName.substring(3);
            formName = "htx" + formName;
            scope = getScopeByFileName(formName);
        }
    }
    if (!scope) {
        if (mainscope) {
            var curfileid = mainscope.$root.currentopenfile.file.FileName;
            scope = getScopeByFileName(curfileid);
        }
    }
    return scope;
}




function GetObjectFields(formodel, lstFields, sfxControl) {
    var iblnIsLookup = formodel.dictAttributes.sfwType.toUpperCase() == "LOOKUP";
    lstFields.push("");


    if (formodel.Elements.length > 0) {
        angular.forEach(formodel.Elements, function (objTableM) {
            if (objTableM.Name == "sfwTable") {
                GetObjectFieldForTable(sfxControl, objTableM, iblnIsLookup, lstFields);
            }
        });
    }
}

function IsSearchCriteria(objControl) {
    var retVal = false;
    if (objControl && objControl.Name == "sfwTable" && (objControl.dictAttributes.ID == "tblCriteria" || objControl.dictAttributes.ID == "tblAdvCriteria" || objControl.dictAttributes.ID == "tblAdvSort" || objControl.dictAttributes.ID == "tblSql")) {
        retVal = true;
    }
    function iterator(itm) {
        if (!retVal) {
            retVal = IsSearchCriteria(itm);
        }
    }
    if (!retVal) {
        if (objControl && objControl.Elements.length > 0) {

            angular.forEach(objControl.Elements, iterator);
        }
    }

    return retVal;
}


function GetObjectFieldForTable(sfxControl, BaseTable, isLookup, lstFields, AddElements, isPanelCriteria) {
    angular.forEach(BaseTable.Elements, function (objRowM) {
        angular.forEach(objRowM.Elements, function (objCellM) {
            angular.forEach(objCellM.Elements, function (objControl) {


                if (isLookup) {
                    if (objControl.Name == "sfwPanel" && IsSearchCriteria(objControl)) {
                        if (objControl.Elements.length > 0 && objControl.Elements[0].Name == "sfwTable") {
                            GetObjectFieldForTable(sfxControl, objControl.Elements[0], isLookup, lstFields, true, true);
                        }
                    }
                    else if (objControl.Name == "sfwTabContainer") {
                        if (objControl.Elements.length > 0 && objControl.Elements[0].Name == "Tabs") {
                            var sfxTabs = objControl.Elements[0];
                            angular.forEach(sfxTabs.Elements, function (sfxTabSheet) {
                                if (sfxTabSheet.Elements.length > 0 && sfxTabSheet.Elements[0].Name == "sfwTable") {
                                    GetObjectFieldForTable(sfxControl, sfxTabSheet.Elements[0], isLookup, lstFields, true, true);
                                }
                            });
                        }
                    }
                }
                else {
                    if (objControl.Name == "sfwPanel") {
                        if (objControl.Elements.length > 0 && objControl.Elements[0].Name == "sfwTable") {
                            GetObjectFieldForTable(sfxControl, objControl.Elements[0], isLookup, lstFields, true, false);
                        }
                    }
                }

                if (isLookup && AddElements && isPanelCriteria) {

                    if (objControl.dictAttributes.sfwDataField != undefined && objControl.dictAttributes.sfwDataField != "") {
                        if (sfxControl.dictAttributes.sfwMethodName == "btnNew_Click") {
                            if (objControl.Name == "sfwLabel" || objControl.Name == "sfwTextBox" || objControl.Name == "sfwDropDownList" || objControl.Name == "sfwCheckBox" || objControl.Name == "sfwRadioButtonList" || objControl.Name == "sfwLinkButton") {
                                lstFields.push(objControl.dictAttributes.ID);
                            }
                        }
                        else {
                            lstFields.push(objControl.dictAttributes.sfwDataField);
                        }
                    }

                }
                else if (AddElements) {
                    if (objControl.dictAttributes.sfwEntityField != undefined && objControl.dictAttributes.sfwEntityField != "") {
                        if (sfxControl.dictAttributes.sfwMethodName == "btnNew_Click") {
                            if (objControl.Name == "sfwLabel" || objControl.Name == "sfwTextBox" || objControl.Name == "sfwDropDownList" || objControl.Name == "sfwCheckBox" || objControl.Name == "sfwRadioButtonList" || objControl.Name == "sfwLinkButton") {
                                lstFields.push(objControl.dictAttributes.ID);
                            }
                        }
                        else {
                            lstFields.push(objControl.dictAttributes.sfwEntityField);
                        }
                    }
                }
            });
        });
    });
}

//#region Functions For Insert  and Move Row and Column

function InsertRow(aParam, iRowIndex, tableVM) {
    var prefix = "swc";
    var sfxRowModel = { Name: "sfwRow", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
    sfxRowModel.ParentVM = tableVM;

    var rowvm;
    if (aParam.Name == "sfwColumn") {
        rowvm = aParam.ParentVM;
    }
    else if (aParam.Name == "sfwRow") {
        rowvm = aParam;
    }
    var ColCount = GetMaxColCount(rowvm, tableVM);
    for (var colInd = 0; colInd < ColCount; colInd++) {
        var sfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
        sfxCellModel.ParentVM = sfxRowModel;
        sfxRowModel.Elements.push(sfxCellModel);
    }

    return sfxRowModel;
}

function GetIndexToInsert(isBelow, iRowIndex) {
    var index;
    if (isBelow) {
        index = iRowIndex + 1;
    }
    else {
        index = iRowIndex;
    }
    return index;
}

//#endregion

function AddListViewTable(FormModel, objRepeaterControl) {
    var prefix = "swc";

    var objListTableModel = { Name: "sfwTable", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
    objListTableModel.ParentVM = objRepeaterControl;
    var strCtrlId = CreateControlID(FormModel, "NewPage", "sfwTable");
    objListTableModel.dictAttributes.ID = strCtrlId;

    var sfxRowModel = { Name: "sfwRow", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
    sfxRowModel.ParentVM = objListTableModel;

    var newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
    newSfxCellModel.ParentVM = sfxRowModel;
    sfxRowModel.Elements.push(newSfxCellModel);

    newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
    newSfxCellModel.ParentVM = sfxRowModel;
    sfxRowModel.Elements.push(newSfxCellModel);

    newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
    newSfxCellModel.ParentVM = sfxRowModel;
    sfxRowModel.Elements.push(newSfxCellModel);

    newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
    newSfxCellModel.ParentVM = sfxRowModel;
    sfxRowModel.Elements.push(newSfxCellModel);

    objListTableModel.Elements.push(sfxRowModel);
    return objListTableModel;
}

var setParentControlName = function (control) {
    for (var i = 0; i < control.Elements.length > 0; i++) {
        if (control.Elements[i].Name == "sfwPanel" || control.Elements[i].Name == "sfwDialogPanel" || control.Elements[i].Name == "sfwListView") {
            control.Elements[i].ParentControlName = 'udc';
        }
        if (control.Elements[i].Elements.length > 0) {
            setParentControlName(control.Elements[i]);
        }
    }
};


function GetVisiblePropertyForHtmlControls(ControlName) {
    var lstProperties = [];
    if (ControlName == "sfwGridView") {
        lstProperties = ["Visible", "AllowGrouping", "AllowPaging", "AllowEditing", "AllowFiltering", "AllowSorting", "ShowHeader", "EmptyDataText", "PageSize", "ShowHeaderWhenEmpty"];
    }
    else if (ControlName == "TemplateField") {
        lstProperties = ["Visible", "HeaderText", "SortExpression"];
    }
    else if (ControlName == "sfwTabSheet") {
        lstProperties = ["Visible", "HeaderText", "DefaultButton"];
    }
    else if (ControlName == "sfwDropDownList") {
        lstProperties = ["Visible", "OnClientChange", "DataTextField", "DataValueField", "AutoPostBack"];
    }
    else if (ControlName == "sfwCascadingDropDownList" || ControlName == "sfwListPicker" || ControlName == "sfwSourceList") {
        lstProperties = ["Visible", "DataTextField", "DataValueField"];
    }
    else if (ControlName == "sfwCheckBoxList") {
        lstProperties = ["Visible", "RepeatColumns", "RepeatDirection", "DataTextField", "DataValueField"];
    }
    else if (ControlName == "sfwButton" || ControlName == "sfwLinkButton") {

        lstProperties = ["Visible", "OnClientClick"];
    }
    else if (ControlName == "sfwRadioButton") {
        lstProperties = ["Visible", "GroupName", "AutoPostBack"];
    }
    else if (ControlName == "sfwRadioButtonList") {
        lstProperties = ["Visible", "RepeatColumns", "RepeatDirection", "DataTextField", "DataValueField"];
    }
    else if (ControlName == "sfwPanel") {
        lstProperties = ["Visible", "DefaultButton"];
    }
    else if (ControlName == "sfwFileUpload") {
        lstProperties = ["Visible", "HeaderStatusUpload", "SelectButtonText", "StatusFailedMessage", "StatusUploadedMessage", "UploadButtonText", "UploadClick", "AllowMultiple"];
    }
    else if (ControlName == "sfwIamge") {
        lstProperties = ["Visible", "ImageUrl"];
    }
    else if (ControlName == "sfwImageButton") {
        lstProperties = ["Visible", "ImageUrl", "ImageAlign"];
    }
    else if (ControlName == "sfwLabel") {
        lstProperties = ["Visible", "AssociatedControlID", "ToolTip"];
    }
    else if (ControlName == "sfwTextBox") {
        lstProperties = ["Visible", "TextMode"];
    }
    else if (ControlName == "ListItem") {
        lstProperties = ["Visible", "Text", "Value"];
    }
    else if (ControlName == "sfwMultiSelectDropDownList") {
        lstProperties = ["AutoPostBack"];
    }
    return lstProperties;
};

function GetEntityFieldNameFromControl(SfxMainTable, item) {
    var entityfieldname = "";
    if (item.Name == "sfwGridView") {
        entityfieldname = item.dictAttributes.sfwEntityField;
    }
    else if (item.Name == "sfwDialogPanel") {
        var strdialogpanelid = item.dictAttributes.ID;
        if (strdialogpanelid) {
            var button = GetFieldFromFormObject(SfxMainTable, 'sfwButton', 'sfwRelatedDialogPanel', strdialogpanelid);
            if (button && button.length > 0 && button[0].dictAttributes.sfwRelatedControl) {
                var gridview = GetFieldFromFormObject(SfxMainTable, 'sfwGridView', 'ID', button[0].dictAttributes.sfwRelatedControl);
                if (gridview && gridview.length > 0) {
                    entityfieldname = gridview[0].dictAttributes.sfwEntityField;
                }
            }
            else {
                var objScheduler = GetFieldFromFormObject(SfxMainTable, 'sfwScheduler', 'sfwRelatedDialogPanel', strdialogpanelid);
                if (objScheduler && objScheduler.length > 0) {
                    entityfieldname = objScheduler[0].dictAttributes.sfwEntityField;
                }
            }
        }
    }
    else if (item.Name == "sfwListView") {
        entityfieldname = item.dictAttributes.sfwEntityField;
    }

    return entityfieldname;
}

function hasCaption(objControl) {
    var _hasCaption = false;
    if (objControl) {
        var objParentTable = FindParent(objControl, "sfwTable");
        if (objParentTable) {
            var lstDescendents = getDescendents(objParentTable);
            var lstCaptions = lstDescendents.filter(function (ctrl) { return ctrl.dictAttributes && ctrl.dictAttributes.sfwIsCaption === "True" && objControl.dictAttributes.ID && ctrl.dictAttributes.AssociatedControlID === objControl.dictAttributes.ID });
            if (lstCaptions && lstCaptions.length > 0) {
                _hasCaption = true;
            }
        }
    }
    return _hasCaption;
}

function isGridPresentInsidePanel(obj) {
    var isFound = false;
    if (obj && obj.Elements.length > 0) {
        for (var i = 0; i < obj.Elements.length; i++) {
            if (obj.Elements[i].Name == "sfwGridView") {
                isFound = true;
                break;
            } else if (obj.Elements[i].Elements.length > 0 && !isFound) {
                isFound = isGridPresentInsidePanel(obj.Elements[i]);
            }
        }
    }
    return isFound;
}


//#region Populate Available Control ( for grid, scheduler)

function PopulateAvailableControl(fieldControlCollection, mainTable, isNewParams, IsAddColumnSelected) {
    if (!IsAddColumnSelected) {
        var mainItem = {
            Text: "Main", Items: [], IsSelected: false, IsCheckBoxVisible: false
        };

        var strProperty = "sfwEntityField";
        var isNewButton = false;
        if (isNewParams) {
            strProperty = "ID";
            isNewButton = true;
        }

        PopulateAvailableFields(strProperty, mainTable, mainItem, true, false, isNewButton);

        if (mainItem.Items.length > 0) {
            fieldControlCollection.push(mainItem);
        }
    }
};

//#endregion

//#region Populate Global Params( for grid, scheduler)

function PopulateGlobalParameters(objGlobleParameters, fieldControlCollection) {
    function AddInobjGlobalParam(itm) {
        if (itm.dictAttributes && itm.dictAttributes.ID) {
            var strFieldName = itm.dictAttributes.ID;
            if (!globalParameters.filter(function (itm) { return itm == strFieldName.trim(); })) {
                globalParameters.push(strFieldName.trim());
            }
            var mainItem = { Text: "~" + strFieldName, Items: [], IsSelected: false, IsCheckBoxVisible: true };
            objGlobalParam.Items.push(mainItem);
        }
    }
    if (objGlobleParameters) {

        var globalParameters = [];
        if (objGlobleParameters.Elements.length > 0) {
            var objGlobalParam = { Text: "Global Parameters", Items: [], IsSelected: false, IsCheckBoxVisible: false };
            angular.forEach(objGlobleParameters.Elements, AddInobjGlobalParam);
            if (objGlobalParam.Items.length > 0) {
                fieldControlCollection.push(objGlobalParam);

            }

        }
    }
};

//#endregion

//#region get navigation Params( for grid, scheduler)

function GetNavigationParameters(lstParameters) {
    var strParameters = "";
    if (lstParameters) {
        for (i = 0; i < lstParameters.length; i++) {
            var grdParam = lstParameters[i];
            if (!grdParam) {
                continue;
            }
            var strParamValue = grdParam.ParmeterValue;

            if (strParamValue) {
                var blnConstant = grdParam.ParmeterConstant;
                if (blnConstant)
                    strParamValue = "#" + strParamValue;

                var strParam = strParamValue;
                var strParamField = grdParam.ParmeterField;

                if (strParamValue.toLowerCase() != strParamField.toLowerCase())
                    strParam = strParamField + '=' + strParamValue;

                if (strParameters == "")
                    strParameters = strParam;
                else
                    strParameters += ';' + strParam;
            }
        }
    }
    return strParameters;
};

//#endregion


//#region Load Details (Forms and HTX)

function LoadDetails(formModel, objLoadDetails, ablnAddInUndoRedo, $rootScope, isFormLink) {
    var dummyLstLoadDetails = [];

    //Get the boolean flag for whether any of the new or update method is set at form level. This is as per discussion with Fwk team.
    var loadMethodSet = false;
    for (var frmIndex = 0, frmElementCount = formModel.Elements.length; frmIndex < frmElementCount; frmIndex++) {
        if (formModel.Elements[frmIndex].Name === "initialload") {
            for (var initialLoadIndex = 0, initialLoadElementCount = formModel.Elements[frmIndex].Elements.length; initialLoadIndex < initialLoadElementCount; initialLoadIndex++) {
                if (formModel.Elements[frmIndex].Elements[initialLoadIndex].Name === "callmethods") {
                    if (formModel.Elements[frmIndex].Elements[initialLoadIndex].dictAttributes.sfwMethodName) {
                        loadMethodSet = true;
                        break;
                    }
                }
            }
            break;
        }
    }

    for (var i = 0; i < formModel.Elements.length; i++) {
        if (formModel.Elements[i].Name == "loaddetails") {
            objLoadDetails = formModel.Elements[i];

            break;
        }
    }
    if (ablnAddInUndoRedo) {
        $rootScope.UndRedoBulkOp("Start");
    }
    var lstTable = undefined;
    if (isFormLink) {
        lstTable = formModel.Elements.filter(function (itm) { return itm.Name == "items"; });
    }
    else if (!isFormLink) {
        lstTable = formModel.Elements.filter(function (itm) { return itm.Name == "sfwTable"; });
    }
    if (lstTable && lstTable.length > 0) {
        if (!objLoadDetails) {
            objLoadDetails = {
                dictAttributes: {}, Children: [], Elements: [], Name: "loaddetails", Value: ""
            };
            if (ablnAddInUndoRedo) {
                $rootScope.PushItem(objLoadDetails, formModel.Elements);
            }
            else {
                formModel.Elements.push(objLoadDetails);
            }
        }
        UpdateLoadDetailsNodes(lstTable[0], dummyLstLoadDetails, $rootScope, ablnAddInUndoRedo, loadMethodSet);

        angular.forEach(objLoadDetails.Elements, function (itm) {

            var lstitems = dummyLstLoadDetails.filter(function (x) { return x.dictAttributes.ID == itm.dictAttributes.ID; });
            if (lstitems && lstitems.length > 0) {
                if (!lstitems[0].isLoadWhenRequired) {

                    if (ablnAddInUndoRedo) {
                        $rootScope.EditPropertyValue(lstitems[0].dictAttributes.sfwUpdateAutoLoad, lstitems[0].dictAttributes, "sfwUpdateAutoLoad", itm.dictAttributes.sfwUpdateAutoLoad);
                        $rootScope.EditPropertyValue(lstitems[0].dictAttributes.sfwNewAutoLoad, lstitems[0].dictAttributes, "sfwNewAutoLoad", itm.dictAttributes.sfwNewAutoLoad);
                    }

                    else {
                        lstitems[0].dictAttributes.sfwUpdateAutoLoad = itm.dictAttributes.sfwUpdateAutoLoad;
                        lstitems[0].dictAttributes.sfwNewAutoLoad = itm.dictAttributes.sfwNewAutoLoad;
                    }
                }
            }
        });
        if (ablnAddInUndoRedo) {
            $rootScope.EditPropertyValue(objLoadDetails.Elements, objLoadDetails, "Elements", []);
        }
        else {
            objLoadDetails.Elements = [];
        }

        for (var j = 0; j < dummyLstLoadDetails.length; j++) {
            if (ablnAddInUndoRedo) {
                $rootScope.PushItem(dummyLstLoadDetails[j], objLoadDetails.Elements);
            }
            else {
                objLoadDetails.Elements.push(dummyLstLoadDetails[j]);
            }
        }
    }
    if (ablnAddInUndoRedo) {
        $rootScope.UndRedoBulkOp("End");
    }

    return dummyLstLoadDetails;
};

function UpdateLoadDetailsNodes(aobjNode, aobjdummyLstLoadDetails, $rootScope, ablnAddInUndoRedo, loadMethodSet) {
    var strEntityField = aobjNode.dictAttributes.sfwEntityField;
    if ((aobjNode.Name == "sfwGridView" && !aobjNode.dictAttributes.sfwXMLLoadMethod) || aobjNode.Name == "sfwChart" || aobjNode.Name == "sfwListView" || aobjNode.Name == "sfwCheckBoxList" || aobjNode.Name == "sfwCalendar" || aobjNode.Name == "sfwScheduler" || aobjNode.Name == "udc") {
        if (strEntityField) {
            var aobjEntityField = aobjdummyLstLoadDetails.filter(function (itm) { return itm.Name == "entityfield" && itm.dictAttributes.ID == strEntityField; });
            if (aobjEntityField.length == 0) {

                var objEntityFields = {
                    Name: "entityfield", value: '', prefix: "", dictAttributes: {}, Elements: [], Children: []
                };


                objEntityFields.dictAttributes.ID = strEntityField;
                objEntityFields.isLoadWhenRequired = false;
                if (aobjNode.dictAttributes.sfwLoadWhenRequired && aobjNode.dictAttributes.sfwLoadWhenRequired == 'True') {
                    objEntityFields.dictAttributes.sfwUpdateAutoLoad = 'False';
                    objEntityFields.dictAttributes.sfwNewAutoLoad = 'False';
                    objEntityFields.isLoadWhenRequired = true;
                }
                else if (loadMethodSet) {
                    objEntityFields.dictAttributes.sfwNewAutoLoad = 'False';
                    objEntityFields.dictAttributes.sfwUpdateAutoLoad = 'False';
                }
                else {
                    objEntityFields.dictAttributes.sfwUpdateAutoLoad = 'True';
                    objEntityFields.dictAttributes.sfwNewAutoLoad = 'True';
                }
                if (ablnAddInUndoRedo) {
                    $rootScope.PushItem(objEntityFields, aobjdummyLstLoadDetails);
                }
                else {
                    aobjdummyLstLoadDetails.push(objEntityFields);
                }
            }
            else {
                if (aobjNode.dictAttributes.sfwLoadWhenRequired && aobjNode.dictAttributes.sfwLoadWhenRequired == 'True') {

                    if (ablnAddInUndoRedo) {
                        $rootScope.EditPropertyValue(aobjEntityField[0].dictAttributes.sfwUpdateAutoLoad, aobjEntityField[0].dictAttributes, "sfwUpdateAutoLoad", 'False');
                        $rootScope.EditPropertyValue(aobjEntityField[0].dictAttributes.sfwNewAutoLoad, aobjEntityField[0].dictAttributes, "sfwNewAutoLoad", 'False');
                        $rootScope.EditPropertyValue(aobjEntityField[0].isLoadWhenRequired, aobjEntityField[0], "isLoadWhenRequired", true);
                    }
                    else {
                        aobjEntityField[0].dictAttributes.sfwUpdateAutoLoad = 'False';
                        aobjEntityField[0].dictAttributes.sfwNewAutoLoad = 'False';
                        aobjEntityField[0].isLoadWhenRequired = true;
                    }
                }
            }
        }
    }
    else {
        if (strEntityField) {
            if (strEntityField.contains(".")) {
                strEntityField = strEntityField.substring(0, strEntityField.lastIndexOf('.'));
                var aobjEntityField = aobjdummyLstLoadDetails.filter(function (itm) { return itm.Name == "entityfield" && itm.dictAttributes.ID == strEntityField; });
                if (aobjEntityField.length == 0) {

                    var objEntityFields = {
                        Name: "entityfield", value: '', prefix: "", dictAttributes: {}, Elements: [], Children: []
                    };


                    objEntityFields.dictAttributes.ID = strEntityField;
                    if (loadMethodSet) {
                        objEntityFields.dictAttributes.sfwNewAutoLoad = "False";
                        objEntityFields.dictAttributes.sfwUpdateAutoLoad = "False";
                    }
                    else {
                        objEntityFields.dictAttributes.sfwUpdateAutoLoad = "True";
                        objEntityFields.dictAttributes.sfwNewAutoLoad = "True";
                    }

                    if (ablnAddInUndoRedo) {
                        $rootScope.PushItem(objEntityFields, aobjdummyLstLoadDetails);
                    }
                    else {
                        aobjdummyLstLoadDetails.push(objEntityFields);
                    }
                }
            }
        }
        angular.forEach(aobjNode.Elements, function (itm) {
            UpdateLoadDetailsNodes(itm, aobjdummyLstLoadDetails, $rootScope, ablnAddInUndoRedo, loadMethodSet);
        });


    }

    /* added this condition if "ListView" has Grid then we have to show grid view collection also in load details. */
    /* Bug 9971:In forms-if user add Grid inside Repeater control , on Load Details pop- up, collection is not displayed */

    if (aobjNode.Name == "sfwListView") {
        angular.forEach(aobjNode.Elements, function (itm) {
            UpdateLoadDetailsNodes(itm, aobjdummyLstLoadDetails, $rootScope, ablnAddInUndoRedo, loadMethodSet);
        });
    }
};

//#endregion
app.directive('formcontroldraggable', [function () {
    return {
        restrict: 'A',
        scope: {
            dragdata: '=',
            dragfromleft: '='

        },
        link: function (scope, element, attributes) {
            if (scope.dragdata) {
                var el = element[0];
                el.draggable = true;
                el.addEventListener('dragstart', handleDragStart, false);

            }
            function handleDragStart(e) {
                dragDropData = null;
                dragDropDataObject = null;
                dragfromleft = undefined;
                e.dataTransfer.effectAllowed = 'move';
                dragDropData = scope.dragdata;
                draggingDataFromLeft = scope.dragfromleft;
                dragDropDataObject = null;
                e.dataTransfer.setData("Text", "");
            }
        }
    };
}]);

app.directive('formcontroldroppable', ["$rootScope", "ngDialog", "$compile", "$EntityIntellisenseFactory", "$timeout", "$GetEntityFieldObjectService", "$ValidationService", "$SgMessagesService", function ($rootScope, ngDialog, $compile, $EntityIntellisenseFactory, $timeout, $GetEntityFieldObjectService, $ValidationService, $SgMessagesService) {
    return {
        restrict: "A",
        scope: {
            dropdata: '=',
            formodel: '=',
            lstdisplayentities: '=',
            entitytreename: '='
        },
        link: function (scope, element, attributes) {
            var el = element[0];

            el.addEventListener('dragover', handleDragOver, false);
            el.addEventListener('drop', handleDrop, false);
            el.addEventListener('dragleave', handleDragLeave, false);
            var col = $(element);
            var elhover;
            var eldropdown;

            scope.openControlList = function () {
                if (eldropdown) {
                    eldropdown.remove();
                }
                eldropdown = $compile('<div id="controlmenudropdown" class="dropdown-content-common" onclick="stopPropogation(event)" addcontroltemplate item="dropdata" formodel="formodel"></div>')(scope);
                eldropdown.css({
                    left: scope.rect.right - 200,
                    top: scope.rect.top + 8,
                    bottom: scope.rect.bottom
                });
                elhover.append(eldropdown);
            };
            // for adding controls to column - on hover
            $(element).hover(function () {

                if (scope.dropdata && !FindParent(scope.dropdata, "sfwGridView") && scope.dropdata.Name != "sfwTabSheet") {

                    $("[add-control-hover-trigger]").remove();

                    //  $(".row-col").remove();
                    elhover = $compile('<i class="fa fa-plus-circle plusicon" add-control-hover-trigger ng-click="openControlList()" aria-hidden="true" style="z-index:999"></i>')(scope);
                    scope.rect = this.getBoundingClientRect();
                    col.css({
                        'position': 'relative'
                    });
                    col.append(elhover);
                    //scope.colHeight = col[0] && col[0].offsetHeight;
                    //   var divs = $compile("<div class='row-col row-top-div'></div><div class='row-col col-left-div'></div><div class='row-col col-right-div'></div><div class='row-col col-bottom-div'></div>")(scope);
                    //   col.append(divs);
                    //   $timeout(function () {
                    //       $('.col-right-div,.col-left-div').css("height", scope.colHeight + 'px');
                    //   });
                }

            }, function () {
                col.find("[add-control-hover-trigger]").remove();
                col.css({
                    'position': ''
                });
                //if ($(".row-col").length) 
                //     $(".row-col").remove();
            });

            scope.getCellEntityName = function (objcell) {
                var entityforCell = "";
                var ObjGrid = FindParent(objcell, "sfwGridView");
                if (ObjGrid) {
                    entityforCell = getEntityBasedOnControl(ObjGrid);
                }
                else {
                    var Objdialog = FindParent(objcell, "sfwDialogPanel");
                    if (Objdialog) {
                        entityforCell = getEntityBasedOnControl(Objdialog);
                    }
                    else {
                        var Objlist = FindParent(objcell, "sfwListView");
                        if (Objlist) {
                            entityforCell = getEntityBasedOnControl(Objlist);
                        }
                        else {
                            entityforCell = scope.formodel.dictAttributes.sfwEntity;
                        }
                    }
                }

                return entityforCell;
            };

            scope.GetParent = function (itm) {
                var control = FindParent(itm, "sfwGridView", true);
                if (!control) {
                    control = FindParent(itm, "sfwDialogPanel", true);
                    if (!control) {
                        control = FindParent(itm, "sfwListView", true);
                    }
                }
                return control;
            };

            scope.GetEntityNameFromObject = function (control) {
                var strEntity;
                var lst = scope.formodel.Elements.filter(function (itm) { return itm.Name == "sfwTable"; });
                if (lst && lst.length > 0) {
                    var entityfieldname = GetEntityFieldNameFromControl(lst[0], control);
                    if (entityfieldname) {
                        if (entityfieldname == "InternalErrors" || entityfieldname == "ExternalErrors") {
                            strEntity = "entError";
                        }
                        else {
                            var objField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(scope.formodel.dictAttributes.sfwEntity, entityfieldname);
                            if (objField) {
                                strEntity = objField.Entity;
                            }
                            else {
                                strEntity = '';
                            }
                        }
                    }
                }
                return strEntity;
            };

            scope.CanDropControlFromOneCellToAnother = function () {
                var retVal = true;
                // get parent of drop data to check if parent is grid, dialog panel, listview
                var objParentControl = scope.GetParent(scope.dropdata);
                // get parent of selected control to check if parent is grid, dialog panel, listview
                var selectedControlParent = scope.GetParent(scope.formodel.SelectedControl);
                // sfwScheduler , sfwCalendar,  sfwChart i.e collection type controls can not be dropped inside other parent collection type control i.e grid, dialog panel, listview
                if (scope.formodel.SelectedControl && (scope.formodel.SelectedControl.Name == "sfwScheduler" || scope.formodel.SelectedControl.Name == "sfwCalendar" || scope.formodel.SelectedControl.Name == "sfwChart")) {
                    selectedControlParent = scope.formodel.SelectedControl;
                }
                if (objParentControl != selectedControlParent) {
                    // if drop data collection and selected control collection is same - not supported in s3
                    //var strEntity1 = scope.GetEntityNameFromObject(objParentControl);
                    //var strEntity2 = scope.GetEntityNameFromObject(selectedControlParent);
                    //if (!strEntity1 || !strEntity2 || strEntity1 != strEntity2) {
                    return false;
                    //}
                }
                return retVal;
            }

            scope.CanDropControl = function () {
                var retVal = true;
                var displayEntity = getDisplayedEntity(scope.lstdisplayentities);

                if (displayEntity) {
                    var control = scope.GetParent(scope.dropdata);
                    var selectedControlParent = scope.GetParent(scope.formodel.SelectedControl);
                    if ((control && !selectedControlParent) || (!control && selectedControlParent)) {
                        return false;
                    }
                    else if (control && selectedControlParent) {
                        var strEntity1 = scope.GetEntityNameFromObject(control);
                        var strEntity2 = scope.GetEntityNameFromObject(selectedControlParent);
                        if (!strEntity1 || !strEntity2 || strEntity1 != strEntity2) {
                            return false;
                        }
                    }

                    var strEntity = scope.formodel.dictAttributes.sfwEntity;
                    if (control) {
                        strEntity = scope.GetEntityNameFromObject(control);
                    }

                    if (displayEntity.strDisplayName && displayEntity.strDisplayName.contains(".")) {

                        var objField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(strEntity, displayEntity.strDisplayName);
                        if (objField) {
                            if (displayEntity.strID !== objField.Entity) {
                                return false;
                            }
                        }
                        else {
                            return false;
                        }
                    }
                    else if (!displayEntity.strParentID && displayEntity.strID !== strEntity) {
                        return false;
                    }
                    else if (displayEntity.strID === strEntity && dragDropDataObject && dragDropDataObject.DataType && (dragDropDataObject.DataType.indexOf(["Collection", "List", "Object", "CDOCollection"]) > -1)) {
                        retVal = false;
                    }
                    else if (displayEntity.strParentID && displayEntity.strParentID !== strEntity) {
                        retVal = false;
                    }
                }

                return retVal;
            }

            scope.isValidField = function (fullpath) {
                var displayEntity = getDisplayedEntity(scope.lstdisplayentities);
                var arrpath = fullpath.split(".");
                var isFound = false;
                var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                //var entity = scope.formodel.dictAttributes.sfwEntity;
                var entityforcell = scope.getCellEntityName(scope.dropdata);
                var entity = scope.entitytreename;
                var FieldEntity = "";
                if (entity == entityforcell) {
                    for (var i = 0; i < arrpath.length; i++) {
                        isFound = false;
                        var Attributes = [];
                        if (entity != "") {
                            var lst = entityIntellisenseList.filter(function (x) {
                                return x.ID == entity;
                            });
                            if (lst.length > 0) {
                                Attributes = lst[0].Attributes;
                            }

                            if (Attributes.length > 0) {
                                var lstAttr = Attributes.filter(function (x) {
                                    return x.ID == arrpath[i];
                                });
                                if (lstAttr.length > 0) {
                                    FieldEntity = entity;
                                    entity = lstAttr[0].Entity;
                                    isFound = true;
                                } else {
                                    entity = "";
                                }
                            } else {
                                entity = "";
                            }
                        }
                    }

                    if (isFound) {
                        if (FieldEntity != displayEntity.strID) {
                            isFound = false;
                        }
                    }
                }

                return isFound;
            };

            function handleDragOver(e) {

                if (canDropInForm(dragDropData, scope.dropdata)) {
                    if (e && e.preventDefault) {
                        e.preventDefault(); // Necessary. Allows us to drop.
                    }
                    e.dataTransfer.dropEffect = 'move';  // See the section on the DataTransfer object.
                    //if (typeof $(e.srcElement).attr("formcontroldroppable") !== typeof undefined && $(e.srcElement).attr("formcontroldroppable") !== false) {
                    //    $(e.srcElement).attr("style", "border-color:blue;color:blue");
                    //}
                }

                return false;
            }

            function handleDrop(e) {
                var strData = e.dataTransfer.getData("Text");
                if (strData) {
                    if (e) {
                        e.preventDefault();
                    }
                    strData = "";//return false;
                }
                var isValidDrop = false;
                // Stops some browsers from redirecting.
                if (e.stopPropagation) e.stopPropagation();
                var lookupfieldQueryId = "";
                if (strData == "" && lstEntityTreeFieldData != null) {
                    e.preventDefault();
                    var obj = lstEntityTreeFieldData;//JSON.parse(strData);
                    var Id = obj[0];
                    var DisplayName = obj[1];
                    var DataType = obj[2];
                    var data = obj[3];//JSON.parse(obj[3]);
                    var isparentTypeCollection = obj[4];
                    var fieldtype = obj[5];
                    lookupfieldQueryId = obj[6];

                    dragDropData = Id;
                    if (scope.formodel) {
                        var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                        var MainQuery = GetMainQueryFromFormObject(scope.formodel, entityIntellisenseList);
                        if (!MainQuery && data) {
                            dragDropData = data.Value;
                        }
                    }
                    dragDropDataObject = data;
                    var fullpath = Id;
                    if (DisplayName != "") {
                        fullpath = DisplayName + "." + Id;
                    }
                    if (fieldtype == "Column") {
                        isValidDrop = true;
                    } else {
                        isValidDrop = scope.isValidField(fullpath);
                        isValidDrop = true;
                    }
                    lstEntityTreeFieldData = null;

                }
                else {
                    if (strData == null || strData == "") {
                        isValidDrop = true;
                    }
                    lstEntityTreeFieldData = null;
                    if (e && e.preventDefault) {
                        e.preventDefault();
                    }
                }

                var data = dragDropData;
                var controlName = data;
                if (data && typeof data === "object" && data.Name) {
                    controlName = data.Name;
                }

                if (isValidDrop) {
                    if (scope.dropdata && ["sfwHyperLink", "sfwCascadingDropDownList", "sfwCheckBox", "sfwDropDownList", "sfwMultiSelectDropDownList", "sfwImage", "sfwLabel", "sfwRadioButton", "sfwRadioButtonList", "sfwTextBox", "sfwDateTimePicker", "sfwToolTipButton", "sfwJSONData", "sfwButton", "sfwButtonGroup"].indexOf(controlName) <= -1 && scope.dropdata.Name == "TemplateField") {
                        $SgMessagesService.Message('Message', "Cannot add the control " + controlName + " inside grid");
                    }
                    else if (scope.dropdata.Name == 'sfwButtonGroup' && FindParent(scope.dropdata, "sfwGridView") && ["sfwHyperLink", "sfwCascadingDropDownList", "sfwCheckBox", "sfwDropDownList", "sfwMultiSelectDropDownList", "sfwImage", "sfwLabel", "sfwRadioButton", "sfwRadioButtonList", "sfwTextBox", "sfwDateTimePicker", "sfwToolTipButton", "sfwJSONData", "sfwButton", "sfwButtonGroup"].indexOf(controlName) <= -1) {
                        $SgMessagesService.Message('Message', "Cannot add the control " + controlName + " inside button group present in a grid");
                    }
                    else if (dragDropDataObject) {
                        if (DataType != undefined) {
                            if (scope.formodel && scope.formodel.dictAttributes.sfwType == "Lookup" && scope.formodel.IsLookupCriteriaEnabled && scope.dropdata && scope.dropdata.Elements.length > 0 && scope.dropdata.Elements[0].Name == "sfwTabContainer") {
                                $SgMessagesService.Message('Message', "Can not add a control outside the criteria tab container");
                            }
                            else if (scope.formodel && scope.formodel.dictAttributes.sfwType == "Lookup" && scope.formodel.IsPrototypeLookupCriteriaEnabled && scope.dropdata && scope.dropdata.Elements.length > 0 && scope.dropdata.Elements[0].Name == "sfwTabContainer") {
                                $SgMessagesService.Message('Message', "Can not add a control outside the criteria tab container");
                            }
                            else if (scope.CanDropControl()) {
                                var dragDropDataType = DataType;

                                var astrCntrlClass = "";

                                if (isparentTypeCollection == 'true') {
                                    $SgMessagesService.Message('Message', "Can't Drop Collection field.");
                                }
                                else {
                                    if (dragDropDataType == "Object" || dragDropDataType == "List" || dragDropDataType == "Collection" || dragDropDataType == "CDOCollection") {
                                        $SgMessagesService.Message('Message', "You can't drop collection/object.");
                                        dragDropData = null;
                                        dragDropDataType = null;
                                    }
                                    else if (scope.formodel && scope.formodel.dictAttributes.sfwType == "Tooltip") {
                                        astrCntrlClass = "sfwLabel";
                                    }
                                    else if (dragDropDataType == "bool") {
                                        astrCntrlClass = "sfwCheckBox";
                                    }
                                    else if (dragDropDataObject.Value && dragDropDataObject.Value.endsWith("_value")) {
                                        astrCntrlClass = "sfwDropDownList";
                                    }
                                    else if ((dragDropDataObject.Value && dragDropDataObject.Value.endsWith("_description")) || dragDropDataObject.Type == "Expression") {
                                        astrCntrlClass = "sfwLabel";
                                    }
                                    else {
                                        astrCntrlClass = "sfwTextBox";
                                    }
                                }
                                if (astrCntrlClass != undefined && astrCntrlClass != "") {
                                    var sfxControlModel = CreateControl(scope.formodel, scope.dropdata, astrCntrlClass);
                                }

                                if (sfxControlModel) {
                                    var astrFieldName = "";
                                    var rawID = "";
                                    if (dragDropDataObject.Type === "Expression") {
                                        rawID = dragDropDataObject.ID;
                                    }
                                    else {
                                        rawID = dragDropDataObject.Value;
                                    }
                                    var capsNext = false;
                                    for (i = 0; i < rawID.length; i++) {
                                        if (i == 0) {
                                            astrFieldName = rawID[i].toUpperCase();
                                        }
                                        else if (rawID[i] == "_") {
                                            capsNext = true;
                                        }
                                        else {
                                            if (capsNext) {
                                                astrFieldName = astrFieldName + rawID[i].toUpperCase();
                                                capsNext = false;
                                            }
                                            else {
                                                astrFieldName = astrFieldName + rawID[i];
                                            }
                                        }
                                    }
                                    sfxControlModel.dictAttributes.ID = CreateControlID(scope.formodel, astrFieldName, astrCntrlClass, false);
                                    if (scope.formodel.dictAttributes.sfwType == "Lookup" && IsCriteriaField(scope.dropdata)) {
                                        sfxControlModel.dictAttributes.sfwDataField = dragDropData;
                                        sfxControlModel.dictAttributes.sfwQueryID = lookupfieldQueryId;
                                    }
                                    else {
                                        sfxControlModel.dictAttributes.sfwEntityField = fullpath;//GetItemPathForEntityObject(dragDropDataObject);
                                    }

                                    if (sfxControlModel.Name == "sfwTextBox" || sfxControlModel.Name == "sfwLabel") {

                                        if (scope.formodel.dictAttributes.sfwType == "Lookup") {
                                            if (dragDropDataType.toLowerCase() == "datetime" || dragDropDataType.toLowerCase() == "date") {
                                                sfxControlModel.dictAttributes.sfwDataType = "DateTime";
                                            }
                                            else if (dragDropDataType.toLowerCase() == "decimal" || dragDropDataType.toLowerCase().indexOf("int") > -1) {
                                                sfxControlModel.dictAttributes.sfwDataType = "Numeric";
                                            }
                                            else {
                                                sfxControlModel.dictAttributes.sfwDataType = "String";
                                            }
                                        }
                                        if (sfxControlModel.Name == "sfwLabel" && (dragDropDataObject.Value.toLowerCase() == "created_date" || dragDropDataObject.Value.toLowerCase() == "modified_date")) {
                                            sfxControlModel.dictAttributes.sfwDataFormat = "{0:G}";
                                        }
                                        else if (dragDropDataType.toLowerCase() == "datetime" || dragDropDataType.toLowerCase() == "date") {
                                            sfxControlModel.dictAttributes.sfwDataFormat = "{0:d}";
                                        }
                                        else if (dragDropDataType.toLowerCase() == "decimal" && (dragDropDataObject.Value.indexOf("_amt") > -1 ||
                                            dragDropDataObject.Value.indexOf("_amount") > -1)) {
                                            sfxControlModel.dictAttributes.sfwDataFormat = "{0:C}";
                                        }
                                        else if (dragDropDataObject.Value.contains("ssn")) {
                                            sfxControlModel.dictAttributes.sfwDataFormat = "{0:000-##-####}";
                                        }
                                        else if (dragDropDataObject.Value.contains("phone") || dragDropDataObject.Value.contains("fax")) {
                                            sfxControlModel.dictAttributes.sfwDataFormat = "{0:(###)###-####}";
                                        }
                                    }
                                    else if (sfxControlModel.Name == "sfwDropDownList") {
                                        if (endsWith(dragDropDataObject.Value, "_value")) {
                                            var displayEntity = getDisplayedEntity(scope.lstdisplayentities);
                                            var entityname = displayEntity.strID;
                                            var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                                            var strCodeGroup = GetCodeIDByValue(entityname, dragDropDataObject.Value, entityIntellisenseList);
                                            if (!strCodeGroup) {
                                                strCodeGroup = "0";
                                            }
                                            sfxControlModel.dictAttributes.sfwLoadType = "CodeGroup";
                                            // sfxControlModel.dictAttributes.sfwLoadSource = strCodeGroup;
                                            sfxControlModel.placeHolder = strCodeGroup;
                                        }
                                    }
                                }
                                //var lstGrids = [];
                                //FindControlListByName(scope.dropdata, "sfwGridView", lstGrids);
                                //FindControlListByName(scope.dropdata, "sfwChart", lstGrids);
                                //FindCaptionControlList(scope.dropdata, lstGrids)
                                var count = 0;
                                for (var i = 0; i < scope.dropdata.Elements.length; i++) {
                                    var canAddControl = false;
                                    if ($rootScope.lstWebControls && $rootScope.lstWebControls.length > 0) {
                                        var lst = $rootScope.lstWebControls.filter(function (x) {
                                            return x.ControlName == scope.dropdata.Elements[i].Name;
                                        });
                                        lst = JSON.parse(JSON.stringify(lst));
                                        if (lst && lst.length > 0) {
                                            canAddControl = CanAddControlToDropList(lst[0], scope.formodel, scope.dropdata.Elements[i], true);
                                            if (canAddControl) {
                                                count++;
                                            }
                                        }
                                    }
                                }
                                if (scope.formodel && scope.formodel.dictAttributes && scope.formodel.dictAttributes.sfwType == "Tooltip" && (dragDropDataObject.Type == "Object" || ["DateTime", "datetime"].indexOf(dragDropDataObject.DataType) > -1)) {
                                    canAddControl = false;
                                    $SgMessagesService.Message('Message', "drop is not allowed.");
                                    return true;
                                }
                                else if (scope.formodel && scope.formodel.dictAttributes && scope.formodel.dictAttributes.sfwType == "Lookup" && ["Object", "Collection", "CDOCollection", "List"].indexOf(dragDropDataObject.Type) > -1) {
                                    canAddControl = false;
                                    $SgMessagesService.Message('Message', "drop is not allowed.");
                                    return true;
                                }

                                else if (FindParent(scope.dropdata, "sfwDialogPanel") && ["Object", "Collection", "CDOCollection", "List"].indexOf(dragDropDataObject.Type) > -1) {
                                    canAddControl = false;
                                    $SgMessagesService.Message('Message', "drop is not allowed.");
                                    return true;
                                }
                                //else if (sfxControlModel && (count > 0 || ["Object", "Collection", "CDOCollection", "List"].indexOf(dragDropDataObject.Type) > -1)) {
                                //    var newScope = scope.$new(true);
                                //    newScope.model = scope.dropdata;
                                //    newScope.currentControl = sfxControlModel;
                                //    newScope.formmodel = scope.formodel;
                                //    newScope.dragdropdata = dragDropDataObject;
                                //    newScope.fieldName = dragDropDataObject.DisplayName;


                                //    newScope.objectTreeDragDropDialog = $rootScope.showDialog(newScope, "Drag Drop", "Form/views/ObjectTreeDragDropDialog.html", { width: 1000, height: 400 });


                                //}
                                else if (sfxControlModel) {
                                    scope.$apply(function () {
                                        var dropControl = scope.dropdata;
                                        if (scope.dropdata.Name == "TemplateField") {
                                            dropControl = scope.dropdata.Elements.filter(function (x) { return x.Name == "ItemTemplate" })[0];
                                        }
                                        $rootScope.PushItem(sfxControlModel, dropControl.Elements);
                                        SetFormSelectedControl(scope.formodel, sfxControlModel);
                                    });
                                }
                            }
                        }
                    }
                    else if (typeof (dragDropData) == "string") {
                        /* control which are excluding from Lookup/Bind To Query in maintenance Grid only Non editable controls are allowed.*/
                        var excludeControlsFromLookupGrid = ["sfwCascadingDropDownList", "sfwTextBox", "sfwSwitchCheckBox", "sfwRadioButtonList", "sfwRadioButton", "sfwMultiSelectDropDownList", "sfwDropDownList", "sfwCheckBoxList", "sfwCheckBox", "sfwDateTimePicker"];

                        var objGrid = FindParent(scope.dropdata, "sfwGridView");
                        if (data != undefined && data != null && data != "") {
                            if (scope.formodel && scope.formodel.dictAttributes.sfwType == "Lookup" && scope.formodel.IsLookupCriteriaEnabled && scope.dropdata && scope.dropdata.Elements.length > 0 && scope.dropdata.Elements[0].Name == "sfwTabContainer") {
                                $SgMessagesService.Message('Message', "Can not add a control outside the criteria tab container");
                            }
                            else if (scope.formodel && scope.formodel.dictAttributes.sfwType == "Lookup" && scope.formodel.IsPrototypeLookupCriteriaEnabled && scope.dropdata && scope.dropdata.Elements.length > 0 && scope.dropdata.Elements[0].Name == "sfwTabContainer") {
                                $SgMessagesService.Message('Message', "Can not add a control outside the criteria tab container");
                            }
                            else if (scope.formodel.dictAttributes.sfwType.toLowerCase() == "lookup" && excludeControlsFromLookupGrid.indexOf(dragDropData) > -1 && objGrid) {
                                $SgMessagesService.Message('Message', "Can not add control inside the Grid.");
                            }

                            else if (objGrid && objGrid.dictAttributes.sfwBoundToQuery && objGrid.dictAttributes.sfwBoundToQuery.toLowerCase() == "true" && excludeControlsFromLookupGrid.indexOf(dragDropData) > -1) {
                                $SgMessagesService.Message('Message', "Can not add control inside the Grid.");
                            }
                            else if (objGrid && ["sfwHyperLink", "sfwCascadingDropDownList", "sfwCheckBox", "sfwDropDownList", "sfwMultiSelectDropDownList", "sfwImage", "sfwLabel", "sfwRadioButton", "sfwRadioButtonList", "sfwTextBox", "sfwDateTimePicker", "sfwToolTipButton", "sfwJSONData", "sfwButton", "sfwButtonGroup"].indexOf(controlName) <= -1) {
                                $SgMessagesService.Message('Message', "Can not add a control " + controlName + " inside grid");
                            }
                            else {
                                if (objGrid && scope.dropdata.Name != "sfwLabel" && scope.dropdata.Name != "sfwButton" && scope.dropdata.Name != "sfwLinkButton" && scope.dropdata.Name != "sfwImageButton" && scope.dropdata.Name !== "sfwButtonGroup") {

                                    $rootScope.EditPropertyValue(objGrid.dictAttributes.AllowEditing, objGrid.dictAttributes, "AllowEditing", "True");
                                    $rootScope.EditPropertyValue(objGrid.dictAttributes.sfwTwoWayBinding, objGrid.dictAttributes, "sfwTwoWayBinding", "True");
                                    $rootScope.EditPropertyValue(objGrid.dictAttributes.sfwCommonFilterBox, objGrid.dictAttributes, "sfwCommonFilterBox", "False");
                                    $rootScope.EditPropertyValue(objGrid.dictAttributes.sfwFilterOnKeyPress, objGrid.dictAttributes, "sfwFilterOnKeyPress", "False");
                                }
                                addItemOnDropInForm(data, scope.dropdata, e, scope.formodel);
                            }
                        }

                        //var curscope = getScopeByFileName(scope.formodel.dictAttributes.ID);
                        //if (curscope) {
                        //    curscope.showOtherControl = false;
                        //    curscope.showHTMLControl = false;
                        //}
                    }
                    else {
                        if (data) {
                            var tempObj = {};
                            var aparent = scope.dropdata.ParentVM;
                            var blnissameparent = false;
                            while (aparent) {
                                if (aparent == data) {
                                    blnissameparent = true;
                                    break;
                                }
                                aparent = aparent.ParentVM;
                            }
                            if (!blnissameparent) {
                                if (scope.CanDropControlFromOneCellToAnother()) {
                                    angular.copy(data, tempObj);
                                    $rootScope.UndRedoBulkOp("Start");
                                    scope.$apply(function () {
                                        // new dragged object has to sync with selected form control                                                       
                                        tempObj.isSelected = true;
                                        if (scope.dropdata.Name === "TemplateField") {
                                            if (FindParent(dragDropData, "sfwGridView")) {
                                                var lst = scope.dropdata.Elements.filter(function (x) { return x.Name == "ItemTemplate" });
                                                if (lst && lst.length > 0) {
                                                    $rootScope.PushItem(tempObj, lst[0].Elements);
                                                    tempObj.ParentVM = lst[0];
                                                }
                                                if (data && data.ParentVM) {
                                                    $rootScope.DeleteItem(data, data.ParentVM.Elements);
                                                }
                                            }
                                        }
                                        else if ((dragDropData.Name === "sfwScheduler" && FindParent(scope.dropdata, "sfwDialogPanel")) || dragDropData.Name === "sfwTable") {
                                            $SgMessagesService.Message('Message', "drop is not allowed.");
                                        }
                                        else if (dragDropData.Name === "sfwGridView" && CandropControlIntoCell(dragDropData, scope.dropdata, "sfwListView")) {
                                            $SgMessagesService.Message('Message', "drop is not allowed.");
                                        }
                                        else if (CandropControlIntoCell(dragDropData, scope.dropdata, "sfwDialogPanel")) {
                                            $SgMessagesService.Message('Message', "drop is not allowed.");
                                        }
                                        else if (dragDropData.Name === "sfwTabSheet" && FindParent(scope.dropdata, "sfwTabContainer") && scope.dropdata.Name === "sfwTabSheet") {
                                            if (dragDropData.ParentVM.Name === "Tabs") {
                                                var dragIndex = dragDropData.ParentVM.Elements.indexOf(dragDropData);
                                                var dropIndex = scope.dropdata.ParentVM.Elements.indexOf(scope.dropdata);
                                                if (dragIndex > -1 && dropIndex > -1) {
                                                    $rootScope.UndRedoBulkOp("Start");
                                                    var model = dragDropData.ParentVM.Elements[dragIndex];
                                                    if (dragIndex < dropIndex) {
                                                        //removing
                                                        $rootScope.DeleteItem(dragDropData.ParentVM.Elements[dragIndex], dragDropData.ParentVM.Elements);                                                       //Adding
                                                        //Adding
                                                        $rootScope.InsertItem(model, dragDropData.ParentVM.Elements, dropIndex);
                                                    }
                                                    else {
                                                        //removing
                                                        $rootScope.DeleteItem(dragDropData.ParentVM.Elements[dragIndex], dragDropData.ParentVM.Elements);
                                                        //Adding
                                                        $rootScope.InsertItem(model, dragDropData.ParentVM.Elements, dropIndex);
                                                    }
                                                    $rootScope.UndRedoBulkOp("End");
                                                }
                                            }

                                        }
                                        else {
                                            scope.$evalAsync(function () {
                                                $rootScope.PushItem(tempObj, scope.dropdata.Elements);
                                                tempObj.ParentVM = scope.dropdata;
                                                SetFormSelectedControl(scope.formodel, tempObj, null);
                                                if (data && data.ParentVM) {
                                                    $rootScope.DeleteItem(data, data.ParentVM.Elements);
                                                }
                                            });
                                        }
                                    });
                                    $rootScope.UndRedoBulkOp("End");
                                }
                            }
                            else {
                                toastr.error("Same item cannot be dropped as child.");
                            }

                        }
                    }
                    // $(e.srcElement).removeAttr("style");
                    dragDropData = null;
                    dragDropDataObject = null;
                }
            }

            function handleDragLeave(e) {
                //if (typeof $(e.srcElement).attr("formcontroldroppable") !== typeof undefined && $(e.srcElement).attr("formcontroldroppable") !== false) {
                //    $(e.srcElement).removeAttr("style");
                //}
            }

            function canDropInForm(dragdata, dropdata) {

                if (FindParent(dragdata, "sfwGridView") && (dropdata.Name === "sfwColumn")) {
                    return false;
                }
                else if (!FindParent(dragdata, "sfwGridView") && dropdata.Name === "TemplateField") {
                    return false;
                }
                else if (FindParent(dragdata, "sfwGridView") !== FindParent(dropdata, "sfwGridView")) {
                    return false;
                }
                //removed by neha to fix bug id 12453 - no control other than label is getting dropped inside cell due to this condition. In drop function we are already validating if control is allowed inside grid or not so no need to check before drop
                //else if (scope.formodel.dictAttributes.sfwType.toLowerCase() == "lookup" && "sfwLabel" !== dragdata && isGridPresentInsidePanel(dropdata)) {
                //    return false;
                //}
                else if (scope.formodel.dictAttributes.sfwType.toLowerCase() == "lookup" && "sfwButton" !== dragdata && !isGridPresentInsidePanel(dropdata)) {
                    var objpanel = FindParent(dropdata, "sfwPanel");
                    if (objpanel && dropdata.Name == "sfwColumn" && objpanel.dictAttributes.ID == "pnlResult") {
                        return false;
                    }
                }
                return true;
            }

            function CandropControlIntoCell(dragdata, dropdata, ParentName) {
                var retValue = false;
                var dropDataParent = FindParent(scope.dropdata, ParentName);
                var dragDataParent = FindParent(dragDropData, ParentName);
                if (!dragDataParent && !dropDataParent) {
                    retValue = false;
                }
                else {
                    if (dragDataParent && dropDataParent && dragDataParent.dictAttributes && dropDataParent.dictAttributes) {
                        if (dragDataParent.dictAttributes.ID != dropDataParent.dictAttributes.ID) {
                            retValue = true;
                        }
                    }

                    else if (!dragDataParent || !dropDataParent) {
                        retValue = true;
                    }
                }

                return retValue;
            }

            var RepeaterControldialog;
            scope.objRepeaterControl;


            function addItemOnDropInForm(dragdata, dropdata, event, formodel) {
                if (dragdata) {
                    var strControlName = dragdata;
                    if (formodel.dictAttributes.sfwType === "Report") {
                        var strObjectField = "";
                        if (draggingDataFromLeft) {
                            strControlName = "sfwTextBox";
                            strObjectField = dragdata;
                        }
                        objControl = AddControlToCell(strControlName, undefined, dropdata, formodel);
                        if (objControl && strObjectField) {
                            scope.$evalAsync(function () {
                                objControl.dictAttributes.sfwObjectField = strObjectField;
                            });
                            objControl.dictAttributes.ID = strObjectField;
                        }
                    }
                    else {
                        if (strControlName == "sfwButton") {
                            var newScope = scope.$new(true);
                            newScope.item = dropdata;
                            newScope.formodel = scope.formodel;
                            var objListView = FindParent(dropdata, "sfwListView");
                            newScope.ParentModel = objListView;
                            if (objListView) {
                                newScope.ParentModel = objListView;
                            }



                            newScope.CreateButtonDialog = $rootScope.showDialog(newScope, "Button Details", "Form/views/CreateButtonWizard/CreateButtonControl.html", { width: 660, height: 550 });
                        }
                        else if (strControlName == "sfwListView") {
                            var strID = CreateControlID(scope.formodel, "RepeaterViewPanel", "sfwListView");
                            var prefix = "swc";
                            /*scope.objRepeaterControl = { Name: "sfwListView", value: '', prefix: prefix, dictAttributes: { ID: strID }, Elements: [], Children: [] };
                            scope.ParentEntityName = formodel.dictAttributes.sfwEntity;
                            scope.objRepeaterControl.selectedobjecttreefield;
                            scope.objRepeaterControl.lstselectedobjecttreefields = [];
                            RepeaterControldialog = ngDialog.open({
                                template: 'RepeaterControlTemplate',
                                scope: scope,
                                closeByDocument: false
                            });*/


                            var newRepeaterControlScope = scope.$new();
                            newRepeaterControlScope.ValidateRepeaterProp = function () {
                                var isValid = false;
                                newRepeaterControlScope.ErrorMessageForDisplay = "";
                                if (!newRepeaterControlScope.objRepeaterControl.dictAttributes.ID) {
                                    isValid = true;
                                    newRepeaterControlScope.ErrorMessageForDisplay = "Error : Please Enter ID.";
                                } else if (newRepeaterControlScope.objRepeaterControl.dictAttributes.ID && !isValidIdentifier(newRepeaterControlScope.objRepeaterControl.dictAttributes.ID, false, false)) {
                                    isValid = true;
                                    newRepeaterControlScope.ErrorMessageForDisplay = "Error : Invalid ID.";
                                } else if (newRepeaterControlScope.objRepeaterControl.dictAttributes.ID) {
                                    var lstIds = [];
                                    CheckforDuplicateID(scope.formodel, newRepeaterControlScope.objRepeaterControl.dictAttributes.ID, lstIds);
                                    if (lstIds.length > 0) {
                                        isValid = true;
                                        newRepeaterControlScope.ErrorMessageForDisplay = "Error : Duplicate ID.";
                                    }
                                }
                                if (!newRepeaterControlScope.objRepeaterControl.selectedobjecttreefield) {
                                    isValid = true;
                                    newRepeaterControlScope.ErrorMessageForDisplay = "Error : Please Select a valid collection.";
                                }
                                else if (newRepeaterControlScope.objRepeaterControl.selectedobjecttreefield && (newRepeaterControlScope.objRepeaterControl.selectedobjecttreefield.DataType != "Collection" && newRepeaterControlScope.objRepeaterControl.selectedobjecttreefield.DataType != "CDOCollection" && newRepeaterControlScope.objRepeaterControl.selectedobjecttreefield.DataType != "List")) {
                                    newRepeaterControlScope.ErrorMessageForDisplay = "Error : Please Select a valid collection.";
                                    isValid = true;
                                }
                                return isValid;
                            };



                            newRepeaterControlScope.onRepeaterControlOkClick = function () {
                                if (newRepeaterControlScope.objRepeaterControl) {
                                    newRepeaterControlScope.objRepeaterControl.dictAttributes.sfwSelection = "Many";
                                    newRepeaterControlScope.objRepeaterControl.dictAttributes.sfwCaption = "List View";
                                    newRepeaterControlScope.objRepeaterControl.dictAttributes.AllowPaging = "True";
                                    newRepeaterControlScope.objRepeaterControl.dictAttributes.PageSize = "1";

                                    var selectedField = newRepeaterControlScope.objRepeaterControl.selectedobjecttreefield;

                                    if (selectedField) {
                                        var displayEntity = getDisplayedEntity(newRepeaterControlScope.objRepeaterControl.LstDisplayedEntities);
                                        var displayName = displayEntity.strDisplayName;
                                        fieldName = selectedField.ID;
                                        if (displayName != "") {
                                            fieldName = displayName + "." + selectedField.ID;
                                        }
                                        var entitycollname = fieldName; //GetItemPathForEntityObject(selectedField);
                                        newRepeaterControlScope.objRepeaterControl.dictAttributes.sfwEntityField = entitycollname;
                                        var parentenetityname = selectedField.Entity;
                                        var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                                        newRepeaterControlScope.objRepeaterControl.dictAttributes.sfwDataKeyNames = GetTableKeyFields(parentenetityname, entityIntellisenseList);
                                    }

                                    var prefix = "swc";

                                    var objListTableModel = { Name: "sfwTable", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                                    objListTableModel.ParentVM = newRepeaterControlScope.objRepeaterControl;
                                    var strCtrlId = CreateControlID(newRepeaterControlScope.formodel, "NewPage", "sfwTable");
                                    objListTableModel.dictAttributes.ID = strCtrlId;

                                    var sfxRowModel = { Name: "sfwRow", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                                    sfxRowModel.ParentVM = objListTableModel;

                                    var newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                                    newSfxCellModel.ParentVM = sfxRowModel;
                                    sfxRowModel.Elements.push(newSfxCellModel);

                                    newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                                    newSfxCellModel.ParentVM = sfxRowModel;
                                    sfxRowModel.Elements.push(newSfxCellModel);

                                    newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                                    newSfxCellModel.ParentVM = sfxRowModel;
                                    sfxRowModel.Elements.push(newSfxCellModel);

                                    newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                                    newSfxCellModel.ParentVM = sfxRowModel;
                                    sfxRowModel.Elements.push(newSfxCellModel);

                                    objListTableModel.Elements.push(sfxRowModel);
                                    newRepeaterControlScope.objRepeaterControl.Elements.push(objListTableModel);
                                    newRepeaterControlScope.objRepeaterControl.initialvisibilty = true;
                                    newRepeaterControlScope.objRepeaterControl.isLoaded = true;
                                    $rootScope.PushItem(newRepeaterControlScope.objRepeaterControl, newRepeaterControlScope.dropdata.Elements);
                                }
                                newRepeaterControlScope.onRepeaterControlCancelClick();
                            };

                            newRepeaterControlScope.onRepeaterControlCancelClick = function () {

                                newRepeaterControlScope.RepeaterControldialog.close();
                            };


                            newRepeaterControlScope.objRepeaterControl = { Name: "sfwListView", value: '', prefix: prefix, dictAttributes: { ID: strID }, Elements: [], Children: [] };
                            newRepeaterControlScope.ParentEntityName = formodel.dictAttributes.sfwEntity;
                            newRepeaterControlScope.objRepeaterControl.selectedobjecttreefield;
                            newRepeaterControlScope.objRepeaterControl.lstselectedobjecttreefields = [];
                            newRepeaterControlScope.dropdata = scope.dropdata;
                            newRepeaterControlScope.formodel = scope.formodel;

                            newRepeaterControlScope.RepeaterControldialog = $rootScope.showDialog(newRepeaterControlScope, "Repeater Control", "Form/views/RepeaterControlTemplate.html", { width: 500, height: 600 });


                        }
                        else if (strControlName == "sfwGridView") {
                            if (FindParent(dropdata, "sfwDialogPanel")) {
                                $SgMessagesService.Message('Message', "Cannot drop a grid inside dialog panel.");
                            }
                            else {
                                var newScope = scope.$new();
                                newScope.formobject = formodel;
                                newScope.model = undefined;
                                newScope.dropdata = scope.dropdata;
                                newScope.IsAddNewGrid = true;
                                newScope.IsAddFromToolBox = true;
                                if (strControlName == "sfwGridView") {
                                    if (FindParent(dropdata, "sfwListView")) {
                                        newScope.formobject.SelectedControl.IsGridChildOfListView = true;

                                        //Idealy dropdata and newScope.formobject.SelectedControl should be same, but in some cases it's and issue.
                                        //To avoid that issue for now setting property "IsGridChildOfListView" for dropdata, without changing existing code.
                                        dropdata.IsGridChildOfListView = true;
                                    }
                                }
                                newScope.BindToQueryDialog = $rootScope.showDialog(newScope, "Bind to Query", "Form/views/BindToQuery.html", { width: 600, height: 250 });
                            }
                        }
                        else {
                            AddControlToCell(strControlName, undefined, dropdata, formodel);
                        }
                    }
                }
            }


            function AddControlToCell(cntrlName, sfxControlModel, cellVM, formodel) {

                if (!sfxControlModel) {
                    sfxControlModel = CreateControl(formodel, cellVM, cntrlName);
                }

                if (sfxControlModel != null && sfxControlModel.Name != "udc") {
                    scope.$apply(function () {
                        function iGetMainQuery(itm) {
                            if (!MainQuery) {
                                var strQuery = itm.dictAttributes.sfwQueryRef;
                                if (itm.Name == "query" && !scope.IsSubQuery(strQuery)) {
                                    MainQuery = itm;
                                }
                            }
                        }
                        if (sfxControlModel.Name == "sfwDialogPanel" || sfxControlModel.Name == "sfwPanel") {
                            sfxControlModel.initialvisibilty = true;
                            sfxControlModel.isLoaded = true;
                        }
                        if (sfxControlModel.Name != "udc") {
                            if (cellVM.Name == "TemplateField") {
                                var lst = cellVM.Elements.filter(function (x) { return x.Name == "ItemTemplate" });
                                if (lst && lst.length > 0) {
                                    $rootScope.PushItem(sfxControlModel, lst[0].Elements);
                                    sfxControlModel.ParentVM = lst[0];
                                }
                            }
                            else {
                                $rootScope.PushItem(sfxControlModel, cellVM.Elements);
                            }
                        }
                        SetFormSelectedControl(formodel, sfxControlModel);

                        if (formodel && formodel.dictAttributes && formodel.dictAttributes.sfwType == "Lookup") {
                            if (sfxControlModel.Name != "sfwLabel" && sfxControlModel.Name != "sfwLiteral"
                                && sfxControlModel.Name != "RequiredFieldValidator" && sfxControlModel.Name != "CompareValidator"
                                && sfxControlModel.Name != "hr" && sfxControlModel.Name != "br"
                                && sfxControlModel.Name != "sfwUserDefaults" && sfxControlModel.Name != "CompareValidator") {
                                var lst = formodel.Elements.filter(function (itm) { return itm.Name == "initialload"; });
                                if (lst && lst.length > 0) {
                                    var initialLoad = lst[0];
                                    var MainQuery;

                                    angular.forEach(initialLoad.Elements, iGetMainQuery);
                                    if (MainQuery) {
                                        sfxControlModel.dictAttributes.sfwQueryID = MainQuery.dictAttributes.ID;
                                    }
                                }
                            }

                        }

                        var filescope = getCurrentFileScope();
                        if (filescope && filescope.selectControl) {
                            filescope.selectControl(sfxControlModel, event);
                        }
                    });
                    //this.ObjVM.DesignVM.CheckAndUpdateSelectedControlStatus(this.MirrorElements[this.MirrorElements.Count - 1] as SfxControlVM, false);
                    //this.PopulateObjectID(this.ObjVM.Model, sfxControlModel);
                }


                //#region Add User Control
                if (sfxControlModel != undefined && sfxControlModel.Name == "udc") {

                    var newScope = scope.$new();
                    newScope.dropdata = scope.dropdata;
                    newScope.formodel = scope.formodel;
                    newScope.objSetUCProp = { StrId: sfxControlModel.dictAttributes.ID, StrName: '', StrEntityField: '', StrResource: '' };
                    newScope.objSetUCProp.IsAddedFromObjectTree = false;
                    newScope.onUserControlOkClick = function () {
                        sfxControlModel.dictAttributes.ID = newScope.objSetUCProp.StrId;
                        sfxControlModel.dictAttributes.Name = newScope.objSetUCProp.StrName;
                        if ((scope.formodel.dictAttributes.sfwEntity != undefined && scope.formodel.dictAttributes.sfwEntity != "") && (newScope.objSetUCProp.StrEntityField != undefined && newScope.objSetUCProp.StrEntityField != "")) {
                            if (newScope.objSetUCProp.StrEntityField.match("^" + scope.formodel.dictAttributes.sfwEntity)) {
                                sfxControlModel.dictAttributes.sfwEntityField = scope.formodel.dictAttributes.sfwEntity + "." + newScope.objSetUCProp.StrEntityField;
                            }
                            else {
                                sfxControlModel.dictAttributes.sfwEntityField = newScope.objSetUCProp.StrEntityField;
                            }
                        }
                        else {
                            sfxControlModel.dictAttributes.sfwEntityField = newScope.objSetUCProp.StrEntityField;
                        }
                        sfxControlModel.dictAttributes.sfwResource = newScope.objSetUCProp.StrResource;

                        if (sfxControlModel.dictAttributes.Name != undefined && sfxControlModel.dictAttributes.Name != "") {
                            var fileList = [];
                            var obj = { FileName: sfxControlModel.dictAttributes.Name, ID: sfxControlModel.dictAttributes.ID };
                            fileList.push(obj);
                            $.connection.hubForm.server.getUserControlModel(fileList, "").done(function (udcFileList) {
                                var formScope = getCurrentFileScope();
                                formScope.receiveUcMainTable(udcFileList);
                            });
                        }
                        $rootScope.PushItem(sfxControlModel, cellVM.Elements);
                        SetFormSelectedControl(scope.formodel, sfxControlModel);
                        newScope.onUserControlCancelClick();

                        //#region Receive User Control Table Model

                        //#endregion


                    };

                    newScope.onUserControlCancelClick = function () {
                        var formScope = getCurrentFileScope();
                        if (formScope && formScope.validationErrorList) {
                            $ValidationService.removeObjInToArray(formScope.validationErrorList, newScope.objSetUCProp);
                        }
                        if (ucPropDialog) {
                            ucPropDialog.close();
                        }
                    };

                    newScope.ValidateUserProp = function () {
                        var retVal = false;
                        newScope.ErrorMessageForDisplay = "";
                        if (newScope.objSetUCProp.StrId == undefined || newScope.objSetUCProp.StrId == "") {
                            newScope.ErrorMessageForDisplay = "Error: Enter the ID.";
                            retVal = true;
                        }
                        else {
                            var lstIds = [];
                            CheckforDuplicateID(scope.formodel, newScope.objSetUCProp.StrId, lstIds);
                            if (lstIds.length > 0) {
                                newScope.ErrorMessageForDisplay = "Error: Duplicate ID.";
                                retVal = true;
                            } else if (!isValidIdentifier(newScope.objSetUCProp.StrId, false, false)) {
                                newScope.ErrorMessageForDisplay = "Error: Invalid ID.";
                                retVal = true;
                            }
                        }
                        if (!newScope.objSetUCProp.StrName || newScope.objSetUCProp.StrName == '') {
                            newScope.ErrorMessageForDisplay = "Please Enter Active Form.";
                            retVal = true;
                        }
                        //else if (!newScope.objSetUCProp.StrEntityField || newScope.objSetUCProp.StrEntityField == "") {
                        //    newScope.ErrorMessageForDisplay = "Please Enter Entity field.";
                        //    retVal = true;
                        //}
                        else if (!newScope.objSetUCProp.StrResource || newScope.objSetUCProp.StrResource == '') {
                            newScope.ErrorMessageForDisplay = "Please Enter Resource.";
                            retVal = true;
                        }

                        if (newScope.ErrorMessageForDisplay == undefined || newScope.ErrorMessageForDisplay == "") {
                            if (newScope.objSetUCProp.StrEntityField != undefined && newScope.objSetUCProp.StrEntityField != "") {
                                var object = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(newScope.formodel.dictAttributes.sfwEntity, newScope.objSetUCProp.StrEntityField);
                                if (!object || object.Type != "Object") {
                                    newScope.ErrorMessageForDisplay = "Entity Field should be Object.";
                                    retVal = true;
                                }
                            }
                        }
                        if (newScope.objSetUCProp.errors && $ValidationService.isEmptyObj(newScope.objSetUCProp.errors)) {
                            retVal = true;
                        }
                        return retVal;
                    };

                    var ucPropDialog = $rootScope.showDialog(newScope, "User Control", "Form/views/SetUserControlProperties.html");
                    newScope.receiveUcMainTable = function (data, strUcId) {
                        var table;
                        for (var i = 0; i < scope.formodel.Elements.length; i++) {
                            if (scope.formodel.Elements[i].Name == "sfwTable") {
                                table = scope.formodel.Elements[i];
                                break;
                            }
                        }
                        var ucControl = FindControlByID(table, strUcId);
                        if (ucControl) {
                            ucControl.UcChild = data;
                        }
                    };
                }

                //#endregion


                return sfxControlModel;
            }

            scope.IsSubQuery = function (strQuery) {
                function iIssubselectquery(Query) {
                    if (!retValue) {
                        if (Query.ID == strQueryName && Query.QueryType.toLowerCase() == "subselectquery") {
                            retValue = true;
                        }
                    }
                }
                var retValue = false;
                if (strQuery != "" && strQuery != undefined) {
                    var strCDOName = strQuery.substring(0, strQuery.indexOf("."));
                    var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                    var lstObj = entityIntellisenseList.filter(function (x) {
                        return x.ID == strCDOName;
                    });
                    if (lstObj && lstObj.length > 0) {

                        var strQueryName = strQuery.substring(strQuery.indexOf(".") + 1);

                        angular.forEach(lstObj[0].Queries, iIssubselectquery);
                    }
                }

                return retValue;
            };


            scope.receiveUcMainTable = function (data, strUcId) {

                var table;
                for (var i = 0; i < scope.formodel.Elements.length; i++) {
                    if (scope.formodel.Elements[i].Name == "sfwTable") {
                        table = scope.formodel.Elements[i];
                        break;
                    }
                }

                var ucControl = FindControlByID(table, strUcId);
                if (ucControl) {
                    ucControl.UcChild = data;
                }
            };
        }
    };
}]);

app.directive('commonpropertiesdirective', ["$compile", "$rootScope", "ngDialog", "$filter", "$EntityIntellisenseFactory", "$NavigateToFileService", "hubcontext", "$ValidationService", "CONSTANTS", "$ValidateBaseModelStructure", "$Entityintellisenseservice", "$GetEntityFieldObjectService", "$SgMessagesService", "$GetGridEntity", function ($compile, $rootScope, ngDialog, $filter, $EntityIntellisenseFactory, $NavigateToFileService, hubcontext, $ValidationService, CONST, $ValidateBaseModelStructure, $Entityintellisenseservice, $GetEntityFieldObjectService, $SgMessagesService, $GetGridEntity) {

    return {
        restrict: "E",
        replace: true,
        scope: {
            model: '=',
            parent: '=',
            formobject: '=',
            currentpanel: '=',
            isformlink: '=',
            lstloadedentitytrees: '=',
            lstloadedentitycolumnstree: '=',
            entityTreeName: '=',
            objgridboundedquery: '='
        },
        link: function (scope, element, attributes) {
            //#region Init Section
            var unwatch = scope.$watch('entityTreeName', function (newVal, oldVal) {
                scope.entityName = scope.entityTreeName;
                scope.setEntityName();
            });

            scope.InitByControl = function () {
                scope.ResetAdvanceProperties();
                scope.Title = "Object Method";

                if (scope.formobject && scope.formobject.SelectedControl && scope.formobject.SelectedControl.dictAttributes.sfwExecuteMethodType) {
                    if (scope.formobject.SelectedControl.dictAttributes.sfwExecuteMethodType == "ObjectMethod") {
                        scope.Title = "Object Method";
                    }
                    else if (scope.formobject.SelectedControl.dictAttributes.sfwExecuteMethodType == "XmlMethod") {
                        scope.Title = "Xml Method";
                    }
                    else if (scope.formobject.SelectedControl.dictAttributes.sfwExecuteMethodType == "Rule") {
                        scope.Title = "Rule";
                    }
                }
                //scope.entityName = "";
                //if (scope.formobject && scope.formobject.dictAttributes && scope.formobject.dictAttributes.ID) {
                //    var curscope = getScopeByFileName(scope.formobject.dictAttributes.ID);

                //    if (scope.IsCorrespondence) {
                //        scope.entityName = scope.formobject.dictAttributes.sfwEntity;
                //    }
                //    else {
                //        if (curscope && curscope.entityTreeName) {
                //            scope.entityName = curscope.entityTreeName;
                //        }
                //    }
                //}

                if (scope.model && scope.model.Name == "udc") {
                    if (!scope.model.dictAttributes.Visible) {
                        scope.model.dictAttributes.Visible = "True";
                    }
                }

                scope.lstHardErrorData = undefined; // reset hard error data when control change
                scope.$evalAsync(function () {
                    scope.IsSearchCriteriaSelected = false;
                    if (scope.IsLookup) {
                        scope.IsSearchCriteriaSelected = IsCriteriaField(scope.model);
                    }
                    else {
                        scope.isFilterCriteria = false;
                        var objPanel = FindParent(scope.model, "sfwPanel");
                        if (objPanel) {
                            var lstButtons = [];
                            FindControlListByName(objPanel, "sfwButton", lstButtons);
                            var lstFilterButtons = lstButtons.filter(function (itm) { return itm.dictAttributes.sfwMethodName === "btnGridSearch_Click" });
                            if (lstFilterButtons.some(function (itm) { return !itm.dictAttributes.sfwNavigationParameter || (itm.dictAttributes.sfwNavigationParameter && itm.dictAttributes.sfwNavigationParameter.contains(scope.model.dictAttributes.ID)) })) {
                                scope.isFilterCriteria = true;
                            }
                            else {
                                var lstButtons = getDescendents(scope.formobject, "sfwButton");
                                var lstFilterButtons = lstButtons.filter(function (itm) { return itm.sfwMethodName === "btnGridSearch_Click" });
                                if (lstFilterButtons.some(function (itm) { return itm.dictAttributes.sfwNavigationParameter && itm.dictAttributes.sfwNavigationParameter.contains(scope.model.dictAttributes.ID) })) {
                                    scope.isFilterCriteria = true;
                                }
                            }
                        }
                    }
                    if (scope.formobject && scope.formobject.dictAttributes && scope.formobject.dictAttributes.ID.startsWith("wfp")) {
                        scope.IsSearchCriteriaSelected = false;
                    }

                });
                scope.model.IsChildOfGrid = false;
                var objGridView = FindParent(scope.model, "sfwGridView");
                if (objGridView) {
                    scope.objGridView = objGridView;
                    scope.model.IsChildOfGrid = true;
                    scope.setEntityName();
                }
                scope.RelatedControls = [];
                scope.RelatedControls.push("");
                scope.lstRelatedGrid = [];
                scope.lstMethodType = [];
                scope.lstRelatedGrid.push("");
                scope.lstRelatedDialog = [];
                scope.lstServerMethod = [];
                scope.lstBooleanValues = [];
                scope.lstExecuteAfterSuccessButton = [];
                scope.lstCascadingDropDwonParent = [];
                scope.lstCascadingDropDwonParent.push("");
                scope.lstMethodType.push("ObjectMethod");
                scope.lstMethodType.push("XmlMethod");
                scope.lstMethodType.push("Rule");


                scope.LoadWebControlProperties();

                if (scope.isformlink == undefined || !scope.isformlink)
                    scope.LoadControlToValidate();

                scope.findCascadingParentControl();
                if (scope.currentpanel && scope.currentpanel.Elements.length > 0) {
                    scope.CurrentTable = scope.currentpanel.Elements[0];//FindParent(scope.model, "sfwTable");
                }

                if (scope.isformlink == undefined || !scope.isformlink)
                    scope.LoadControlToCompare();

                scope.LoadRelatedControlTextbox();
                if (scope.model) {
                    if (scope.model.Name == "sfwImageButton") {
                        scope.RelatedControls = PopulateAssociatedControlsForRetriveButton(scope.model);
                    }
                    else {
                        scope.RelatedControls = PopulateAssociatedControls(scope.model);
                    }

                    if (scope.model.IsChildOfGrid) {
                        var currentGridTable = FindParent(scope.model, "sfwTable");
                        if (currentGridTable) {
                            FindControlListByName(currentGridTable, "sfwButton", scope.lstRelatedGrid);
                            if (scope.lstRelatedGrid.length > 0) {
                                var lstRelatedButton = [];
                                angular.copy(scope.lstRelatedGrid, lstRelatedButton);
                                scope.lstRelatedGrid = [];
                                lstRelatedButton.filter(function (x) {
                                    if (x.dictAttributes && x.dictAttributes.ID) {
                                        scope.lstRelatedGrid.push(x.dictAttributes.ID);
                                    }
                                });
                            }
                        }
                        scope.lstRelatedGrid.splice(0, 0, '');

                    }
                    else if ((scope.model.dictAttributes.sfwMethodName != undefined && scope.model.dictAttributes.sfwMethodName != "") && scope.model.dictAttributes.sfwMethodName == "btnResetFilterGrid_Click") {
                        PopulateRelatedGrid(scope.formobject, scope.lstRelatedGrid, true);
                    }
                    else {
                        PopulateRelatedGrid(scope.formobject, scope.lstRelatedGrid, false);

                    }
                }

                scope.InitOnDblClick();
                scope.PopulateSelection();
                if (scope.model && (scope.model.Name == "sfwMultiSelectDropDownList" || scope.model.Name == "sfwChart")) {
                    scope.PopulateBooleanValues();
                }
                if (scope.model && scope.model.Name == "sfwWizardStep") {
                    scope.PopulateRelatedButton();
                }

                if (scope.model && (scope.model.Name == "sfwButton" || scope.model.Name == "sfwLinkButton" || scope.model.Name == "sfwImageButton")) {
                    scope.MessageIDText = "Message ID:";
                    scope.LoadButtonMethodDescription();
                    scope.PopulateOnClientClick();
                    scope.PopulateSecurityLevel();
                    scope.PopulateExecuteAfterSuccessButton();

                    if (scope.model.dictAttributes.sfwMethodName == "btnNew_Click") {
                        scope.PoulateRelatedControlForNew();
                    }

                    if (scope.model.dictAttributes.sfwMethodName == "btnOpenPopupDialog_Click"
                        || scope.model.dictAttributes.sfwMethodName == "btnNewPopupDialog_Click"
                        || scope.model.dictAttributes.sfwMethodName == "btnFinishPopupDialog_Click"
                        || scope.model.dictAttributes.sfwMethodName == "btnClosePopupDialog_Click") {
                        scope.lstRelatedDialog = PopulateRelatedDialogList(scope.MainTable, scope.model);
                    }
                    var RemoteObjectName = "srvCommon";
                    if (scope.formobject && scope.formobject.dictAttributes.sfwRemoteObject) {
                        RemoteObjectName = scope.formobject.dictAttributes.sfwRemoteObject;
                    }

                    var objServerObject = GetServerMethodObject(RemoteObjectName, scope.formobject.RemoteObjectCollection);
                    var lstObjectMethods = GetObjectMethods($EntityIntellisenseFactory.getEntityIntellisense(), scope.formobject.dictAttributes.sfwEntity);
                    scope.lstServerMethod = PopulateServerMethod(lstObjectMethods, scope.model, objServerObject);
                    scope.model.ObjectMethodText = "Server Method :";
                    if (scope.model.dictAttributes.sfwMethodName == "btnCopyRecord_Click" ||
                        scope.model.dictAttributes.sfwMethodName == "btnExecuteBusinessMethodSelectRows_Click"
                        || scope.model.dictAttributes.sfwMethodName == "btnValidateExecuteBusinessMethod_Click"
                        || scope.model.dictAttributes.sfwMethodName == "btnExecuteBusinessMethod_Click"
                        || scope.model.dictAttributes.sfwMethodName == "btnBack_Click"
                        || scope.model.dictAttributes.sfwMethodName == "btnWizardCancel_Click" || scope.model.dictAttributes.sfwMethodName == "btnCompleteWorkflowActivities_Click") {
                        scope.model.ObjectMethodText = "Object Method :";
                    }
                    scope.PopulateBooleanValues();
                    if (scope.model.dictAttributes.sfwMethodName == "btnPdfCorrespondence_Click") {
                        scope.InitPDFCorrespondenceNavigationParam();
                    }

                    if (scope.model.dictAttributes.sfwMethodName == "btnExportToPDF_Click") {
                        scope.lstPageType = CONST.FORM.LIST_OF_PAGETYPE;
                    }
                    scope.PopulateWizardSteps();
                    scope.lstEntityFields = [];
                    if (scope.model.dictAttributes.sfwMethodName == "btnOpen_Click") {
                        scope.PopulateEntityFieldsForOpenButton();
                    }
                }

                if (scope.model && scope.model.Name == "sfwImageButton") {
                    scope.PopulateTextRelatedControl();
                    scope.lstSelectedIndex = [];
                    scope.MessageIDText = "Lookup Messages :";
                    scope.OnActiveFormValueChange();
                    scope.PopulateImageAlign();
                }
                scope.PopulateKnobStyle = function () {
                    scope.lstKnobStyle = ["butt", "round"];
                    if (!scope.model.dictAttributes.sfwKnobLineStyle) {
                        scope.model.dictAttributes.sfwKnobLineStyle = "butt";
                    }
                };
                scope.PopulateKnobRotation = function () {
                    scope.lstKnobRotation = ["clockwise", "anticlockwise"];
                    if (!scope.model.dictAttributes.sfwKnobRotation) {
                        scope.model.dictAttributes.sfwKnobRotation = "clockwise";
                    }
                };
                scope.PopulateKnobThickness = function () {
                    scope.lstKnobThickness = ["0.1", "0.2", "0.3", "0.4", "0.5"];
                    if (!scope.model.dictAttributes.sfwThickness) {
                        scope.model.dictAttributes.sfwThickness = "0.1";
                    }
                };

                if (scope.model && scope.model.Name == "sfwKnob") {
                    scope.PopulateKnobStyle();
                    scope.PopulateKnobRotation();
                    scope.PopulateKnobThickness();
                }

                if (scope.model.Name == "TemplateField") {
                    scope.lstSortExpressions = [];
                    scope.lstSortExpressions.push("");
                    var objGridView = FindParent(scope.model, "sfwGridView");
                    if (objGridView) {
                        PopulateSortExpressions(objGridView, scope.lstSortExpressions);
                    }
                    scope.model.HeaderTemplateLabel = undefined;
                    for (var i = 0; i < scope.model.Elements.length; i++) {
                        if (scope.model.Elements[i].Name == "HeaderTemplate") {
                            scope.model.HeaderTemplateLabel = scope.model.Elements[i].Elements[0];
                        }
                    }
                    if (scope.model.HeaderTemplateLabel == undefined) {
                        var HeaderTemplate = {
                            dictAttributes: {}, Elements: [{
                                dictAttributes: {
                                    sfwEntityField: ""
                                }, Elements: [], Children: [], Name: "sfwLabel", Value: "", prefix: "swc"
                            }], Children: [], Name: "HeaderTemplate", Value: "", prefix: "asp"
                        };
                        scope.model.HeaderTemplateLabel = HeaderTemplate.Elements[0];
                        //scope.model.Elements.push(HeaderTemplate);
                    }
                }
                scope.addHeaderTemplate = function () {
                    if (scope.model && scope.model.Elements.length > 0) {
                        var obj = scope.model.Elements.filter(function (x) { return x.Name == "HeaderTemplate"; });
                        var index = scope.model.Elements.indexOf(obj[0]);
                        if (index > -1) {
                            scope.model.Elements.splice(index, 1);
                        }
                    }
                    if (scope.model.HeaderTemplateLabel && scope.model.HeaderTemplateLabel.dictAttributes.sfwEntityField) {
                        var HeaderTemplate = {
                            dictAttributes: {}, Elements: [scope.model.HeaderTemplateLabel], Name: "HeaderTemplate", Value: "", prefix: "asp"
                        };

                        scope.model.Elements.push(HeaderTemplate);

                    }

                };
                if (scope.model.Name == "sfwCommandButton") {
                    scope.PopulateOnClientClick();
                    scope.PopulateSecurityLevel();
                    scope.PopulateOnCommandName();
                }

                scope.IsMultiActiveForm = false;
                if (!scope.model.SelectActiveFormType) {
                    scope.model.SelectActiveFormType = 'Single';
                }
                else {
                    if (scope.model.SelectActiveFormType === 'Multiple') {
                        scope.IsMultiActiveForm = true;
                    }
                }
                if (scope.model.dictAttributes.sfwActiveForm != undefined && scope.model.dictAttributes.sfwActiveForm != "") {
                    if (scope.model.dictAttributes.sfwActiveForm.contains("=")) {
                        scope.model.SelectActiveFormType = 'Multiple';
                        scope.IsMultiActiveForm = true;
                    }
                }

                //#region ActiveFormtype

                scope.setActiveForm();


                if (scope.model.Name == "sfwGridView") {
                    scope.lstParentGrid = [];
                    PopulateGridID(scope.formobject, scope.model.dictAttributes.ID, scope.lstParentGrid);
                    scope.lstParentGrid.splice(0, 0, "");
                }
                //if (scope.model.dictAttributes.sfwMethodName && scope.model.dictAttributes.sfwMethodName == "btnNew_Click") {
                //    scope.lstGrid = [];
                //    PopulateGridIDForNewButton(scope.formobject, scope.lstGrid);
                //    scope.lstGrid.splice(0, 0, "");
                //}

                //#region Single, Multiple Type Active Form Selection
                scope.IsActiveFormRadioDisabled = function () {
                    if (scope.model.Name == "sfwOpenDetail" || scope.model.Name == "sfwMultiCorrespondence"  //Removed some condition according to Bug No. 4289,4291,4299
                        || scope.model.dictAttributes.sfwMethodName == "btnWizardFinish_Click" || scope.model.dictAttributes.sfwMethodName == "btnWizardCancel_Click"
                        || scope.model.dictAttributes.sfwMethodName == "btnWizardFindAndNext_Click"
                        || scope.model.dictAttributes.sfwMethodName == "btnWizardNext_Click" || scope.model.dictAttributes.sfwMethodName == "btnWizardPrevious_Click"
                        || scope.model.dictAttributes.sfwMethodName == "btnWizardSaveAndNext_Click" || scope.model.dictAttributes.sfwMethodName == "btnWizardSaveAndPrevious_Click"
                    ) {
                        return true;
                    }
                    return false;
                };
                //#endregion

                //#endregion

                if (scope.model.Name == "sfwChart") {
                    for (var i = 0; i < scope.model.Elements.length; i++) {
                        if (scope.model.Elements[i].Name == "ChartAreas") {
                            scope.chartArea = scope.model.Elements[i].Elements[0];
                            if (scope.chartArea && scope.chartArea.Elements.length > 0) {
                                scope.Area3D = scope.chartArea.Elements[0];
                            }
                        }
                    }
                }

                if (scope.model.Name == "sfwRuleViewer") {
                    scope.PopulateRulesBasedOnEntity(scope.model.dictAttributes.sfwEntityName);
                }

                scope.ShowPropertyBasedOnCondition();
                if (scope.model && scope.model.Name == "sfwDateTimePicker") scope.LoadDataFormatsForDateTimePicker();

                if (scope.model && (scope.model.Name == "sfwCheckBoxList" || scope.model.Name == "sfwCalendar" || scope.model.Name == "sfwScheduler")) {
                    scope.LoadCollectionFieldEntity();
                }

                if (scope.model) {
                    scope.model.retrievalType = 'Query';
                    if ("sfwRetrievalMethod" in scope.model.dictAttributes) {
                        if (scope.model.dictAttributes.sfwRetrievalMethod != undefined && scope.model.dictAttributes.sfwRetrievalMethod != "") {
                            scope.model.retrievalType = 'Method';
                        }
                    }
                }
                if (scope.model) {
                    scope.model.autocompleteType = 'Query';
                    if (scope.model.dictAttributes.sfwAutoMethod) {
                        scope.model.autocompleteType = 'Method';
                    }
                }

                if (scope.model && scope.model.dictAttributes.sfwRetrievalQuery) {
                    scope.RetrievalQueryInputChange(true);
                }

                scope.LoadClientVisibilitySource();

                scope.CheckForFilterGridControl();
                scope.$evalAsync(function () {
                    scope.setDefaultCodeGroup();
                });

                if (scope.model && scope.model.Name === "sfwLabel" && scope.model.ParentVM) {
                    if (scope.model.ParentVM.Name === "HeaderTemplate" || scope.model.ParentVM.Name === "FooterTemplate") {
                        scope.model.IsHeaderOrFooterField = true;
                    }
                }
            };

            scope.setActiveForm = function () {
                scope.ActiveFormType = "Lookup,Maintenance,Wizard,FormLinkLookup,FormLinkMaintenance,FormLinkWizard";
                if (scope.model) {
                    if (scope.model.dictAttributes.sfwMethodName == "btnCorrespondenceRows_Click") {
                        scope.ActiveFormType = "Maintenance,FormLinkMaintenance";
                    }
                    else if (scope.model.dictAttributes.sfwMethodName == "btnOpenLookup_Click") {
                        scope.ActiveFormType = "Lookup,FormLinkLookup,Maintenance,FormLinkMaintenance";
                    }
                    else if ((scope.model.dictAttributes.sfwMethodName == "btnNew_Click") ||
                        (scope.model.dictAttributes.sfwMethodName == "btnOpen_Click")) {

                        var lblRelatedControlIsScheduler = false;
                        if (scope.model.dictAttributes.sfwRelatedControl) {
                            var lobjModel = FindControlByID(scope.formobject, scope.model.dictAttributes.sfwRelatedControl);
                            if (lobjModel && lobjModel.Name === "sfwScheduler") {
                                lblRelatedControlIsScheduler = true;
                            }
                        }
                        if (lblRelatedControlIsScheduler) {
                            scope.ActiveFormType = "Maintenance,FormLinkMaintenance";
                        }
                        else {
                            scope.ActiveFormType = "Wizard,Maintenance,FormLinkMaintenance,FormLinkWizard";
                        }
                    }

                    if ((scope.model.dictAttributes.sfwMethodName == "btnNewUpdate_Click") ||
                        (scope.model.dictAttributes.sfwMethodName == "btnPrototypeSearch_Click")) {
                        scope.ActiveFormType = "Maintenance,FormLinkMaintenance";
                    }

                    if (scope.model.dictAttributes.sfwMethodName === "btnRetrieve_Click") {
                        scope.ActiveFormType = "Lookup,FormLinkLookup";
                    }

                    if (scope.model.Name == "sfwOpenDetail" ||
                        scope.model.Name == "sfwMultiCorrespondence") {
                        scope.ActiveFormType = "Maintenance,FormLinkMaintenance";
                    }
                    if (scope.model.Name == "sfwSeries") {
                        scope.ActiveFormType = "Maintenance,FormLinkMaintenance";
                    }

                    if (scope.model.Name == "sfwOpenDetail" || scope.model.Name == "sfwMultiCorrespondence"
                        || scope.model.dictAttributes.sfwMethodName == "btnWizardAddNewChild_Click" || scope.model.dictAttributes.sfwMethodName == "btnWizardFinish_Click" || scope.model.dictAttributes.sfwMethodName == "btnRetrieve_Click"
                        || scope.model.dictAttributes.sfwMethodName == "btnWizardCancel_Click" || scope.model.dictAttributes.sfwMethodName == "btnWizardDeleteChild_Click"
                        || scope.model.dictAttributes.sfwMethodName == "btnWizardUpdateChild_Click" || scope.model.dictAttributes.sfwMethodName == "btnWizardFindAndNext_Click"
                        || scope.model.dictAttributes.sfwMethodName == "btnWizardNext_Click" || scope.model.dictAttributes.sfwMethodName == "btnWizardPrevious_Click"
                        || scope.model.dictAttributes.sfwMethodName == "btnWizardSaveAndNext_Click" || scope.model.dictAttributes.sfwMethodName == "btnWizardSaveAndPrevious_Click"
                    ) {
                        scope.IsMultiActiveForm = false;
                    }
                }
            }
            scope.setDefaultCodeGroup = function () {
                if (scope.model && scope.entityName && (scope.model.Name == "sfwDropDownList" || scope.model.Name == "sfwCascadingDropDownList" || scope.model.Name == "sfwMultiSelectDropDownList" || scope.model.Name == "sfwListPicker" || scope.model.Name == "sfwListBox" || scope.model.Name == "sfwRadioButtonList")) {
                    var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                    var strCodeGroup = "";
                    if ((scope.IsSearchCriteriaSelected || scope.isFilterCriteria) && scope.model.dictAttributes.sfwDataField) {
                        strCodeGroup = GetCodeIDForLookup(scope.entityName, scope.model.dictAttributes.sfwDataField, entityIntellisenseList);
                    }
                    else if (scope.model.dictAttributes.sfwEntityField) {
                        strCodeGroup = GetCodeID(scope.entityName, scope.model.dictAttributes.sfwEntityField, entityIntellisenseList);
                    }
                    if (strCodeGroup) {
                        scope.model.placeHolder = strCodeGroup;
                    }
                    else {
                        scope.model.placeHolder = "";
                    }
                    var prop = "";
                    if ((scope.IsSearchCriteriaSelected || scope.isFilterCriteria) && scope.model.dictAttributes.sfwDataField) {
                        prop = "sfwDataField";
                    } else if (scope.model.dictAttributes.sfwEntityField) {
                        prop = "sfwEntityField";
                    }
                    scope.validateEmptyCodeId(prop);
                }
                else if (scope.model && scope.model.Name == "sfwCheckBoxList" && scope.model.CollectionFieldEntity) {
                    var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                    var strCodeGroup = "";
                    if (scope.model.dictAttributes.sfwCheckBoxField) {
                        strCodeGroup = GetCodeID(scope.model.CollectionFieldEntity, scope.model.dictAttributes.sfwCheckBoxField, entityIntellisenseList);
                    }
                    if (strCodeGroup) {
                        scope.model.placeHolder = strCodeGroup;
                    }
                    else {
                        scope.model.placeHolder = "";
                    }
                    scope.validateEmptyCodeId("sfwCheckBoxField");
                }

            };

            scope.validateEmptyCodeId = function (property) {
                if (!scope.model.errors) {
                    scope.model.errors = {};
                }
                if (scope.model.dictAttributes[property] && scope.model.errors && !scope.model.errors[property]) {
                    if (scope.model.dictAttributes.sfwLoadType == "CodeGroup" && scope.model.placeHolder && scope.model.errors.invalid_code_group == CONST.VALIDATION.EMPTY_FIELD) {
                        $ValidationService.checkValidListValue([], scope.model, scope.model.dictAttributes.sfwLoadSource, "sfwLoadSource", "invalid_code_group", CONST.VALIDATION.CODE_GROUP_NOT_EXISTS, undefined, true);
                    } else if (scope.model.errors && scope.model.errors.invalid_code_group != CONST.VALIDATION.CODE_GROUP_NOT_EXISTS) {
                        $ValidationService.checkValidListValue([scope.model.dictAttributes.sfwLoadSource], scope.model, scope.model.dictAttributes.sfwLoadSource, "sfwLoadSource", "invalid_code_group", CONST.VALIDATION.CODE_GROUP_NOT_EXISTS, undefined);
                    }
                } else if (scope.model.errors && scope.model.errors.invalid_code_group != CONST.VALIDATION.CODE_GROUP_NOT_EXISTS) {
                    $ValidationService.checkValidListValue([scope.model.dictAttributes.sfwLoadSource], scope.model, scope.model.dictAttributes.sfwLoadSource, "sfwLoadSource", "invalid_code_group", CONST.VALIDATION.CODE_GROUP_NOT_EXISTS, undefined);
                }
            };
            scope.Init = function () {
                scope.IsLookup = scope.formobject.dictAttributes.sfwType == "Lookup" ? true : false;
                scope.IsReport = scope.formobject.dictAttributes.sfwType == "Report" ? true : false;
                scope.IsCorrespondence = scope.formobject.dictAttributes.sfwType == "Correspondence" ? true : false;
                scope.LoadModes();
                scope.LoadDataFormats();
                scope.LoadTextMode();
                scope.LoadDefaultTypes();
                scope.LoadOperators();
                scope.LoadValidatorOperators();
                scope.LoadSelectionMode();
                scope.LoadRepeatDirection();
                scope.LoadAlignment();
                scope.LoadGridSelection();
                scope.getGroupList();
                scope.MainTable = undefined;
                var lstTable;
                if (scope.isformlink != undefined && scope.isformlink == true) {
                    scope.MainTable = scope.formobject.Children;
                }
                else {
                    lstTable = scope.formobject.Elements.filter(function (item) {
                        return item.Name == "sfwTable";
                    });
                    if (lstTable && lstTable.length > 0) {
                        scope.MainTable = lstTable[0];
                    }
                }
                scope.LoadDataType();
                scope.LoadType();
                scope.LoadAxisFormatsForChart();



            };

            scope.ResetAdvanceProperties = function () {
                scope.SelectedTab = "General";
                $(element).find("[header-properties-row][category!='Accessibility'] td").addClass("prop-close");
            };

            scope.ShowPropertyBasedOnCondition = function () {
                scope.IsShowModePropertyVisible();
                scope.IsShowVisibleRulePropertyVisible();
                scope.IsShowResourcePropertyVisible();
                scope.IsShowCssClassPropertyVisible();
                scope.IsShowCustomAttributePropertyVisible();
            };
            //#endregion

            scope.renderTypes = ["None", "RichText", "Rating", "NumSpinner"];

            //#region Init Common Template Methods

            scope.InitOnDblClick = function () {
                if (scope.model.Name == "sfwListPicker" || scope.model.Name == "sfwSourceList" || scope.model.Name == "sfwRadioButtonList" || scope.model.Name == "sfwCascadingDropDownList" || scope.model.Name == "sfwMultiSelectDropDownList" || scope.model.Name == "sfwDropDownList" || scope.model.Name == "sfwListBox" || scope.model.Name == "sfwCheckBoxList") {
                    scope.PopulateLoadTyeps();
                    scope.InitializeDropDownItems();
                }
            };

            scope.PopulateLoadTyeps = function () {
                scope.lstLoadTypes = [];
                scope.lstLoadTypes.push("CodeGroup");
                scope.lstLoadTypes.push("Query");
                if (!scope.IsLookup || (scope.model && (scope.model.Name != "sfwDropDownList" && scope.model.Name != "sfwMultiSelectDropDownList"))) {
                    if (!scope.IsReport) {
                        scope.lstLoadTypes.push("Method");
                        var objListView = FindParent(scope.model, "sfwListView");
                        if (scope.model && (scope.model.IsChildOfGrid || objListView)) {
                            scope.lstLoadTypes.push("ChildMethod");
                        }
                    }

                }
                scope.lstLoadTypes.push("ServerMethod");
                if (scope.model.Name != "sfwCascadingDropDownList" || (scope.model.Name == "sfwCascadingDropDownList" && !scope.model.dictAttributes.sfwParentControl)) {
                    scope.lstLoadTypes.push("Items");
                }
            };

            scope.GetCodeValueFields = function () {
                var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                var lst = entityIntellisenseList.filter(function (x) {
                    return x.ID == "entCodeValue";
                });
                function iAddInlstCodeValues(objColumn) {
                    var strColumn = objColumn.ID;
                    var strKeyNo = objColumn.KeyNo;
                    var strValue = objColumn.Value;
                    if (!strValue) {
                        strValue = "";
                    }
                    if (strKeyNo == "0" && !IsAuditField(strColumn)) {
                        scope.lstCodeValues.push({
                            CodeID: strValue, Description: strColumn
                        });
                    }
                }
                if (lst && lst.length > 0) {
                    var objEntity = lst[0];

                    angular.forEach(objEntity.Attributes, iAddInlstCodeValues);

                }

                //scope.lstCodeValues.splice(0, 0, { CodeID: "", Description: "" });
            };

            scope.InitializeDropDownItems = function () {
                if (scope.model) {
                    scope.model.CommonProp = scope.model.dictAttributes.sfwLoadType;
                    scope.lstCodeValues = [];
                    scope.lstQryField = [];
                    scope.GetCodeValueFields();

                    if (scope.model.CommonProp == undefined || scope.model.CommonProp == "") {
                        scope.model.CommonProp = "CodeGroup";
                        scope.model.dictAttributes.sfwLoadType = "CodeGroup";
                    } else if (scope.model.CommonProp == "Query") {
                        scope.LoadQueryColumns(scope.model.dictAttributes.sfwLoadSource);
                    }
                    else if (scope.model.CommonProp == "ServerMethod") {
                        scope.onRemoteObjectChanged(true);
                    }
                }
            };

            scope.$on('onOKClick', function (event, data) {

                $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwLoadSource, scope.model.dictAttributes, "sfwLoadSource", data.ID);

            });

            scope.onQuerySearchClick = function (param) {

                scope.attributeName = "sfwLoadSource";
                if (param == "DefaultValue") {
                    scope.attributeName = "sfwDefaultValue";
                }

                scope.strSelectedQuery = scope.model.dictAttributes[scope.attributeName];
                //scope.QueryDialog = ngDialog.open({
                //    template: "Form/views/BrowseForQuery.html",
                //    scope: scope,
                //    closeByDocument: false,
                //    className: 'ngdialog-theme-default ngdialog-theme-custom',
                //});

                var dialogScope = scope.$new(true);
                //dialogScope = scope;
                dialogScope.attributeName = "sfwLoadSource";
                if (param == "DefaultValue") {
                    dialogScope.attributeName = "sfwDefaultValue";
                }
                dialogScope.strSelectedQuery = scope.model.dictAttributes[scope.attributeName];
                dialogScope.QueryDialog = $rootScope.showDialog(dialogScope, "Browse For Query", "Form/views/BrowseForQuery.html", { width: 1000, height: 700 });
            };

            scope.$on('onQueryClick', function (event, data) {
                $rootScope.EditPropertyValue(scope.model.dictAttributes[scope.attributeName], scope.model.dictAttributes, scope.attributeName, data);

                scope.LoadQueryColumns(scope.model.dictAttributes[scope.attributeName]);
            });
            scope.LoadQueryColumnsOnChange = function (queryId) {
                $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwNavigationParameter, scope.model.dictAttributes, "sfwNavigationParameter", "");
                scope.LoadQueryColumns(queryId);
            };
            scope.LoadQueryColumns = function (queryId) {
                if (queryId != undefined && queryId != "") {
                    var lst = queryId.split('.');
                    if (lst && lst.length == 2) {
                        var entityName = lst[0];
                        var strQueryID = lst[1];
                        var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                        var lstEntity = entityIntellisenseList.filter(function (x) {
                            return x.ID == entityName;
                        });
                        if (lstEntity && lstEntity.length > 0) {
                            var objEntity = lstEntity[0];
                            var lstQuery = objEntity.Queries.filter(function (x) {
                                return x.ID == strQueryID;
                            });
                            if (lstQuery && lstQuery.length > 0) {
                                var objQuery = lstQuery[0];
                                scope.selectedCurrentQuery = objQuery;
                                $.connection.hubForm.server.getEntityQueryColumns(queryId, "MainParentPanelCommonProp" + scope.formobject.dictAttributes.ID).done(function (data) {
                                    scope.$evalAsync(function () {
                                        scope.lstQryField = [];
                                        var obj = { CodeID: '', Description: '' };
                                        //data.splice(0, 0, obj);
                                        scope.lstQryField = data;
                                    });
                                });
                            }
                            else {
                                scope.lstQryField = [];
                            }
                        }
                    }
                }
            };

            scope.onBaseQuerySearchClick = function () {
                var dialogScope = scope.$new(true);
                dialogScope.strSelectedQuery = scope.model.dictAttributes.sfwBaseQuery;
                dialogScope.IsBaseQuery = true;

                //dialogScope.QueryDialog = ngDialog.open({
                //    template: "Form/views/BrowseForQuery.html",
                //    scope: dialogScope,
                //    closeByDocument: false,
                //    className: 'ngdialog-theme-default ngdialog-theme-custom',
                //});

                dialogScope.QueryDialog = $rootScope.showDialog(dialogScope, "Browse For Query", "Form/views/BrowseForQuery.html", { width: 1000, height: 700 });
            };
            scope.$on('onBaseQueryClick', function (event, data) {
                $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwBaseQuery, scope.model.dictAttributes, "sfwBaseQuery", data);
                scope.onBaseQueryChange(data);
            });

            scope.onMethodQueryParamClick = function () {

                var newScope = scope.$new(true);
                newScope.selectedCurrentQuery = scope.selectedCurrentQuery;
                newScope.SelectedObject = scope.model;
                newScope.IsForm = true;
                newScope.IsMultiActiveForm = false;
                newScope.formobject = scope.formobject;
                newScope.isFormLink = scope.isformlink;
                newScope.NavigationParameterDialog = $rootScope.showDialog(newScope, "Navigation Parameters", "Form/views/ParameterNavigation.html", { width: 1000, height: 520 });
            };

            scope.canDisabledParameters = function () {
                var isDisable = false;
                if (scope.model) {
                    if (scope.model.dictAttributes.sfwLoadType == "CodeGroup") {
                        if (!scope.model.placeHolder && !scope.model.dictAttributes.sfwLoadSource) {
                            isDisable = true;
                        }
                    }
                    else if (!scope.model.dictAttributes.sfwLoadSource) {
                        isDisable = true;
                    }
                }
                return isDisable;
            }
            //#endregion

            //#region Common Event for Common Properties

            scope.PopulateRelatedButton = function () {
                scope.lstExecuteAfterSuccessButton = [];
                scope.lstExecuteAfterSuccessButton.push("");
                var lst = [];
                FindControlListByNames(scope.model, ['sfwButton', 'sfwLinkButton', 'sfwImageButton'], lst);

                function iteration(obj) {
                    if (obj.dictAttributes.ID !== scope.model.dictAttributes.ID) {
                        scope.lstExecuteAfterSuccessButton.push(obj.dictAttributes.ID);
                    }
                }
                angular.forEach(lst, iteration);
            };

            scope.LoadModes = function () {
                scope.lstModes = [];
                scope.lstModes.push("All");
                scope.lstModes.push("New");
                scope.lstModes.push("Update");
            };

            scope.LoadSelectionMode = function () {
                scope.lstSelectionMode = [];
                scope.lstSelectionMode.push("Single");
                scope.lstSelectionMode.push("Multiple");
            };

            scope.LoadDataFormats = function () {
                scope.lstDataFormats = [];
                scope.lstDataFormats.push("");
                scope.lstDataFormats.push("{0:d}");
                scope.lstDataFormats.push("{0:C}");
                scope.lstDataFormats.push("{0:G}");
                scope.lstDataFormats.push("{0:#0.00'%}");
                scope.lstDataFormats.push("{0:#0.000'%}");
                scope.lstDataFormats.push("{0:#0.0000'%}");
                scope.lstDataFormats.push("{0:#0.00000'%}");
                scope.lstDataFormats.push("{0:000-##-####}");
                scope.lstDataFormats.push("{0:(###)###-####}");
            };
            scope.LoadDataFormatsForDateTimePicker = function () {
                scope.lstDataFormatsForDateTime = [];
                scope.lstDataFormatsForDateTime.push("");
                scope.lstDataFormatsForDateTime.push("{0:d}");
                scope.lstDataFormatsForDateTime.push("{0:G}");

            };
            scope.LoadTextMode = function () {
                scope.lstTextModes = [];
                //  scope.lstTextModes.push("");
                scope.lstTextModes.push("SingleLine");
                scope.lstTextModes.push("MultiLine");
                scope.lstTextModes.push("Password");
                scope.lstTextModes.push("Color");
                scope.lstTextModes.push("Date");
                scope.lstTextModes.push("DateTime");
                scope.lstTextModes.push("DateTimeLocal");
                scope.lstTextModes.push("Email");
                scope.lstTextModes.push("Month");
                scope.lstTextModes.push("Number");
                scope.lstTextModes.push("Range");
                scope.lstTextModes.push("Search");
                scope.lstTextModes.push("Phone");
                scope.lstTextModes.push("Time");
                scope.lstTextModes.push("Url");
                scope.lstTextModes.push("Week");
            };

            scope.LoadDefaultTypes = function () {
                scope.lstDefaultType = [];
                scope.lstDefaultType.push("None");
                scope.lstDefaultType.push("TextValue");
                scope.lstDefaultType.push("TodaysDate");
                scope.lstDefaultType.push("TodaysDateTime");
                scope.lstDefaultType.push("MethodOnServer");
                scope.lstDefaultType.push("MethodOnClient");
                scope.lstDefaultType.push("SystemConstant");
                scope.lstDefaultType.push("ScalarQuery");
            };

            scope.LoadControlToValidate = function () {
                scope.lstControlToValidate = [];
                scope.lstControlToValidate.push("");
                if (scope.model.ParentVM != undefined && scope.model.ParentVM.Elements.length > 0) {
                    for (var i = 0; i < scope.model.ParentVM.Elements.length; i++) {
                        if (scope.model.ParentVM.Elements[i].Name == "sfwDropDownList" || scope.model.ParentVM.Elements[i].Name == "sfwTextBox") {
                            scope.lstControlToValidate.push(scope.model.ParentVM.Elements[i].dictAttributes.ID);
                        }
                    }
                }
            };

            scope.findCascadingParentControl = function () {
                var lstDropdownLists = [];
                if (scope.model.Name == "sfwCascadingDropDownList" || scope.model.Name === "sfwMultiSelectDropDownList") {
                    var ojParentGrid = FindParent(scope.model, "sfwGridView");
                    if (ojParentGrid && ojParentGrid.Elements.length > 0) {
                        FindControlListByName(ojParentGrid, "sfwCascadingDropDownList", lstDropdownLists);
                    }
                    else {
                        FindControlListByName(scope.MainTable, "sfwCascadingDropDownList", lstDropdownLists);
                    }

                    if (lstDropdownLists) {
                        lstDropdownLists.filter(function (x) {
                            if (x.dictAttributes.ID != scope.model.dictAttributes.ID) {
                                scope.lstCascadingDropDwonParent.push(x.dictAttributes.ID);
                            }
                        });
                    }
                }
            };

            scope.LoadControlToCompare = function () {
                scope.lstControlToCompare = [];
                var obj = {
                    dictAttributes: {
                        ID: ""
                    }
                };
                scope.lstControlToCompare.push(obj);
                if (scope.MainTable) {
                    FindControlListByName(scope.MainTable, "sfwDropDownList", scope.lstControlToCompare);
                    FindControlListByName(scope.MainTable, "sfwTextBox", scope.lstControlToCompare);
                }
            };

            scope.LoadType = function () {
                scope.lstType = [];
                scope.lstType.push("String");
                scope.lstType.push("Integer");
                scope.lstType.push("Double");
                scope.lstType.push("Date");
                scope.lstType.push("Currency");
            };

            scope.LoadDataType = function () {
                scope.lstDataType = [];
                scope.lstDataType.push("String");
                scope.lstDataType.push("Numeric");
                scope.lstDataType.push("Decimal");
                scope.lstDataType.push("DateTime");
                scope.lstDataType.push("Long");
            };

            scope.LoadOperators = function () {
                scope.lstOperators = [];
                scope.lstOperators.push("=");
                scope.lstOperators.push("!=");
                scope.lstOperators.push("<");
                scope.lstOperators.push("<=");
                scope.lstOperators.push(">");
                scope.lstOperators.push(">=");
                scope.lstOperators.push("in");
                scope.lstOperators.push("not in");
                scope.lstOperators.push("like");
                scope.lstOperators.push("exists");
                scope.lstOperators.push("between");
                scope.lstOperators.push("is null");
                scope.lstOperators.push("is not null");
            };

            scope.LoadValidatorOperators = function () {
                scope.lstValidatorOperators = [];
                scope.lstValidatorOperators.push("Equal");
                scope.lstValidatorOperators.push("NotEqual");
                scope.lstValidatorOperators.push("GreaterThan");
                scope.lstValidatorOperators.push("GreaterThanEqual");
                scope.lstValidatorOperators.push("LessThan");
                scope.lstValidatorOperators.push("LessThanEqual");
                scope.lstValidatorOperators.push("DataTypeCheck");
            };

            scope.LoadRepeatDirection = function () {
                scope.lstRepeatDirection = [];
                scope.lstRepeatDirection.push("Horizontal");
                scope.lstRepeatDirection.push("Vertical");
            };

            scope.LoadAlignment = function () {
                scope.lstAlignment = [];
                scope.lstAlignment.push("Left");
                scope.lstAlignment.push("Center");
                scope.lstAlignment.push("Right");
                scope.lstAlignment.push("Justify");
                scope.lstAlignment.push("NotSet");
            };

            scope.LoadGridSelection = function () {
                scope.lstGridSelection = [];
                scope.lstGridSelection.push("None");
                scope.lstGridSelection.push("One");
                scope.lstGridSelection.push("Many");
                scope.lstGridSelection.splice(0, 0, "");
            };

            scope.LoadRelatedControlTextbox = function () {
                scope.lstRelatedControlTextbox = [];
                var obj = {
                    dictAttributes: {
                        ID: ""
                    }
                };
                scope.lstRelatedControlTextbox.push(obj);
                if (scope.MainTable) {
                    FindControlListByNameForTextBox(scope.MainTable, "sfwTextBox", scope.lstRelatedControlTextbox, scope.formobject);
                }
            };

            scope.setClientVisibilityClick = function () {

                //scope.template = 'Form/views/ClientVisibility.html';
                //scope.strAttributeName = "sfwClientVisibility";
                //scope.Title = "Set Client Visibility";
                //scope.IsForm = true;

                var newScope = scope.$new();
                newScope.model = scope.model;
                newScope.formobject = scope.formobject;
                newScope.strAttributeName = "sfwClientVisibility";
                newScope.CurrentTable = scope.CurrentTable;
                newScope.Title = "Set Client Visibility";
                newScope.IsForm = true;
                if (scope.isformlink) {
                    newScope.IsForm = false;
                }

                newScope.objNewDialog = $rootScope.showDialog(newScope, "Set Client Visibility", "Form/views/ClientVisibility.html", { width: 900, height: 500 });
            };

            scope.setClientEnableClick = function () {

                var newScope = scope.$new();
                newScope.strAttributeName = "sfwClientEnable";
                newScope.Title = "Set Client Enability";
                newScope.CurrentTable = scope.CurrentTable;
                newScope.IsForm = true;
                if (scope.isformlink) {
                    newScope.IsForm = false;
                }

                newScope.objNewDialog = $rootScope.showDialog(newScope, "Set Client Enability", "Form/views/ClientVisibility.html", { width: 900, height: 500 });
            };

            scope.onCustomAttributeClick = function () {
                //scope.IsShowCustomAttributes = !scope.IsShowCustomAttributes;

                var newScope = scope.$new();
                newScope.propertyName = "sfwCustomAttributes";
                newScope.model = scope.model;
                newScope.formobject = scope.formobject;
                newScope.isFormLink = scope.isformlink;
                newScope.CurrentTable = scope.CurrentTable;
                newScope.UserLogParaDialog = $rootScope.showDialog(newScope, "Set Custom Attributes", "Form/views/CustomAttributes.html", { width: 900, height: 500 });

                //scope.template = 'Form/views/CustomAttributes.html';

                //scope.Title = "Set Custom Attributes";
                //scope.propertyName = "sfwCustomAttributes";
            };

            scope.onQueryParameterClick = function () {
                var newScope = scope.$new(true);
                newScope.SelectedObject = scope.model;
                newScope.selectedCurrentQuery = scope.selectedCurrentQuery;
                newScope.formobject = scope.formobject;
                newScope.isFormLink = scope.isformlink;
                //newScope = scope;
                //newScope.NavigationParameterDialog = ngDialog.open({
                //    template: "Form/views/ParameterNavigation.html",
                //    scope: newScope,
                //    closeByDocument: false,
                //    className: 'ngdialog-theme-default ngdialog-theme-custom'
                //});

                newScope.NavigationParameterDialog = $rootScope.showDialog(newScope, "Navigation Parameters", "Form/views/ParameterNavigation.html", { width: 1000, height: 520 });
            };
            scope.onCodeGroupParameterClick = function () {
                var newScope = scope.$new(true);
                newScope.SelectedObject = scope.model;
                newScope.formobject = scope.formobject;
                newScope.IsFormCodeGroup = true;
                newScope.NavigationParameterDialog = $rootScope.showDialog(newScope, "Set Parameters", "Form/views/ParameterNavigation.html", { width: 1000, height: 520 });
            };
            scope.onSetParameterClick = function () {
                if (scope.model.CommonProp == 'CodeGroup') {
                    scope.onCodeGroupParameterClick();
                }
                else {
                    scope.onQueryParameterClick();
                }
            };
            scope.openImageConditionClick = function (item) {
                //scope.template = 'Form/views/ImageCondition.html';
                //scope.oldConditions = item;


                var newScope = scope.$new(true);
                newScope.oldConditions = item;
                newScope.formobject = scope.formobject;
                newScope.model = scope.model;
                newScope.ImageConditionDialog = $rootScope.showDialog(newScope, "Image Condition", "Form/views/ImageCondition.html", { width: 600, height: 500 });
            };

            scope.openBindtoQueryClick = function (item) {
                var newScope = scope.$new();
                newScope.gridmodel = item;
                newScope.formobject = scope.formobject;
                newScope.model = scope.model;
                newScope.BindToQueryDialog = $rootScope.showDialog(newScope, "Bind to Query", "Form/views/BindToQuery.html", { width: 600, height: 500 });
            };

            scope.openCellFormatClick = function (model, IsCellOrRow) {
                //scope.template = 'Form/views/CellFormate.html';
                //scope.TemplateFieldModel = model;
                //scope.formEntity = scope.formobject.dictAttributes.sfwEntity;
                //scope.isLookup = scope.IsLookup;
                //scope.IsCellOrRow = IsCellOrRow;
                var dialogScope = scope.$new(true);

                dialogScope.TemplateFieldModel = model;
                dialogScope.formEntity = scope.formobject.dictAttributes.sfwEntity;
                dialogScope.isLookup = scope.IsLookup;
                dialogScope.IsCellOrRow = IsCellOrRow;
                var lstRowFormat = model.Elements.filter(function (itm) { return itm.Name == "rowformat"; });
                if (IsCellOrRow != "CellFormat" && (!lstRowFormat || (lstRowFormat && lstRowFormat.length == 0))) {
                    var rowformat = { Name: "rowformat", Value: "", dictAttributes: {}, Elements: [], Children: [] };
                    model.Elements.push(rowformat);
                }
                var FormatType = "Row Format";
                if (dialogScope.IsCellOrRow == "CellFormat") {
                    FormatType = "Cell Format";
                }
                dialogScope.CellFormatDialog = $rootScope.showDialog(dialogScope, FormatType, "Form/views/CellFormate.html", { width: 600, height: 565 });
            };
            scope.openSetFooterClick = function (model) {
                var dialogScope = scope.$new(true);
                // scope.TemplateFieldModel = model;
                // scope.formEntity = scope.formobject.dictAttributes.sfwEntity;
                //scope.template = 'Form/views/SetFooter.html';
                var objGrid = FindParent(model, "sfwGridView");

                if (model && objGrid && objGrid.dictAttributes.sfwParentGrid) {
                    var objParentGrid = FindControlByID(scope.formobject, objGrid.dictAttributes.sfwParentGrid);
                    if (objParentGrid && objParentGrid.dictAttributes.sfwEntityField) {
                        var entityName = null;
                        var object = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(scope.formobject.dictAttributes.sfwEntity, objParentGrid.dictAttributes.sfwEntityField);
                        if (object) {
                            dialogScope.formEntity = object.Entity;
                        }
                    }
                } else {
                    dialogScope.formEntity = scope.formobject.dictAttributes.sfwEntity;
                }
                dialogScope.TemplateFieldModel = model;
                dialogScope.SetFoterDialog = $rootScope.showDialog(dialogScope, "Footer Details", "Form/views/SetFooter.html", { width: 600 });
            };
            scope.openDataKeyAndSortExxpressionClick = function (model) {
                var dialogScope = scope.$new(true);
                dialogScope.model = model;

                dialogScope.DataKeyAndSortExpressionDialog = $rootScope.showDialog(dialogScope, "DataKey And Sort Expression", "Form/views/DataKeysAndSortExpression.html", { width: 800 });
            };

            scope.openGroupExpression = function () {
                var dialogScope = scope.$new(true);
                dialogScope.model = scope.model;

                dialogScope.GroupExpressionDialog = $rootScope.showDialog(dialogScope, "Group Expression", "Form/views/ControlProperties/GroupExpression.html", { width: 800 });
            };

            scope.onValidationRulesClick = function (entityID) {
                var newScope = scope.$new(true);
                newScope.model = scope.model;
                newScope.formobject = scope.formobject;
                newScope.entityID = entityID;
                newScope.validateValidationRules = scope.validateValidationRules;
                newScope.dialogValidation = $rootScope.showDialog(newScope, "Hard Errors", "Form/views/SetValidationRules.html", { width: 700, height: 460 });
            };

            scope.FuncSetColSpanRowSpan = function () {
                var objCurrentParent = scope.model.ParentVM;
                var objCurrentParentTable = objCurrentParent ? objCurrentParent.ParentVM : null;
                var numCurrentrowindex = objCurrentParentTable.Elements.indexOf(objCurrentParent);
                var lstSiblingColumn = objCurrentParent.Elements;
                var numCurrentcolindex = lstSiblingColumn.indexOf(scope.model);
                var objColRowspanscope = scope.$new(true);
                var numOldColspan = parseInt(scope.model.dictAttributes.ColumnSpan) ? parseInt(scope.model.dictAttributes.ColumnSpan) : 1;
                var numOldRowspan = parseInt(scope.model.dictAttributes.RowSpan) ? parseInt(scope.model.dictAttributes.RowSpan) : 1;
                objColRowspanscope.ColumnSpan = scope.model.dictAttributes.ColumnSpan;
                objColRowspanscope.RowSpan = scope.model.dictAttributes.RowSpan;
                objColRowspanscope.objTableModel = angular.copy(objCurrentParentTable, objColRowspanscope.objTableModel);
                objColRowspanscope.formodel = scope.formobject;
                objColRowspanscope.SetColRowSpanDialog = $rootScope.showDialog(objColRowspanscope, "Set Column/Row Span", "Form/views/SetColRowSpan.html", { width: 1000, height: 500, showclose: true });
                setTimeout(function () {
                    var elem = $("#ColSpan_Dialog_" + objColRowspanscope.$id + " #virtual_column_" + numCurrentrowindex + "_" + numCurrentcolindex);
                    if (elem) {
                        if (elem.length > 0) {
                            elem[0].scrollIntoView();
                        }
                    }
                }, 500);
                objColRowspanscope.okClick = function (IsChange) {
                    function ColumnDeletingResetCallback(itemcolumn, index, array) {
                        itemcolumn.isDeleting = false;
                        itemcolumn.isAdding = false;
                        itemcolumn.isEditing = false;
                    }
                    function GetRowColspanCount(ItemName) {
                        var numrowColSpanCount = 0;
                        var arrayValidcolspan = [];
                        return {
                            resetCount: function () {
                                numrowColSpanCount = 0;
                            },
                            setCount: function (itemcolumn, index, array) {
                                // max count of colspan in entire table                                        
                                numrowColSpanCount += parseInt(itemcolumn.dictAttributes[ItemName]) ? parseInt(itemcolumn.dictAttributes[ItemName]) : 1;
                                if (index == array.length - 1) {
                                    arrayValidcolspan.push(numrowColSpanCount);
                                }
                            },
                            getCount: function () {
                                return numrowColSpanCount;
                            },
                            getCounts: function () {
                                return arrayValidcolspan;
                            }
                        };
                    }
                    function itemrowColumnCallback(itemcolumn, index, array) {
                        objRowCount.setCount(itemcolumn, index, array);
                    }
                    function RowCallbackobjCurrentParentTable(itemrow, index, array) {
                        // dont consider the current row for determining the valid colspan
                        if (index != numCurrentrowindex) {
                            objRowCount.resetCount();
                            itemrow.Elements.forEach(itemrowColumnCallback);
                        }
                    }
                    function ColumnCallbacknumCellstoadd(itemcolumn, index, array) {
                        if (index > numCurrentcolindex) {
                            numCellstoadd -= parseInt(itemcolumn.dictAttributes.ColumnSpan) ? parseInt(itemcolumn.dictAttributes.ColumnSpan) : 1;
                        }
                    }
                    function ColumnCallbackitemrow(itemcolumn, index, array) {
                        if (index == numCurrentcolindex) {
                            objRowCount.setCount(itemcolumn, index, array);
                        }
                        else if (index > numCurrentcolindex) {
                            return true;
                        }
                    }
                    function ColumnColSpanSumCallback(itemcolumn, index, array) {
                        if (index < numCurrentcolindex) {
                            numSumColspans += parseInt(itemcolumn.dictAttributes.ColumnSpan) ? parseInt(itemcolumn.dictAttributes.ColumnSpan) : 1;
                        }
                    }
                    function RowCallbackobjCurrentParentTable(itemrow, index, array) {
                        // dont consider the rows prior to the current row for determining the valid rowspan
                        if (index > numCurrentrowindex) {
                            itemrow.Elements.some(ColumnCallbackitemrow);
                        }
                        else if (index == numCurrentrowindex) {
                            itemrow.Elements.some(ColumnColSpanSumCallback);
                        }
                    }
                    function RowSpanColumnCallback(itemcolumn, index, array) {
                        // critical
                        if ($ValidateBaseModelStructure.is_validModelElements(itemcolumn, 'sfwColumn', false) && itemcolumn.dictAttributes.ColumnSpan && (parseInt(itemcolumn.dictAttributes.ColumnSpan) > 1)) {
                            if (IsChange) {
                                itemcolumn.isEditing = true;
                            }
                            $rootScope.EditPropertyValue(itemcolumn.dictAttributes.ColumnSpan, itemcolumn.dictAttributes, "ColumnSpan", itemcolumn.dictAttributes.ColumnSpan - 1);
                        }
                        else {
                            if (IsChange) {
                                itemcolumn.isDeleting = true;
                            }
                            else {
                                $rootScope.DeleteItem(itemcolumn, array);
                            }
                        }
                    }
                    function iColumnCallback(itemcolumn, index, array) {
                        if (index > numCurrentcolindex) {
                            numIndexCol -= parseInt(itemcolumn.dictAttributes.ColumnSpan) ? parseInt(itemcolumn.dictAttributes.ColumnSpan) : 1;
                        }
                    }
                    function iColumnCallbacknumIndexCol(itemcolumn, index, array) {
                        if (index > numCurrentcolindex) {
                            numIndexCol -= parseInt(itemcolumn.dictAttributes.ColumnSpan) ? parseInt(itemcolumn.dictAttributes.ColumnSpan) : 1;
                        }
                    }
                    if ($ValidateBaseModelStructure.is_validModelElements(objCurrentParent, 'sfwRow', true) && $ValidateBaseModelStructure.is_validModelElements(objCurrentParentTable, 'sfwTable', true)) {
                        // if user clicks of reflect the changes in the main table
                        var objCurrentParent = scope.model.ParentVM;
                        var objCurrentParentTable = objCurrentParent ? objCurrentParent.ParentVM : null;
                        var numCurrentrowindex = objCurrentParentTable.Elements.indexOf(objCurrentParent);
                        var lstSiblingColumn = objCurrentParent.Elements;
                        var numCurrentcolindex = lstSiblingColumn.indexOf(scope.model);
                        var numColSibling = lstSiblingColumn.length;
                        if (IsChange) {
                            // all variables are set from the clone object
                            objColRowspanscope.objTableModel = angular.copy(objCurrentParentTable, objColRowspanscope.objTableModel);

                            objCurrentParentTable = objColRowspanscope.objTableModel;
                            objCurrentParent = objCurrentParentTable.Elements[numCurrentrowindex];
                            objCurrentParent.Elements.forEach(ColumnDeletingResetCallback);
                            objColRowspanscope.objCtrlModel = objCurrentParent.Elements[numCurrentcolindex];
                        }

                        if (!IsChange) {
                            $rootScope.UndRedoBulkOp("Start");
                        }
                        // for colspan                        
                        if (parseInt(objColRowspanscope.ColumnSpan) && parseInt(scope.model.dictAttributes.ColumnSpan) !== parseInt(objColRowspanscope.ColumnSpan)) {
                            var numValidcolspan = 0;
                            if (numCurrentcolindex > -1) {
                                var objRowCount = GetRowColspanCount('ColumnSpan');

                                objCurrentParentTable.Elements.forEach(RowCallbackobjCurrentParentTable);
                                numValidcolspan = Math.max.apply(null, objRowCount.getCounts());
                                // minus colspans for columns prior to the current column
                                lstSiblingColumn.some(function (item, index) {
                                    if (index < numCurrentcolindex) {
                                        numValidcolspan -= item.dictAttributes.ColumnSpan ? item.dictAttributes.ColumnSpan : 1;
                                    }
                                    else {
                                        return true;
                                    }
                                });
                                // if invalid then delete all right 
                                if (numValidcolspan < parseInt(objColRowspanscope.ColumnSpan)) {
                                    for (var i = numColSibling - 1; i > numCurrentcolindex; i--) {
                                        if (IsChange) {
                                            objCurrentParent.Elements[i].isDeleting = true;
                                        }
                                        else {
                                            $rootScope.DeleteItem(objCurrentParent.Elements[i], objCurrentParent.Elements);
                                        }
                                    }
                                }
                                // for valid check condition
                                if (numValidcolspan >= parseInt(objColRowspanscope.ColumnSpan)) {
                                    // if new value greater then old value then delete the cells
                                    if (parseInt(objColRowspanscope.ColumnSpan) > numOldColspan) {
                                        var numCelltoDelete = parseInt(objColRowspanscope.ColumnSpan) - numOldColspan;
                                        for (var i = numCurrentcolindex + numCelltoDelete; i > numCurrentcolindex; i--) {
                                            if (IsChange) {
                                                objCurrentParent.Elements[i].isDeleting = true;
                                            }
                                            else {
                                                $rootScope.DeleteItem(objCurrentParent.Elements[i], objCurrentParent.Elements);
                                            }
                                        }
                                    }
                                    // if new value less then old value then add the cells on the right side
                                    else if (parseInt(objColRowspanscope.ColumnSpan) < numOldColspan) {
                                        var sfxCellModel = function () {
                                            var objNewCell = {};
                                            if (!IsChange) {
                                                objNewCell = { Name: "sfwColumn", value: '', prefix: "swc", dictAttributes: {}, Elements: [], Children: [], ParentVM: objCurrentParent };
                                            }
                                            else {
                                                objNewCell = { Name: "sfwColumn", value: '', prefix: "swc", dictAttributes: {}, Elements: [], Children: [], ParentVM: objCurrentParent, isAdding: true };
                                            }
                                            return objNewCell;
                                        };
                                        // check for last column
                                        // new value should be less or equal to valid colspan
                                        if (parseInt(objColRowspanscope.ColumnSpan) <= numValidcolspan) {
                                            var numCellstoadd = (numValidcolspan - (parseInt(objColRowspanscope.ColumnSpan) ? parseInt(objColRowspanscope.ColumnSpan) : 1));

                                            objCurrentParent.Elements.forEach(ColumnCallbacknumCellstoadd);
                                            if (numCurrentcolindex < objCurrentParent.Elements.length - 1) {
                                                for (var i = 0; i < numCellstoadd; i++) {
                                                    $rootScope.InsertItem(new sfxCellModel(), objCurrentParent.Elements, numCurrentcolindex + 1);
                                                }
                                            }
                                            else {
                                                for (var i = 0; i < numCellstoadd; i++) {
                                                    $rootScope.PushItem(new sfxCellModel(), objCurrentParent.Elements);
                                                }
                                            }
                                        }
                                    }
                                }
                                if (!IsChange) {
                                    $rootScope.EditPropertyValue(scope.model.dictAttributes.ColumnSpan, scope.model.dictAttributes, "ColumnSpan", objColRowspanscope.ColumnSpan);
                                }
                            }
                        }
                        numOldColspan = parseInt(scope.model.dictAttributes.ColumnSpan) ? parseInt(scope.model.dictAttributes.ColumnSpan) : 1;
                        // for rowspan 
                        if (parseInt(objColRowspanscope.RowSpan) && parseInt(scope.model.dictAttributes.RowSpan) !== parseInt(objColRowspanscope.RowSpan)) {
                            var numValidrowspan = 0;
                            // consider col index to be count of the colspan till current column
                            var numSumColspans = 0;
                            if (numCurrentrowindex > -1) {
                                var objRowCount = GetRowColspanCount('RowSpan');

                                objCurrentParentTable.Elements.forEach(RowCallbackobjCurrentParentTable);
                                numValidrowspan = objRowCount.getCount() + 1; // for the rowspan of the current col                                

                                //if invalid then delete all cols at the index (consider colspans of previous columns) in subsquent rows - if cols have colspans do minus 1
                                if (numValidrowspan < parseInt(objColRowspanscope.RowSpan)) {
                                    // dont consider the rows prior to the current row for determining the valid rowspan
                                    for (var i = numCurrentrowindex + 1; i < objCurrentParentTable.Elements.length; i++) {
                                        var numIndexCol = objCurrentParentTable.Elements[i].Elements.length - 1;

                                        objCurrentParentTable.Elements[i].Elements.forEach(iColumnCallback);
                                        while (numIndexCol >= numSumColspans) {
                                            RowSpanColumnCallback(objCurrentParentTable.Elements[i].Elements[numIndexCol], numIndexCol, objCurrentParentTable.Elements[i].Elements);
                                            numIndexCol -= 1;
                                        }
                                    }
                                }
                                // for valid check condition
                                if (numValidrowspan >= parseInt(objColRowspanscope.RowSpan)) {
                                    // if new value greater then old value then update colspan at corresponding index
                                    if (parseInt(objColRowspanscope.RowSpan) > numOldRowspan) {
                                        var numRowtoTraverse = parseInt(objColRowspanscope.RowSpan) - numOldRowspan;
                                        for (var i = numCurrentrowindex + 1, j = 0; j < numRowtoTraverse; i++ , j++) {
                                            var numIndexCol = objCurrentParentTable.Elements[i].Elements.length - 1;

                                            objCurrentParentTable.Elements[i].Elements.forEach(iColumnCallbacknumIndexCol);
                                            while (numIndexCol >= numSumColspans) {
                                                RowSpanColumnCallback(objCurrentParentTable.Elements[i].Elements[numIndexCol], numIndexCol, objCurrentParentTable.Elements[i].Elements);
                                                numIndexCol -= 1;
                                            }
                                        }
                                    }
                                    // if new value less then old value then add the cells in the corresponding index
                                    else {
                                        var numCellstoadd = parseInt(scope.model.dictAttributes.RowSpan) - (parseInt(objColRowspanscope.RowSpan) ? parseInt(objColRowspanscope.RowSpan) : 1);
                                        for (var i = numCurrentrowindex + parseInt(scope.model.dictAttributes.RowSpan) - 1, j = 0; i < objCurrentParentTable.Elements.length && j < numCellstoadd; i++ , j++) {
                                            var sfxCellModel = function () {
                                                var objNewCell = {};
                                                if (!IsChange) {
                                                    objNewCell = { Name: "sfwColumn", value: '', prefix: "swc", dictAttributes: {}, Elements: [], Children: [], ParentVM: objCurrentParentTable.Elements[i] };
                                                }
                                                else {
                                                    objNewCell = { Name: "sfwColumn", value: '', prefix: "swc", dictAttributes: {}, Elements: [], Children: [], ParentVM: objCurrentParentTable.Elements[i], isAdding: true };
                                                }
                                                return objNewCell;
                                            };
                                            if (numSumColspans < objCurrentParentTable.Elements[i].Elements.length - 1) {
                                                $rootScope.InsertItem(new sfxCellModel(), objCurrentParentTable.Elements[i].Elements, numSumColspans);
                                            }
                                            else {
                                                $rootScope.PushItem(new sfxCellModel(), objCurrentParentTable.Elements[i].Elements);
                                            }
                                        }
                                    }
                                }
                                if (!IsChange) {
                                    $rootScope.EditPropertyValue(scope.model.dictAttributes.RowSpan, scope.model.dictAttributes, "RowSpan", objColRowspanscope.RowSpan);
                                }
                            }
                        }
                        if (!IsChange) {
                            $rootScope.UndRedoBulkOp("End");
                        }
                    }
                    if (!IsChange) {
                        objColRowspanscope.closeClick();
                    }
                };
                objColRowspanscope.closeClick = function () {
                    scope.$evalAsync(function () {
                        objColRowspanscope.SetColRowSpanDialog.close();
                        objColRowspanscope.$destroy();
                    });
                };
            };

            scope.validateValidationRules = function (list) {
                if (scope.model && scope.model.dictAttributes) {
                    var lstHardErrors = [];
                    scope.lstHardErrorData;
                    var input = scope.model.dictAttributes.sfwValidationRules;
                    if (scope.$parent.iswizard) {
                        var objWizardStep = FindParent(scope.model, "sfwWizardStep");
                        if (objWizardStep) {
                            var strRuleGroup = objWizardStep.dictAttributes.sfwRulesGroup;
                            lstHardErrors = scope.$parent.createValidationRuleList(scope.formobject.objExtraData, scope.$parent.iswizard, strRuleGroup);
                        }
                    } else if (scope.entityName && !scope.lstHardErrorData && !list) {
                        scope.lstHardErrorData = [];
                        hubMain.server.getEntityExtraData(scope.entityName).done(function (data) {
                            scope.$evalAsync(function () {
                                if (data && data.lstHardErrorList) {
                                    var dataList = data.lstHardErrorList[0];
                                    if (dataList.Elements.length > 0) {
                                        angular.forEach(dataList.Elements, function (item) {
                                            if (item && item.dictAttributes.ID) {
                                                scope.lstHardErrorData.push(item.dictAttributes.ID);
                                            }
                                        });
                                    }
                                    lstHardErrors = scope.lstHardErrorData;
                                    $ValidationService.checkMultipleValueWithList(scope.lstHardErrorData, scope.model, input, ";", 'sfwValidationRules', "invalid_validation_rule", CONST.VALIDATION.VALIDATION_RULE_NOT_EXISTS, undefined);
                                }
                            });
                        });
                    } else {
                        lstHardErrors = scope.$parent.createValidationRuleList(scope.formobject.objExtraData, false, null);
                    }
                    if (list) {
                        lstHardErrors = list;
                    } else if (scope.lstHardErrorData) {
                        lstHardErrors = scope.lstHardErrorData;
                    }
                    $ValidationService.checkMultipleValueWithList(lstHardErrors, scope.model, input, ";", 'sfwValidationRules', "invalid_validation_rule", CONST.VALIDATION.VALIDATION_RULE_NOT_EXISTS, undefined);
                }
            };
            scope.OpenImageUrl = function (openFrom) {
                if (scope.formobject.dictAttributes.WebSite) {
                    //var lstDialog = ngDialog.getOpenDialogs();
                    //if (lstDialog && lstDialog.length > 0) {
                    //    var dialogId = lstDialog[lstDialog.length - 1];
                    $.connection.hubForm.server.openImageUrlClick(scope.formobject.dictAttributes.WebSite, openFrom).done(function (data) {
                        if (data && data.length == 2) {
                            scope.receiveImageFileName(data[0], data[1]);
                        }
                    });
                    //}
                }
                else {
                    $SgMessagesService.Message('Message', "Please select the appropriate 'Website' from the form details page.");
                }
            };
            scope.receiveImageFileName = function (fileName, errorMessage) {
                if (fileName != "") {
                    scope.$apply(function () {
                        scope.model.dictAttributes.ImageUrl = fileName;
                    });
                }
                if (errorMessage != "" && errorMessage != undefined) {
                    $SgMessagesService.Message('Message', errorMessage);
                }
            };

            scope.openRetrievalTemplateProp = function (model) {
                scope.template = 'Form/views/Retrieval.html';
                scope.model = model;
                scope.formobject = scope.formobject;

            };
            scope.openAutoCompleteTemplateProp = function (model) {
                scope.template = 'Form/views/AutoComplete.html';
                scope.model = model;
                scope.formobject = scope.formobject;

            };
            scope.getQuery_dialog = function () {
                var dialogScope = scope.$new(true);
                if (scope.model.dictAttributes.sfwQueryID != undefined) {
                    dialogScope.strSelectedQuery = scope.model.dictAttributes.sfwQueryID;
                }
                dialogScope.IsForm = true;
                //dialogScope.QueryDialog = ngDialog.open({
                //    template: "Form/views/BrowseForQuery.html",
                //    scope: dialogScope,
                //    closeByDocument: false,
                //    className: 'ngdialog-theme-default ngdialog-theme-custom',
                //});

                dialogScope.QueryDialog = $rootScope.showDialog(dialogScope, "Browse For Query", "Form/views/BrowseForQuery.html", { width: 1000, height: 700 });
            };
            scope.$on('onFormQueryClick', function (event, data) {

                scope.model.dictAttributes.sfwQueryID = data;
            });
            scope.onAddItem = function () {
                var obj = { dictAttributes: { Text: "", Value: "" }, Elements: [], Children: [], Name: "ListItem", Value: "", prefix: 'asp' };
                scope.model.Elements.push(obj);
            };
            scope.SelectItem = function (item) {
                scope.selectedItem = item;
            };
            scope.onDeleteItem = function () {
                if (scope.selectedItem != undefined) {
                    var index = scope.model.Elements.indexOf(scope.selectedItem);
                    if (index > -1) {
                        scope.model.Elements.splice(index, 1);
                    }
                    else {
                        scope.selectedItem == undefined;
                    }

                    if (index > 0) {
                        scope.selectedItem = scope.model.Elements[index - 1];
                    }
                    else {
                        scope.selectedItem = scope.model.Elements[index];
                    }
                }
                //else if(scope.model.Elements.length>0){
                //    scope.model.Elements.splice(scope.model.Elements.length-1,1);
                //}
            };
            scope.commonTemplateSelectionChange = function (para) {
                $rootScope.UndRedoBulkOp("Start");
                $rootScope.EditPropertyValue(scope.model.Elements, scope.model, "Elements", []);
                $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwNavigationParameter, scope.model.dictAttributes, "sfwNavigationParameter", "");
                if (scope.model.Name == "sfwCascadingDropDownList") {
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwParameters, scope.model.dictAttributes, "sfwParameters", "");
                }
                $rootScope.EditPropertyValue(scope.model.dictAttributes.DataTextField, scope.model.dictAttributes, "DataTextField", "");
                $rootScope.EditPropertyValue(scope.model.dictAttributes.DataValueField, scope.model.dictAttributes, "DataValueField", "");
                $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwLoadSource, scope.model.dictAttributes, "sfwLoadSource", "");
                $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwImageField, scope.model.dictAttributes, "sfwImageField", "");

                if (scope.model && scope.model.Name == "sfwCheckBoxList") {
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwDefaultValue, scope.model.dictAttributes, "sfwDefaultValue", "");
                }
                if (scope.model && (scope.model.Name == "sfwDropDownList" || scope.model.Name == "sfwCascadingDropDownList")) {
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwImageField, scope.model.dictAttributes, "sfwImageField", "");
                }
                $rootScope.UndRedoBulkOp("End");
                //scope.model.dictAttributes.sfwLoadType = para;

                scope.InitializeDropDownItems();
                scope.setDefaultCodeGroup();

            };
            scope.onEntityFieldTextChange = function () {
                scope.model.CollectionFieldEntity = "";
                if (scope.model.Name == "sfwCheckBoxList") {
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwCheckBoxField, scope.model.dictAttributes, "sfwCheckBoxField", "");
                }
                else if (scope.model.Name == "sfwCalendar" || scope.model.Name == "sfwScheduler") {
                    $rootScope.UndRedoBulkOp("Start");
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwEventId, scope.model.dictAttributes, "sfwEventId", "");
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwEventName, scope.model.dictAttributes, "sfwEventName", "");
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwEventStartDate, scope.model.dictAttributes, "sfwEventStartDate", "");
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwEventEndDate, scope.model.dictAttributes, "sfwEventEndDate", "");
                    if (scope.model.Name == "sfwScheduler") {
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwEventCategory, scope.model.dictAttributes, "sfwEventCategory", "");
                    }
                    if (scope.model.hasOwnProperty("errors")) {
                        for (var prop in scope.model.errors) {
                            if (["sfwEventId", "sfwEventName", "sfwEventStartDate", "sfwEventEndDate", "sfwEventCategory"].indexOf(prop) > -1) {
                                delete scope.model.errors[prop];
                            }
                        }
                    }
                    $rootScope.UndRedoBulkOp("Start");
                }
            };

            scope.LoadCollectionFieldEntity = function () {
                if (scope.model.dictAttributes.sfwEntityField != undefined && scope.model.dictAttributes.sfwEntityField != "") {
                    var strEntityName = scope.formobject.dictAttributes.sfwEntity;
                    if (scope.entityName) {
                        strEntityName = scope.entityName;
                    }
                    var objAttribute = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(strEntityName, scope.model.dictAttributes.sfwEntityField);
                    if (objAttribute) {
                        scope.$evalAsync(function () {
                            scope.model.CollectionFieldEntity = objAttribute.Entity;
                        });
                    }
                }
            };

            scope.getEntityObject = function (entityName) {
                var objEntity;
                var lstentitylist = $EntityIntellisenseFactory.getEntityIntellisense();

                var lstEntity = lstentitylist.filter(function (itm) {
                    return itm.ID == entityName;
                });
                if (lstEntity && lstEntity.length > 0) {
                    objEntity = lstEntity[0];
                }
                return objEntity;
            };

            scope.onQueryIDChange = function (event) {
                var input = $(event.target);
                scope.queryIdInput = input;
                if (event && event.ctrlKey && event.keyCode == $.ui.keyCode.SPACE && $(input).data('ui-autocomplete')) {
                    $(input).autocomplete("search", $(input).val());
                    event.preventDefault();
                }
                else {
                    createQueryIDList(input);
                }
            };

            scope.showQueryIDIntellisenseList = function (event) {
                var inputElement;
                inputElement = $(event.target).prevAll("input[type='text']");
                scope.queryIdInput = inputElement;
                inputElement.focus();
                if (inputElement) {
                    createQueryIDList(inputElement);
                    if ($(inputElement).data('ui-autocomplete')) $(inputElement).autocomplete("search", $(inputElement).val());
                }
                if (event) {
                    event.stopPropagation();
                }
            };

            var createQueryIDList = function (input) {
                //var formScope = getCurrentFileScope();
                scope.queryIdList = [];
                function iterator(itm) {
                    lst.push(itm.dictAttributes.ID);
                }
                if (scope.formobject) {
                    var lstQueryID = GetQueryListFromObject(scope.formobject);
                    //if (formScope && formScope.lstQueryID) {
                    var lst = [];

                    angular.forEach(lstQueryID, iterator);
                    scope.queryIdList = lst;
                    setSingleLevelAutoComplete(input, lst, scope);
                    //}
                }
            };

            scope.PopulateRulesBasedOnEntity = function (entityName) {
                scope.Rules = [];

                var lstEntity = $EntityIntellisenseFactory.getEntityIntellisense().filter(function (itm) {
                    return itm.ID == entityName;
                });
                if (lstEntity && lstEntity.length > 0) {
                    if (lstEntity[0].Rules.length > 0) {
                        scope.Rules = lstEntity[0].Rules;
                    }
                }
            };

            scope.validateQueryId = function (model) {
                var property = "sfwQueryID";
                $ValidationService.checkValidListValue(scope.queryIdList, model, scope.queryIdInput ? scope.queryIdInput.val() : '', property, "invalid_query_id", CONST.VALIDATION.INVALID_QUERY_ID, undefined);
            };
            scope.onBaseQueryChange = function (QueryId, isIgnoreForUndoRedo) {
                var DummyParams = [];
                var formScope = getCurrentFileScope();
                if (formScope && formScope.selectControl) {
                    formScope.selectControl(scope.model);
                }
                function addParam(itm) {
                    var param = { Name: "parameter", Value: '', dictAttributes: { ID: itm.ID }, Elements: [], Children: [] };
                    var lstPara = DummyParams.filter(function (x) { return x.dictAttributes.ID == param.dictAttributes.ID });
                    if (lstPara && lstPara.length > 0) {
                        param.dictAttributes.sfwEntityField = lstPara[0].dictAttributes.sfwEntityField;
                    }
                    if (isIgnoreForUndoRedo) {
                        objParameters.Elements.push(param);
                    }
                    else {
                        $rootScope.PushItem(param, objParameters.Elements);
                    }
                }
                scope.model.dictAttributes.sfwBaseQuery = QueryId;
                if (scope.model.dictAttributes.sfwBaseQuery && scope.model.dictAttributes.sfwBaseQuery != "") {
                    var lst = scope.model.dictAttributes.sfwBaseQuery.split('.');
                    if (lst && lst.length == 2) {
                        var entityName = lst[0];
                        var strQueryID = lst[1];
                        if (!isIgnoreForUndoRedo) {
                            $rootScope.UndRedoBulkOp("Start");
                        }
                        var lstParams = scope.model.Elements.filter(function (itm) { return itm.Name == "Parameters"; });
                        var objParameters;
                        if (!lstParams || (lstParams && lstParams.length == 0)) {
                            objParameters = { Name: "Parameters", Value: '', dictAttributes: {}, Elements: [], Children: [] };
                            if (isIgnoreForUndoRedo) {
                                scope.model.Elements.push(objParameters);
                            }
                            else {
                                $rootScope.PushItem(objParameters, scope.model.Elements);
                            }
                        }
                        else {
                            objParameters = lstParams[0];
                        }
                        if (objParameters) {
                            if (objParameters.Elements.length > 0) {
                                for (var i = 0; i < objParameters.Elements.length; i++) {
                                    DummyParams.push(objParameters.Elements[i]);
                                }
                            }
                            objParameters.Elements = [];
                            var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                            var lstEntity = entityIntellisenseList.filter(function (x) { return x.ID == entityName; });
                            if (lstEntity && lstEntity.length > 0) {
                                var objEntity = lstEntity[0];
                                var lstQuery = objEntity.Queries.filter(function (x) { return x.ID == strQueryID; });
                                if (lstQuery && lstQuery.length > 0) {
                                    var objQuery = lstQuery[0];
                                    if (objQuery.Parameters.length > 0) {

                                        angular.forEach(objQuery.Parameters, addParam);
                                    }
                                }
                            }
                        }
                        if (!isIgnoreForUndoRedo) {
                            $rootScope.UndRedoBulkOp("End");
                        }
                    }
                }
                else {
                    var lstParams = scope.model.Elements.filter(function (itm) { return itm.Name == "Parameters"; });
                    var objParameters;
                    if (lstParams && lstParams.length > 0) {
                        objParameters = lstParams[0];
                        objParameters.Elements = [];
                    }
                }
            };

            scope.openBaseQueryParamClick = function () {
                scope.onBaseQueryChange(scope.model.dictAttributes.sfwBaseQuery, true);
                var newScope = scope.$new();
                newScope.Elements = [];
                var lstParams = scope.model.Elements.filter(function (itm) { return itm.Name == "Parameters"; });
                if (lstParams && lstParams.length > 0) {
                    if (lstParams[0] && lstParams[0].Elements && lstParams[0].Elements.length > 0) {
                        for (var i = 0; i < lstParams[0].Elements.length; i++) {
                            var param = {};
                            angular.copy(lstParams[0].Elements[i], param);
                            newScope.Elements.push(param);
                        }
                    }
                }
                newScope.entityTreeBinding = { selectedobject: null, lstselectedobjects: [], lstentities: [] };
                newScope.FormEntity = scope.formobject.dictAttributes.sfwEntity;
                newScope.onOkClick = function () {
                    if (newScope.Elements && newScope.Elements.length > 0) {
                        $rootScope.UndRedoBulkOp("Start");
                        if (lstParams && lstParams.length > 0) {
                            $rootScope.EditPropertyValue(lstParams[0].Elements, lstParams[0], "Elements", []);
                            for (var i = 0; i < newScope.Elements.length; i++) {
                                $rootScope.PushItem(newScope.Elements[i], lstParams[0].Elements);
                            }
                        }
                        $rootScope.UndRedoBulkOp("End");
                    }
                    newScope.dialog.close();
                };
                newScope.onParameterSelected = function (objParam) {
                    newScope.SelectedParameter = objParam;
                };
                newScope.dialog = $rootScope.showDialog(newScope, "Base Query Parameters", "Form/views/ControlProperties/GridBaseQueryParameter.html", { width: 800, height: 525 });
            };


            scope.onEditablePropertyChange = function () {
                $rootScope.UndRedoBulkOp("Start");

                if (scope.model) {
                    if (scope.model.dictAttributes.AllowEditing == "True") {
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwTwoWayBinding, scope.model.dictAttributes, "sfwTwoWayBinding", "True");
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwCommonFilterBox, scope.model.dictAttributes, "sfwCommonFilterBox", "False");
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwFilterOnKeyPress, scope.model.dictAttributes, "sfwFilterOnKeyPress", "False");

                    }
                    else {
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwTwoWayBinding, scope.model.dictAttributes, "sfwTwoWayBinding", "False");
                    }
                }

                $rootScope.UndRedoBulkOp("End");
            };

            scope.onGridDataSourceTypeChange = function () {
                var curscope = getCurrentFileScope();

                if (curscope.loadFormEntityTree) curscope.loadGridEntityTree(scope.model);

            };

            scope.LoadAxisFormatsForChart = function () {
                scope.lstAxisFormat = [];
                scope.lstAxisFormat.push("");
                scope.lstAxisFormat.push("{0:C}");
                scope.lstAxisFormat.push("{0:c}");
                scope.lstAxisFormat.push("{0:d}");
                scope.lstAxisFormat.push("{0:%}");
                scope.lstAxisFormat.push("{0:#0.00'%}");
                scope.lstAxisFormat.push("{0:#0.000'%}");
                scope.lstAxisFormat.push("{0:#0.0000'%}");
                scope.lstAxisFormat.push("{0:#0.00000'%}");
            };

            scope.CheckForFilterGridControl = function () {
                var lst = [];
                //scope.model.IsShowDataField = false;
                var objFilterGridButton;
                scope.lstBaseQueryColumns = [];
                if (scope.model && scope.MainTable) {
                    FindControlListByNames(scope.MainTable, ['sfwButton', 'sfwLinkButton', 'sfwImageButton'], lst);
                    if (lst && lst.length > 0) {
                        lst = lst.filter(function (itm) { return itm.dictAttributes.sfwMethodName == "btnGridSearch_Click"; });
                        if (lst && lst.length > 0) {
                            for (var i = 0; i < lst.length; i++) {
                                if (lst[i].dictAttributes.sfwNavigationParameter) {
                                    var lstParam = lst[i].dictAttributes.sfwNavigationParameter.split(';');
                                    if (lstParam && lstParam.length > 0) {
                                        if (lstParam.some(function (param) { return param == scope.model.dictAttributes.ID; })) {
                                            scope.model.IsShowDataField = true;
                                            objFilterGridButton = lst[i];
                                            break;
                                        }
                                    }
                                }
                            }
                            if (objFilterGridButton) {
                                if (objFilterGridButton.dictAttributes.sfwRelatedControl) {
                                    var objGrid = FindControlByID(scope.MainTable, objFilterGridButton.dictAttributes.sfwRelatedControl);
                                    if (objGrid && objGrid.dictAttributes.sfwBaseQuery) {
                                        $.connection.hubForm.server.getEntityQueryColumns(objGrid.dictAttributes.sfwBaseQuery, "ScopeId_" + scope.$id).done(function (data) {
                                            if (data) {
                                                for (var j = 0; j < data.length; j++) {
                                                    scope.lstBaseQueryColumns.push(data[j].CodeID);
                                                }
                                            }
                                        });
                                    }
                                }
                            }
                        }
                    }
                }
            };
            //#endregion

            //#region Event and Methods For Button

            scope.PopulateEntityFieldsForOpenButton = function (IschangeEvent) {
                var alAvlFlds = [];
                PopulateControlsForActiveForm(alAvlFlds, scope.formobject, scope.model, scope.IsLookup);
                if (IschangeEvent) {
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwEntityField, scope.model.dictAttributes, "sfwEntityField", "");
                }
                scope.model.IsEntityFieldReset = true;
                scope.lstEntityFields = [];
                if (scope.model.dictAttributes.sfwRelatedControl || scope.model.IsChildOfGrid) {
                    if (alAvlFlds.length > 0) {
                        for (var i = 0; i < alAvlFlds.length; i++) {
                            var s = alAvlFlds[i];
                            var strParamValue = "";
                            if (s.indexOf("~") > -1)
                                strParamValue = s.substring(0, s.indexOf("~"));
                            else
                                strParamValue = s;
                            if (!scope.lstEntityFields.some(function (itm) { return itm === strParamValue; })) {
                                scope.lstEntityFields.push(strParamValue);
                            }
                        }
                    }
                }
            };

            scope.LoadButtonMethodDescription = function () {
                scope.model.MethodDescription = "";
                if (scope.model.dictAttributes.sfwMethodName != undefined && scope.model.dictAttributes.sfwMethodName != "") {
                    var lst = $rootScope.LstButtonMethodLookup.filter(function (x) {
                        return x.Code == scope.model.dictAttributes.sfwMethodName;
                    });
                    if (lst && lst.length > 0) {
                        scope.model.MethodDescription = lst[0].Description;
                    }
                    else {
                        lst = $rootScope.LstButtonMethodMaintenance.filter(function (x) {
                            return x.Code == scope.model.dictAttributes.sfwMethodName;
                        });
                        if (lst && lst.length > 0) {
                            scope.model.MethodDescription = lst[0].Description;
                        }
                        else {
                            lst = $rootScope.LstButtonMethodWizard.filter(function (x) {
                                return x.Code == scope.model.dictAttributes.sfwMethodName;
                            });
                            if (lst && lst.length > 0) {
                                scope.model.MethodDescription = lst[0].Description;
                            }
                        }
                    }
                }
            };

            scope.PopulateOnCommandName = function () {
                scope.lstOnCommandName = [];
                scope.lstOnCommandName.push("");
                scope.lstOnCommandName.push("Cancel");
            };

            scope.PopulateOnClientClick = function () {
                scope.lstOnClientClick = [];
                scope.lstOnClientClick.push("");
                scope.lstOnClientClick.push("return confirm('Type your message here.')");
            };

            scope.PopulateSecurityLevel = function () {
                scope.lstSecurityLevel = [];
                scope.lstSecurityLevel.push({
                    Code: "0", Description: " None"
                });
                scope.lstSecurityLevel.push({ Code: "1", Description: " Read" });
                scope.lstSecurityLevel.push({ Code: "2", Description: " Modify" });
                scope.lstSecurityLevel.push({ Code: "3", Description: " New" });
                scope.lstSecurityLevel.push({ Code: "4", Description: " Delete" });
                scope.lstSecurityLevel.push({ Code: "5", Description: " Execute" });
            };

            scope.PopulateSelection = function () {
                scope.lstSelection = [];
                scope.lstSelection.push("None");
                scope.lstSelection.push("One");
                scope.lstSelection.push("Many");
            };

            scope.PoulateRelatedControlForNew = function () {
                scope.RelatedControlsForNew = [];

                if (scope.IsLookup)
                    GetAllControls(scope.formobject, "sfwLabel,sfwTextBox,sfwDropDownList,sfwCheckBox,sfwRadioButtonList,sfwLinkButton", "tblcriteria", "", false, scope.RelatedControlsForNew, false);
                else {

                    GetAllControls(scope.formobject, "sfwLabel,sfwTextBox,sfwDropDownList,sfwCheckBox,sfwRadioButtonList,sfwLinkButton,sfwScheduler", "", "", false, scope.RelatedControlsForNew, true);

                }

                var obj = { dictAttributes: { ID: "" } };
                scope.RelatedControlsForNew.splice(0, 0, obj);

            };

            scope.PoulateRelatedControlForFinishScheduler = function () {
                scope.lstSchedulerControl = [];
                FindControlListByName(scope.MainTable, 'sfwScheduler', scope.lstSchedulerControl);
                var obj = { dictAttributes: { ID: "" } };
                scope.lstSchedulerControl.splice(0, 0, obj);
            };

            scope.CustomMethodNameChange = function () {
                var curscope = getCurrentFileScope();
                if (curscope) {
                    curscope.isDirty = true;
                }
            };

            scope.onRelatedControlandEntityFieldChange = function () {
                var strActiveForm = scope.model.dictAttributes.sfwActiveForm;
                if (strActiveForm != undefined && strActiveForm != "") {
                    var alForms = strActiveForm.split(';');
                    if (alForms.length > 0) {
                        strActiveForm = alForms[0];
                        var target = "";
                        for (var i = 0; i < alForms.length; i++) {
                            var form = alForms[i];
                            if (form.contains("="))
                                form = form.substring(form.indexOf('=') + 1);
                            if (target == "") {
                                target += form;
                            } else {
                                target += ";" + form;
                            }
                        }
                    }

                    if (strActiveForm.contains("="))
                        strActiveForm = strActiveForm.substring(strActiveForm.indexOf('=') + 1);
                    var Params = [];
                    $.connection.hubMain.server.getSingleFileDetail(strActiveForm).done(function (data) {
                        var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();

                        GetNavParamCollection(data, scope.model, Params, entityIntellisenseList, scope.formobject);
                        PopulateParamValues(Params, scope.model.dictAttributes.sfwNavigationParameter);
                        var istrParameters = GetNavigationParameterValue(Params);
                        if (scope.model.dictAttributes.sfwMethodName == "btnNew_Click") {

                            var relatedControl = scope.model.dictAttributes.sfwActiveForm.contains("=") ? scope.model.dictAttributes.sfwRelatedControl : "";
                            scope.$evalAsync(function () {
                                if (istrParameters == "") {
                                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwNavigationParameter, scope.model.dictAttributes, "sfwNavigationParameter", relatedControl);

                                }
                                else {
                                    if (relatedControl != undefined && relatedControl != "") {
                                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwNavigationParameter, scope.model.dictAttributes, "sfwNavigationParameter", istrParameters + ";" + relatedControl);
                                    }
                                    else {
                                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwNavigationParameter, scope.model.dictAttributes, "sfwNavigationParameter", istrParameters);
                                    }
                                }
                            });
                        }
                        else if (scope.model.dictAttributes.sfwMethodName == "btnOpen_Click") {
                            var entityField = scope.model.dictAttributes.sfwActiveForm.contains("=") ? scope.model.dictAttributes.sfwEntityField : "";
                            scope.$evalAsync(function () {

                                if (scope.model.dictAttributes.sfwActiveForm.contains('=')) {
                                    if (istrParameters == "") {
                                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwNavigationParameter, scope.model.dictAttributes, "sfwNavigationParameter", entityField);

                                    }
                                    else {
                                        if (entityField != undefined && entityField != "") {
                                            $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwNavigationParameter, scope.model.dictAttributes, "sfwNavigationParameter", istrParameters + ";" + entityField);

                                        }
                                        else {
                                            $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwNavigationParameter, scope.model.dictAttributes, "sfwNavigationParameter", istrParameters);

                                        }
                                    }
                                }
                                else {
                                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwNavigationParameter, scope.model.dictAttributes, "sfwNavigationParameter", istrParameters);

                                }
                            });
                        }
                    });
                }
                else {
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwNavigationParameter, scope.model.dictAttributes, "sfwNavigationParameter", "");
                }
                scope.setActiveForm();
            };

            scope.PopulateExecuteAfterSuccessButton = function () {
                scope.lstExecuteAfterSuccessButton = [];
                scope.lstExecuteAfterSuccessButton.push("");
                var lst = [];
                FindControlListByName(scope.MainTable, 'sfwButton', lst);
                function iteration(obj) {
                    if (obj.dictAttributes.ID !== scope.model.dictAttributes.ID) {
                        scope.lstExecuteAfterSuccessButton.push(obj.dictAttributes.ID);
                    }
                }
                angular.forEach(lst, iteration);
            };

            scope.PopulateMessageDescription = function () {
                scope.model.MessageDescription = "";
                if (scope.model.dictAttributes.sfwMessageID != undefined && scope.model.dictAttributes.sfwMessageID != "") {
                    hubMain.server.populateMessageList().done(function (lstMessages) {
                        if (lstMessages && lstMessages.length > 0) {
                            scope.$evalAsync(function () {
                                var lst = lstMessages.filter(function (x) { return x.MessageID == scope.model.dictAttributes.sfwMessageID; });
                                if (lst && lst.length > 0) {
                                    scope.model.MessageDescription = lst[0].DisplayMessage;
                                }
                            });
                        }
                    });
                }
            };

            scope.PopulateBooleanValues = function () {
                scope.lstBooleanValues.push("True");
                scope.lstBooleanValues.push("False");
            };

            scope.PopulateWizardSteps = function () {
                scope.WizardStepNames = [];
                var lst = [];
                FindControlListByName(scope.MainTable, "WizardSteps", lst);
                function iterator(ctrl) {
                    var title = ctrl.dictAttributes.Title;
                    if (ctrl.dictAttributes.Title == undefined || ctrl.dictAttributes.Title == "") {
                        title = ctrl.dictAttributes.ID;
                    }
                    scope.WizardStepNames.push({
                        Code: ctrl.dictAttributes.ID, Description: title
                    });
                }
                if (lst.length > 0) {
                    var objWizardSteps = lst[0];
                    if (objWizardSteps) {


                        angular.forEach(objWizardSteps.Elements, iterator);
                    }
                }
            };

            scope.onRemoteObjectChanged = function (isLoadRemoteObjectMethod) {
                var RemoteObjectName = "srvCommon";
                if (scope.formobject && scope.formobject.dictAttributes.sfwRemoteObject) {
                    RemoteObjectName = scope.formobject.dictAttributes.sfwRemoteObject;
                }
                var objServerObject = GetServerMethodObject(RemoteObjectName, scope.formobject.RemoteObjectCollection);
                var lstObjectMethods = GetObjectMethods($EntityIntellisenseFactory.getEntityIntellisense(), scope.formobject.dictAttributes.sfwEntity);
                scope.lstServerMethod = PopulateServerMethod(lstObjectMethods, scope.model, objServerObject, isLoadRemoteObjectMethod);
            };

            scope.InitPDFCorrespondenceNavigationParam = function () {

                var str = '"True"';
                if (scope.model.dictAttributes.sfwNavigationParameter != undefined && scope.model.dictAttributes.sfwNavigationParameter != "") {
                    if (scope.model.dictAttributes.sfwNavigationParameter.contains("sfwShowDownloadDialog=" + str)) {
                        scope.model.IsShowDownloadDialog = true;
                    }
                    else {
                        scope.model.IsShowDownloadDialog = false;
                    }

                    if (scope.model.dictAttributes.sfwNavigationParameter.contains("sfwLaunchNewWindow=" + str)) {
                        scope.model.IsLaunchNewWindow = true;
                    }
                    else {
                        scope.model.IsLaunchNewWindow = false;
                    }
                }
            };

            scope.onUserLogParametersClick = function () {
                //scope.template = 'Form/views/CustomAttributes.html';

                //scope.Title = "Set User Log Parameters";
                //scope.propertyName = "sfwUserLogParameters";

                var newScope = scope.$new(true);
                newScope.model = scope.model;
                newScope.formobject = scope.formobject;
                newScope.propertyName = "sfwUserLogParameters";
                newScope.isFormLink = scope.isformlink;
                newScope.CurrentTable = scope.CurrentTable;
                newScope.UserLogParaDialog = $rootScope.showDialog(newScope, "Set User Log Parameters", "Form/views/CustomAttributes.html", { width: 800, height: 525 });
            };

            scope.onSearchActiveFormClick = function () {

            };

            scope.onAddMultipleActiveFormClick = function () {

            };

            scope.onNavigationParamsClick = function () {
                //Implement Navigation Parameter here for button
                //scope.SelectedObject = scope.model;
                //scope.selectedCurrentQuery = scope.selectedCurrentQuery;
                //scope.template= "Views/Form/ParameterNavigation.html";
                /*newScope.NavigationParameterDialog = ngDialog.open({
                    template: "Views/Form/ParameterNavigation.html",
                    scope: newScope,
                    closeByDocument: false,
                    className: 'ngdialog-theme-default ngdialog-theme-custom'
                    
                });*/

                if (scope.model.dictAttributes.sfwMethodName == 'btnOpenDoc_Click') {
                    var newScope = scope.$new(true);
                    newScope.formobject = scope.formobject;
                    newScope.model = scope.model;
                    newScope.NavigationParameterOpenWordDialog = $rootScope.showDialog(newScope, "Navigation Parameter", "Form/views/ParameterNavigationOpenWord.html", { width: 800, height: 500 });
                }
                else if (scope.model.dictAttributes.sfwMethodName == "btnGridSearch_Click") {
                    var newScope = scope.$new(true);
                    newScope.selectedCurrentQuery = scope.selectedCurrentQuery;
                    newScope.SelectedObject = scope.model;
                    newScope.currentTable = scope.CurrentTable;
                    newScope.IsForm = true;
                    newScope.IsMultiActiveForm = false;
                    newScope.formobject = scope.formobject;
                    newScope.isFormLink = scope.isformlink;
                    newScope.dialog = $rootScope.showDialog(newScope, "Navigation Parameters", "Form/views/NavParamGridSearch.html", { width: 1000, height: 520 });
                }
                else if (scope.model.dictAttributes.sfwMethodName == 'btnOpenReport_Click') {
                    var newScope = scope.$new(true);
                    newScope.model = scope.model;
                    newScope.istrEntityName = "";
                    if (scope.model.dictAttributes.sfwRelatedControl) {
                        var objmodel = FindControlByID(scope.formobject, scope.model.dictAttributes.sfwRelatedControl);
                        if (objmodel && objmodel.dictAttributes.sfwEntityField) {
                            var object = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(scope.formobject.dictAttributes.sfwEntity, objmodel.dictAttributes.sfwEntityField);
                            if (object) {
                                newScope.istrEntityName = object.Entity;
                            }
                        }
                    }
                    else if (scope.formobject.dictAttributes.sfwEntity) {
                        newScope.istrEntityName = scope.formobject.dictAttributes.sfwEntity;
                    }
                    newScope.ParameterNavigationOpenReportDialog = $rootScope.showDialog(newScope, "Navigation Parameter", "Form/views/ParameterNavigationOpenReport.html", { width: 700, height: 400 });
                }
                else {
                    var newScope = scope.$new(true);
                    newScope.selectedCurrentQuery = scope.selectedCurrentQuery;
                    newScope.SelectedObject = scope.model;
                    newScope.IsForm = true;
                    newScope.IsMultiActiveForm = false;
                    newScope.formobject = scope.formobject;
                    newScope.isFormLink = scope.isformlink;
                    var objGrid = FindParent(newScope.SelectedObject, "sfwGridView");
                    if (objGrid) {
                        newScope.ParentModel = objGrid;
                    }
                    var objListView = FindParent(newScope.SelectedObject, "sfwListView");
                    if (objListView) {
                        newScope.ParentModel = objListView;
                    }

                    newScope.NavigationParameterDialog = $rootScope.showDialog(newScope, "Navigation Parameters", "Form/views/ParameterNavigation.html", {
                        width: 1000, height: 520
                    });
                }
            };

            scope.onTooltipNavigationParamsClick = function () {
                if (scope.model.dictAttributes && scope.model.dictAttributes.sfwActiveForm) {
                    var newScope = scope.$new(true);
                    newScope.formobject = scope.formobject;
                    newScope.SelectedObject = scope.model;
                    newScope.NavigationParameterDialog = $rootScope.showDialog(newScope, "Navigation Parameter", "Form/views/ParameterNavigationForTooltipForm.html", {
                        width: 800, height: 520
                    });
                } else {
                    $SgMessagesService.Message('Message', "Please select active tooltip form");
                }
            };

            scope.onMessageIdClick = function () {

            };

            scope.onWorkflowActivitesClick = function () {

            };

            scope.onCheckedChanged = function () {
                if (scope.model.dictAttributes.sfwMethodName == "btnPdfCorrespondence_Click") {
                    var str = '"True"';
                    var strNavigationParameter = "";

                    if (scope.model.IsLaunchNewWindow && scope.model.IsShowDownloadDialog) {
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwNavigationParameter, scope.model.dictAttributes, "sfwNavigationParameter", strNavigationParameter, "sfwLaunchNewWindow=" + str + ";" + "sfwShowDownloadDialog=" + str);
                    }
                    else if (scope.model.IsLaunchNewWindow && !scope.model.IsShowDownloadDialog) {
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwNavigationParameter, scope.model.dictAttributes, "sfwNavigationParameter", strNavigationParameter, "sfwLaunchNewWindow=" + str);
                    }
                    else if (!scope.model.IsLaunchNewWindow && scope.model.IsShowDownloadDialog) {
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwNavigationParameter, scope.model.dictAttributes, "sfwNavigationParameter", strNavigationParameter, "sfwShowDownloadDialog=" + str);
                    }
                    else if (!scope.model.IsLaunchNewWindow && !scope.model.IsShowDownloadDialog) {
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwNavigationParameter, scope.model.dictAttributes, "sfwNavigationParameter", strNavigationParameter, "");
                    }

                }
            };

            //#endregion

            //#region Method For Image Button

            scope.PopulateTextRelatedControl = function () {
                scope.TextRelatedControls = [];
                PopulateTextRelatedControls(scope.formobject, scope.TextRelatedControls);
                scope.TextRelatedControls.splice(0, 0, "");
            };

            scope.PopulateImageAlign = function () {
                scope.lstImageAlign = [];
                scope.lstImageAlign.push("NotSet");
                scope.lstImageAlign.push("Left");
                scope.lstImageAlign.push("Right");
                scope.lstImageAlign.push("Baseline");
                scope.lstImageAlign.push("Top");
                scope.lstImageAlign.push("Middle");
                scope.lstImageAlign.push("Bottom");
                scope.lstImageAlign.push("AbsBottom");
                scope.lstImageAlign.push("AbsMiddle");
                scope.lstImageAlign.push("TextTop");
            };

            scope.OnActiveFormValueChange = function (isViewChange) {
                if (scope.model.Name == "sfwImageButton") {
                    if (scope.model.dictAttributes.sfwActiveForm) {
                        if (isViewChange) {
                            scope.lstSelectedIndex = [];
                            scope.lstSelectedIndex.push("");
                            scope.model.dictAttributes.sfwSelectedIndex = "";
                        }
                        // if active form is valid - only then get form model - only appplicable for onchange
                        if ((scope.model.errors && !scope.model.errors.invalid_active_form) || !scope.model.errors) {
                            $.connection.hubForm.server.getNewFormModel(scope.model.dictAttributes.sfwActiveForm).done(function (data) {
                                scope.receivenewformmodel(data);
                            });
                        }
                    }
                    else {
                        // when user deletes active form manually -- clear binded List for selectedIndex and and property sfwSelectedIndex
                        scope.lstSelectedIndex = [];
                        scope.lstSelectedIndex.push("");
                        scope.model.dictAttributes.sfwSelectedIndex = "";
                    }
                }
            };

            scope.onActiveFormTypeChange = function (blnVal) {
                $rootScope.UndRedoBulkOp("Start");
                $rootScope.EditPropertyValue(scope.IsMultiActiveForm, scope, "IsMultiActiveForm", blnVal);
                if (scope.model.dictAttributes.sfwMethodName == 'btnOpen_Click' && !blnVal) {
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwEntityField, scope.model.dictAttributes, "sfwEntityField", "");
                }
                $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwActiveForm, scope.model.dictAttributes, "sfwActiveForm", "");
                $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwNavigationParameter, scope.model.dictAttributes, "sfwNavigationParameter", "");
                if (scope.model && scope.model.Name == "sfwLinkButton" && scope.model.dictAttributes.sfwMethodName == 'btnOpen_Click' && !blnVal) {
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwActiveFormField, scope.model.dictAttributes, "sfwActiveFormField", "");
                }
                $rootScope.UndRedoBulkOp("End");
            };

            scope.receivenewformmodel = function (data) {
                scope.$apply(function () {
                    scope.objActiveFormModel = data;
                    if (scope.objActiveFormModel) {
                        if (scope.objActiveFormModel.dictAttributes.sfwType === "Lookup") {
                            var table = scope.objActiveFormModel.Elements.filter(function (itm) { return itm.Name == "sfwTable"; });
                            if (table && table.length > 0) {
                                GetControlNames(table[0], scope.lstSelectedIndex);
                            }
                        }
                        else {
                            var table = scope.objActiveFormModel.Elements.filter(function (itm) {
                                return itm.Name == "items";
                            });
                            if (table && table.length > 0) {
                                GetControlNames(table[0], scope.lstSelectedIndex);
                            }
                        }
                    }
                });
            };

            scope.onRetrievalParametersClick = function (model) {

                if (model.dictAttributes.sfwActiveForm) {
                    var newScope = scope.$new(true);
                    newScope.model = model;
                    newScope.formmodel = scope.formobject;
                    newScope.targetFormModel = scope.objActiveFormModel;

                    newScope.RetrievalButtonParaDialog = $rootScope.showDialog(newScope, "Retrieval Parameters", "Form/views/RetrievalButtonParameters.html", {
                        width: 800, height: 600
                    });
                } else {
                    $SgMessagesService.Message('Message', "Target Form not present.");
                }

            };

            //#endregion 

            //#region Web Control Methods
            scope.LoadWebControlProperties = function () {
                if ($rootScope.lstWebControls && $rootScope.lstWebControls.length > 0 && scope.model) {
                    var lst = $rootScope.lstWebControls.filter(function (x) {
                        return x.ControlName == scope.model.Name;
                    });
                    lst = JSON.parse(JSON.stringify(lst));
                    if (lst && lst.length > 0) {
                        if (scope.IsAdvancedOpen) {
                            scope.objAdvanceProperties = {};
                            scope.objAdvanceProperties.isAccessibilityPropertiesExist = lst[0].lstAccessibility && lst[0].lstAccessibility.length > 0 ? true : false;
                            scope.objAdvanceProperties.isAppearancePropertiesExist = lst[0].lstAppearance && lst[0].lstAppearance.length > 0 ? true : false;
                            scope.objAdvanceProperties.isBehaviorPropertiesExist = lst[0].lstBehavior && lst[0].lstBehavior.length > 0 ? true : false;
                            scope.objAdvanceProperties.isCustomPropertiesExist = lst[0].lstCustom && lst[0].lstCustom.length > 0 ? true : false;
                            scope.objAdvanceProperties.isLayoutPropertiesExist = lst[0].lstLayout && lst[0].lstLayout.length > 0 ? true : false;
                            scope.objAdvanceProperties.isNavigationPropertiesExist = lst[0].lstNavigation && lst[0].lstNavigation.length > 0 ? true : false;
                            scope.objAdvanceProperties.isExtraPropertiesExist = lst[0].lstExtra && lst[0].lstExtra.length > 0 ? true : false;
                            scope.objAdvanceProperties.isMiscPropertiesExist = lst[0].lstMisc && lst[0].lstMisc.length > 0 ? true : false;
                            scope.objAdvanceProperties.lstAccessibility = lst[0].lstAccessibility;
                        }
                        scope.SetDefaultValueToModel(lst[0]);
                        if (scope.model.Name == "sfwLabel" && "sfwIsCaption" in scope.model.dictAttributes && scope.model.dictAttributes.sfwIsCaption) {
                            var lst1 = scope.GetPropertyListByName(lst[0], "sfwIsCaption");
                            if (lst1 && lst1.length > 0) {
                                lst1[0].IsVisible = false;
                            }
                        }
                    }
                }
                scope.SetDataToWebControl();
            };

            scope.SetDefaultValueToModel = function (objWebControl) {

                var lst = scope.GetPropertyList(objWebControl, "Common");
                function iterator(itm) {
                    if (itm.DefaultValue != undefined && itm.DefaultValue != "") {
                        if ((scope.model.dictAttributes[itm.PropertyName] == undefined || scope.model.dictAttributes[itm.PropertyName] == "") && scope.model.dictAttributes[itm.PropertyName] != itm.DefaultValue) {
                            scope.model.dictAttributes[itm.PropertyName] = itm.DefaultValue;
                        }
                    }
                }
                if (lst && lst.length > 0) {

                    angular.forEach(lst, iterator);
                }
            };

            scope.GetPropertyList = function (objWebControl, propertyType) {
                //function filterProp(x) {
                //    return x.PropertyType == propertyType;
                //}
                //var lst = objWebControl.lstAccessibility.filter(filterProp);
                //var lst1 = objWebControl.lstAppearance.filter(filterProp);
                //var lst2 = objWebControl.lstBehavior.filter(filterProp);
                //var lst3 = objWebControl.lstCustom.filter(filterProp);
                //var lst4 = objWebControl.lstLayout.filter(filterProp);
                //var lst5 = objWebControl.lstNavigation.filter(filterProp);
                //var lst6 = objWebControl.lstExtra.filter(filterProp);

                var lstProperties = [];

                function iterator(x) {
                    lstProperties.push(x);
                }

                if (objWebControl) {
                    if (objWebControl.lstAccessibility) {
                        angular.forEach(objWebControl.lstAccessibility, iterator);
                    }
                    if (objWebControl.lstAppearance) {
                        angular.forEach(objWebControl.lstAppearance, iterator);
                    }
                    if (objWebControl.lstBehavior) {
                        angular.forEach(objWebControl.lstBehavior, iterator);
                    }
                    if (objWebControl.lstCustom) {
                        angular.forEach(objWebControl.lstCustom, iterator);
                    }
                    if (objWebControl.lstLayout) {
                        angular.forEach(objWebControl.lstLayout, iterator);
                    }
                    if (objWebControl.lstNavigation) {
                        angular.forEach(objWebControl.lstNavigation, iterator);
                    }
                    if (objWebControl.lstExtra) {
                        angular.forEach(objWebControl.lstExtra, iterator);
                    }
                    if (objWebControl.lstAutoComplete) {
                        angular.forEach(objWebControl.lstAutoComplete, iterator);
                    }
                    if (objWebControl.lstRetrieval) {
                        angular.forEach(objWebControl.lstRetrieval, iterator);
                    }
                }
                return lstProperties;
            };

            scope.GetPropertyListByName = function (objWebControl, propName) {
                function filterProp(x) {
                    return x.PropertyName == propName;
                }
                function AddInlstProperties(x) {
                    lstProperties.push(x);
                }
                var lstProperties = [];
                if (objWebControl) {

                    if (objWebControl.lstAccessibility) {
                        var lst = objWebControl.lstAccessibility.filter(filterProp);
                        angular.forEach(lst, AddInlstProperties);
                    }
                    if (objWebControl.lstAppearance) {
                        var lst1 = objWebControl.lstAppearance.filter(filterProp);
                        angular.forEach(lst1, AddInlstProperties);
                    }
                    if (objWebControl.lstBehavior) {
                        var lst2 = objWebControl.lstBehavior.filter(filterProp);
                        angular.forEach(lst2, AddInlstProperties);
                    }
                    if (objWebControl.lstCustom) {
                        var lst3 = objWebControl.lstCustom.filter(filterProp);
                        angular.forEach(lst3, AddInlstProperties);
                    }
                    if (objWebControl.lstLayout) {
                        var lst4 = objWebControl.lstLayout.filter(filterProp);
                        angular.forEach(lst4, AddInlstProperties);
                    }
                    if (objWebControl.lstNavigation) {
                        var lst5 = objWebControl.lstNavigation.filter(filterProp);
                        angular.forEach(lst5, AddInlstProperties);
                    }
                    if (objWebControl.lstExtra) {
                        var lst6 = objWebControl.lstExtra.filter(filterProp);
                        angular.forEach(lst6, AddInlstProperties);
                    }

                    if (objWebControl.lstAutoComplete) {
                        var lst7 = objWebControl.lstAutoComplete.filter(filterProp);
                        angular.forEach(lst7, AddInlstProperties);
                    }
                    if (objWebControl.lstRetrieval) {
                        var lst8 = objWebControl.lstRetrieval.filter(filterProp);
                        angular.forEach(lst8, AddInlstProperties);
                    }
                    if (objWebControl.lstMisc) {
                        var lst9 = objWebControl.lstMisc.filter(filterProp);
                        angular.forEach(lst9, AddInlstProperties);
                    }

                }
                return lstProperties;
            };

            scope.SetDataToWebControl = function () {
                if (scope.model) {
                    var ilsttempwebcontrol = $rootScope.lstWebControls.filter(function (x) {
                        return x.ControlName == scope.model.Name;
                    });
                    ilsttempwebcontrol = JSON.parse(JSON.stringify(ilsttempwebcontrol));

                    scope.ClearWebControlPropertyValue(ilsttempwebcontrol[0]);
                    function iterator(value, key) {
                        var lst = scope.GetPropertyListByName(scope.objAdvanceProperties, key);
                        //var lst = scope.lstWebControl.filter(function (x) {
                        //    return x.PropertyName == key
                        //});
                        if (lst && lst.length > 0) {
                            lst[0].PropertyValue = value;
                        }
                    }
                    angular.forEach(scope.model.dictAttributes, iterator);
                }
            };

            scope.ClearWebControlPropertyValue = function (objWebControl) {
                function iterator(x) {
                    if (x.PropertyValue != x.DefaultValue) {
                        x.PropertyValue = "";
                    }
                }
                if (objWebControl) {
                    if (objWebControl.lstAccessibility) {
                        angular.forEach(objWebControl.lstAccessibility, iterator);
                    }
                    if (objWebControl.lstAppearance) {
                        angular.forEach(objWebControl.lstAppearance, iterator);
                    }
                    if (objWebControl.lstBehavior) {
                        angular.forEach(objWebControl.lstBehavior, iterator);
                    }
                    if (objWebControl.lstCustom) {
                        angular.forEach(objWebControl.lstCustom, iterator);
                    }
                    if (objWebControl.lstLayout) {
                        angular.forEach(objWebControl.lstLayout, iterator);
                    }
                    if (objWebControl.lstNavigation) {
                        angular.forEach(objWebControl.lstNavigation, iterator);
                    }
                    if (objWebControl.lstExtra) {
                        angular.forEach(objWebControl.lstExtra, iterator);
                    }
                    if (objWebControl.lstAutoComplete) {
                        angular.forEach(objWebControl.lstAutoComplete, iterator);
                    }
                    if (objWebControl.lstRetrieval) {
                        angular.forEach(objWebControl.lstRetrieval, iterator);
                    }

                    if (objWebControl.lstMisc) {
                        angular.forEach(objWebControl.lstMisc, iterator);
                    }
                }
            };

            scope.onWebControlPropdbClick = function (prop) {
                if (prop.lstValues && prop.lstValues.length > 0) {
                    var selectedPropertyIndex = prop.lstValues.indexOf(prop.PropertyValue);
                    if (selectedPropertyIndex == (prop.lstValues.length - 1)) {
                        selectedPropertyIndex = -1;
                    }
                    $rootScope.UndRedoBulkOp("Start");
                    $rootScope.EditPropertyValue(prop.PropertyValue, prop, "PropertyValue", prop.lstValues[selectedPropertyIndex + 1]);
                    scope.onWebControlPropValueChange(prop);
                    $rootScope.UndRedoBulkOp("End");
                }
                if (event) {
                    event.stopPropagation();
                }
            }

            scope.onWebControlPropValueChange = function (prop) {
                if (prop) {
                    if (prop.DefaultValue) {
                        scope.model.dictAttributes[prop.PropertyName] = prop.DefaultValue;
                    }
                    $rootScope.EditPropertyValue(scope.model.dictAttributes[prop.PropertyName], scope.model.dictAttributes, prop.PropertyName, prop.PropertyValue);
                }
            };

            // for configure tab in property window(undo redo)
            scope.onWebControlValueChange = function (prop) {
                if (prop) {
                    $rootScope.EditPropertyValue(scope.model.dictAttributes[prop.key], scope.model.dictAttributes, prop.key, prop.val);
                }
            };

            scope.DeletePropertyFromModel = function (prop) {
                if (scope.model && prop) {
                    $rootScope.UndRedoBulkOp("Start");
                    var ilsttempwebcontrol = $rootScope.lstWebControls.filter(function (x) {
                        return x.ControlName == scope.model.Name;
                    });
                    ilsttempwebcontrol = JSON.parse(JSON.stringify(ilsttempwebcontrol));

                    var defaultValue = "";
                    if (ilsttempwebcontrol && ilsttempwebcontrol.length > 0) {
                        var lstProp = scope.GetPropertyListByName(ilsttempwebcontrol[0], prop.PropertyName);
                        if (lstProp && lstProp.length > 0) {
                            defaultValue = lstProp[0].DefaultValue;
                        }
                    }
                    $rootScope.EditPropertyValue(scope.model.dictAttributes[prop.PropertyName], scope.model.dictAttributes, prop.PropertyName, defaultValue);
                    $rootScope.DeleteItem(prop, scope.dictAttributesArray);
                    if (scope.model.UcChild) {
                        $rootScope.EditPropertyValue(scope.model.UcChild, scope.model, "UcChild", []);
                    }

                    $rootScope.UndRedoBulkOp("End");
                }
            }

            //#endregion      

            //#region Visible Rule Intellisence
            scope.visibleRuleTextChanged = function (event) {
                var data = [];
                var input = $(event.target);
                if (scope.formobject && scope.formobject.objExtraData) {
                    var iswizard = scope.formobject.dictAttributes.sfwType == "Wizard" ? true : false;
                    data = PopulateEntityRules(scope.formobject.objExtraData, iswizard, scope.formobject.dictAttributes.sfwInitialLoadGroup);
                    setSingleLevelAutoComplete(input, data);
                }
            };
            //#endregion 

            //#region Retrieval functionality as per new structure

            scope.RetrievalMethodInputChange = function () {
                scope.lstColumns = [];
                $rootScope.UndRedoBulkOp("Start");

                if (scope.model && scope.model.Name == "sfwCascadingDropDownList") {
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwCascadingRetrievalParameters, scope.model.dictAttributes, "sfwCascadingRetrievalParameters", "");
                }
                else {
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwParameters, scope.model.dictAttributes, "sfwParameters", "");
                }
                $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwRetrievalControls, scope.model.dictAttributes, "sfwRetrievalControls", "");
                $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwClientVisibilitySource, scope.model.dictAttributes, "sfwClientVisibilitySource", "");
                $rootScope.UndRedoBulkOp("End");
            };

            scope.RetrievalQueryInputChange = function (isLoad) {
                scope.lstColumns = [];
                if (scope.model.dictAttributes.sfwRetrievalQuery) {
                    var lst = scope.model.dictAttributes.sfwRetrievalQuery.split('.');
                    if (lst && lst.length == 2) {
                        var entityName = lst[0];
                        var strQueryID = lst[1];
                        var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                        var lstEntity = $filter('filter')(entityIntellisenseList, { ID: entityName }, true);
                        if (lstEntity && lstEntity.length > 0) {
                            var objEntity = lstEntity[0];
                            var lstQuery = objEntity.Queries.filter(function (x) {
                                return x.ID == strQueryID;
                            });
                            if (lstQuery && lstQuery.length > 0) {
                                var objQuery = lstQuery[0];

                                $.connection.hubForm.server.getEntityQueryColumns(scope.model.dictAttributes.sfwRetrievalQuery, "ScopeId_" + scope.$id).done(function (data) {
                                    scope.$evalAsync(function () {
                                        var obj = { CodeID: '', Description: '' };
                                        data.splice(0, 0, obj);
                                        scope.lstColumns = data;
                                    });
                                });
                            }
                        }
                    }
                }

                if (!isLoad) {
                    $rootScope.UndRedoBulkOp("Start");
                    if (scope.model && scope.model.Name == "sfwCascadingDropDownList") {
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwCascadingRetrievalParameters, scope.model.dictAttributes, "sfwCascadingRetrievalParameters", "");
                    }
                    else {
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwParameters, scope.model.dictAttributes, "sfwParameters", "");
                    }
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwRetrievalControls, scope.model.dictAttributes, "sfwRetrievalControls", "");
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwClientVisibilitySource, scope.model.dictAttributes, "sfwClientVisibilitySource", "");
                    $rootScope.UndRedoBulkOp("End");
                }
            };

            scope.RetrievalMethodChange = function (flag) {
                scope.lstColumns = [];
                $rootScope.UndRedoBulkOp("Start");

                if (scope.model.retrievalType == "Method") {
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwRetrievalQuery, scope.model.dictAttributes, "sfwRetrievalQuery", "");

                    if (flag == true) {

                        if (scope.model && scope.model.Name == "sfwCascadingDropDownList") {
                            $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwCascadingRetrievalParameters, scope.model.dictAttributes, "sfwCascadingRetrievalParameters", "");
                        }
                        else {
                            $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwParameters, scope.model.dictAttributes, "sfwParameters", "");
                        }
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwRetrievalControls, scope.model.dictAttributes, "sfwRetrievalControls", "");
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwClientVisibilitySource, scope.model.dictAttributes, "sfwClientVisibilitySource", "");
                    }

                    $rootScope.UndRedoBulkOp("End");

                }
            };

            if (scope.model && scope.model.dictAttributes.sfwRetrievalMethod) {
                scope.model.retrievalType = "Method";
                scope.RetrievalMethodChange(false);
            }
            else {
                if (scope.model) {
                    scope.model.retrievalType = "Query";
                }
            }

            scope.getParameterRet_dialog = function () {
                var dialogScope = scope.$new(true);
                dialogScope.model = {};
                angular.copy(scope.model, dialogScope.model);
                dialogScope.formobject = {};
                angular.copy(scope.formobject, dialogScope.formobject);
                if (scope.model.Name == "sfwCascadingDropDownList") {
                    if (scope.model.dictAttributes.sfwCascadingRetrievalParameters != undefined) {
                        dialogScope.strSelectedParameters = scope.model.dictAttributes.sfwCascadingRetrievalParameters;
                    }
                }
                else {
                    if (scope.model.dictAttributes.sfwParameters != undefined) {
                        dialogScope.strSelectedParameters = scope.model.dictAttributes.sfwParameters;
                    }
                }
                if (scope.model.retrievalType == "Query" && scope.model.dictAttributes.sfwRetrievalQuery) {
                    var lst = scope.model.dictAttributes.sfwRetrievalQuery.split('.');
                    if (lst && lst.length == 2) {
                        var entityName = lst[0];
                        var strQueryID = lst[1];
                        var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                        var lstEntity = entityIntellisenseList.filter(function (x) {
                            return x.ID == entityName;
                        });
                        if (lstEntity && lstEntity.length > 0) {
                            var objEntity = lstEntity[0];
                            var lstQuery = objEntity.Queries.filter(function (x) {
                                return x.ID == strQueryID;
                            });
                            if (lstQuery && lstQuery.length > 0) {
                                var objQuery = lstQuery[0];
                                dialogScope.selectedCurrentQuery = objQuery;
                            }
                        }
                    }
                }
                if (scope.model.retrievalType == "Method") {
                    scope.lstMethods = [];
                    var lstData = [];
                    if (scope.model.IsChildOfGrid) {
                        var objParent = FindParent(scope.model, "sfwGridView");
                        if (objParent == null) {

                            objParent = FindParent(scope.model, "sfwListView");
                        }
                        if (objParent) {
                            var objParentField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(scope.formobject.dictAttributes.sfwEntity, objParent.dictAttributes.sfwEntityField);
                            if (objParentField && objParentField.Entity) {
                                lstData = $Entityintellisenseservice.GetIntellisenseData(objParentField.Entity, "", "", true, false, true, false, false, false);
                            }
                        }
                    }
                    else {
                        lstData = $Entityintellisenseservice.GetIntellisenseData(scope.formobject.dictAttributes.sfwEntity, "", "", true, false, true, false, false, false);
                    }
                    var lsttempData = [];
                    var objMethod;
                    if (lstData) {
                        //angular.forEach(lstData, function (item) {
                        //    if (!objMethod) {
                        //        if (item.ID == strObjectMethod) {
                        //            objMethod = item;
                        //        }
                        //    }
                        //});
                        if (scope.model.dictAttributes.sfwRetrievalMethod) {
                            for (var i = 0; i < lstData.length; i++) {
                                if (lstData[i].ID == scope.model.dictAttributes.sfwRetrievalMethod) {
                                    dialogScope.selectedCurrentQuery = lstData[i];
                                }
                            }
                        }
                    }


                    //var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                    //var lst = $filter('filter')(entityIntellisenseList, { ID: scope.formobject.dictAttributes.sfwEntity }, true);
                    //if (lst && lst.length > 0) {
                    //    if (lst[0].ObjectMethods) {
                    //        scope.lstMethods = lst[0].ObjectMethods;
                    //    }
                    //}

                }

                dialogScope.objNewDialog = $rootScope.showDialog(dialogScope, "Retrieval Parameters", "Form/views/RetrievalParameters.html", {
                    width: 700, height: 500
                });

                //dialogScope.RetrievalParameterDialog = ngDialog.open({
                //    template: "Form/views/RetrievalParameters.html",
                //    scope: dialogScope,
                //    closeByDocument: false,
                //    className: 'ngdialog-theme-default ngdialog-theme-custom'
                //});
                dialogScope.$on("onRetrievalParameterClick", function (event, data) {
                    if (scope.model.Name == "sfwCascadingDropDownList") {
                        // scope.model.dictAttributes.sfwCascadingRetrievalParameters = data;

                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwCascadingRetrievalParameters, scope.model.dictAttributes, "sfwCascadingRetrievalParameters", data);
                        createGlobalParameterList(scope.model.dictAttributes.sfwCascadingRetrievalParameters, "sfwCascadingRetrievalParameters");
                    }
                    else {
                        //scope.model.dictAttributes.sfwParameters = data;
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwParameters, scope.model.dictAttributes, "sfwParameters", data);
                        createGlobalParameterList(scope.model.dictAttributes.sfwParameters, "sfwParameters");
                    }
                    event.stopPropagation();
                });
            };
            scope.$on("onRetrievalParameterClick", function (event, data) {
                if (scope.model.Name == "sfwCascadingDropDownList") {
                    //  scope.model.dictAttributes.sfwCascadingRetrievalParameters = data;
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwCascadingRetrievalParameters, scope.model.dictAttributes, "sfwCascadingRetrievalParameters", data);
                    createGlobalParameterList(scope.model.dictAttributes.sfwCascadingRetrievalParameters, "sfwCascadingRetrievalParameters");
                }
                else {
                    //  scope.model.dictAttributes.sfwParameters = data;
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwParameters, scope.model.dictAttributes, "sfwParameters", data);
                    createGlobalParameterList(scope.model.dictAttributes.sfwParameters, "sfwParameters");
                }
                event.stopPropagation();
            });

            scope.parameterList = [];
            var createGlobalParameterList = function (vlaue, prop) {
                $.connection.hubForm.server.getGlobleParameters().done(function (data) {
                    scope.$evalAsync(function () {
                        if (data) {
                            angular.forEach(data.Elements, function (paramObj) {
                                if (paramObj && paramObj.dictAttributes.ID) {
                                    var item = "~" + paramObj.dictAttributes.ID;
                                    scope.parameterList.push(item);
                                }
                            });
                            scope.validateParameters(vlaue, prop);
                        } else {
                            scope.validateParameters(vlaue, prop);
                        }
                    });
                });
            };
            var populateAllControlsId = function (mainObj) {
                angular.forEach(mainObj.Elements, function (obj) {
                    if (obj && obj.dictAttributes.ID) {
                        scope.parameterList.push(obj.dictAttributes.ID);
                    }
                    if (obj.Elements.length > 0) {
                        populateAllControlsId(obj);
                    }
                });
            };
            scope.validateParameters = function (params, prop) {
                populateAllControlsId(scope.formobject);
                var prefix = "prop-";
                if (prop == "sfwAutoParameters") {
                    prefix = "autoprop-";
                } else if (prop == "sfwCascadingRetrievalParameters") {
                    prefix = "cprop-";
                }
                if (angular.isObject(scope.model.errors)) {
                    for (var key in scope.model.errors) {
                        if (key && key.startsWith(prefix)) {
                            delete scope.model.errors[key];
                        }
                    }
                }
                if (params) {
                    var param = params.split(";");
                    for (var i = 0; i < param.length; i++) {
                        var str1 = param[i].split("=");
                        var strId = str1[str1.length - 1];
                        $ValidationService.checkValidListValue(scope.parameterList, scope.model, strId, prop, prefix + strId, "parameter value(" + strId + ") does not exists", null);
                    }
                }
            };
            scope.LoadClientVisibilitySource = function () {
                function iterator(itm) {
                    if (itm.indexOf("=") > 0) {
                        var param = itm.substring(itm.indexOf("=") + 1);
                        scope.lstColumns.push({ CodeID: param, Description: param });
                    }
                }
                if (scope.model && scope.model.retrievalType && scope.model.retrievalType == "Method") {
                    scope.lstColumns = [];
                    scope.lstColumns.push({ CodeID: "", Description: "" });
                    if (scope.model && scope.model.dictAttributes && scope.model.dictAttributes.sfwRetrievalControls) {
                        var lst = scope.model.dictAttributes.sfwRetrievalControls.split(";");
                        if (lst && lst.length > 0) {

                            angular.forEach(lst, iterator);
                        }
                    }
                }
            };


            var browseRetrievalControls = (function () {
                return {
                    setnewScope: function () {
                        dialogScope = scope.$new(true);
                    },
                    loadDialog: function () {
                        var dialogScope = scope.$new(true);
                        if (scope.model.dictAttributes.sfwRetrievalControls != undefined) {
                            //angular.copy($scope.model.dictAttributes.sfwRetrievalControls, dialogScope.strSelectedRetrievalControls);
                            dialogScope.strSelectedRetrievalControls = scope.model.dictAttributes.sfwRetrievalControls;
                        }
                        dialogScope.model = {};
                        angular.copy(scope.model, dialogScope.model);
                        dialogScope.formobject = {};
                        angular.copy(scope.formobject, dialogScope.formobject);
                        dialogScope.IsRetrievalQuery = true;
                        //dialogScope.RetrievalControlsDialog = ngDialog.open({
                        //    template: "Form/views/RetrievalControls.html",
                        //    scope: dialogScope,
                        //    closeByDocument: false,
                        //    className: 'ngdialog-theme-default ngdialog-theme-custom',
                        //});

                        dialogScope.OnOkClick = function () {
                            scope.LoadClientVisibilitySource();
                        };

                        dialogScope.RetrievalControlsDialog = $rootScope.showDialog(dialogScope, "Retrieval Controls", "Form/views/RetrievalControls.html", {
                            width: 700, height: 500
                        });

                    },
                    afterDialog: function (data) {
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwRetrievalControls, scope.model.dictAttributes, "sfwRetrievalControls", data);
                        dialogScope.$destroy();
                    }
                };
            }()); // IFEE 


            scope.getRetrievalControl_dialog = function () {
                browseRetrievalControls.setnewScope();
                browseRetrievalControls.loadDialog();
            };
            scope.$on('onRetrievalControlClick', function (event, data) {
                browseRetrievalControls.afterDialog(data);
            });
            scope.RetrievalQueryChange = function () {
                scope.lstColumns = [];
                if (scope.model.retrievalType == "Query") {
                    $rootScope.UndRedoBulkOp("Start");
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwRetrievalMethod, scope.model.dictAttributes, "sfwRetrievalMethod", "");
                    if (scope.model && scope.model.Name == "sfwCascadingDropDownList") {
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwCascadingRetrievalParameters, scope.model.dictAttributes, "sfwCascadingRetrievalParameters", "");
                    }
                    else {
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwParameters, scope.model.dictAttributes, "sfwParameters", "");
                    }
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwRetrievalControls, scope.model.dictAttributes, "sfwRetrievalControls", "");
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwClientVisibilitySource, scope.model.dictAttributes, "sfwClientVisibilitySource", "");
                    $rootScope.UndRedoBulkOp("End");
                }
            };

            //#endregion



            //#region AutoComplete functionality as per new structure
            if (scope.model && scope.model.Name == "sfwTextBox" && (scope.model.dictAttributes.sfwAutoMinLength == undefined || scope.model.dictAttributes.sfwAutoMinLength == "")) {
                scope.model.dictAttributes.sfwAutoMinLength = "3";
            }
            if (scope.model && scope.model.Name == "sfwTextBox" && (scope.model.dictAttributes.sfwDelay == undefined || scope.model.dictAttributes.sfwDelay == "")) {
                scope.model.dictAttributes.sfwDelay = "1000";
            }
            var browseQueryAutoComplete = (function () {
                return {
                    setnewScope: function () {
                        dialogScope = scope.$new(true);
                    },
                    loadDialog: function () {
                        if (scope.model.dictAttributes.sfwAutoQuery != undefined) {
                            dialogScope.strSelectedQuery = scope.model.dictAttributes.sfwAutoQuery;
                        }
                        dialogScope.IsAutoComplete = true;


                        dialogScope.QueryDialog = $rootScope.showDialog(dialogScope, "Browse For Query", "Form/views/BrowseForQuery.html", {
                            width: 1000, height: 700
                        });
                    },
                    afterDialog: function (data) {
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwAutoQuery, scope.model.dictAttributes, "sfwAutoQuery", data);
                        dialogScope.$destroy();
                    }
                };
            }()); // IFEE 

            scope.AutoCompleteQueryChange = function (data) {
                $rootScope.UndRedoBulkOp("Start");
                $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwAutoParameters, scope.model.dictAttributes, "sfwAutoParameters", "");
                $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwAutoColumns, scope.model.dictAttributes, "sfwAutoColumns", "");
                $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwAutoFillMapping, scope.model.dictAttributes, "sfwAutoFillMapping", "");
                $rootScope.UndRedoBulkOp("End");
            };

            scope.getQueryParameter_dialog = function () {
                browseQueryAutoComplete.setnewScope();
                browseQueryAutoComplete.loadDialog();
            };
            scope.$on('onAutoCompleteClick', function (event, data) {
                browseQueryAutoComplete.afterDialog(data);
            });

            scope.getParameter_dialog = function () {
                var dialogScope = scope.$new(true);
                dialogScope.model = {};
                angular.copy(scope.model, dialogScope.model);
                dialogScope.formobject = {};
                angular.copy(scope.formobject, dialogScope.formobject);
                dialogScope.IsAutoComplete = true;
                dialogScope.FormType = scope.formobject.dictAttributes.sfwType;
                if (scope.model && (scope.model.dictAttributes.sfwAutoParameters != undefined)) {
                    dialogScope.strSelectedParameters = scope.model.dictAttributes.sfwAutoParameters;
                }
                if (scope.model.autocompleteType === "Query" && scope.model.dictAttributes.sfwAutoQuery) {
                    dialogScope.selectedCurrentQuery = $EntityIntellisenseFactory.getQueryByQueryName(scope.model.dictAttributes.sfwAutoQuery);
                }
                else if (scope.model.autocompleteType === "Method" && scope.model.dictAttributes.sfwAutoMethod) {
                    var llstObjectMethods = $Entityintellisenseservice.GetIntellisenseData(scope.entityName, null, null, true, false, true, false, false, false);
                    llstObjectMethods = llstObjectMethods.filter(function (aobjMethod) { return aobjMethod.ID.toLowerCase() === scope.model.dictAttributes.sfwAutoMethod.toLowerCase(); });
                    if (llstObjectMethods && llstObjectMethods.length) {
                        dialogScope.selectedMethod = llstObjectMethods[0];
                    }
                }
                dialogScope.objNewDialog = $rootScope.showDialog(dialogScope, "AutoComplete Parameter", "Form/views/AutoCompleteParameter.html", {
                    width: 800, height: 500
                });


                //dialogScope.RetrievalParameterDialog = ngDialog.open({
                //    template: "Form/views/AutoCompleteParameter.html",
                //    scope: dialogScope,
                //    closeByDocument: false,
                //    className: 'ngdialog-theme-default ngdialog-theme-custom'
                //});
            };
            scope.$on("onAutoCompleteParameterClick", function (event, data) {
                $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwAutoParameters, scope.model.dictAttributes, "sfwAutoParameters", data);
                createGlobalParameterList(scope.model.dictAttributes.sfwAutoParameters, "sfwAutoParameters");
            });


            var browseRetrievalControlsMethod = (function () {
                return {
                    setnewScope: function () {
                        dialogScope = scope.$new(true);
                    },
                    loadDialog: function () {
                        var dialogScope = scope.$new(true);
                        if (scope.model.dictAttributes.sfwAutoFillMapping != undefined) {
                            dialogScope.strSelectedRetrievalControls = scope.model.dictAttributes.sfwAutoFillMapping;
                        }
                        dialogScope.model = {};
                        angular.copy(scope.model, dialogScope.model);
                        dialogScope.formobject = {};
                        angular.copy(scope.formobject, dialogScope.formobject);
                        dialogScope.IsAutoComplete = true;
                        //dialogScope.RetrievalControlsDialog = ngDialog.open({
                        //    template: "Form/views/RetrievalControls.html",
                        //    scope: dialogScope,
                        //    closeByDocument: false,
                        //    className: 'ngdialog-theme-default ngdialog-theme-custom',
                        //});

                        dialogScope.RetrievalControlsDialog = $rootScope.showDialog(dialogScope, "Auto Complete Control Mapping", "Form/views/RetrievalControls.html", {
                            width: 700, height: 500
                        });
                    },
                    afterDialog: function (data) {
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwAutoFillMapping, scope.model.dictAttributes, "sfwAutoFillMapping", data);
                        dialogScope.$destroy();
                    }
                };
            }()); // IFEE 
            scope.getRetrievalControlMethod_dialog = function () {
                browseRetrievalControlsMethod.setnewScope();
                browseRetrievalControlsMethod.loadDialog();
            };
            scope.$on('onAutoCompletelControlClick', function (event, data) {
                browseRetrievalControlsMethod.afterDialog(data);
            });

            var browseAutoCompleteColumns = (function () {
                return {
                    setnewScope: function () {
                        dialogScope = scope.$new(true);
                    },
                    loadDialog: function () {
                        var dialogScope = scope.$new(true);
                        if (scope.model && (scope.model.dictAttributes.sfwAutoColumns != undefined)) {
                            dialogScope.strSelectedAutoColumns = scope.model.dictAttributes.sfwAutoColumns;
                        }
                        dialogScope.model = {};
                        angular.copy(scope.model, dialogScope.model);
                        dialogScope.formobject = {};
                        angular.copy(scope.formobject, dialogScope.formobject);
                        dialogScope.IsAutoComplete = true;
                        dialogScope.entityName = scope.entityName;
                        //dialogScope.AutoCompleteColumnsDialog = ngDialog.open({
                        //    template: "Form/views/AutoCompleteColumns.html",
                        //    scope: dialogScope,
                        //    closeByDocument: false,
                        //    className: 'ngdialog-theme-default ngdialog-theme-custom',
                        //});

                        dialogScope.AutoCompleteColumnDialog = $rootScope.showDialog(dialogScope, "AutoComplete Columns", "Form/views/AutoCompleteColumns.html", {
                            width: 1000, height: 500
                        });
                    },
                    afterDialog: function (data) {
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwAutoColumns, scope.model.dictAttributes, "sfwAutoColumns", data);
                        dialogScope.$destroy();
                    }
                };
            }()); // IFEE 
            scope.getColumns_dialog = function () {
                browseAutoCompleteColumns.setnewScope();
                browseAutoCompleteColumns.loadDialog();
            };
            scope.$on('onAutoCompletelColumnsClick', function (event, data) {
                browseAutoCompleteColumns.afterDialog(data);
            });
            scope.okClick = function () {
                if (scope.model && scope.model.dictAttributes.sfwAutoMinLength == "3") {
                    scope.model.dictAttributes.sfwAutoMinLength = "";
                }
                if (scope.model && scope.model.dictAttributes.sfwDelay == "1000") {
                    scope.model.dictAttributes.sfwDelay = "";
                }
                scope.onCancelClick();
            };

            scope.autocompleteMethodInputChange = function () {
                scope.lstColumns = [];
                $rootScope.UndRedoBulkOp("Start");
                $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwAutoParameters, scope.model.dictAttributes, "sfwAutoParameters", "");
                $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwAutoColumns, scope.model.dictAttributes, "sfwAutoColumns", "");
                $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwAutoFillMapping, scope.model.dictAttributes, "sfwAutoFillMapping", "");
                $rootScope.UndRedoBulkOp("End");
            };
            scope.onAutocompleteMethodChange = function (clearParams) {
                scope.lstColumns = [];
                if (scope.model.autocompleteType == "Method") {
                    if (clearParams) {
                        scope.onAutocompleteChange(scope.model.autocompleteType);
                    }
                    scope.model.dictAttributes.sfwAutoQuery = "";
                }
            };
            scope.onAutocompleteQueryChange = function (clearParams) {
                scope.lstColumns = [];
                if (scope.model.autocompleteType == "Query") {
                    if (clearParams) {
                        scope.onAutocompleteChange(scope.model.autocompleteType);
                    }
                    scope.model.dictAttributes.sfwAutoMethod = "";
                }
            };
            scope.onAutocompleteChange = function (autocompleteType, enableUndoRedo) {
                //Setting the default value to true;
                if (enableUndoRedo === undefined) {
                    enableUndoRedo = true;
                }

                if (enableUndoRedo) {
                    $rootScope.UndRedoBulkOp("Start");
                    if (autocompleteType === "Query") {
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwRetrievalMethod, scope.model.dictAttributes, "sfwAutoMethod", "");
                    }
                    else if (autocompleteType === "Method") {
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwRetrievalQuery, scope.model.dictAttributes, "sfwAutoQuery", "");
                    }
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwAutoParameters, scope.model.dictAttributes, "sfwAutoParameters", "");
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwAutoColumns, scope.model.dictAttributes, "sfwAutoColumns", "");
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwAutoFillMapping, scope.model.dictAttributes, "sfwAutoFillMapping", "");
                    $rootScope.UndRedoBulkOp("End");
                }
                else {
                    if (autocompleteType === "Query") {
                        scope.model.dictAttributes.sfwRetrievalMethod = "";
                    }
                    else if (autocompleteType === "Method") {
                        scope.model.dictAttributes.sfwRetrievalQuery = "";
                    }
                    scope.model.dictAttributes.sfwAutoParameters = "";
                    scope.model.dictAttributes.sfwAutoColumns = "";
                    scope.model.dictAttributes.sfwAutoFillMapping = "";
                }
            }
            //#endregion

            //#region Load Common Properties Template (Revised)
            var isLoad = true;
            scope.getGroupList = function (event) {
                scope.lstGroupList = [];
                if (scope.formobject.objExtraData && scope.formobject.objExtraData.lstGroupsList[0]) {


                    scope.lstGroupList = scope.formobject.objExtraData.lstGroupsList[0].Elements;

                    //if (lstGroupList && lstGroupList.length > 0) {
                    //    setSingleLevelAutoComplete($(event.currentTarget), lstGroupList[0].Elements, scope, "ID");
                    //}
                }
                scope.lstGroupList.splice(0, 0, { dictAttributes: { ID: "" } });
            };
            //var parent = $(element).parent();
            //parent.html(scope.getTemplate());
            //$compile(parent.contents())(scope);
            scope.setEntityName = function () {
                if (scope.formobject && scope.formobject.SelectedControl && scope.formobject.SelectedControl.IsGridChildOfListView) {
                    if (scope.model && scope.model.Name == "sfwGridView") {
                        var listViewparent = FindParent(scope.model, "sfwListView");
                        if (listViewparent) {
                            var object = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(scope.formobject.dictAttributes.sfwEntity, listViewparent.dictAttributes.sfwEntityField);
                            if (object) {
                                scope.entityName = object.Entity;
                            }
                        }
                    }
                    else {
                        scope.entityName = scope.entityTreeName;
                    }
                }
                else {
                    if (scope.model && scope.model.dictAttributes.sfwRelatedGrid) {
                        var objmodel = FindControlByID(scope.formobject, scope.model.dictAttributes.sfwRelatedGrid);
                        if (objmodel && objmodel.dictAttributes.sfwEntityField) {
                            var object = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(scope.formobject.dictAttributes.sfwEntity, objmodel.dictAttributes.sfwEntityField);
                            if (object) {
                                scope.entityName = object.Entity;
                            }
                        } else {
                            scope.entityName = "";
                        }
                    } else if (scope.formobject && scope.model && scope.model.IsChildOfGrid) {
                        scope.entityName = $GetGridEntity.getEntityName(scope.formobject, scope.model);
                    } else if (scope.formobject && scope.model && scope.model.dictAttributes.sfwEntityField && scope.model.dictAttributes.sfwEntityField.indexOf('.') > -1) {
                        var object = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(scope.formobject.dictAttributes.sfwEntity, scope.model.dictAttributes.sfwEntityField);
                        if (object && object.Entity) {
                            scope.entityName = object.Entity;
                        }
                    }
                    else {
                        scope.entityName = scope.entityTreeName;
                    }
                }

            };

            function watchOnModel(newVal, oldVal) {
                if (newVal) {

                    //#region Call Init Method
                    if (isLoad) {
                        scope.Init();
                        isLoad = false;
                    }
                    //#endregion
                    //#region Call Init Method for control
                    scope.setEntityName();
                    scope.InitByControl();
                    //#endregion

                }
            }

            var unwatch = scope.$watch('model', watchOnModel);

            //#endregion 

            //#region Show hide properties for control
            scope.IsShowModePropertyVisible = function () {
                if (scope.model && scope.model.Name != "sfwLiteral" && scope.model.Name != "RequiredFieldValidator" && scope.model.Name != "CompareValidator" && scope.model.Name != "sfwSoftErrors" && scope.model.Name != "TemplateField" && scope.model.Name != "sfwColumn" && scope.model.Name != "sfwPanel" && scope.model.Name != "sfwRuleViewer") {
                    if (scope.model.Name == "sfwTable" || (!scope.IsLookup && scope.model && (scope.model.Name == "sfwLabel" || scope.model.Name == "sfwDropDownList" || scope.model.Name == "sfwCascadingDropDownList" || scope.model.Name == "sfwMultiSelectDropDownList" || scope.model.Name == "sfwCheckBox" || scope.model.Name == "sfwRadioButton" || scope.model.Name == "sfwTextBox" || scope.model.Name == "sfwTargetList" ||
                        scope.model.Name == "sfwListPicker" || scope.model.Name == "sfwSourceList" || scope.model.Name == "sfwMultiCorrespondence" || scope.model.Name == "sfwOpenDetail" || scope.model.Name == "sfwDateTimePicker") || scope.model.Name == "RangeValidator" || scope.model.Name == "ValidationSummary" || scope.model.Name == "RegularExpressionValidator" || scope.model.Name == "sfwCheckBoxList"
                        || scope.model.Name == "sfwRadioButtonList" || scope.model.Name == "sfwButton" || scope.model.Name == "sfwLinkButton" || scope.model.Name == "sfwCommandButton" || scope.model.Name == "sfwSlider" || scope.model.Name == "sfwKnob" || scope.model.Name == "sfwJSONData" || scope.model.Name == "sfwButtonGroup")) {
                        scope.IsShowModeProperty = true;
                    } else {
                        scope.IsShowModeProperty = false;
                    }
                }
                else {
                    scope.IsShowModeProperty = false;
                }
            };

            scope.IsShowVisibleRulePropertyVisible = function () {
                if (scope.IsReport) {
                    scope.IsShowVisibleRuleProperty = false;
                }
                else if (scope.IsCorrespondence && scope.model && scope.model.Name != "sfwColumn") {
                    scope.IsShowVisibleRuleProperty = true;
                }
                else if (scope.IsLookup) {
                    if (scope.model.IsChildOfGrid && scope.objGridView) {
                        scope.IsShowVisibleRuleProperty = true;
                    }
                    else {
                        scope.IsShowVisibleRuleProperty = false;
                    }
                }
                else {
                    if (scope.model && scope.model.Name != "sfwLiteral" && scope.model.Name != "RequiredFieldValidator" && scope.model.Name != "CompareValidator" && scope.model.Name != "sfwSoftErrors" && scope.model.Name != "TemplateField" && scope.model.Name != "sfwWizard" && scope.model.Name != "udc" && scope.model.Name != "sfwRuleViewer" && scope.model.Name != 'TemplateField') {
                        if (scope.model.Name == "sfwTable" || (scope.model && scope.model.Name != "sfwColumn" && scope.model.Name != "hr" && scope.model.Name != "br" && scope.model.Name != "sfwCRViewer" && scope.model.Name != "sfwFileLayout" && scope.model.Name != "sfwFileUpload" && scope.model.Name != "sfwTabContainer" && scope.model.Name != "sfwWizardProgress") || scope.model.Name == "RangeValidator" || scope.model.Name == "ValidationSummary" || scope.model.Name == "RegularExpressionValidator" || scope.model.Name == "sfwTabSheet" || scope.model.Name == "sfwCheckBoxList" || scope.model.Name == "sfwRadioButtonList" || scope.model.Name == "sfwHyperLink" || scope.model.Name == "sfwTable" || scope.model.Name == "sfwGridView") {
                            if (scope.model.IsChildOfGrid && scope.objGridView) {
                                //if (scope.objGridView.dictAttributes.sfwDatasourceType == "SystemQuery" || scope.objGridView.dictAttributes.sfwDatasourceType == "CustomQuery") {
                                //    scope.IsShowVisibleRuleProperty = false;
                                //}
                                //else {
                                scope.IsShowVisibleRuleProperty = true;
                                //}
                            }
                            else {
                                scope.IsShowVisibleRuleProperty = true;
                            }
                        } else {
                            scope.IsShowVisibleRuleProperty = false;
                        }
                    }
                    else {
                        scope.IsShowVisibleRuleProperty = false;
                    }
                }

            };

            scope.IsShowResourcePropertyVisible = function () {
                scope.IsShowResourceProperty = false;
                if (!scope.IsLookup) {
                    if (scope.model && !scope.model.IsChildOfGrid) {
                        if (scope.model && scope.model.Name != "sfwLiteral" && scope.model.Name != "RequiredFieldValidator" && scope.model.Name != "CompareValidator" && scope.model.Name != "sfwSoftErrors" && scope.model.Name != "TemplateField" && scope.model.Name != "sfwWizard" && scope.model.Name != "sfwColumn" && scope.model.Name != "sfwRuleViewer") {
                            if (scope.model.Name == "sfwTable" || (scope.model && scope.model.Name != "hr" && scope.model.Name != "br" && scope.model.Name != "sfwCRViewer" && scope.model.Name != "sfwFileLayout" && scope.model.Name != "sfwFileUpload" && scope.model.Name != "sfwTabContainer" && scope.model.Name != "sfwWizardProgress") || scope.model.Name == "RangeValidator" || scope.model.Name == "ValidationSummary" || scope.model.Name == "RegularExpressionValidator" || scope.model.Name == "sfwTabSheet" || scope.model.Name == "sfwCheckBoxList" || scope.model.Name == "sfwRadioButtonList" || scope.model.Name == "sfwHyperLink" || scope.model.Name == "sfwPanel" || scope.model.Name == "sfwTable" || scope.model.Name == "sfwGridView" || (!scope.IsLookup && scope.model.Name == "sfwDateTimePicker")) {
                                scope.IsShowResourceProperty = true;
                            }
                        }
                    }
                }
            };

            scope.IsShowCssClassPropertyVisible = function () {
                if (scope.model && scope.model.Name != "hr" && scope.model.Name != "sfwToolTipButton" && scope.model.Name != "br" && scope.model.Name != "TemplateField" && scope.model.Name != "sfwTable" && scope.model.Name != "sfwGridView" && scope.model.Name != "udc" && scope.model.Name != "sfwRuleViewer" && scope.model.Name != "sfwJSONData") {
                    scope.IsShowCssClassProperty = true;
                }
                else {
                    scope.IsShowCssClassProperty = false;
                }
            };

            scope.IsShowCustomAttributePropertyVisible = function () {
                if (scope.IsReport) {
                    scope.IsShowCustomAttributeProperty = (scope.model && ["sfwDropDownList", "sfwImageButton", "sfwCascadingDropDownList", "sfwRadioButtonList"].indexOf(scope.model.Name) > -1) ? true : false;
                }
                else if (scope.IsCorrespondence) {
                    scope.IsShowCustomAttributeProperty = true;
                }
                else {
                    //if (scope.model && scope.model.Name != "sfwLiteral" && scope.model.Name != "RequiredFieldValidator" && scope.model.Name != "CompareValidator" && scope.model.Name != "sfwSoftErrors" && scope.model.Name != "TemplateField" && scope.model.Name != "udc" && scope.model.Name != "sfwRuleViewer") {
                    //    if (scope.model && scope.model.Name != "sfwColumn" && scope.model.Name != "sfwCRViewer" && scope.model.Name != "sfwFileLayout" && scope.model.Name != "sfwFileUpload" && scope.model.Name != "sfwWizardProgress") {
                    //        scope.IsShowCustomAttributeProperty = true;
                    //    } else {
                    //        scope.IsShowCustomAttributeProperty = false;
                    //    }
                    //}
                    //else {
                    //    scope.IsShowCustomAttributeProperty = false;
                    //}
                    scope.IsShowCustomAttributeProperty = true;

                }
            };
            //#endregion

            //#region User Control Methods
            scope.onUserControlTextChange = function (event) {
                if (scope.model.dictAttributes.Name && scope.model.errors && !scope.model.errors.invalid_active_form) {
                    var fileList = [];
                    var obj = { FileName: scope.model.dictAttributes.Name, ID: scope.model.dictAttributes.ID };
                    fileList.push(obj);
                    $.connection.hubForm.server.getUserControlModel(fileList, "").done(function (udcFileList) {
                        var formScope = getCurrentFileScope();
                        formScope.receiveUcMainTable(udcFileList);
                    });
                } else {
                    scope.model.UcChild = [];
                }
            };
            //#endregion

            //#region Method For Chart

            scope.lstChartType = $rootScope.ChartTypes;
            scope.Enable3DChnage = function (IsEnable3D) {
                if (!scope.Area3D && (IsEnable3D || IsEnable3D == "True")) {
                    scope.Area3D = { dictAttributes: { IsEnable3D: "True", LightStyle: "", Inclination: "" }, Elements: [], Children: [], Name: "Area3DStyle", Value: "" };
                }
                if (!IsEnable3D || IsEnable3D == "False") {
                    scope.Area3D.dictAttributes.LightStyle = "";
                    scope.Area3D.dictAttributes.Inclination = "";
                }
            };
            scope.removeSeriescolumnValues = function (chartModel) {
                if (scope.model.dictAttributes.sfwIsDynamicSeries == "False") {
                    for (var i = 0; i < chartModel.Elements.length; i++) {
                        if (chartModel.Elements[i].Name == "Series") {
                            var seriesModel = chartModel.Elements[i];
                            if (seriesModel && seriesModel.Elements.length > 0) {
                                $rootScope.UndRedoBulkOp("Start");
                                for (var j = 0; j < seriesModel.Elements.length; j++) {
                                    $rootScope.EditPropertyValue(seriesModel.Elements[j].dictAttributes.sfwSeriesColumnName, seriesModel.Elements[j].dictAttributes, "sfwSeriesColumnName", "");
                                }
                                $rootScope.UndRedoBulkOp("End");
                            }
                            break;
                        }
                    }
                }
            };
            scope.onChartTypeChanged = function () {
                if (scope.model.dictAttributes.ChartType && (scope.model.dictAttributes.ChartType == "Donut" || scope.model.dictAttributes.ChartType == "Pie")) {
                    scope.model.dictAttributes.sfwIsDynamicSeries = "False";
                    scope.removeSeriescolumnValues(scope.model);
                }
            };
            scope.setSeriesClick = function () {
                var newScope = scope.$new();
                if (scope.model.dictAttributes.sfwEntityField && scope.formobject.dictAttributes.sfwEntity) {
                    var temp = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(scope.formobject.dictAttributes.sfwEntity, scope.model.dictAttributes.sfwEntityField);
                    if (temp) {
                        newScope.ParentEntityName = temp.Entity;
                    }
                }
                newScope.ChartModel = scope.model;
                newScope.lstToolTipTypes = ['None', 'Chart', 'Table', 'Both'];
                newScope.DataFormats = ['', '{0:d}', '{0:C}', '{0:000-##-####}', '{0:(###)###-####}'];
                for (var i = 0; i < scope.model.Elements.length; i++) {
                    if (scope.model.Elements[i].Name == "Series") {
                        newScope.chartSeries = scope.model.Elements[i];
                        if (newScope.chartSeries.Elements.length > 0) {
                            newScope.ObjSeriesModel = newScope.chartSeries.Elements[0];
                            newScope.ObjSeriesModel.dictAttributes.ChartType = scope.model.dictAttributes.ChartType;
                        }
                        else {
                            // newScope.ObjSeriesModel = { dictAttributes: {}, Elements: [], Children: [], Name: "sfwSeries", Value: "" };
                        }

                    }
                }
                var dialog = $rootScope.showDialog(newScope, "Series Properties", "Form/views/SeriesProperties.html", {
                    width: 1000, height: 720
                });
                newScope.onOkClick = function () {
                    if (!scope.model.hasOwnProperty("errors")) {
                        scope.model.errors = {};
                    }

                    scope.model.errors.series_errors = {};

                    for (var i = 0; i < newScope.chartSeries.Elements.length; i++) {
                        var objSeries = newScope.chartSeries.Elements[i];
                        if (objSeries.errors && !angular.equals({}, objSeries.errors)) {
                            for (var prop in objSeries.errors) {
                                if (!scope.model.errors.series_errors.hasOwnProperty(prop)) {
                                    scope.model.errors.series_errors[prop + "_" + objSeries.dictAttributes.Name] = objSeries.errors[prop];
                                }
                            }
                        }
                    }
                    if (angular.equals({}, scope.model.errors.series_errors)) {
                        var keys = Object.keys(scope.model.errors);
                        var len = keys.length;
                        if (scope.model.errors.hasOwnProperty("series_errors") && len == 1) {
                            $ValidationService.checkValidListValue([], scope.model, "", "series_errors", "series_errors", "", undefined);
                        }
                        delete scope.model.errors.series_errors;
                    }

                    dialog.close();
                };
                newScope.selectSeries = function (obj) {
                    newScope.ObjSeriesModel = obj;
                    newScope.ObjSeriesModel.dictAttributes.ChartType = scope.model.dictAttributes.ChartType;
                };
                newScope.validateSeriesNameNotEmpty = function () {
                    newScope.strError = null;
                    if (newScope.chartSeries && newScope.chartSeries.Elements) {
                        for (var i = 0; i < newScope.chartSeries.Elements.length; i++) {
                            if (!newScope.chartSeries.Elements[i].dictAttributes.Name) {
                                newScope.strError = "Error: Please enter a Series Name.";
                                break;
                            }
                        }
                    }
                };
                newScope.addSeries = function () {
                    //var name = GetNewSeriesName("series", newScope.chartSeries.Elements, 1);
                    if (!newScope.chartSeries) {
                        newScope.chartSeries = { dictAttributes: {}, Elements: [], Children: [], Name: "Series", Value: "" };
                    }
                    var name = GetNewSeriesName("Series", newScope.chartSeries, 1);

                    var obj = { dictAttributes: { Name: name, ChartType: scope.model.dictAttributes.ChartType }, Elements: [], Children: [], Name: "sfwSeries", Value: "", prefix: "swc" };

                    $rootScope.PushItem(obj, newScope.chartSeries.Elements);
                    newScope.selectSeries(obj);
                    //newScope.chartSeries.Elements.push(obj);
                };
                newScope.deleteSeries = function () {
                    var index = -1;
                    if (newScope.ObjSeriesModel) {
                        for (var i = 0; i < newScope.chartSeries.Elements.length; i++) {
                            if (newScope.chartSeries.Elements[i] == newScope.ObjSeriesModel) {
                                index = i;
                                break;
                            }
                        }
                    }
                    if (index > -1) {
                        $rootScope.DeleteItem(newScope.chartSeries.Elements[index], newScope.chartSeries.Elements);
                        //newScope.chartSeries.Elements.splice(index, 1);
                        if (newScope.chartSeries.Elements.length > 0) {
                            if (index > 0) {
                                newScope.ObjSeriesModel = newScope.chartSeries.Elements[index - 1];
                            }
                            else {
                                newScope.ObjSeriesModel = newScope.chartSeries.Elements[newScope.chartSeries.Elements.length - 1];
                            }
                        }
                        else {
                            newScope.ObjSeriesModel = undefined;
                        }
                    }
                };
                newScope.validateSeriesNameNotEmpty();
                newScope.onNavigationParamsClick = function () {
                    var newNavigationScope = newScope.$new();
                    newNavigationScope.SelectedObject = newScope.ObjSeriesModel;
                    newNavigationScope.IsForm = true;
                    newNavigationScope.IsMultiActiveForm = false;
                    newNavigationScope.formobject = scope.formobject;

                    newNavigationScope.NavigationParameterDialog = $rootScope.showDialog(newNavigationScope, "Navigation Parameters", "Form/views/ParameterNavigation.html", {
                        width: 1000, height: 520
                    });
                };
                newScope.onAdditionalChartColumnClick = function () {
                    var newColumnScope = newScope.$new();
                    newColumnScope.sfwAddtionalChartColumns = [];
                    newColumnScope.SelectedObject = newScope.ObjSeriesModel;
                    var temp = "";
                    if (scope.model.dictAttributes.sfwEntityField && scope.formobject.dictAttributes.sfwEntity) {
                        temp = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(scope.formobject.dictAttributes.sfwEntity, scope.model.dictAttributes.sfwEntityField);
                    }
                    if (temp) {
                        newColumnScope.ParentEntityName = temp.Entity;
                    }
                    if (newScope.ObjSeriesModel.dictAttributes.swfAddtionalChartColumns) {
                        var temp = newScope.ObjSeriesModel.dictAttributes.swfAddtionalChartColumns.split(",");
                        for (var i = 0; i < temp.length; i++) {
                            newColumnScope.sfwAddtionalChartColumns.push({ Property: temp[i] });
                        }
                    }
                    var AdditionalChartdialog = $rootScope.showDialog(newColumnScope, "Multiple Objects Selection", "Form/views/AdditionalChartColumnsDialog.html", {
                        width: 1000, height: 490
                    });
                    newColumnScope.onCancelClick = function () {
                        AdditionalChartdialog.close();
                    };
                    newColumnScope.onOkClick = function () {
                        var AddtionalChartColumns = "";
                        for (var i = 0; i < newColumnScope.sfwAddtionalChartColumns.length; i++) {
                            if (newColumnScope.sfwAddtionalChartColumns[i].Property != "") {
                                if (AddtionalChartColumns == "") {
                                    AddtionalChartColumns = newColumnScope.sfwAddtionalChartColumns[i].Property;
                                }
                                else {
                                    AddtionalChartColumns += "," + newColumnScope.sfwAddtionalChartColumns[i].Property;
                                }
                            }
                        }
                        $rootScope.EditPropertyValue(newScope.ObjSeriesModel.dictAttributes.swfAddtionalChartColumns, newScope.ObjSeriesModel.dictAttributes, "swfAddtionalChartColumns", AddtionalChartColumns);
                        AdditionalChartdialog.close();
                    };
                    newColumnScope.selectRow = function (row) {
                        newColumnScope.selectedRow = row;
                    };
                    newColumnScope.addProperty = function () {
                        newColumnScope.sfwAddtionalChartColumns.push({ Property: "" });
                    };
                    newColumnScope.deleteProperty = function () {
                        var index = -1;
                        if (newColumnScope.selectedRow) {
                            for (var i = 0; i < newColumnScope.sfwAddtionalChartColumns.length; i++) {
                                if (newColumnScope.selectedRow == newColumnScope.sfwAddtionalChartColumns[i]) {
                                    index = i;
                                    break;
                                }
                            }
                        }
                        if (index > -1) {
                            newColumnScope.sfwAddtionalChartColumns.splice(index, 1);
                            if (newColumnScope.sfwAddtionalChartColumns.length > 0) {
                                if (index > 0) {
                                    newColumnScope.selectedRow = newColumnScope.sfwAddtionalChartColumns[index - 1];
                                }
                                else {
                                    newColumnScope.selectedRow = newColumnScope.sfwAddtionalChartColumns[newColumnScope.sfwAddtionalChartColumns.length - 1];
                                }
                            }
                            else {
                                newColumnScope.selectedRow = undefined;
                            }
                        }
                    };
                };
                newScope.ClearParameter = function () {
                    if (newScope.ObjSeriesModel && newScope.ObjSeriesModel.dictAttributes) {
                        newScope.ObjSeriesModel.dictAttributes.sfwNavigationParameter = "";
                    }
                };
                newScope.NavigateToActiveForm = function (aActiveFromID) {
                    if (aActiveFromID && aActiveFromID != "") {
                        newScope.onOkClick();
                        hubcontext.hubMain.server.navigateToFile(aActiveFromID, "").done(function (objfile) {
                            $rootScope.openFile(objfile, false);
                        });
                    }
                };

                newScope.OpenTooltipParams = function () {
                    var newParamScope = newScope.$new();
                    newScope.objTooltipParamsVM = $rootScope.showDialog(newParamScope, "Set Tooltip Parameters", "Form/views/SetToolTipParameters.html", { width: 500, height: 420 });

                    newParamScope.onSfxChartTooltipTableCancelClick = function () {
                        if (newScope.objTooltipParamsVM) {
                            newScope.objTooltipParamsVM.close();
                        }
                        //ngDialog.close(newScope.objTooltipParamsVM.id);
                    };

                    newParamScope.onSfxChartTooltipTableOKClick = function () {
                        var lstselectedfields = [];
                        lstselectedfields = GetSelectedFieldList(newScope.ObjSeriesModel.lstselectedobjecttreefields, lstselectedfields);
                        var DisplayedEntity = getDisplayedEntity(newScope.ObjSeriesModel.LstDisplayedEntities);
                        var itempath = "";
                        if (DisplayedEntity && DisplayedEntity.strDisplayName != "") {
                            itempath = DisplayedEntity.strDisplayName;
                        }
                        function iterator(itm) {
                            var ID = itm.ID;
                            if (itempath) {
                                ID = itempath + "." + ID;
                            }
                            if (tooltipparam) {
                                tooltipparam = tooltipparam + ";" + ID;
                            }
                            else {
                                tooltipparam = ID;
                            }
                        }
                        if (lstselectedfields.length > 0) {
                            var tooltipparam;

                            angular.forEach(lstselectedfields, iterator);

                            $rootScope.EditPropertyValue(newScope.ObjSeriesModel.dictAttributes.sfwTooltipTableParams, newScope.ObjSeriesModel.dictAttributes, "sfwTooltipTableParams", tooltipparam);

                        }
                        newParamScope.onSfxChartTooltipTableCancelClick();
                        //ngDialog.close(newScope.objTooltipParamsVM.id);
                    };
                };
            };


            //#endregion   

            scope.selectQueryClick = function (aQueryID, apropertyName) {
                if (aQueryID && aQueryID != "" && aQueryID.contains(".")) {
                    var query = aQueryID.split(".");
                    $NavigateToFileService.NavigateToFile(query[0], "queries", query[1]);
                }

            };
            scope.NavigateToEntityQueryFromDetailQueryID = function (aQueryID) {
                if (aQueryID && scope.IsLookup && scope.IsSearchCriteriaSelected && scope.formobject && scope.formobject.Elements) {
                    var objInitialLoad = scope.formobject.Elements.filter(function (x) { return x.Name && x.Name == "initialload"; });
                    if (objInitialLoad && objInitialLoad.length > 0 && objInitialLoad[0].Elements) {
                        var lstQuery = objInitialLoad[0].Elements.filter(function (x) { return x.dictAttributes && x.dictAttributes.ID == aQueryID; });
                        if (lstQuery && lstQuery.length > 0 && lstQuery[0].dictAttributes.sfwQueryRef && lstQuery[0].dictAttributes.sfwQueryRef.contains(".")) {
                            var query = lstQuery[0].dictAttributes.sfwQueryRef.split(".");
                            $NavigateToFileService.NavigateToFile(query[0], "queries", query[1]);
                        }
                    }
                }
            };
            scope.selectMethodClick = function (aMethodID) {
                if (aMethodID && aMethodID != "") {
                    $NavigateToFileService.NavigateToFile(scope.formobject.dictAttributes.sfwEntity, "objectmethods", aMethodID);
                }
            };
            scope.selectExpressionClick = function (aExpressionID) {
                if (aExpressionID && aExpressionID != "") {
                    $NavigateToFileService.NavigateToFile(scope.formobject.dictAttributes.sfwEntity, "attributes", aExpressionID);
                }
            };
            scope.selectGroupClick = function (aGroupID) {
                if (aGroupID && aGroupID != "") {
                    $NavigateToFileService.NavigateToFile(scope.formobject.dictAttributes.sfwEntity, "groupslist", aGroupID);
                }
            };
            scope.NavigateToRuleClick = function (aRuleID) {
                if (aRuleID && aRuleID != "") {
                    hubcontext.hubMain.server.navigateToFile(aRuleID, "").done(function (objfile) {
                        $rootScope.openFile(objfile, false);
                    });
                }
            };
            scope.NavigateToActiveForm = function (aActiveFromID, aDefaultActiveForm) {
                if (aActiveFromID && aActiveFromID != "") {
                    if (aActiveFromID.contains("=")) {
                        var temp = aActiveFromID.split(";");
                        var templstActiveForm = temp[0].split("=");
                        if (templstActiveForm && templstActiveForm.length > 1) {
                            aActiveFromID = templstActiveForm[1];
                        }
                    }
                    $rootScope.IsLoading = true;
                    hubcontext.hubMain.server.navigateToFile(aActiveFromID, "").done(function (objfile) {
                        scope.$evalAsync(function () {
                            $rootScope.IsLoading = false;
                            $rootScope.openFile(objfile, undefined);
                        });
                    });

                } else if (aDefaultActiveForm && aDefaultActiveForm != "") {
                    $rootScope.IsLoading = true;
                    hubcontext.hubMain.server.navigateToFile(aDefaultActiveForm, "").done(function (objfile) {
                        scope.$evalAsync(function () {
                            $rootScope.IsLoading = false;
                            $rootScope.openFile(objfile, false);
                        });
                    });
                }
            };
            scope.ClickCommonPropsPanels = function (opt) {
                scope.SelectedTab = opt;
                if (opt == 'General') {
                    if (!scope.IsGeneralOpen) {
                        scope.IsGeneralOpen = true;
                    }
                    if (scope.setEntityName) {
                        scope.setEntityName();
                    }
                }
                else if (opt == 'Advanced') {
                    if (!scope.IsAdvancedOpen) {
                        scope.IsAdvancedOpen = true;
                        scope.LoadWebControlProperties();
                    }
                    else {
                        scope.SetDataToWebControl();
                    }
                }
                else if (opt == 'Configured') {
                    scope.dictAttributesArray = [];
                    scope.ConvertTodictAttributesArray();
                    if (!scope.IsConfiguredOpen) {
                        scope.IsConfiguredOpen = true;
                    }
                }
            };

            scope.ConvertTodictAttributesArray = function () {
                var ary = [];
                if (scope.model) {
                    var lstWebControls = $rootScope.lstWebControls.filter(function (x) {
                        return x.ControlName == scope.model.Name;
                    });
                    lstWebControls = JSON.parse(JSON.stringify(lstWebControls));

                    angular.forEach(scope.model.dictAttributes, function (val, key) {
                        if (val) {
                            var lst = [];
                            if (lstWebControls && lstWebControls.length > 0) {
                                lst = scope.GetPropertyListByName(lstWebControls[0], key);
                            }
                            if (!lst || (lst && lst.length == 0) || (lst && lst.length > 0 && lst[0].DefaultValue != val)) {

                                var obj = { PropertyName: key, PropertyValue: val };

                                if (lst && lst.length > 0) {
                                    obj.lstValues = lst[0].lstValues; // added this code to make Configure tab editable ,accordingly Textbox n dropdown ll come.
                                }
                                if (obj.PropertyName != 'runat') {
                                    ary.push(obj);
                                }
                            }
                        }
                    });
                    scope.dictAttributesArray = ary;
                }
            };

            scope.ClickCommonAdvPropsPanels = function (opt, $event) {
                if (scope.model) {
                    var lst = $rootScope.lstWebControls.filter(function (x) {
                        return x.ControlName == scope.model.Name;
                    });
                    lst = JSON.parse(JSON.stringify(lst));
                    if (lst && lst.length > 0) {
                        //toggle visibilty for all related tr
                        var HTMLelementAdvancePropertiesTable = $(element).find("[advance-property-table]");
                        if (opt == 'Accessibility') {
                            $(HTMLelementAdvancePropertiesTable).find("[header-properties-row][category='Accessibility'] td").toggleClass("prop-close"); // handling collapsing icons                        
                            $(HTMLelementAdvancePropertiesTable).find("tr[category='Accessibility ']:not([header-properties-row])").toggle();
                        }
                        else if (opt == 'Appearance') {
                            $(HTMLelementAdvancePropertiesTable).find("[header-properties-row][category='Appearance'] td").toggleClass("prop-close"); // handling collapsing icons                        
                            $(HTMLelementAdvancePropertiesTable).find("tr[category='Appearance ']:not([header-properties-row])").toggle();
                            if (scope.objAdvanceProperties.lstAppearance == undefined) {
                                scope.objAdvanceProperties.lstAppearance = lst[0].lstAppearance;
                            }
                        }
                        else if (opt == 'Behaviour') {
                            $(HTMLelementAdvancePropertiesTable).find("[header-properties-row][category='Behaviour'] td").toggleClass("prop-close"); // handling collapsing icons                        
                            $(HTMLelementAdvancePropertiesTable).find("tr[category='Behaviour ']:not([header-properties-row])").toggle();
                            if (scope.objAdvanceProperties.lstBehavior == undefined) {
                                scope.objAdvanceProperties.lstBehavior = lst[0].lstBehavior;
                            }
                        }
                        else if (opt == 'Custom') {
                            $(HTMLelementAdvancePropertiesTable).find("[header-properties-row][category='Custom'] td").toggleClass("prop-close"); // handling collapsing icons                        
                            $(HTMLelementAdvancePropertiesTable).find("tr[category='Custom ']:not([header-properties-row])").toggle();
                            if (scope.objAdvanceProperties.lstCustom == undefined) {
                                scope.objAdvanceProperties.lstCustom = lst[0].lstCustom;
                            }
                        }
                        else if (opt == 'Layout') {
                            $(HTMLelementAdvancePropertiesTable).find("[header-properties-row][category='Layout'] td").toggleClass("prop-close"); // handling collapsing icons                        
                            $(HTMLelementAdvancePropertiesTable).find("tr[category='Layout ']:not([header-properties-row])").toggle();
                            if (scope.objAdvanceProperties.lstLayout == undefined) {
                                scope.objAdvanceProperties.lstLayout = lst[0].lstLayout;
                            }
                        }
                        else if (opt == 'Navigation') {
                            $(HTMLelementAdvancePropertiesTable).find("[header-properties-row][category='Navigation'] td").toggleClass("prop-close"); // handling collapsing icons                        
                            $(HTMLelementAdvancePropertiesTable).find("tr[category='Navigation ']:not([header-properties-row])").toggle();
                            if (scope.objAdvanceProperties.lstNavigation == undefined) {
                                scope.objAdvanceProperties.lstNavigation = lst[0].lstNavigation;
                            }
                        }
                        else if (opt == 'Extra') {
                            $(HTMLelementAdvancePropertiesTable).find("[header-properties-row][category='Extra'] td").toggleClass("prop-close"); // handling collapsing icons                        
                            $(HTMLelementAdvancePropertiesTable).find("tr[category='Extra ']:not([header-properties-row])").toggle();
                            if (scope.objAdvanceProperties.lstExtra == undefined) {
                                scope.objAdvanceProperties.lstExtra = lst[0].lstExtra;
                            }
                        }
                        else if (opt == 'Misc') {
                            $(HTMLelementAdvancePropertiesTable).find("[header-properties-row][category='Misc'] td").toggleClass("prop-close"); // handling collapsing icons                        
                            $(HTMLelementAdvancePropertiesTable).find("tr[category='Misc ']:not([header-properties-row])").toggle();
                            if (scope.objAdvanceProperties.lstMisc == undefined) {
                                scope.objAdvanceProperties.lstMisc = lst[0].lstMisc;
                            }
                        }
                        scope.SetDataToWebControl();
                    }
                }
            };

            scope.selectActiveFormClick = function (activeFromID) {
                if (activeFromID) {
                    hubcontext.hubMain.server.navigateToFile(activeFromID, "").done(function (objfile) {
                        $rootScope.openFile(objfile, false);
                    });
                }
            };

            //#region Correspondence Query ID Section



            scope.onCorrespondenceQueryIDKeyDown = function (event) {
                var input = $(event.target);
                scope.queryIdInput = input;
                if (event && event.ctrlKey && event.keyCode == $.ui.keyCode.SPACE && $(input).data('ui-autocomplete')) {
                    $(input).autocomplete("search", $(input).val());
                    event.preventDefault();
                }
                else {
                    createCorrespondenceQueryIDList(input);
                }
            };

            scope.showBookMarksQueryIDIntellisenseList = function (event) {

                var inputElement;
                inputElement = $(event.target).prevAll("input[type='text']");
                scope.queryIdInput = inputElement;
                inputElement.focus();
                if (inputElement) {
                    createCorrespondenceQueryIDList(inputElement);
                    if ($(inputElement).data('ui-autocomplete')) $(inputElement).autocomplete("search", $(inputElement).val());
                }
                if (event) {
                    event.stopPropagation();
                }
            };


            var createCorrespondenceQueryIDList = function (input) {
                var lst = getQueryBookMarksID(scope.formobject);
                scope.queryIdList = lst;
                if (lst && lst.length > 0) {
                    setSingleLevelAutoComplete(input, lst);
                }

            };

            //#endregion

            // #region validation
            scope.validateId = function (model) {
                if (scope.$parent && scope.$parent.validationErrorList) {
                    if (model.hasOwnProperty("IsChildOfGrid") && model.IsChildOfGrid) {
                        $ValidationService.validateID(model, scope.$parent.validationErrorList, model.dictAttributes.ID, true);
                    } else if (model.Name != "sfwTable") {
                        $ValidationService.validateID(model, scope.$parent.validationErrorList, model.dictAttributes.ID);
                    }
                }
            };
            scope.validateDuplicateId = function () {
                if (scope.$parent && scope.$parent.iterateModel) {
                    var tableData;
                    if (scope.$parent.formTableModel) tableData = scope.$parent.formTableModel;
                    else if (scope.$parent.objQueryForm) tableData = scope.$parent.objQueryForm;
                    scope.$parent.iterateModel(tableData);
                }
            };

            // #endregion
            scope.NavigateToEntityField = function (astrEntityField, astrEntityName, propertyName) {
                if (astrEntityField && scope.model) {
                    var arrText = astrEntityField.split('.');
                    var data = [];
                    var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                    var entities = entityIntellisenseList;
                    var parententityName = "";
                    var gridObj = null;
                    if (scope.model.Name == "TemplateField") {
                        gridObj = FindParent(scope.model, "sfwGridView");
                    }
                    if (scope.model.Name == "sfwGridView" || scope.model.Name == "sfwListView" || scope.model.Name == "sfwChart" || (gridObj && gridObj.Name == "sfwGridView")) {
                        var parent = FindParent(scope.model, "sfwListView");
                        var gridModel = gridObj ? gridObj : scope.model;
                        if (parent) {
                            var objParentField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(scope.formobject.dictAttributes.sfwEntity, parent.dictAttributes.sfwEntityField);
                            if (objParentField) {
                                var objField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(objParentField.Entity, gridModel.dictAttributes.sfwEntityField);
                                if (objField) {
                                    parententityName = objParentField.Entity;
                                }
                            }
                        }
                        else if (gridModel.dictAttributes.sfwParentGrid && scope.model.Name == "TemplateField") {
                            parententityName = scope.entityName;
                        }
                        else if (gridModel.dictAttributes.sfwParentGrid && gridModel.dictAttributes.sfwEntityField) {
                            var parentGrid = FindControlByID(scope.formobject, gridModel.dictAttributes.sfwParentGrid);
                            var objParentField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(scope.formobject.dictAttributes.sfwEntity, parentGrid.dictAttributes.sfwEntityField);
                            if (objParentField) {
                                parententityName = objParentField.Entity;
                            }
                        }
                        else {
                            parententityName = scope.formobject.dictAttributes.sfwEntity;
                        }

                    }
                    else if (astrEntityName) {
                        parententityName = astrEntityName;
                    }
                    else if ((scope.model.Name == "sfwButton" || scope.model.Name == "sfwLinkButton") && scope.model.dictAttributes.sfwMethodName && scope.model.dictAttributes.sfwMethodName == "btnOpen_Click" && scope.model.dictAttributes.sfwRelatedControl) {
                        var grid = GetFieldFromFormObject(scope.formobject, 'sfwGridView', 'ID', scope.model.dictAttributes.sfwRelatedControl);
                        if (grid && grid.length > 0 && grid[0].dictAttributes.sfwEntityField && scope.formobject.dictAttributes.sfwEntity) {
                            var tempparententityName = scope.formobject.dictAttributes.sfwEntity;
                            var tempData = [];
                            while (tempparententityName) {
                                var entity = entities.filter(function (x) {
                                    return x.ID == tempparententityName;
                                });
                                if (entity.length > 0) {
                                    var attributes = entity[0].Attributes;
                                    tempData = tempData.concat(attributes);
                                    tempparententityName = entity[0].ParentId;
                                }
                                else {
                                    tempparententityName = "";
                                }
                            }
                            if (grid[0].dictAttributes.sfwEntityField && (grid[0].dictAttributes.sfwEntityField == "InternalErrors" || grid[0].dictAttributes.sfwEntityField == "ExternalErrors")) {
                                parententityName = "entError";
                                astrEntityName = parententityName;
                            }
                            else {
                                var item = tempData.filter(function (x) { return x.ID == grid[0].dictAttributes.sfwEntityField; });
                                if (item && item.length > 0 && item[0].Entity) {
                                    parententityName = item[0].Entity;
                                    astrEntityName = parententityName;
                                }
                            }

                        }
                        else if (scope.formobject.dictAttributes.sfwEntity) {
                            parententityName = scope.formobject.dictAttributes.sfwEntity;
                        }
                    }
                    else {
                        parententityName = scope.entityName;
                    }
                    while (parententityName) {
                        var entity = entities.filter(function (x) {
                            return x.ID == parententityName;
                        });
                        if (entity.length > 0) {
                            var attributes = entity[0].Attributes;
                            var tempAttributes = getFilteredAttribute(scope.model.Name, attributes, arrText.length > 1, propertyName);
                            data = data.concat(tempAttributes);
                            parententityName = entity[0].ParentId;
                        }
                        else {
                            parententityName = "";
                        }
                    }
                    if (arrText.length > 1) {
                        for (var index = 0; index < arrText.length - 1; index++) {
                            var item = data.filter(function (x) { return x.ID == arrText[index]; });
                            if (item.length > 0) {
                                if (typeof item[0].DataType != "undefined" && (item[0].DataType == "Object" || item[0].DataType == "Collection" || item[0].DataType == "CDOCollection" || item[0].DataType == "List") && typeof item[0].Entity != "undefined") {
                                    var parententityName = item[0].Entity;
                                    if (index < arrText.length - 2) {
                                        data = [];
                                    }
                                    while (parententityName) {
                                        var entity = entities.filter(function (x) {
                                            return x.ID == parententityName;
                                        });
                                        if (entity.length > 0) {
                                            var attributes = entity[0].Attributes;
                                            var tempAttributes = getFilteredAttribute(scope.model.Name, attributes, index < arrText.length - 2, propertyName);
                                            data = data.concat(tempAttributes);
                                            parententityName = entity[0].ParentId;
                                        }
                                        else {
                                            parententityName = "";
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (data && data.length > 0) {
                        var tempField = data.filter(function (x) { return x.ID == arrText[arrText.length - 1]; });
                        if (tempField && tempField.length > 0) {
                            var attributeID = arrText[arrText.length - 1];
                            if (tempField[0].Type && tempField[0].Type == "Description" && arrText[arrText.length - 1] && arrText[arrText.length - 1].toLowerCase().endsWith("description")) {
                                attributeID = arrText[arrText.length - 1].substr(0, (arrText[arrText.length - 1].length - 11)) + "Value";
                            }
                            if (arrText.length == 1) {
                                var EntityName = "";
                                var gridObj = null;
                                if (scope.model.Name == "TemplateField") {
                                    gridObj = FindParent(scope.model, "sfwGridView");
                                }
                                if (scope.model.Name == "sfwGridView" || scope.model.Name == "sfwListView" || scope.model.Name == "sfwChart" || (gridObj && gridObj.Name == "sfwGridView")) {
                                    var parent = FindParent(scope.model, "sfwListView");
                                    var gridModel = gridObj ? gridObj : scope.model;
                                    if (parent) {
                                        var objParentField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(scope.formobject.dictAttributes.sfwEntity, parent.dictAttributes.sfwEntityField);
                                        if (objParentField) {
                                            var objField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(objParentField.Entity, gridModel.dictAttributes.sfwEntityField);
                                            if (objField) {
                                                EntityName = objParentField.Entity;
                                            }
                                        }
                                    }
                                    else if (gridModel.dictAttributes.sfwParentGrid && scope.model.Name == "TemplateField") {
                                        EntityName = scope.entityName;
                                    }
                                    else if (gridModel.dictAttributes.sfwParentGrid && gridModel.dictAttributes.sfwEntityField) {
                                        var parentGrid = FindControlByID(scope.formobject, gridModel.dictAttributes.sfwParentGrid);
                                        var objParentField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(scope.formobject.dictAttributes.sfwEntity, parentGrid.dictAttributes.sfwEntityField);
                                        if (objParentField) {
                                            EntityName = objParentField.Entity;
                                        }
                                    }

                                    else {
                                        EntityName = scope.formobject.dictAttributes.sfwEntity;
                                    }
                                }
                                else if (astrEntityName) {
                                    EntityName = astrEntityName;
                                }
                                else {
                                    EntityName = scope.entityName;
                                }
                                $rootScope.IsLoading = true;
                                if (EntityName) {
                                    $NavigateToFileService.NavigateToFile(EntityName, "attributes", attributeID);
                                }
                            }
                            else if (arrText.length > 1) {
                                var item = data.filter(function (x) { return x.ID == arrText[arrText.length - 2]; });
                                if (item && item != "" && item[0].Entity) {
                                    $rootScope.IsLoading = true;
                                    $NavigateToFileService.NavigateToFile(item[0].Entity, "attributes", attributeID);
                                }
                            }
                        }

                    }
                }
            }

            scope.setDefaultValueForCheckBoxList = function () {
                var DialogScope = scope.$new();
                DialogScope.selectAll = false;
                DialogScope.lstValues = [];
                DialogScope.checkBoxListDefaultValueSelectAllChange = function (ablnCheckAll) {
                    if (DialogScope.lstValues.length > 0) {
                        angular.forEach(DialogScope.lstValues, function (aDefaultValue) {
                            aDefaultValue.selected = ablnCheckAll;
                        });
                    }
                };
                DialogScope.selectDefaultValueCheckBox = function () {
                    if (scope.model.dictAttributes.sfwDefaultValue && scope.model.dictAttributes.sfwDefaultValue == "FW_CHECKALL") {
                        DialogScope.selectAll = true;
                        DialogScope.checkBoxListDefaultValueSelectAllChange(true);
                    }
                    else if (scope.model.dictAttributes.sfwDefaultValue && DialogScope.lstValues && DialogScope.lstValues.length > 0) {
                        var arrDefaultValues = scope.model.dictAttributes.sfwDefaultValue.split(";");
                        angular.forEach(arrDefaultValues, function (aDefaultValue) {
                            for (var i = 0; i < DialogScope.lstValues.length; i++) {
                                if (DialogScope.lstValues[i].CodeValue === aDefaultValue) {
                                    DialogScope.lstValues[i].selected = true;
                                }
                            }
                        });
                    }
                };
                if (scope.model.dictAttributes.sfwLoadType == 'CodeGroup') {
                    var codeID = "";
                    if (scope.model.dictAttributes.sfwLoadSource && scope.model.dictAttributes.sfwLoadType == "CodeGroup") {
                        codeID = scope.model.dictAttributes.sfwLoadSource;
                    }
                    else if (scope.model.placeHolder) {
                        codeID = scope.model.placeHolder;
                    }
                    if (codeID) {
                        $rootScope.IsLoading = true;
                        $.connection.hubMain.server.getCodeValuesForDropDown(codeID).done(function (data) {
                            scope.$evalAsync(function () {
                                $rootScope.IsLoading = false;
                                if (data && data.length > 0) {
                                    DialogScope.lstValues = data;
                                    DialogScope.selectDefaultValueCheckBox();
                                }
                            });
                        });
                    }
                }
                else if (scope.model.dictAttributes.sfwLoadType == 'Items') {
                    if (scope.model.Elements.length > 0) {
                        angular.forEach(scope.model.Elements, function (aitems) {
                            var tempItemObject = { CodeValue: "", Description: "" };
                            if (aitems.dictAttributes.Value) {
                                tempItemObject.CodeValue = aitems.dictAttributes.Value;
                            }
                            if (aitems.dictAttributes.Text) {
                                tempItemObject.Description = aitems.dictAttributes.Text;
                            }
                            DialogScope.lstValues.push(tempItemObject);
                        });
                        DialogScope.selectDefaultValueCheckBox();
                    }
                }


                dialog = $rootScope.showDialog(DialogScope, "CheckBoxList Default Values", "Form/views/SetDefaultValueForCheckBoxList.html");
                DialogScope.checkBoxListDefaultValueOkClick = function () {
                    $rootScope.UndRedoBulkOp("Start");
                    var strDefaultValue = "";
                    scope.model.dictAttributes.sfwDefaultValue = "";
                    if (DialogScope.selectAll) {
                        strDefaultValue = "FW_CHECKALL";
                    }
                    else if (DialogScope.lstValues && DialogScope.lstValues.length > 0) {
                        angular.forEach(DialogScope.lstValues, function (aDefaultValues) {
                            if (aDefaultValues.selected && aDefaultValues.CodeValue) {
                                if (strDefaultValue) {
                                    strDefaultValue += ";" + aDefaultValues.CodeValue;
                                }
                                else {
                                    strDefaultValue = aDefaultValues.CodeValue;
                                }
                            }
                        });
                    }
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwDefaultValue, scope.model.dictAttributes, "sfwDefaultValue", strDefaultValue);
                    $rootScope.UndRedoBulkOp("End");
                    DialogScope.closeDialog();
                };

                DialogScope.closeDialog = function () {
                    dialog.close();
                };

            };


            scope.onchangeOfEntityField = function () {
                var filescope = getCurrentFileScope();
                if (filescope && filescope.selectControl) {
                    filescope.selectControl(scope.model, event);
                }
            }

            scope.ClearSelectColVisibleRule = function () {
                if (scope.model.dictAttributes.sfwSelectColVisibleRule && (scope.model.dictAttributes.sfwSelection != "Many" && scope.model.dictAttributes.sfwSelection != "One")) {
                    $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwSelectColVisibleRule, scope.model.dictAttributes, "sfwSelectColVisibleRule", "");
                }
            };

            //#region on Change of parent Grid
            scope.onChangeOfParentGrid = function () {
                var filescope = getCurrentFileScope();
                if (filescope && filescope.selectControl) {
                    if (scope.model && scope.model.dictAttributes.sfwEntityField) {
                        scope.model.dictAttributes.sfwEntityField = null;
                    }
                    filescope.selectControl(scope.model, event);
                }

            };

            scope.onChangeOfMethodType = function (methodType) {
                $rootScope.UndRedoBulkOp("Start");
                scope.showRules = false;
                scope.showObjectMethod = false;
                scope.showXmlMethod = false;
                if (methodType == "ObjectMethod") {
                    scope.showObjectMethod = true;
                    scope.Title = "Object Method";
                }
                else if (methodType == "XmlMethod") {
                    scope.showXmlMethod = true;
                    scope.Title = "Xml Method";
                }
                else if (methodType == "Rule") {
                    scope.showRules = true;
                    scope.Title = "Rule";
                }

                scope.model.dictAttributes.sfwObjectMethod = '';
                scope.model.dictAttributes.sfwNavigationParameter = '';

                $rootScope.UndRedoBulkOp("End");
            };

            ////#endregion

            scope.setQueryParametersForOpenDetail = function () {

                var newScope = scope.$new();
                newScope.Elements = [];
                var lstParams = scope.model.Elements.filter(function (itm) { return itm.Name == "Parameters"; });
                if (lstParams && lstParams.length > 0) {
                    if (lstParams[0] && lstParams[0].Elements && lstParams[0].Elements.length > 0) {
                        for (var i = 0; i < lstParams[0].Elements.length; i++) {
                            var param = {};
                            angular.copy(lstParams[0].Elements[i], param);
                            newScope.Elements.push(param);
                        }
                    }
                }
                newScope.entityTreeBinding = { selectedobject: null, lstselectedobjects: [], lstentities: [] };
                if (scope.model.dictAttributes.sfwRelatedControl) {
                    var lobjControlModel = FindControlByID(scope.formobject, scope.model.dictAttributes.sfwRelatedControl);
                    if (lobjControlModel) {
                        var entityAttr = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(scope.formobject.dictAttributes.sfwEntity, lobjControlModel.dictAttributes.sfwEntityField);
                        if (entityAttr) {
                            newScope.FormEntity = entityAttr.Entity;
                        }
                    }
                }
                if (!newScope.FormEntity) {
                    newScope.FormEntity = scope.formobject.dictAttributes.sfwEntity;
                }
                newScope.onOkClick = function () {
                    if (newScope.Elements && newScope.Elements.length > 0) {
                        $rootScope.UndRedoBulkOp("Start");
                        if (lstParams && lstParams.length > 0) {
                            $rootScope.EditPropertyValue(lstParams[0].Elements, lstParams[0], "Elements", []);
                            for (var i = 0; i < newScope.Elements.length; i++) {
                                $rootScope.PushItem(newScope.Elements[i], lstParams[0].Elements);
                            }
                        }
                        $rootScope.UndRedoBulkOp("End");
                    }
                    newScope.dialog.close();
                };
                newScope.onParameterSelected = function (objParam) {
                    newScope.SelectedParameter = objParam;
                };
                newScope.dialog = $rootScope.showDialog(newScope, "Base Query Parameters", "Form/views/ControlProperties/GridBaseQueryParameter.html", { width: 800, height: 525 });
            };
            scope.updateOpenDetailQueryParameters = function () {
                $rootScope.UndRedoBulkOp("Start");
                var parametersModel = scope.model.Elements.filter(function (itm) { return itm.Name === "Parameters" })[0];
                if (scope.model.dictAttributes.sfwQueryID) {
                    if (!parametersModel) {
                        parametersModel = {
                            Name: "Parameters", dictAttributes: {}, Elements: []
                        };

                        $rootScope.PushItem(parametersModel, scope.model.Elements);
                    }
                    $rootScope.EditPropertyValue(parametersModel.Elements, parametersModel, "Elements", []);
                    //Bring parameters and update
                    var queryModel = $EntityIntellisenseFactory.getQueryByQueryName(scope.model.dictAttributes.sfwQueryID);
                    if (queryModel) {
                        for (var i = 0, len = queryModel.Parameters.length; i < len; i++) {
                            var lcurr = queryModel.Parameters[i];
                            var newModel = {
                                Name: "Parameter", dictAttributes: {
                                    ID: lcurr.ID,
                                    sfwDataType: lcurr.DataType,
                                }, Elements: []
                            };
                            $rootScope.PushItem(newModel, parametersModel.Elements);
                        }
                        //for (param of queryModel.Parameters) {
                        //    var newModel = {
                        //        Name: "Parameter", dictAttributes: {
                        //            ID: param.ID,
                        //            sfwDataType: param.DataType,
                        //        }, Elements: []
                        //    };
                        //    $rootScope.PushItem(newModel, parametersModel.Elements);
                        //}
                    }
                }
                else {
                    if (parametersModel) {
                        var index = scope.model.Elements.indexOf(parametersModel);
                        if (index > -1) {
                            $rootScope.DeleteItem(parametersModel, scope.model.Elements)
                        }
                    }
                }
                $rootScope.UndRedoBulkOp("End");
            }

            scope.onTextModeChanged = function () {
                if (scope.model.dictAttributes.TextMode === "MultiLine") {
                    var updatedRenderTypes = ["None", "RichText"];
                    if (updatedRenderTypes.indexOf(scope.model.dictAttributes.sfwRenderType) === -1) {
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwRenderType, scope.model.dictAttributes, "sfwRenderType", "None");
                    }
                    $rootScope.EditPropertyValue(scope.renderTypes, scope, "renderTypes", updatedRenderTypes);
                }
                else if (scope.model.dictAttributes.TextMode === "SingleLine") {
                    $rootScope.EditPropertyValue(scope.renderTypes, scope, "renderTypes", ["None", "RichText", "Rating", "NumSpinner"]);
                }
                else {
                    if (scope.model.dictAttributes.sfwRenderType !== "None") {
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwRenderType, scope.model.dictAttributes, "sfwRenderType", "None");
                    }
                }
            };
            scope.onRenderTypeChange = function (astrRenderType) {
                $rootScope.UndRedoBulkOp("Start");
                switch (astrRenderType) {
                    case "None":
                    case "RichText":
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.RatingFullStar, scope.model.dictAttributes, "RatingFullStar", "True");
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.RatingNormalFill, scope.model.dictAttributes, "RatingNormalFill", "");
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.RatingRatedFill, scope.model.dictAttributes, "RatingRatedFill", "");
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.RatingStarWidth, scope.model.dictAttributes, "RatingStarWidth", "");
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwMinValue, scope.model.dictAttributes, "sfwMinValue", "");
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwMaxValue, scope.model.dictAttributes, "sfwMaxValue", "");
                        break;
                    case "Rating":
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwMinValue, scope.model.dictAttributes, "sfwMinValue", "");
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.sfwMaxValue, scope.model.dictAttributes, "sfwMaxValue", "");
                        break;
                    case "NumSpinner":
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.RatingFullStar, scope.model.dictAttributes, "RatingFullStar", "True");
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.RatingNormalFill, scope.model.dictAttributes, "RatingNormalFill", "");
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.RatingRatedFill, scope.model.dictAttributes, "RatingRatedFill", "");
                        $rootScope.EditPropertyValue(scope.model.dictAttributes.RatingStarWidth, scope.model.dictAttributes, "RatingStarWidth", "");
                        break;
                }
                $rootScope.UndRedoBulkOp("End");
            };
        },
        templateUrl: 'Form/views/ControlProperties/ControlCommonProperties.html'
    };
}]);

app.service('share', [function () {
    return {};
}]);

app.directive('addcontroltemplate', ['$compile', '$rootScope', 'ngDialog', '$EntityIntellisenseFactory', '$GetEntityFieldObjectService', '$ValidationService', function ($compile, $rootScope, ngDialog, $EntityIntellisenseFactory, $GetEntityFieldObjectService, $ValidationService) {

    var getmenuoptionsTemplate = function (formtype, IsLookupCriteriaEnabled) {
        var template = "";
        if ((formtype == 'Lookup' && IsLookupCriteriaEnabled) || formtype == "Correspondence") { }
        else {
            template += "<span ng-click='OnAddControlToCellClick(\"sfwLabel\")'>Label</span>";
        }
        if (formtype == "Tooltip") {
            template += "<span ng-click='OnAddControlToCellClick(\"Panel\")'>Panel</span>";
        }

        template += "<span ng-click='OnAddControlToCellClick(\"Caption\")'>Caption</span>";

        if (formtype != "Report" && formtype != "Correspondence" && formtype != "Tooltip" && formtype != "Lookup") {
            template += "<span ng-click='OnAddControlToCellClick(\"sfwHyperLink\")'>HyperLink</span>";
        }
        if (formtype != "Correspondence" && formtype != "Tooltip") {
            template += "<span ng-click='OnAddControlToCellClick(\"sfwLiteral\")'>Literal</span>";
        }
        if (formtype != "Tooltip") {
            template += "<span ng-click='OnAddControlToCellClick(\"sfwTextBox\")'>TextBox</span>";

            template += "<span ng-click='OnAddControlToCellClick(\"sfwDropDownList\")'>DropDownList</span>";

            if (formtype != "Report" && formtype != "Correspondence") {
                template += "<span ng-click='OnAddControlToCellClick(\"sfwMultiSelectDropDownList\")'>MultiSelectDropDownList</span>";
            }

            template += "<span ng-click='OnAddControlToCellClick(\"sfwCheckBox\")'>CheckBox</span>";
            if (formtype != "Lookup") {
                template += "<span ng-click='OnAddControlToCellClick(\"sfwCheckBoxList\")'>CheckBoxList</span>";

                template += "<span ng-click='OnAddControlToCellClick(\"sfwRadioButtonList\")'>RadioButton List</span>";
            }
        }
        if (formtype == "Report") {
            template += "<span ng-click='OnAddControlToCellClick(\"sfwCascadingDropDownList\")'>CascadingDropDownList</span>";
            template += "<span ng-click='OnAddControlToCellClick(\"sfwRadioButton\")'>Radio Button</span>";
            template += "<span ng-click='OnAddControlToCellClick(\"sfwImageButton\")'>Retrieve Button</span>";
        }
        if (formtype != "Report" && formtype != "Correspondence" && formtype != "Tooltip") {
            template += "<span ng-click='OnAddControlToCellClick(\"sfwButton\")'>Button</span>";
        }

        if (formtype == "Correspondence") {
            template += "<span ng-click='OnAddControlToCellClick(\"sfwRadioButton\")'>Radio Button</span>";
            template += "<span ng-click='OnAddControlToCellClick(\"Panel\")'>Panel</span>";
        }

        if (formtype != "Correspondence" && formtype != "Tooltip") {
            template += "<span ng-click='OnAddControlToCellClick(\"RequiredFieldValidator\")'>RequiredFieldValidator</span>";
            template += "<span ng-click='OnAddControlToCellClick(\"CompareValidator\")'>CompareValidator</span>";
        }

        if (formtype == "Lookup") {
            template += "<span ng-click='OnAddControlToCellClick(\"sfwUserDefaults\")'>User Defaults</span>";

        }
        else {
            if (formtype != "Report" && formtype != "Correspondence" && formtype != "Tooltip") {
                template += "<span ng-click='OnAddControlToCellClick(\"sfwCRViewer\")'>CR Viwer</span>";
                template += "<span ng-click='OnAddControlToCellClick(\"sfwFileLayout\")'>File Layout</span>";
                template += "<span ng-click='OnAddControlToCellClick(\"sfwFileUpload\")'>File Upload</span>";
                template += "<span ng-click='OnAddControlToCellClick(\"sfwSoftErrors\")'>Soft Errors</span>";
                template += "<span ng-click='OnAddControlToCellClick(\"sfwEmployerSoftErrors\")'>Employer Soft Errors</span>";
                template += "<span ng-click='OnAddControlToCellClick(\"sfwRadioButton\")'>Radio Button</span>";
                template += "<span ng-click='OnAddControlToCellClick(\"Panel\")'>Panel</span>";
                template += "<span ng-click='OnAddControlToCellClick(\"sfwListPicker\")'>List Picker</span>";
                template += "<span ng-click='OnAddControlToCellClick(\"sfwSourceList\")'>Source List</span>";
                template += "<span ng-click='OnAddControlToCellClick(\"sfwTargetList\")'>Target List</span>";
            }
        }
        if (formtype != "Report" && formtype != "Correspondence" && formtype != "Tooltip") {
            template += "<span ng-click='OnAddControlToCellClick(\"hr\")'>Horizontal Rule</span>";
            template += "<span ng-click='OnAddControlToCellClick(\"br\")'>Break</span>";
            template += "<span ng-click='OnAddControlToCellClick(\"sfwCascadingDropDownList\")'>CascadingDropDownList</span>";
            if (formtype != "Lookup") {
                template += "<span ng-click='OnAddControlToCellClick(\"sfwMultiCorrespondence\")'>Multi Correspondence</span>";
                template += "<span ng-click='OnAddControlToCellClick(\"DialogPanel\")'>Dialog Panel</span>";
                template += "<span ng-click='OnAddControlToCellClick(\"sfwImage\")'>Image</span>";
                template += "<span ng-click='OnAddControlToCellClick(\"sfwOpenDetail\")'>Open Detail</span>";
            }
        }

        if (formtype == "Wizard") {
            template += "<span ng-click='OnAddControlToCellClick(\"sfwCommandButton\")'>Command Button</span>";
            template += "<span ng-click='OnAddControlToCellClick(\"sfwWizardProgress\")'>Wizard Progress</span>";
        }
        if (formtype != "Report" && formtype != "Correspondence" && formtype != "Tooltip" && formtype != "Lookup") {
            template += "<span ng-click='OnAddControlToCellClick(\"TabContainer\")'>Tab Container</span>";
            template += "<span ng-click='OnAddControlToCellClick(\"sfwListBox\")'>ListBox</span>";
            template += "<span ng-click='OnAddControlToCellClick(\"RangeValidator\")'>Range Validator</span>";
            template += "<span ng-click='OnAddControlToCellClick(\"RegularExpressionValidator\")'>Regular Expression Validator</span>";
            template += "<span ng-click='OnAddControlToCellClick(\"ValidationSummary\")'>Validation Summary</span>";
        }
        if (formtype != "Report" && formtype != "Correspondence" && formtype != "Tooltip") {
            if (formtype != "Lookup") {
                template += formtype != 'UserControl' ? "<span ng-click='OnAddControlToCellClick(\"UserControl\")'>UserControl</span>" : '';
                template += "<span ng-click='OnAddControlToCellClick(\"sfwRuleViewer\")'>RuleViewer</span>";
            }
            template += "<span ng-click='OnAddControlToCellClick(\"sfwSwitchCheckBox\")'>SwitchCheckBox</span>";
            template += "<span ng-click='OnAddControlToCellClick(\"sfwSlider\")'>Slider</span>";
            template += "<span ng-click='OnAddControlToCellClick(\"sfwKnob\")'>Knob</span>";
        }
        if (formtype != "Report" && formtype != "Lookup" && formtype != "Correspondence" && formtype != "Tooltip") {
            template += "<span ng-click='OnAddControlToCellClick(\"sfwQuestionnairePanel\")'>Questionnaire Panel</span>";
        }
        if (formtype != "Report" && formtype != "Correspondence" && formtype != "Tooltip") {
            template += "<span ng-click='OnAddControlToCellClick(\"sfwDateTimePicker\")'>DateTime Picker</span>";
        }
        if (formtype != "Report" && formtype != "Correspondence" && formtype != "Lookup" && formtype != "Tooltip") {
            template += "<span ng-click='OnAddControlToCellClick(\"sfwJSONData\")'>JSON Data</span>";
        }

        template += "<span ng-click='OnAddControlToCellClick(\"sfwButtonGroup\")'>Button Group</span>";
        return template;
    };

    return {
        restrict: "A",
        replace: true,
        scope: {
            item: '=',
            formodel: '='
        },
        link: function (scope, element, attrs) {

            if (angular.isArray(scope.item.Elements)) {
                var type = scope.formodel.dictAttributes.sfwType;
                var IsLookupCriteriaEnabled = scope.formodel.IsLookupCriteriaEnabled;
                element.html(getmenuoptionsTemplate(type, IsLookupCriteriaEnabled));

                $compile(element.contents())(scope);
            }

            //#region Add New Control
            var RepeaterControldialog;
            scope.objRepeaterControl;

            scope.OnAddControlToCellClick = function (aParam) {
                if (aParam) {
                    $(".plusicon").remove();
                    var strControlName = aParam;
                    if (strControlName == "sfwButton") {

                        var newScope = scope.$new(true);
                        newScope.item = scope.item;
                        newScope.formodel = scope.formodel;

                        newScope.CreateButtonDialog = $rootScope.showDialog(newScope, "Button Details", "Form/views/CreateButtonWizard/CreateButtonControl.html", {
                            width: 660, height: 550
                        });


                    }
                    else if (strControlName == "sfwListView") {
                        var strID = CreateControlID(scope.formodel, "RepeaterViewPanel", "sfwListView");
                        var prefix = "swc";
                        scope.objRepeaterControl = { Name: "sfwListView", value: '', prefix: prefix, dictAttributes: { ID: strID }, Elements: [], Children: [] };
                        scope.ParentEntityName = formodel.dictAttributes.sfwEntity;
                        scope.objRepeaterControl.selectedobjecttreefield;
                        scope.objRepeaterControl.lstselectedobjecttreefields = [];
                        //RepeaterControldialog = ngDialog.open({
                        //    template: 'RepeaterControlTemplate',
                        //    scope: scope,
                        //    closeByDocument: false
                        //});
                        var dialogScope = scope.$new(true);
                        //dialogScope = scope;
                        dialogScope.objRepeaterControl = scope.objRepeaterControl;
                        dialogScope.objRepeaterControl.LstDisplayedEntities = [];
                        dialogScope.ParentEntityName = scope.ParentEntityName;
                        dialogScope.RepeaterControldialog = $rootScope.showDialog(dialogScope, "Repeater Control", "Form/views/RepeaterControlTemplate.html", {
                            width: 500, height: 600
                        });
                    }
                    else {
                        scope.AddControlToCell(strControlName);
                    }
                }

            };
            scope.onRepeaterControlOkClick = function () {
                if (scope.objRepeaterControl) {
                    scope.objRepeaterControl.dictAttributes.sfwSelection = "Many";
                    scope.objRepeaterControl.dictAttributes.sfwCaption = "List View";
                    scope.objRepeaterControl.dictAttributes.AllowPaging = "True";
                    scope.objRepeaterControl.dictAttributes.PageSize = "1";
                    var selectedField = scope.objRepeaterControl.selectedobjecttreefield;

                    if (selectedField) {
                        var displayEntity = getDisplayedEntity(scope.objRepeaterControl.LstDisplayedEntities);
                        var displayName = displayEntity.strDisplayName;
                        fieldName = selectedField.ID;
                        if (displayName != "") {
                            fieldName = displayName + "." + selectedField.ID;
                        }
                        var entitycollname = fieldName; //GetItemPathForEntityObject(selectedField);
                        scope.objRepeaterControl.dictAttributes.sfwEntityField = entitycollname;
                        var parentenetityname = selectedField.Entity;
                        var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                        scope.objRepeaterControl.dictAttributes.sfwDataKeyNames = GetTableKeyFields(parentenetityname, entityIntellisenseList);
                    }

                    var prefix = "swc";

                    var objListTableModel = {
                        Name: "sfwTable", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                    };
                    objListTableModel.ParentVM = scope.objRepeaterControl;
                    var strCtrlId = CreateControlID(scope.formodel, "NewPage", "sfwTable");
                    objListTableModel.dictAttributes.ID = strCtrlId;

                    var sfxRowModel = {
                        Name: "sfwRow", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                    };
                    sfxRowModel.ParentVM = objListTableModel;

                    var newSfxCellModel = {
                        Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                    };
                    newSfxCellModel.ParentVM = sfxRowModel;
                    sfxRowModel.Elements.push(newSfxCellModel);

                    newSfxCellModel = {
                        Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                    };
                    newSfxCellModel.ParentVM = sfxRowModel;
                    sfxRowModel.Elements.push(newSfxCellModel);

                    newSfxCellModel = {
                        Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                    };
                    newSfxCellModel.ParentVM = sfxRowModel;
                    sfxRowModel.Elements.push(newSfxCellModel);

                    newSfxCellModel = {
                        Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                    };
                    newSfxCellModel.ParentVM = sfxRowModel;
                    sfxRowModel.Elements.push(newSfxCellModel);

                    objListTableModel.Elements.push(sfxRowModel);
                    scope.objRepeaterControl.Elements.push(objListTableModel);
                    scope.objRepeaterControl.initialvisibilty = true;
                    scope.objRepeaterControl.isLoaded = true;
                    $rootScope.PushItem(scope.objRepeaterControl, scope.dropdata.Elements);
                }
                scope.onRepeaterControlCancelClick();
            };


            scope.onRepeaterControlCancelClick = function () {
                RepeaterControldialog.close();
            };
            scope.AddControlToCell = function (cntrlName, sfxControlModel) {
                if (!sfxControlModel) {
                    sfxControlModel = CreateControl(scope.formodel, scope.item, cntrlName);
                }

                if (sfxControlModel != null && sfxControlModel.Name != "udc") {
                    if (sfxControlModel.Name == "sfwDialogPanel" || sfxControlModel.Name == "sfwPanel") {
                        sfxControlModel.initialvisibilty = true;
                        sfxControlModel.isLoaded = true;
                    }
                    $rootScope.PushItem(sfxControlModel, scope.item.Elements);
                    SetFormSelectedControl(scope.formodel, sfxControlModel);
                    //this.ObjVM.DesignVM.CheckAndUpdateSelectedControlStatus(this.MirrorElements[this.MirrorElements.Count - 1] as SfxControlVM, false);
                    //this.PopulateObjectID(this.ObjVM.Model, sfxControlModel);

                }

                //#region Add User Control
                if (sfxControlModel != undefined && sfxControlModel.Name == "udc") {

                    var newScope = scope.$new();
                    newScope.formodel = scope.formodel;
                    newScope.objSetUCProp = {
                        StrId: sfxControlModel.dictAttributes.ID, StrName: '', StrEntityField: '', StrResource: ''
                    };
                    newScope.objSetUCProp.IsAddedFromObjectTree = false;

                    newScope.onUserControlOkClick = function () {
                        sfxControlModel.dictAttributes.ID = newScope.objSetUCProp.StrId;
                        sfxControlModel.dictAttributes.Name = newScope.objSetUCProp.StrName;
                        if ((scope.formodel.dictAttributes.sfwEntity != undefined && scope.formodel.dictAttributes.sfwEntity != "") && (newScope.objSetUCProp.StrEntityField != undefined && newScope.objSetUCProp.StrEntityField != "")) {
                            if (newScope.objSetUCProp.StrEntityField.match("^" + scope.formodel.dictAttributes.sfwEntity)) {
                                sfxControlModel.dictAttributes.sfwEntityField = scope.formodel.dictAttributes.sfwEntity + "." + newScope.objSetUCProp.StrEntityField;
                            }
                            else {
                                sfxControlModel.dictAttributes.sfwEntityField = newScope.objSetUCProp.StrEntityField;
                            }
                        }
                        else {
                            sfxControlModel.dictAttributes.sfwEntityField = newScope.objSetUCProp.StrEntityField;
                        }
                        sfxControlModel.dictAttributes.sfwResource = newScope.objSetUCProp.StrResource;

                        if (sfxControlModel.dictAttributes.Name != undefined && sfxControlModel.dictAttributes.Name != "") {
                            var fileList = [];
                            var obj = { FileName: sfxControlModel.dictAttributes.Name, ID: sfxControlModel.dictAttributes.ID };
                            fileList.push(obj);
                            $.connection.hubForm.server.getUserControlModel(fileList, "").done(function (udcFileList) {
                                var formScope = getCurrentFileScope();
                                formScope.receiveUcMainTable(udcFileList);
                            });
                        }
                        $rootScope.PushItem(sfxControlModel, scope.item.Elements);
                        newScope.onUserControlCancelClick();
                    };

                    newScope.onUserControlCancelClick = function () {
                        var formScope = getCurrentFileScope();
                        if (formScope && formScope.validationErrorList) {
                            $ValidationService.removeObjInToArray(formScope.validationErrorList, newScope.objSetUCProp);
                        }
                        if (ucPropDialog) {
                            ucPropDialog.close();
                        }
                    };

                    newScope.ValidateUserProp = function () {
                        var retVal = false;
                        newScope.ErrorMessageForDisplay = "";
                        if (newScope.objSetUCProp.StrId == undefined || newScope.objSetUCProp.StrId == "") {
                            newScope.ErrorMessageForDisplay = "Error: Enter the ID.";
                            retVal = true;
                        }
                        else {
                            var lstIds = [];
                            CheckforDuplicateID(scope.formodel, newScope.objSetUCProp.StrId, lstIds);
                            if (lstIds.length > 0) {
                                newScope.ErrorMessageForDisplay = "Error: Duplicate ID.";
                                retVal = true;
                            } else if (!isValidIdentifier(newScope.objSetUCProp.StrId, false, false)) {
                                newScope.ErrorMessageForDisplay = "Error: Invalid ID.";
                                retVal = true;
                            }
                        }
                        if (!newScope.objSetUCProp.StrName || newScope.objSetUCProp.StrName == '') {
                            newScope.ErrorMessageForDisplay = "Please Enter Active Form.";
                            retVal = true;
                        }
                        //else if (!newScope.objSetUCProp.StrEntityField || newScope.objSetUCProp.StrEntityField == "") {
                        //    newScope.ErrorMessageForDisplay = "Please Enter Entity field.";
                        //    retVal = true;
                        //}
                        else if (!newScope.objSetUCProp.StrResource || newScope.objSetUCProp.StrResource == '') {
                            newScope.ErrorMessageForDisplay = "Please Enter Resource.";
                            retVal = true;
                        }
                        if (newScope.ErrorMessageForDisplay == undefined || newScope.ErrorMessageForDisplay == "") {
                            if (newScope.objSetUCProp.StrEntityField != undefined && newScope.objSetUCProp.StrEntityField != "") {
                                var object = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(newScope.formodel.dictAttributes.sfwEntity, newScope.objSetUCProp.StrEntityField);
                                if (!object || object.Type != "Object") {
                                    newScope.ErrorMessageForDisplay = "Entity Field should be Object.";
                                    retVal = true;
                                }
                            }
                        }
                        if (newScope.objSetUCProp.errors && $ValidationService.isEmptyObj(newScope.objSetUCProp.errors)) {
                            retVal = true;
                        }
                        return retVal;
                    };

                    var ucPropDialog = $rootScope.showDialog(newScope, "User Control", "Form/views/SetUserControlProperties.html");

                }

                //#endregion
            };
            //#endregion
        },
    };
}]);

app.directive("newbuttoncommonproptemplate", [function () {
    return {
        restrict: 'A',
        replace: true,
        scope: false,
        templateUrl: 'Form/views/CreateButtonWizard/NewButtonCommonProperties.html',
    };
}]);

app.directive("navigationparamtreetemplatefornewbutton", [function () {
    return {
        restrict: 'A',
        replace: true,
        scope: false,
        templateUrl: 'Form/views/CreateButtonWizard/NavigationParamTreeForNewButton.html',
    };
}]);

app.directive("controlistchildtreetemplate", ["$compile", function ($compile) {
    return {
        restrict: 'A',
        replace: true,
        scope: false,
        templateUrl: 'Form/views/ClientVisibilityChildTree.html',
    };
}]);

app.directive("customattributetreetemplate", [function () {
    return {
        restrict: 'A',
        replace: true,
        scope: false,
        templateUrl: 'Common/views/CustomAttributeTreeTemplate.html',
    };
}]);

app.directive("commonparametertree", [function () {
    return {
        restrict: 'A',
        replace: true,
        scope: false,
        templateUrl: 'Form/views/CommonParameterTree.html',
    };
}]);

app.directive("clientvisibilitychildtree", [function () {
    return {
        restrict: 'A',
        replace: true,
        scope: false,
        template: function () {
            var temp = '<div>'
            temp += '<ul ng-if="field.Items.length > 0" ng-show="field.IsExpanded" role="group">';
            temp += '<li ng-repeat="field in field.Items" ng-click="SelectFieldClick(field, $event)" ng-mousedown="SelectFieldClick(field, $event)" class="common-tree-list client-visibility-tree-option">';
            temp += '<i ng-class="field.IsExpanded?\'fa fa-minus\':\'fa fa-plus\'" ng-click="ExpandCollapsedControl(field,$event)" ng-show="field.Items.length>0" class="client-visibility-icon"></i>';
            temp += '<input type="checkbox" ng-model="field.IsSelected" ng-show="field.IsCheckBoxVisible" />';
            temp += '<span ng-bind="field.Text" class="client-visibility-tree-option-text"></span>';
            temp += '<div clientvisibilitychildtree ng-if="field.Items.length > 0"></div>';
            temp += '</li>';
            temp += '</ul>';
            temp += '</div>';

            return temp;
        },
    };
}]);

app.directive("customattributechildtree", [function () {
    return {
        restrict: 'A',
        replace: true,
        scope: false,
        templateUrl: 'Form/views/CustomAttributeTree.html',
    };
}]);

app.directive("chartcolumndroppable", [function () {
    return {
        restrict: 'A',
        scope: {
            dropdata: '=',
            lstcolumns: '=',
        },
        link: function (scope, element, attributes) {
            var el = element[0];
            el.addEventListener('drop', function (e) {
                var strData = e.dataTransfer.getData("Text");
                if (strData == "" && lstEntityTreeFieldData != null) {
                    var obj = lstEntityTreeFieldData;
                    var Id = obj[0];
                    var DisplayName = obj[1];
                    var DataType = obj[2];
                    var data = obj[3];//JSON.parse(obj[3]);
                    var isparentTypeCollection = obj[4];
                    var fullpath = Id;
                    if (DisplayName != "") {
                        fullpath = DisplayName + "." + Id;
                    }
                    dragDropData = fullpath;
                } else {
                    lstEntityTreeFieldData = null;
                }
                if (dragDropData) {
                    scope.$apply(function () {
                        if (DataType != "Collection" && DataType != "CDOCollection" && DataType != "Object" && DataType != "List") {
                            var flag = true;
                            if (scope.lstcolumns.length > 0) {
                                for (var i = 0; i < scope.lstcolumns.length; i++) {
                                    if (scope.lstcolumns[i].Property == dragDropData) {
                                        flag = false;
                                    }
                                }
                            }
                            if (flag) {
                                scope.lstcolumns.push({ Property: dragDropData });
                            }
                        }
                        dragDropData = null;
                    });
                }
                if (e.preventDefault) {
                    e.preventDefault();
                }
                if (e.stopPropagation) {
                    e.stopPropagation();
                }
            });
            $(el).on('dragenter', function (event) {
                event.preventDefault();
                //  $(this).html('drop now').css('background','blue');
            });
            $(el).on('dragleave', function () {
                // $(this).html('drop here').css('background','red');
            });
            $(el).on('dragover', function (event) {
                event.preventDefault();
            });
        }
    };
}]);

app.directive("basequeryparamdroppable", ["$rootScope", function ($rootScope) {
    return {
        restrict: 'A',
        scope: {
            dropdata: '=',
            dragdata: '=',
        },
        link: function (scope, element, attributes) {
            var el = element[0];

            el.addEventListener("dragover", function (e) {
                e.dataTransfer.dropEffect = 'copy';
                if (e.preventDefault) {
                    e.preventDefault();
                }
            });

            el.addEventListener("drop", function (e) {
                e.preventDefault();
                var strData = e.dataTransfer.getData("Text");
                if (strData == "" && lstEntityTreeFieldData != null) {
                    var obj = lstEntityTreeFieldData;
                    var Id = obj[0];
                    var DisplayName = obj[1];
                    var DataType = obj[2];
                    var data = obj[3];//JSON.parse(obj[3]);
                    var isparentTypeCollection = obj[4];
                    var fullpath = Id;
                    if (DisplayName != "") {
                        fullpath = DisplayName + "." + Id;
                    }
                } else {
                    lstEntityTreeFieldData = null;
                }
                if (scope.dragdata && strData == "" && lstEntityTreeFieldData != null) {
                    scope.$evalAsync(function () {
                        //$rootScope.UndRedoBulkOp("Start");
                        // $rootScope.EditPropertyValue(scope.dropdata.dictAttributes.sfwDataType, scope.dropdata.dictAttributes, "sfwDataType", DataType);
                        scope.dropdata.dictAttributes.sfwDataType = DataType;
                        // $rootScope.EditPropertyValue(scope.dropdata.dictAttributes.sfwEntityField, scope.dropdata.dictAttributes, "sfwEntityField", fullpath);
                        scope.dropdata.dictAttributes.sfwEntityField = fullpath;
                        // $rootScope.UndRedoBulkOp("End");
                    });
                    lstEntityTreeFieldData = null;
                }

                if (e.stopPropagation) {
                    e.stopPropagation();
                }
            }, false);
        }

    };
}]);

app.directive("navigationparamchildtemplate", [function () {
    return {
        restrict: 'A',
        replace: true,
        scope: false,
        templateUrl: 'Form/views/NavigationParamChildTree.html',
    };
}]);


app.directive('addrowsandcolumnstotable', ["$rootScope", function ($rootScope) {
    return {
        restrict: 'E',
        replace: true,
        templateUrl: "Form/views/AddOrDeleteCellsToTable.html",
        link: function (scope, element, attributes) {
            scope.getArrayCount = function (count, param) {
                var lst = [];
                if (count && (count + 5) > 10) {
                    count = count + 5;
                } else {
                    count = 10;
                }
                if (param && param == "Delete") {
                    count = count + 1;
                }
                for (var i = 1; i <= count; i++) {
                    lst.push(i);
                }

                return lst;
            };

            scope.AddRowsAndColumns = function (objChild, event) {
                scope.objRowAndColumnIndex = {};
                scope.objRowAndColumnIndex.RowIndex = 0;
                scope.objRowAndColumnIndex.lstDeleteRowIndex = [];
                scope.objRowAndColumnIndex.lstDeleteColumnIndex = [];
                scope.objRowAndColumnIndex.ColumnIndex = 0;
                scope.objRowAndColumnIndex.CurrentRowIndex = 0;
                scope.objRowAndColumnIndex.CurrentColumnIndex = 0;
                scope.objFileModelForTable = {};
                if (scope.currentfile && scope.currentfile.FileType == "Correspondence") {
                    scope.objFileModelForTable = scope.objCorrespondenceDetails;
                } else if (scope.currentfile && scope.currentfile.FileType == "Report") {
                    scope.objFileModelForTable = scope.ReportModel;
                } else {
                    scope.objFileModelForTable = scope.FormModel;
                }
                scope.setMaxRowAndColumnIndex(objChild);
                if (objChild.Name == "sfwTable" && event) {
                    var divid = "tablediv_" + scope.currentfile.FileName;
                    var element = document.getElementById(divid);
                    $(element).css({
                        left: event.clientX - 50,
                        top: event.clientY,
                    });
                    element.style.display = "block";
                }
            };

            scope.setMaxRowAndColumnIndex = function (objTable) {
                if (objTable) {
                    scope.objRowAndColumnIndex.CurrentRowIndex = objTable.Elements.length;
                    for (var i = 0; i < objTable.Elements.length; i++) {
                        if (scope.objRowAndColumnIndex.CurrentColumnIndex < objTable.Elements[i].Elements.length) {
                            scope.objRowAndColumnIndex.CurrentColumnIndex = objTable.Elements[i].Elements.length;
                        }
                    }
                }
            };

            scope.onDeleteColumnOrRowCellClick = function (event, index, param) {
                if (event) {
                    if (index != 0) {
                        if (param == 'Row') {
                            if (index <= scope.objRowAndColumnIndex.CurrentRowIndex) {
                                var rowindex = scope.objRowAndColumnIndex.lstDeleteRowIndex.indexOf(index);
                                if (rowindex == -1) {
                                    scope.objRowAndColumnIndex.lstDeleteRowIndex.push(index);
                                } else {
                                    scope.objRowAndColumnIndex.lstDeleteRowIndex.splice(rowindex, 1);
                                }
                            }
                        } else if (param == 'Column') {
                            if (index <= scope.objRowAndColumnIndex.CurrentColumnIndex) {
                                var colindex = scope.objRowAndColumnIndex.lstDeleteColumnIndex.indexOf(index);
                                if (colindex == -1) {
                                    scope.objRowAndColumnIndex.lstDeleteColumnIndex.push(index);
                                } else {
                                    scope.objRowAndColumnIndex.lstDeleteColumnIndex.splice(colindex, 1);
                                }
                            }
                        }
                    }
                    event.stopPropagation();
                }
            };

            scope.isCellDelete = function (row, column) {
                var isFound = false;
                if (scope.objRowAndColumnIndex && scope.objRowAndColumnIndex.lstDeleteRowIndex.indexOf(row) > -1) {
                    isFound = true;
                }

                if (scope.objRowAndColumnIndex && scope.objRowAndColumnIndex.lstDeleteColumnIndex.indexOf(column) > -1) {
                    isFound = true;
                }

                if (isFound) {
                    if (!(scope.objRowAndColumnIndex.CurrentRowIndex >= row && scope.objRowAndColumnIndex.CurrentColumnIndex >= column)) {
                        isFound = false;
                    }
                }
                return isFound;
            };

            scope.AddCellsFromTable1 = function (event, row, column, isDummyCell) {
                scope.clearCellsFromtable();
                scope.AddCellsFromTable(event, row, column, isDummyCell);
                if (event && (scope.objRowAndColumnIndex && (scope.objRowAndColumnIndex.lstDeleteRowIndex.length != 0 || scope.objRowAndColumnIndex.lstDeleteColumnIndex.length != 0))) {
                    event.stopPropagation();
                } else {
                    scope.setDisplayNoneToTable();
                }
            };

            scope.setDisplayNoneToTable = function () {
                var divid = "tablediv_" + scope.currentfile.FileName;
                var element = document.getElementById(divid);
                if (element && element.style.display == "block") {
                    element.style.display = "none";
                }
                if (scope.objRowAndColumnIndex) {
                    scope.objRowAndColumnIndex.lstDeleteRowIndex = [];
                    scope.objRowAndColumnIndex.lstDeleteColumnIndex = [];
                    scope.objRowAndColumnIndex.ColumnIndex = 0;
                    scope.objRowAndColumnIndex.CurrentRowIndex = 0;
                    scope.objRowAndColumnIndex.CurrentColumnIndex = 0;
                }
            };

            scope.AddCellsFromTable = function (event, row, column, isDummyCell) {
                if (scope.objRowAndColumnIndex && scope.objRowAndColumnIndex.lstDeleteRowIndex.length == 0 && scope.objRowAndColumnIndex.lstDeleteColumnIndex.length == 0) {
                    if (scope.objFileModelForTable && scope.objFileModelForTable.SelectedControl.Name == "sfwTable") {
                        scope.objRowAndColumnIndex.RowIndex = row;
                        scope.objRowAndColumnIndex.ColumnIndex = column;
                        if (!isDummyCell) {
                            $rootScope.UndRedoBulkOp("Start");
                        }
                        if (row > scope.objFileModelForTable.SelectedControl.Elements.length) {
                            for (var i = scope.objFileModelForTable.SelectedControl.Elements.length; i < row; i++) {
                                var prefix = "swc";
                                var sfxRowModel = {
                                    Name: "sfwRow", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                                };
                                sfxRowModel.ParentVM = scope.objFileModelForTable.SelectedControl;
                                if (isDummyCell) {
                                    sfxRowModel.isDummy = true;
                                    scope.objFileModelForTable.SelectedControl.Elements.push(sfxRowModel);
                                } else {
                                    $rootScope.PushItem(sfxRowModel, scope.objFileModelForTable.SelectedControl.Elements);
                                }
                            }
                        } else {
                            while (row < scope.objFileModelForTable.SelectedControl.Elements.length) {
                                if (scope.objFileModelForTable.SelectedControl.Elements[scope.objFileModelForTable.SelectedControl.Elements.length - 1].isDummy) {
                                    scope.objFileModelForTable.SelectedControl.Elements.splice(scope.objFileModelForTable.SelectedControl.Elements.length - 1, 1);
                                } else {
                                    break;
                                }
                            }
                        }

                        for (var j = 0; j < scope.objFileModelForTable.SelectedControl.Elements.length; j++) {
                            if (column > scope.objFileModelForTable.SelectedControl.Elements[j].Elements.length) {
                                for (k = scope.objFileModelForTable.SelectedControl.Elements[j].Elements.length; k < column; k++) {
                                    var prefix = "swc";
                                    var sfxCellModel = {
                                        Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                                    };
                                    sfxCellModel.ParentVM = scope.objFileModelForTable.SelectedControl.Elements[j];
                                    if (isDummyCell) {
                                        sfxCellModel.isDummy = true;
                                        scope.objFileModelForTable.SelectedControl.Elements[j].Elements.push(sfxCellModel);
                                    } else {
                                        $rootScope.PushItem(sfxCellModel, scope.objFileModelForTable.SelectedControl.Elements[j].Elements);
                                    }
                                }
                            } else {
                                while (column < scope.objFileModelForTable.SelectedControl.Elements[j].Elements.length) {
                                    if (scope.objFileModelForTable.SelectedControl.Elements[j].Elements[scope.objFileModelForTable.SelectedControl.Elements[j].Elements.length - 1].isDummy) {
                                        scope.objFileModelForTable.SelectedControl.Elements[j].Elements.splice(scope.objFileModelForTable.SelectedControl.Elements[j].Elements.length - 1, 1);
                                    } else {
                                        break;
                                    }
                                }
                            }
                        }
                        if (!isDummyCell) {
                            $rootScope.UndRedoBulkOp("End");
                        }
                    }
                }
            };

            scope.DeleteSelectedRowsAndColumns = function () {
                scope.$evalAsync(function () {
                    if (scope.objFileModelForTable && scope.objFileModelForTable.SelectedControl && scope.objFileModelForTable.SelectedControl.Name == "sfwTable" && scope.objRowAndColumnIndex && (scope.objRowAndColumnIndex.lstDeleteColumnIndex.length > 0 || scope.objRowAndColumnIndex.lstDeleteRowIndex.length > 0)) {
                        $rootScope.UndRedoBulkOp("Start");
                        if (scope.objRowAndColumnIndex.lstDeleteRowIndex && scope.objRowAndColumnIndex.lstDeleteRowIndex.length > 0) {
                            scope.objRowAndColumnIndex.lstDeleteRowIndex.sort(function (a, b) { return b - a });
                            for (var i = 0; i < scope.objRowAndColumnIndex.lstDeleteRowIndex.length; i++) {
                                var rowIndex = scope.objRowAndColumnIndex.lstDeleteRowIndex[i] - 1;
                                if (rowIndex > -1 && scope.objFileModelForTable.SelectedControl.Elements[rowIndex]) {
                                    $rootScope.DeleteItem(scope.objFileModelForTable.SelectedControl.Elements[rowIndex], scope.objFileModelForTable.SelectedControl.Elements);
                                }
                            }
                        }

                        if (scope.objRowAndColumnIndex.lstDeleteColumnIndex && scope.objRowAndColumnIndex.lstDeleteColumnIndex.length > 0) {
                            scope.objRowAndColumnIndex.lstDeleteColumnIndex.sort(function (a, b) { return b - a });
                            for (var j = scope.objFileModelForTable.SelectedControl.Elements.length - 1; j >= 0; j--) {
                                for (var k = 0; k < scope.objRowAndColumnIndex.lstDeleteColumnIndex.length; k++) {
                                    var columnIndex = scope.objRowAndColumnIndex.lstDeleteColumnIndex[k] - 1;
                                    if (columnIndex > -1 && scope.objFileModelForTable.SelectedControl.Elements[j].Elements[columnIndex]) {
                                        $rootScope.DeleteItem(scope.objFileModelForTable.SelectedControl.Elements[j].Elements[columnIndex], scope.objFileModelForTable.SelectedControl.Elements[j].Elements);
                                    }
                                }
                                if (scope.objFileModelForTable.SelectedControl.Elements[j].Elements.length == 0) {
                                    $rootScope.DeleteItem(scope.objFileModelForTable.SelectedControl.Elements[j], scope.objFileModelForTable.SelectedControl.Elements);
                                }
                            }
                        }

                        if (scope.objFileModelForTable.SelectedControl.Elements.length == 0) {
                            var prefix = "swc";
                            var sfxRowModel = {
                                Name: "sfwRow", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                            };
                            sfxRowModel.ParentVM = scope.objFileModelForTable.SelectedControl;
                            $rootScope.PushItem(sfxRowModel, scope.objFileModelForTable.SelectedControl.Elements);
                            var sfxCellModel = {
                                Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                            };
                            sfxCellModel.ParentVM = sfxRowModel;
                            $rootScope.PushItem(sfxCellModel, sfxRowModel.Elements);
                        }
                        $rootScope.UndRedoBulkOp("End");
                    }
                    scope.setDisplayNoneToTable();
                });
            };

            scope.clearCellsFromtable = function (event) {
                scope.objRowAndColumnIndex.ColumnIndex = 0;
                scope.objRowAndColumnIndex.RowIndex = 0;
                if (scope.objFileModelForTable && scope.objFileModelForTable.SelectedControl.Name == "sfwTable") {
                    while (scope.objFileModelForTable.SelectedControl.Elements.length > 0 && scope.objFileModelForTable.SelectedControl.Elements[scope.objFileModelForTable.SelectedControl.Elements.length - 1].isDummy) {
                        scope.objFileModelForTable.SelectedControl.Elements.splice(scope.objFileModelForTable.SelectedControl.Elements.length - 1, 1);
                    }

                    for (var i = 0; i < scope.objFileModelForTable.SelectedControl.Elements.length; i++) {
                        while (scope.objFileModelForTable.SelectedControl.Elements[i].Elements.length > 0 && scope.objFileModelForTable.SelectedControl.Elements[i].Elements[scope.objFileModelForTable.SelectedControl.Elements[i].Elements.length - 1].isDummy) {
                            scope.objFileModelForTable.SelectedControl.Elements[i].Elements.splice(scope.objFileModelForTable.SelectedControl.Elements[i].Elements.length - 1);
                        }
                    }
                }
                if (event) {
                    event.stopPropagation();
                }
            };
        }
    };
}]);
app.controller("CustomAttributesController", ["$scope", "$rootScope", "$SgMessagesService", function ($scope, $rootScope, $SgMessagesService) {

    $scope.IsShowAllControl = false;

    //#region Init Methods
    $scope.Init = function () {
        $scope.FieldCollection = [];
        $scope.ParameterCollection = [];
        $scope.IsLookup = $scope.formobject.dictAttributes.sfwType == 'Lookup' || $scope.formobject.dictAttributes.sfwType == 'FormLinkLookup';
        $scope.IsReport = $scope.formobject.dictAttributes.sfwType == 'Report';
        $scope.IsCorrespondence = $scope.formobject.dictAttributes.sfwType == 'Correspondence';
        $scope.LoadAvailableFields();
        $scope.Initialize();
    };

    $scope.Initialize = function () {
        if ($scope.propertyName == undefined) {
            $scope.propertyName = $scope.$parent.propertyName;
        }

        var customAttribute = $scope.model.dictAttributes[$scope.propertyName];
        if (customAttribute != undefined && customAttribute != "") {
            var alParams = customAttribute.split(';');
            angular.forEach(alParams, function (strParam) {
                if (strParam == undefined || strParam == "") {

                }
                else {
                    var strParamField = strParam;
                    var strParamValue = strParam;
                    var blnConstant = false;

                    if (strParam.contains("=")) {
                        strParamField = strParam.substring(0, strParam.indexOf('='));
                        strParamValue = strParam.substring(strParam.indexOf('=') + 1);

                        if (strParamValue.match("^#")) {
                            strParamValue = strParamValue.substring(1);
                            blnConstant = true;
                        }
                    }
                    var objParameter = { ParameterField: strParamField, ParameterValue: strParamValue, Constants: blnConstant };

                    $scope.ParameterCollection.push(objParameter);
                }
            });
        }
    };

    $scope.LoadAvailableFields = function () {
        var strProperty = "";
        if ($scope.IsLookup) {
            strProperty = "sfwDataField";
        }
        else if ($scope.IsReport) {
            strProperty = "sfwObjectField";
            var table;
            for (var i = 0; i < $scope.formobject.Elements.length; i++) {
                if ($scope.formobject.Elements[i].Name == "sfwTable") {
                    $scope.CurrentTable = $scope.formobject.Elements[i];
                    break;
                }
            }
        }
        else {
            strProperty = "sfwEntityField";
        }

        $scope.FieldCollection = [];

        var mainItem = { Text: "Main", Items: [], IsSelected: false, IsCheckBoxVisible: false };
        if (!$scope.isFormLink) {
            if ($scope.IsShowAllControl) {

                var table;
                for (var i = 0; i < $scope.formobject.Elements.length; i++) {
                    if ($scope.formobject.Elements[i].Name == "sfwTable") {
                        table = $scope.formobject.Elements[i];
                        break;
                    }
                }

                //PopulateAvailableFields(strProperty, $rootScope.MainTable, mainItem, true);
                PopulateAvailableFields(strProperty, table, mainItem, true, $scope.IsLookup, false);
            }
            else {
                PopulateAvailableFields(strProperty, $scope.CurrentTable, mainItem, true, $scope.IsLookup, false);
            }

            if (mainItem.Items.length > 0) {
                $scope.$evalAsync(function () {
                    $scope.FieldCollection.push(mainItem);
                });
            }
        }
        else {
            var objItems = GetFormLinkItemsModel($scope.model, $scope.formobject);
            if (null != objItems) {
                PopulateAvailableFieldsForFormLink(strProperty, objItems, mainItem, true);
                if (mainItem.Items.length > 0) {
                    $scope.FieldCollection.push(mainItem);
                }
            }
        }
    };


    //#endregion

    //#region Common Events

    $scope.ExpandCollapsedCustomAttrField = function (field, event) {
        field.IsExpanded = !field.IsExpanded;
    };


    $scope.SetFieldClass = function (obj) {
        if (obj == $scope.SelectedField) {
            return "selected";
        }
    };

    $scope.SelectFieldClick = function (obj, event) {
        $scope.SelectedField = obj;
        if (event) {
            event.stopPropagation();
        }
    };

    $scope.showAllControlChange = function () {
        // $scope.$apply(function() {
        $scope.LoadAvailableFields();
        //});
    };

    $scope.AddToGridClick = function () {
        if ($scope.FieldCollection.length > 0) {
            $scope.TraverseFieldCollection($scope.FieldCollection[0].Items);
            if ($scope.ParameterCollection.length > 0) {
                $scope.SelectedParameter = $scope.ParameterCollection[$scope.ParameterCollection.length - 1];
            }
        }
    };

    $scope.SelectParameter = function (param) {
        $scope.SelectedParameter = param;
    };

    $scope.SetClassForParameter = function (param) {
        if ($scope.SelectedParameter == param) {
            return "selected";
        }
    };

    $scope.onAddParameter = function () {
        $scope.ParameterCollection.push({ ParameterField: "", ParameterValue: "" });
        if ($scope.ParameterCollection.length > 0) {
            $scope.SelectedParameter = $scope.ParameterCollection[$scope.ParameterCollection.length - 1];
        }
    };

    $scope.onDeleteParameter = function () {
        if ($scope.SelectedParameter) {
            var index = $scope.ParameterCollection.indexOf($scope.SelectedParameter);
            $scope.ParameterCollection.splice(index, 1);

            if (index < $scope.ParameterCollection.length) {
                $scope.SelectedParameter = $scope.ParameterCollection[index];
            }
            else if ($scope.ParameterCollection.length > 0) {
                $scope.SelectedParameter = $scope.ParameterCollection[index - 1];
            }
            else if ($scope.ParameterCollection.length == 0) {
                $scope.SelectedParameter = undefined;
            }
        }
    };

    //#endregion 

    //#region Common Methods

    $scope.TraverseFieldCollection = function (fieldCollection) {
        angular.forEach(fieldCollection, function (field) {
            if (field.IsSelected) {
                var strFld = field.Text;
                var blnFound = false;
                var lst = $scope.ParameterCollection.filter(function (itm) { return itm.ParameterValue == strFld; });
                if (lst && lst.length > 0) {
                    blnFound = true;
                }

                if (blnFound) {
                    $SgMessagesService.Message('Message', strFld + " Column is already added in Collection, please check.");
                }
                else {
                    var strValue = $scope.GetCaptionFromFieldName(strFld);
                    strValue = $scope.RemoveInternalSpace(strValue);
                    var objParameters = { ParameterField: strValue, ParameterValue: strFld };
                    $scope.ParameterCollection.push(objParameters);
                }
                field.IsSelected = false;
            }
            if (field.Items.length > 0) {
                $scope.TraverseFieldCollection(field.Items);
            }
        });
    };

    $scope.RemoveInternalSpace = function (astrInput) {
        astrInput = astrInput.trim();
        while (astrInput.indexOf(" ") > 0) {
            astrInput = astrInput.substring(0, astrInput.indexOf(" ")).trim() + astrInput.substring(astrInput.indexOf(" ")).trim();
        }
        return astrInput;
    };

    $scope.GetCaptionFromFieldName = function (str) {
        if (str.match("^icdo"))
            str = str.replace("icdo", "");

        var strCaption = "";
        var blnCapsNext = true;

        for (var i = 0; i < str.length; i++) {
            if ("._".contains("" + str[i])) {
                blnCapsNext = true;
                strCaption += " ";
            }
            else {
                strCaption += blnCapsNext ? str.toUpperCase()[i] : str[i];
                blnCapsNext = false;
            }
        }

        if (strCaption.match(" Id$"))
            strCaption = strCaption.replace(" Id", " ID");
        if (strCaption.contains("Ssn"))
            strCaption = strCaption.replace("Ssn", "SSN");

        var intValuePos = strCaption.indexOf(" Value");
        if (intValuePos > 0)
            strCaption = strCaption.substring(0, intValuePos);

        var intDescPos = strCaption.indexOf(" Description");
        if (intDescPos > 0)
            strCaption = strCaption.substring(0, intDescPos);

        return strCaption;
    };

    $scope.GetSavedString = function () {
        var strReturn = "";
        angular.forEach($scope.ParameterCollection, function (objParams) {
            var strParamField = objParams.ParameterField;
            var strParamValue = objParams.ParameterValue;
            if ((strParamValue != undefined && strParamValue != "") || (strParamField != undefined && strParamField != "")) {
                var blnConstatnt = objParams.Constants;

                if (blnConstatnt) {
                    strParamValue = "#" + strParamValue;
                }

                var strParam = strParamValue;

                if (strParamValue.toLowerCase() != strParamField.toLowerCase()) {
                    strParam = strParamField + '=' + strParamValue;
                }

                if (strReturn == "") {
                    strReturn = strParam;
                }
                else {
                    strReturn += ';' + strParam;
                }
            }
        });
        return strReturn;
    };

    $scope.onOkClick = function () {
        var strCustomAttribute = $scope.GetSavedString();
        $rootScope.EditPropertyValue($scope.model.dictAttributes[$scope.propertyName], $scope.model.dictAttributes, $scope.propertyName, strCustomAttribute);
        $scope.onCancelClick();
    };

    $scope.onCancelClick = function () {
        // $scope.objNewDialog.close();
        $scope.UserLogParaDialog.close();
    };
    //#endregion

    $scope.Init();
}]);
app.controller("RetrievalParametersController", ["$scope", "$rootScope", "$filter", function ($scope, $rootScope, $filter) {
    $scope.ShowAll = {};
    $scope.ShowAll.isShowAll = false;
    $scope.lstParameters = [];
    var panelObject;
    $scope.Init = function () {
        if ($scope.formobject) {
            var isWizard = $scope.formobject.dictAttributes.sfwType == "Wizard";
            if (isWizard) {
                panelObject = GetVM("sfwWizardStep", $scope.model);
            } else if ($scope.formobject.dictAttributes.sfwType == "FormLinkLookup" || $scope.formobject.dictAttributes.sfwType == "FormLinkMaintenance" || $scope.formobject.dictAttributes.sfwType == "FormLinkWizard") {
                if ($scope.formobject && $scope.formobject.Elements) {
                    for (var i = 0; i < $scope.formobject.Elements.length; i++) {
                        if ($scope.formobject.Elements[i].Name == "items") {
                            $scope.PopulateRetrievalParametersForHtml($scope.formobject.Elements[i], $scope.lstParameters, $scope.formobject.dictAttributes.sfwType);
                            break;
                        }
                    }
                }
            }
            else if ($scope.formobject.dictAttributes.sfwType == "Correspondence" || $scope.formobject.dictAttributes.sfwType == "UserControl") {
                panelObject = GetVM("sfwTable", $scope.model);
            }
            else {
                panelObject = GetVM("sfwPanel", $scope.model); // For Forms
            }
            if (panelObject) {
                PopulateRetrievalOrAutoCompleteParameters(panelObject, $scope.lstParameters, $scope.formobject.dictAttributes.sfwType, true);
            }
        }
        $.connection.hubForm.server.getGlobleParameters().done(function (data) {
            $scope.$apply(function () {
                $scope.objGlobleParameters = data;
                $scope.PopulateGlobalParameters();
            });
        });
    };

    $scope.ShowAllControls = function () {
        $scope.lstParameters = [];
        if ($scope.ShowAll.isShowAll) {
            if ($scope.formobject && $scope.formobject.Elements) {
                for (var i = 0; i < $scope.formobject.Elements.length; i++) {
                    if ($scope.formobject.dictAttributes.sfwType == "Correspondence") {
                        if ($scope.formobject.Elements[i].Name == "sfwQueryForm") {
                            if ($scope.formobject.Elements[i].Elements.length > 0 && $scope.formobject.Elements[i].Elements[0].Name == "sfwTable") {
                                PopulateRetrievalOrAutoCompleteParameters($scope.formobject.Elements[i].Elements[0], $scope.lstParameters, $scope.formobject.dictAttributes.sfwType, true);
                                break;
                            }
                        }
                    }

                    if ($scope.formobject.Elements[i].Name == "sfwTable") {
                        PopulateRetrievalOrAutoCompleteParameters($scope.formobject.Elements[i], $scope.lstParameters, $scope.formobject.dictAttributes.sfwType, true);
                        break;
        }
                }
            }
           
        }
        else {
            PopulateRetrievalOrAutoCompleteParameters(panelObject, $scope.lstParameters, $scope.formobject.dictAttributes.sfwType, true);
        }
        $scope.PopulateGlobalParameters();

        $scope.bindParameterValue();
    };

    $scope.PopulateGlobalParameters = function () {
        function iterator(itm) {
            if (itm.dictAttributes && itm.dictAttributes.ID) {
                var strFieldName = itm.dictAttributes.ID;
                if (!globalParameters.filter(function (itm) { return itm == strFieldName.trim(); })) {
                    globalParameters.push(strFieldName.trim());
                }
                var mainItem = { ID: "~" + strFieldName, IsExpanded: false, IsSelected: false, Elements: [] };
                objGlobalParam.Elements.push(mainItem);
            }
        }
        if ($scope.objGlobleParameters) {
            var strFormType = $scope.formobject.dictAttributes.sfwType;
            if (($scope.model.Name == "sfwTextBox" || $scope.model.Name == "sfwButton"|| $scope.model.Name == "sfwMultiSelectDropDownList"|| 
                    $scope.model.Name == "sfwCascadingDropDownList" || $scope.model.Name == "sfwDropDownList" || $scope.model.Name == "sfwCheckBoxList" || $scope.model.Name == "sfwRadioButtonList")
                 ) {
                if ($scope.model.Name == "sfwButton") {
                    if ($scope.model.dictAttributes.sfwMethodName != "btnOpen_Click" && $scope.model.dictAttributes.sfwMethodName != "btnNew_Click")
                        return;
                }
                var globalParameters = [];

                if ($scope.objGlobleParameters.Elements.length > 0) {
                    var objGlobalParam = { ID: "Global Parameters", IsExpanded: false, IsSelected: false, Elements: [] };

                    angular.forEach($scope.objGlobleParameters.Elements, iterator);

                    if (objGlobalParam.Elements.length > 0) {
                        $scope.lstParameters.push(objGlobalParam);
                    }
                }


            }
        }
    };


    $scope.ExpandCollapsedControl = function (lstparameter, event) {
        lstparameter.IsExpanded = !lstparameter.IsExpanded;
    };
    $scope.selectParameter = function (parameter, event) {
        $scope.selectedParameter = parameter;
        if (event) {
            event.stopPropagation();
        }
    };
    $scope.bindParameterValue = function () {
        if ($scope.selectedCurrentQuery != undefined && $scope.selectedCurrentQuery != "") {
            $scope.ParameterCollection = [];
            angular.forEach($scope.selectedCurrentQuery.Parameters, function (strParam) {
                ParameterField = strParam.ID;
                if (ParameterField.contains("@")) {
                    strParamField = ParameterField.substring(ParameterField.indexOf('@') + 1, ParameterField.length);
                }
                else {
                    strParamField = ParameterField;
                }

                var objParameter = { ParameterField: strParamField, ParameterValue: "" };
                $scope.ParameterCollection.push(objParameter);
            });
        }
        if ($scope.ParameterCollection != undefined && $scope.ParameterCollection.length > 0 && $scope.strSelectedParameters != undefined) {
            var lst = $scope.strSelectedParameters.split(";");
            for (var i = 0; i < lst.length; i++) {
                var lstControlsID = lst[i].split("=");
                for (var j = 0; j < $scope.ParameterCollection.length; j++) {
                    if ($scope.ParameterCollection[j].ParameterField == lstControlsID[0]) {
                        $scope.ParameterCollection[j].ParameterValue = lstControlsID[1];
                    }
                }
            }
        }
    };
    $scope.bindParameterValue();

    $scope.okClick = function () {
        $scope.strSelectedParameters = "";
        if ($scope.ParameterCollection != undefined) {
            for (var i = 0; i < $scope.ParameterCollection.length; i++) {
                if ($scope.ParameterCollection[i].ParameterValue != "") {
                    if ($scope.strSelectedParameters != undefined && $scope.strSelectedParameters != "") {
                        $scope.strSelectedParameters += ";" + $scope.ParameterCollection[i].ParameterField + "=" + $scope.ParameterCollection[i].ParameterValue;
                    }
                    else if ($scope.strSelectedParameters == undefined || $scope.strSelectedParameters == "") {
                        $scope.strSelectedParameters = $scope.ParameterCollection[i].ParameterField + "=" + $scope.ParameterCollection[i].ParameterValue;
                    }
                }
            }
        }
        //if ($scope.IsAutoComplete) {
        //    $scope.$emit("onAutoCompleteParameterClick", $scope.strSelectedParameters);
        //}
        //else {
        $scope.$emit("onRetrievalParameterClick", $scope.strSelectedParameters);
        // }
        $scope.closeClick();
    };
    $scope.closeClick = function () {
        $scope.objNewDialog.close();
    };

    $scope.SelectFieldClick = function (field, event) {
        //$scope.SelectedField = field;
        if (event) {
            event.stopPropagation();
        }
    };


    //#region Html Methods
    $scope.PopulateRetrievalParametersForHtml = function (panel, lstParameters, formType) {
        if (panel) {
            angular.forEach(panel.Elements, function (ctrl) {
                if (ctrl.Name != "sfwPanel" && ctrl.Name != "sfwWizardStep" && ctrl.Name != "sfwGridView") {
                    if (formType == "FormLinkLookup" && ctrl.dictAttributes.sfwDataField && ctrl.dictAttributes.ID) {
                        var obj = { ID: ctrl.dictAttributes.ID, ControlID: "", Elements: [], IsExpanded: false };
                        lstParameters.push(obj);
                    }
                    else if ((formType == "FormLinkMaintenance" || formType == "FormLinkWizard") && ctrl.dictAttributes.sfwEntityField && ctrl.dictAttributes.ID) {
                        var obj = { ID: ctrl.dictAttributes.ID, ControlID: "", Elements: [], IsExpanded: false };
                        lstParameters.push(obj);
                    }
                }
                if (ctrl.Elements.length > 0) {
                    var lsttempParameters = lstParameters;
                    if (ctrl.Name == "sfwPanel" || ctrl.Name == "sfwDialogPanel") {
                        var Id = ctrl.dictAttributes.sfwCaption;
                        if (Id == undefined || Id == "") {
                            Id = ctrl.dictAttributes.ID;
                        }
                        var obj = { ID: Id, Elements: [], IsExpanded: false };
                        lstParameters.push(obj);
                        lsttempParameters = lstParameters[lstParameters.length - 1].Elements;
                    }
                    if (ctrl.Name == "sfwWizardStep") {
                        var Id = ctrl.dictAttributes.Title;
                        if (Id == undefined || Id == "") {
                            Id = ctrl.dictAttributes.ID;
                        }
                        var obj = { ID: Id, Elements: [], IsExpanded: false };
                        lstParameters.push(obj);
                        lsttempParameters = lstParameters[lstParameters.length - 1].Elements;
                    }
                    //if (ctrl.Name == "sfwGridView") {
                    //    var obj = { ID: ctrl.dictAttributes.ID + "(Data Keys)", Elements: [], IsExpanded: false }
                    //    lstParameters.push(obj);
                    //    lsttempParameters = lstParameters[lstParameters.length - 1].Elements;
                    //    PopulateGridEntityField(ctrl, lsttempParameters);
                    //}
                    $scope.PopulateRetrievalParametersForHtml(ctrl, lsttempParameters, formType);
                }
            });
        }
    };

    //#endregion

    $scope.Init();
}]);

app.directive("retrievalparameterdraggable",[ function () {
    return {
        restrict: 'A',
        scope: {
            dragdata: '=',
        },
        link: function (scope, element, attributes) {
            var el = element[0];
            el.draggable = true;

            el.addEventListener('dragstart', onDragStart, false);

            function onDragStart(e) {
                e.stopPropagation();
                if (scope.dragdata != undefined && scope.dragdata != "") {
                    e.dataTransfer.setData("text", JSON.stringify(scope.dragdata));
                }
            }
        }
    };
}]);

app.directive("retrievalparameterdroppable",[ function () {
    return {
        restrict: 'A',
        scope: {
            dropdata: '=',
        },
        link: function (scope, element, attributes) {
            var el = element[0];

            el.addEventListener("dragover", function (e) {
                e.dataTransfer.dropEffect = 'copy';
                if (e.preventDefault) {
                    e.preventDefault();
                }
            });

            el.addEventListener("drop", function (e) {
                e.preventDefault();
                var data = JSON.parse(e.dataTransfer.getData("text"));
                if (data != undefined && data != "") {
                    scope.$apply(function () {
                        scope.dropdata = data;
                    });
                }
                if (e.stopPropagation) {
                    e.stopPropagation();
                }
});
        }
    };
}]);
app.controller("RetrievalControlsController", ["$scope", "$rootScope", "$filter", "ngDialog", "$EntityIntellisenseFactory", function ($scope, $rootScope, $filter, ngDialog, $EntityIntellisenseFactory) {
    $scope.lstRetrievalControl = [];
    $scope.lstColumns = [];
    $scope.ShowAll = {};
    $scope.ShowAll.isShowAll = false;
    var panelObject;
    $scope.Init = function () {
        function iterateAttrs(attr) {
            if (attr.DataType != "Collection" && attr.DataType != "Object" && attr.DataType != "CDOCollection" && attr.Type != "Expression") {
                $scope.lstColumns.push({ CodeID: attr.ID });
            }
        }
        function iterateMethod(objMethod) {
            if (objMethod && objMethod.ID == strObjectMethod) {
                if (objMethod.Entity != undefined && objMethod.Entity != "") {
                    var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                    var lstEntity = $filter('filter')(entityIntellisenseList, { ID: objMethod.Entity }, true);
                    if (lstEntity && lstEntity.length > 0) {
                        var objEntity = lstEntity[0];
                        angular.forEach(objEntity.Attributes, iterateAttrs);
                    }
                }
            }
        }
        if ($scope.model.dictAttributes.sfwRetrievalQuery || ($scope.IsAutoComplete && $scope.model.autocompleteType === "Query" && $scope.model.dictAttributes.sfwAutoQuery)) {
            if ($scope.IsAutoComplete && $scope.model.dictAttributes.sfwAutoQuery) {
                var lst = $scope.model.dictAttributes.sfwAutoQuery.split('.');
            } else if ($scope.IsRetrievalQuery && $scope.model.dictAttributes.sfwRetrievalQuery) {
                var lst = $scope.model.dictAttributes.sfwRetrievalQuery.split('.');
            }
            if (lst && lst.length == 2) {
                var entityName = lst[0];
                var strQueryID = lst[1];
                var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                var lstEntity = $filter('filter')(entityIntellisenseList, { ID: entityName }, true);
                if (lstEntity && lstEntity.length > 0) {
                    var objEntity = lstEntity[0];
                    var lstQuery = objEntity.Queries.filter(function (x) { return x.ID == strQueryID; });
                    if (lstQuery && lstQuery.length > 0) {
                        var objQuery = lstQuery[0];
                        if ($scope.IsAutoComplete) {
                            $.connection.hubForm.server.getEntityQueryColumns($scope.model.dictAttributes.sfwAutoQuery, "RetrievalControlsController").done(function (data) {
                                $scope.receiveQueryColumns(data);
                            });
                        }
                        else {
                            $.connection.hubForm.server.getEntityQueryColumns($scope.model.dictAttributes.sfwRetrievalQuery, "RetrievalControlsController").done(function (data) {
                                $scope.receiveQueryColumns(data);
                            });
                        }

                    }
                }
            }
        }
        else if ($scope.model.dictAttributes.sfwRetrievalMethod || ($scope.IsAutoComplete && $scope.model.autocompleteType === "Method" && $scope.model.dictAttributes.sfwAutoMethod)) {
            var strObjectMethod = null;
            if ($scope.IsAutoComplete) {
                strObjectMethod = $scope.model.dictAttributes.sfwAutoMethod;
            }
            else {
                strObjectMethod = $scope.model.dictAttributes.sfwRetrievalMethod.trim();
            }

            if (!strObjectMethod)
                return;
            var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
            $scope.lstColumns = [];
            var lstMethod = GetObjectMethods(entityIntellisenseList, $scope.formobject.dictAttributes.sfwEntity, strObjectMethod);

            angular.forEach(lstMethod, iterateMethod);
        }
        $scope.receiveQueryColumns = function (data) {
            $scope.$apply(function () {
                $scope.lstColumns = data;
            });
        };
        var isWizard = $scope.formobject.dictAttributes.sfwType == "Wizard";
        if (isWizard) {
            panelObject = GetVM("sfwWizardStep", $scope.model);
        }
        else if ($scope.formobject.dictAttributes.sfwType == "Correspondence" || $scope.formobject.dictAttributes.sfwType == "UserControl") {
            panelObject = GetVM("sfwTable", $scope.model);
        }
        else {
            panelObject = GetVM("sfwPanel", $scope.model);
        }
        if ($scope.formobject.dictAttributes.sfwType == "FormLinkLookup" || $scope.formobject.dictAttributes.sfwType == "FormLinkMaintenance" || $scope.formobject.dictAttributes.sfwType == "FormLinkWizard") {
            var lst = $scope.formobject.Elements.filter(function (itm) { return itm.Name == "items"; });
            if (lst && lst.length > 0) {
                PopulateRetrievalControls(lst[0], $scope.lstRetrievalControl);
            }
        }
        else {
            PopulateRetrievalControls(panelObject, $scope.lstRetrievalControl);
        }
        $scope.bindControlsID();
    };
    $scope.bindControlsID = function () {
        if ($scope.strSelectedRetrievalControls != undefined) {
            var lst = $scope.strSelectedRetrievalControls.split(";");
            for (var i = 0; i < lst.length; i++) {
                var lstControlsID = lst[i].split("=");
                for (var j = 0; j < $scope.lstRetrievalControl.length; j++) {
                    if ($scope.lstRetrievalControl[j].ID == lstControlsID[0]) {
                        $scope.lstRetrievalControl[j].ControlID = lstControlsID[1];
                    }
                }
            }
        }
    };
    // $scope.bindControlsID();
    $scope.ShowAllControls = function () {

        $scope.GetRetrievalControlValue();

        $scope.lstRetrievalControl = [];
        if ($scope.ShowAll.isShowAll) {
            PopulateRetrievalControls($scope.formobject, $scope.lstRetrievalControl);
        }
        else {
            PopulateRetrievalControls(panelObject, $scope.lstRetrievalControl);
        }
        $scope.bindControlsID();
    };
    $scope.closeClick = function () {
        $scope.RetrievalControlsDialog.close();
    };

    $scope.GetRetrievalControlValue = function () {
        $scope.strSelectedRetrievalControls = "";
        for (var i = 0; i < $scope.lstRetrievalControl.length; i++) {
            if ($scope.lstRetrievalControl[i].ControlID != "") {
                if ($scope.strSelectedRetrievalControls != undefined && $scope.strSelectedRetrievalControls != "") {
                    $scope.strSelectedRetrievalControls += ";" + $scope.lstRetrievalControl[i].ID + "=" + $scope.lstRetrievalControl[i].ControlID;
                }
                else if ($scope.strSelectedRetrievalControls == undefined || $scope.strSelectedRetrievalControls == "") {
                    $scope.strSelectedRetrievalControls = $scope.lstRetrievalControl[i].ID + "=" + $scope.lstRetrievalControl[i].ControlID;
                }
            }
        }

    };

    $scope.okClick = function () {
        $scope.GetRetrievalControlValue();

        if ($scope.IsAutoComplete) {
            $scope.$emit("onAutoCompletelControlClick", $scope.strSelectedRetrievalControls);
        }
        else {
            $scope.$emit("onRetrievalControlClick", $scope.strSelectedRetrievalControls);
        }


        $scope.closeClick();
        if ($scope.OnOkClick) {
            $scope.OnOkClick();
        }
    };

    $scope.Init();
}]);

app.directive("retrievalcontroldraggable", [function () {
    return {
        restrict: 'A',
        scope: {
            dragdata: '=',
        },
        link: function (scope, element, attributes) {
            var el = element[0];
            el.draggable = true;

            el.addEventListener('dragstart', onDragStart, false);

            function onDragStart(e) {
                e.stopPropagation();
                if (scope.dragdata != undefined && scope.dragdata != "") {
                    e.dataTransfer.setData("text", JSON.stringify(scope.dragdata));
                }
            }
        }
    };
}]);

app.directive("retrievalcontroldroppable", [function () {
    return {
        restrict: 'A',
        scope: {
            dropdata: '=',
        },
        link: function (scope, element, attributes) {
            var el = element[0];
            el.addEventListener("dragover", function (e) {
                e.dataTransfer.dropEffect = 'copy';
                if (e.preventDefault) {
                    e.preventDefault();
                }
            });

            el.addEventListener("drop", function (e) {
                e.preventDefault();
                var data = JSON.parse(e.dataTransfer.getData("text"));
                if (data != undefined && data != "") {
                    scope.$apply(function () {
                        scope.dropdata = data;
                    });
                }
                if (e.stopPropagation) {
                    e.stopPropagation();
                }
            });
        }
    };
}]);
app.controller("AutoCompleteParameterController", ["$scope", "$rootScope", "$filter", "ngDialog", function ($scope, $rootScope, $filter, ngDialog) {
    $scope.ShowAll = {};
    $scope.ShowAll.isShowAll = false;

    $scope.lstParameters = [];
    var panelObject;
    $scope.Init = function () {
        var obj = { ID: "Main", Name: 'sfwPanel', Elements: [], IsExpanded: false };
        $scope.lstParameters.push(obj);
        panelObject = GetVM("sfwPanel", $scope.model);
        if ($scope.formobject.dictAttributes.sfwType == "UserControl") {
            panelObject = GetVM("sfwTable", $scope.model);
        }
        var isWizard = $scope.formobject.dictAttributes.sfwType == "Wizard";
        if (isWizard) {
            panelObject = GetVM("sfwWizardStep", $scope.model);
        }
        if ($scope.IsAutoComplete) {
            if ($scope.FormType == "FormLinkLookup" || $scope.FormType == "FormLinkMaintenance" || $scope.FormType == "FormLinkWizard") {
                if ($scope.formobject && $scope.formobject.Elements) {
                    for (var i = 0; i < $scope.formobject.Elements.length; i++) {
                        if ($scope.formobject.Elements[i].Name == "items") {
                            $scope.PopulateAutoCompleteParametersForHtml($scope.formobject, $scope.lstParameters[0].Elements, $scope.FormType);
                        }
                    }
                }
            }
            else {
                if (panelObject) {
                    PopulateRetrievalOrAutoCompleteParameters(panelObject, $scope.lstParameters[0].Elements, $scope.FormType, false);
                }
            }
        }

        $.connection.hubForm.server.getGlobleParameters().done(function (data) {
            $scope.$apply(function () {
                $scope.objGlobleParameters = data;
                $scope.PopulateGlobalParameters();
            });
        });
    };
    $scope.PopulateGlobalParameters = function () {
        function AddInobjGlobalParam(itm) {
            if (itm.dictAttributes && itm.dictAttributes.ID) {
                var strFieldName = itm.dictAttributes.ID;
                if (!globalParameters.filter(function (itm) { return itm == strFieldName.trim(); })) {
                    globalParameters.push(strFieldName.trim());
                }
                // objGlobalParam.Children.Add(new clsAvailableControl { ControlName = strFieldName });
                var mainItem = { ID: "~" + strFieldName, IsExpanded: false, IsSelected: false, Elements: [] };
                objGlobalParam.Elements.push(mainItem);
            }
        }

        if ($scope.objGlobleParameters) {
            var strFormType = $scope.formobject.dictAttributes.sfwType;
            if (($scope.model.Name == "sfwTextBox" || $scope.model.Name == "sfwButton" ||
                $scope.model.Name == "sfwCascadingDropDownList" || $scope.model.Name == "sfwDropDownList" || $scope.model.Name == "sfwMultiSelectDropDownList")
                && strFormType != "Report" && strFormType != "Correspondence") {
                if ($scope.model.Name == "sfwButton") {
                    if ($scope.model.dictAttributes.sfwMethodName != "btnOpen_Click" && $scope.model.dictAttributes.sfwMethodName != "btnNew_Click")
                        return;
                }
                var globalParameters = [];

                if ($scope.objGlobleParameters.Elements.length > 0) {
                    var objGlobalParam = { ID: "Global Parameters", IsExpanded: false, IsSelected: false, Elements: [] };

                    angular.forEach($scope.objGlobleParameters.Elements, AddInobjGlobalParam);
                    if (objGlobalParam.Elements.length > 0) {
                        $scope.lstParameters.push(objGlobalParam);
                    }
                }

            }
        }
    };


    $scope.ShowAllControls = function () {
        $scope.lstParameters = [];
        var obj = { ID: "Main", Name: 'sfwPanel', Elements: [], IsExpanded: false };
        $scope.lstParameters.push(obj);
        if ($scope.ShowAll.isShowAll) {
            if ($scope.formobject && $scope.formobject.Elements) {
                for (var i = 0; i < $scope.formobject.Elements.length; i++) {
                    if ($scope.formobject.Elements[i].Name == "sfwTable") {
                        PopulateRetrievalOrAutoCompleteParameters($scope.formobject.Elements[i], $scope.lstParameters[0].Elements, $scope.FormType, false);
                        break;
                    }
                }
            }
        }
        else {
            if (panelObject) {
                PopulateRetrievalOrAutoCompleteParameters(panelObject, $scope.lstParameters[0].Elements, $scope.FormType, false);
            }
        }
        $scope.PopulateGlobalParameters();
    };
    $scope.ExpandCollapsedControl = function (lstparameter, event) {
        lstparameter.IsExpanded = !lstparameter.IsExpanded;
    };
    $scope.selectParameter = function (parameter, event) {
        $scope.selectedParameter = parameter;
        if (event) {
            event.stopPropagation();
        }
    };
    $scope.bindParameterValue = function () {
        if ($scope.model.autocompleteType === "Query" && $scope.selectedCurrentQuery) {
            $scope.ParameterCollection = [];
            angular.forEach($scope.selectedCurrentQuery.Parameters, function (strParam) {
                ParameterField = strParam.ID;
                if (ParameterField.contains("@")) {
                    strParamField = ParameterField.substring(ParameterField.indexOf('@') + 1, ParameterField.length);
                }
                else {
                    strParamField = ParameterField;
                }

                var objParameter = { ParameterField: strParamField, ParameterValue: "" };
                $scope.ParameterCollection.push(objParameter);
            });
        }
        else if ($scope.model.autocompleteType === "Method" && $scope.selectedMethod) {
            $scope.ParameterCollection = [];
            for (var i = 0, len = $scope.selectedMethod.Parameters.length; i < len; i++) {
                var objParameter = { ParameterField: $scope.selectedMethod.Parameters[i].ID, ParameterValue: "" };
                $scope.ParameterCollection.push(objParameter);
            }
        }
        if ($scope.ParameterCollection != undefined && $scope.ParameterCollection.length > 0 && $scope.strSelectedParameters != undefined) {
            var lst = $scope.strSelectedParameters.split(";");
            for (var i = 0; i < lst.length; i++) {
                var lstControlsID = lst[i].split("=");
                for (var j = 0; j < $scope.ParameterCollection.length; j++) {
                    if ($scope.ParameterCollection[j].ParameterField == lstControlsID[0]) {
                        $scope.ParameterCollection[j].ParameterValue = lstControlsID[1];
                    }
                }
            }
        }
    };
    $scope.bindParameterValue();

    $scope.okClick = function () {
        $scope.strSelectedParameters = "";
        if ($scope.ParameterCollection != undefined) {
            for (var i = 0; i < $scope.ParameterCollection.length; i++) {
                if ($scope.ParameterCollection[i].ParameterValue != "") {
                    if ($scope.strSelectedParameters != undefined && $scope.strSelectedParameters != "") {
                        $scope.strSelectedParameters += ";" + $scope.ParameterCollection[i].ParameterField + "=" + $scope.ParameterCollection[i].ParameterValue;
                    }
                    else if ($scope.strSelectedParameters == undefined || $scope.strSelectedParameters == "") {
                        $scope.strSelectedParameters = $scope.ParameterCollection[i].ParameterField + "=" + $scope.ParameterCollection[i].ParameterValue;
                    }
                }
            }
        }
        if ($scope.IsAutoComplete) {
            $scope.$emit("onAutoCompleteParameterClick", $scope.strSelectedParameters);
        }
        $scope.closeClick();
    };
    $scope.closeClick = function () {

        $scope.objNewDialog.close();
    };

    //#region HTML Methods
    $scope.PopulateAutoCompleteParametersForHtml = function (panel, lstParameters, formType) {
        if (panel) {
            angular.forEach(panel.Elements, function (ctrl) {
                if (ctrl.Name != "sfwPanel" && ctrl.Name != "sfwWizardStep" && ctrl.Name != "sfwGridView") {
                    if (formType == "FormLinkLookup" && ctrl.dictAttributes.sfwDataField && ctrl.dictAttributes.ID) {
                        var obj = { ID: ctrl.dictAttributes.ID, ControlID: "", Elements: [], IsExpanded: false };
                        lstParameters.push(obj);
                    }
                    else if ((formType == "FormLinkMaintenance" || formType == "FormLinkWizard") && ctrl.dictAttributes.sfwEntityField && ctrl.dictAttributes.ID) {
                        var obj = { ID: ctrl.dictAttributes.ID, ControlID: "", Elements: [], IsExpanded: false };
                        lstParameters.push(obj);
                    }
                }
                if (ctrl.Elements.length > 0) {
                    var lsttempParameters = lstParameters;
                    if (ctrl.Name == "sfwPanel") {
                        var id = ctrl.dictAttributes.sfwCaption;
                        if (id == undefined || id == "") {
                            id = ctrl.dictAttributes.ID;
                        }
                        var obj = { ID: id, Elements: [], IsExpanded: false };
                        lstParameters.push(obj);
                        lsttempParameters = lstParameters[lstParameters.length - 1].Elements;
                    }
                    if (ctrl.Name == "sfwWizardStep") {
                        var id = ctrl.dictAttributes.Title;
                        if (id == undefined || id == "") {
                            id = ctrl.dictAttributes.ID;
                        }
                        var obj = { ID: id, Elements: [], IsExpanded: false };
                        lstParameters.push(obj);
                        lsttempParameters = lstParameters[lstParameters.length - 1].Elements;
                    }
                    //if (ctrl.Name == "sfwGridView") {
                    //    var obj = { ID: ctrl.dictAttributes.ID + "(Data Keys)", Elements: [], IsExpanded: false }
                    //    lstParameters.push(obj);
                    //    lsttempParameters = lstParameters[lstParameters.length - 1].Elements;
                    //    PopulateGridEntityField(ctrl, lsttempParameters);
                    //}
                    $scope.PopulateAutoCompleteParametersForHtml(ctrl, lsttempParameters, formType);
                }
            });
        }
    };
    //#endregion

    //#region Call Init Method
    $scope.Init();
    //#endregion

}]);


app.controller("AutoCompleteColumnsController", ["$scope", "$rootScope", "$filter", "ngDialog", "$Entityintellisenseservice", "$timeout", "$SgMessagesService", function ($scope, $rootScope, $filter, ngDialog, $Entityintellisenseservice, $timeout, $SgMessagesService) {
    $scope.lstColumns = [];
    $scope.lstAddedColumns = [];
    $scope.lstOperators = ["", "=", "!=", "<", "<=", ">", ">=", "like", "contains"];
    $scope.init = function () {
        if ($scope.strSelectedAutoColumns) {
            var lsttempColumnsString = $scope.strSelectedAutoColumns.split(";");
            for (var i = 0; i < lsttempColumnsString.length; i++) {
                var lsttempcolumns = lsttempColumnsString[i].split(",");
                var obj = { ColumnName: lsttempcolumns[0], Header: lsttempcolumns[1], Operator: lsttempcolumns[2], DataType: lsttempcolumns[3] };
                $scope.lstAddedColumns.push(obj);
            }
        }
        if ($scope.model.autocompleteType === "Query" && $scope.model.dictAttributes.sfwAutoQuery) {
            if ($scope.IsAutoComplete) {
                $.connection.hubForm.server.getEntityQueryColumns($scope.model.dictAttributes.sfwAutoQuery, "AutoCompleteColumnsController").done(function (data) {
                    $scope.receiveQueryColumns(data);
                });
            }
        }
        else if ($scope.model.autocompleteType === "Method" && $scope.model.dictAttributes.sfwAutoMethod) {
            var llstObjectMethods = $Entityintellisenseservice.GetIntellisenseData($scope.entityName, null, null, true, false, true, false, false, false);
            llstObjectMethods = llstObjectMethods.filter(function (aobjMethod) { return aobjMethod.ID.toLowerCase() === $scope.model.dictAttributes.sfwAutoMethod.toLowerCase(); });
            if (llstObjectMethods && llstObjectMethods.length) {
                if (llstObjectMethods[0].Entity) {
                    var llstAttributes = $Entityintellisenseservice.GetIntellisenseData(llstObjectMethods[0].Entity, null, null, true, true, false, false, false, false);
                    llstAttributes = llstAttributes.map(function (attr) { return { CodeID: attr.ID, Description: attr.ID, DataType: attr.DataType }; });
                    $scope.receiveQueryColumns(llstAttributes);
                }
            }
        }
    }

    $scope.receiveQueryColumns = function (data) {
        $scope.$evalAsync(function () {
            for (var i = 0; i < data.length; i++) {
                data[i].isChecked = false;
            }
            $scope.lstColumns = data;
        });
    };

    $scope.AddColumns = function () {
        if ($scope.lstColumns.length > 0) {
            for (var i = 0; i < $scope.lstColumns.length; i++) {
                if ($scope.lstColumns[i].isChecked) {
                    var flag = true;
                    for (var j = 0; j < $scope.lstAddedColumns.length; j++) {
                        if ($scope.lstAddedColumns[j].ColumnName == $scope.lstColumns[i].CodeID) {
                            flag = false;
                            $SgMessagesService.Message('Message', $scope.lstColumns[i].CodeID + " is already added in Collection, please Check.");
                            break;
                        }
                    }
                    if (flag == true) {
                        var datatype = $scope.lstColumns[i].DataType;
                        if ($scope.lstColumns[i].DataType == "Decimal" || ($scope.lstColumns[i].DataType.indexOf("Int") == 0)) {
                            datatype = "Numeric";
                        }
                        var obj = { ColumnName: $scope.lstColumns[i].CodeID, Header: $scope.lstColumns[i].CodeID.split("_").join(" "), Operator: "", DataType: datatype };
                        $scope.lstAddedColumns.push(obj);
                    }
                }
            }
        }
    };

    $scope.okClick = function () {
        $scope.strSelectedAutoColumns = "";
        if ($scope.lstAddedColumns.length > 0) {
            for (var i = 0; i < $scope.lstAddedColumns.length; i++) {
                var obj = $scope.lstAddedColumns[i];
                if ($scope.strSelectedAutoColumns == "") {
                    $scope.strSelectedAutoColumns = obj.ColumnName + "," + obj.Header + "," + obj.Operator + "," + obj.DataType;
                }
                else {
                    $scope.strSelectedAutoColumns += ";" + obj.ColumnName + "," + obj.Header + "," + obj.Operator + "," + obj.DataType;
                }
            }
        }
        $scope.$emit("onAutoCompletelColumnsClick", $scope.strSelectedAutoColumns);
        $scope.closeClick();
    };
    $scope.closeClick = function () {
        //ngDialog.close($scope.AutoCompleteColumnsDialog.id);

        $scope.AutoCompleteColumnDialog.close();
    };

    $scope.selectColumn = function (column) {
        $scope.selectedColumn = column;
    };
    $scope.isMoveUp = function () {
        if ($scope.selectedColumn == undefined) {
            return true;
        }
        else {
            var index = $scope.lstAddedColumns.indexOf($scope.selectedColumn);
            if (index > 0) {
                return false;
            }
            else {
                return true;
            }
        }
    };
    $scope.isMoveDown = function () {
        if ($scope.selectedColumn == undefined) {
            return true;
        }
        else {
            var index = $scope.lstAddedColumns.indexOf($scope.selectedColumn);
            if (index != $scope.lstAddedColumns.length - 1 && index != -1) {
                return false;
            }
            else {
                return true;
            }
        }
    };
    $scope.MoveUp = function () {
        var index = $scope.lstAddedColumns.indexOf($scope.selectedColumn);
        var tempObj = $scope.lstAddedColumns[index - 1];
        $scope.lstAddedColumns[index - 1] = $scope.lstAddedColumns[index];
        $scope.lstAddedColumns[index] = tempObj;
        $scope.scrollToSelectedField("#form-autocomplete-column-param", ".selected");
    };
    $scope.MoveDown = function () {
        var index = $scope.lstAddedColumns.indexOf($scope.selectedColumn);
        var tempObj = $scope.lstAddedColumns[index + 1];
        $scope.lstAddedColumns[index + 1] = $scope.lstAddedColumns[index];
        $scope.lstAddedColumns[index] = tempObj;
        $scope.scrollToSelectedField("#form-autocomplete-column-param", ".selected");
    };
    $scope.deleteColumns = function () {
        if ($scope.lstAddedColumns.length > 1) {
            var index = $scope.lstAddedColumns.indexOf($scope.selectedColumn);
            $scope.lstAddedColumns.splice(index, 1);
            $scope.selectedColumn = undefined;
        }
    };
    $scope.scrollToSelectedField = function (parentDiv, selectedElement) {
        $timeout(function () {
            var $divDom = $(parentDiv).find("table tbody");
            if ($divDom && $divDom.hasScrollBar()) {
                $divDom.scrollTo($divDom.find(selectedElement), { offsetTop: 200, offsetLeft: 0 }, null);
                return false;
            }

        });
    }
    $scope.init();
}]);
app.controller("NavigationParameterController", ["$scope", "$rootScope", "ngDialog", "$filter", "ParameterFactory", "$EntityIntellisenseFactory", "$Entityintellisenseservice", "$GetEntityFieldObjectService", function ($scope, $rootScope, ngDialog, $filter, ParameterFactory, $EntityIntellisenseFactory, $Entityintellisenseservice, $GetEntityFieldObjectService) {

    $scope.SelectedObject.IsShowAllControl = false;
    $scope.currentPanel;
    $scope.ParameterCollection = [];
    $scope.MethodParameterCollection = [];
    $scope.LookupParameterCollection = [];
    $scope.XmlParameterCollection = [];
    $scope.thisQuery;
    $scope.activeFormEntity;
    $scope.TargetFormCaption = "Target Form :";
    $scope.TargetForm = "";
    $scope.IsParentAsCollection = false;
    if ($scope.ParentModel && $scope.ParentModel.dictAttributes.sfwEntityField) {
        $scope.IsParentAsCollection = true;
        var entObject = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.formobject.dictAttributes.sfwEntity, $scope.ParentModel.dictAttributes.sfwEntityField);
        if (entObject) {
            $scope.entityName = entObject.Entity;
        }

    }
    if ($scope.formobject && $scope.formobject.dictAttributes.sfwEntity && $scope.formobject.dictAttributes.sfwType == 'Correspondence') {
        $scope.entityName = $scope.formobject.dictAttributes.sfwEntity;
    }
    //#region Init Methods
    $scope.Init = function () {
        var curscope = getCurrentFileScope();
        if ($scope.SelectedObject.dictAttributes.sfwMethodName === "btnNew_Click") {
            if ($scope.formobject) {
                var larrPanels = getDescendents($scope.formobject, "sfwPanel");
                if (larrPanels && larrPanels.length > 0) {
                    $scope.currentPanel = larrPanels.filter(function (pnl) {return pnl.dictAttributes.ID === "pnlMain" || pnl.dictAttributes.ID === "pnlCriteria" })[0];
                }
            }
        }

        if (!$scope.currentPanel) {
            if (curscope.CurrPanel) {
                $scope.currentPanel = curscope.CurrPanel;
            }
            else if (curscope.MainTable) {
                $scope.currentPanel = curscope.MainTable;
            }
            else if (curscope.objQueryForm) {
                var lstTable = curscope.objQueryForm.Elements.filter(function (x) { return x.Name == "sfwTable"; });
                if (lstTable && lstTable.length > 0) {
                    $scope.currentPanel = lstTable[0];
                }
            }
            if (curscope && curscope.currentfile && curscope.currentfile.FileType == "UserControl") {
                $scope.currentPanel = curscope.FormModel;
            }
        }

        $scope.ParameterCollection = [];

        $scope.TargetForm = $scope.SelectedObject.dictAttributes.sfwActiveForm;
        //Active Form

        if ($scope.SelectedObject.Name == "sfwCascadingDropDownList" || $scope.SelectedObject.Name == "sfwDropDownList" || $scope.SelectedObject.Name == "sfwCheckBoxList" || $scope.SelectedObject.Name == "sfwRadioButtonList" || $scope.SelectedObject.Name == "sfwSourceList" || $scope.SelectedObject.Name == "sfwListPicker" || $scope.SelectedObject.Name == "sfwMultiSelectDropDownList" || $scope.SelectedObject.Name == "sfwListBox") {
            $scope.PopulateNavigationParameters();
            $scope.EntityFieldCollection = [];
        }
        else if ($scope.SelectedObject.dictAttributes.sfwMethodName == "btnSave_Click" || $scope.SelectedObject.dictAttributes.sfwMethodName == "btnNoChangesSave_Click"
            || $scope.SelectedObject.dictAttributes.sfwMethodName == "btnSaveAndNext_Click" || $scope.SelectedObject.dictAttributes.sfwMethodName == "btnForceSave_Click" || $scope.SelectedObject.dictAttributes.sfwMethodName == "btnWizardSaveAndNext_Click"
            || $scope.SelectedObject.dictAttributes.sfwMethodName == "btnSaveIgnoreReadOnly_Click" || $scope.SelectedObject.dictAttributes.sfwMethodName == "btnWizardSaveAndPrevious_Click") {
            $scope.TargetFormCaption = "Target Form:";
            if ($scope.formobject) {
                $scope.TargetForm = $scope.formobject.dictAttributes.ID;
                var methodName = "";
                var lstInitialLoad = $scope.formobject.Elements.filter(function (itm) { return itm.Name == "initialload"; });
                if (lstInitialLoad && lstInitialLoad.length > 0) {
                    var objInitialLoad = lstInitialLoad[0];
                    var lstMethod = objInitialLoad.Elements.filter(function (itm) { return itm.Name == "callmethods" && itm.dictAttributes.sfwMode != "New"; });
                    if (lstMethod && lstMethod.length > 0) {
                        methodName = lstMethod[0].dictAttributes.sfwMethodName;
                    }
                }
                if (methodName) {
                    var vrParCollection = [];
                    var strParamField = "";
                    var strParamValue = "";
                    var blnConstant = false;

                    if ($scope.formobject.dictAttributes.sfwRemoteObject != undefined && $scope.formobject.dictAttributes.sfwRemoteObject != "") {
                        var objServerObject = GetServerMethodObject($scope.formobject.dictAttributes.sfwRemoteObject, $scope.formobject.RemoteObjectCollection);
                        var paramerters = GetSrvMethodParameters(objServerObject, methodName);
                        if (paramerters) {
                            for (j = 0; j < paramerters.length; j++) {
                                var objParameter = { ParameterField: paramerters[j].dictAttributes.ID, ParameterValue: "", Constants: false };
                                $scope.XmlParameterCollection.push(objParameter);
                            }
                        }
                    }
                    else {
                        var xmlMethodParameters = $EntityIntellisenseFactory.getXmlMethodParameters($scope.formobject.dictAttributes.sfwEntity, methodName, true);
                        if (xmlMethodParameters && xmlMethodParameters.length) {
                            for (j = 0, len = xmlMethodParameters.length; j < len; j++) {
                                var objParameter = { ParameterField: xmlMethodParameters[j].ID, EntityField: xmlMethodParameters[j].Value, ParameterValue: xmlMethodParameters[j].Value, Constants: false };
                                $scope.XmlParameterCollection.push(objParameter);
                            }
                        }
                    }

                    $scope.PopulateParamValues($scope.XmlParameterCollection);
                }
            }
        }
        else if ($scope.SelectedObject.dictAttributes.sfwMethodName == "btnSaveNew_Click") {
            $scope.TargetFormCaption = "Target Form:";
            $scope.TargetForm = $scope.formobject.dictAttributes.ID;
            if ($scope.formobject) {
                var methodName = "";
                var lstInitialLoad = $scope.formobject.Elements.filter(function (itm) { return itm.Name == "initialload"; });
                if (lstInitialLoad && lstInitialLoad.length > 0) {
                    var objInitialLoad = lstInitialLoad[0];
                    var lstMethod = objInitialLoad.Elements.filter(function (itm) { return itm.Name == "callmethods" && itm.dictAttributes.sfwMode != "Update"; });
                    if (lstMethod && lstMethod.length > 0) {
                        methodName = lstMethod[0].dictAttributes.sfwMethodName;
                    }
                }
                if (methodName) {
                    var vrParCollection = [];
                    var strParamField = "";
                    var strParamValue = "";
                    var blnConstant = false;

                    if ($scope.formobject.dictAttributes.sfwRemoteObject != undefined && $scope.formobject.dictAttributes.sfwRemoteObject != "") {
                        var objServerObject = GetServerMethodObject($scope.formobject.dictAttributes.sfwRemoteObject, $scope.formobject.RemoteObjectCollection);
                        var paramerters = GetSrvMethodParameters(objServerObject, methodName);
                        if (paramerters) {
                            for (j = 0; j < paramerters.length; j++) {
                                var objParameter = {
                                    ParameterField: paramerters[j].dictAttributes.ID, ParameterValue: "", Constants: false
                                };
                                $scope.XmlParameterCollection.push(objParameter);
                            }
                        }
                    }
                    else {
                        var xmlMethodParameters = $EntityIntellisenseFactory.getXmlMethodParameters($scope.formobject.dictAttributes.sfwEntity, methodName, true);
                        if (xmlMethodParameters && xmlMethodParameters.length) {
                            for (j = 0, len = xmlMethodParameters.length; j < len; j++) {
                                var objParameter = { ParameterField: xmlMethodParameters[j].ID, EntityField: xmlMethodParameters[j].Value, ParameterValue: xmlMethodParameters[j].Value, Constants: false };
                                $scope.XmlParameterCollection.push(objParameter);
                            }
                        }

                    }

                    $scope.PopulateParamValues($scope.XmlParameterCollection);
                }
            }
        }
        else if ($scope.SelectedObject.dictAttributes.sfwMethodName == "btnWorkflowExecuteMethod_Click") {
            $scope.TargetFormCaption = "";
            var objParameter = {
                ParameterField: "aintActivityInstanceId", ParameterValue: "", Constants: false
            };
            $scope.XmlParameterCollection.push(objParameter);
            $scope.PopulateParamValues($scope.XmlParameterCollection);
        }
        else if ($scope.SelectedObject.dictAttributes.sfwMethodName == "btnValidateExecuteBusinessMethod_Click" || $scope.SelectedObject.dictAttributes.sfwMethodName == "btnExecuteBusinessMethodSelectRows_Click"
            || $scope.SelectedObject.dictAttributes.sfwMethodName == "btnExecuteBusinessMethod_Click" || $scope.SelectedObject.dictAttributes.sfwMethodName == "btnCopyRecord_Click"
            || $scope.SelectedObject.dictAttributes.sfwMethodName == "btnWizardCancel_Click" || $scope.SelectedObject.dictAttributes.sfwMethodName == "btnCompleteWorkflowActivities_Click") {
            if ($scope.SelectedObject.dictAttributes.sfwObjectMethod != undefined && $scope.SelectedObject.dictAttributes.sfwObjectMethod != "") {
                $scope.TargetFormCaption = "Object Method:";
                var lstData = [];

                if ($scope.SelectedObject.dictAttributes.hasOwnProperty("sfwExecuteMethodType") && $scope.SelectedObject.dictAttributes.sfwExecuteMethodType == "Rule") {
                    $scope.TargetFormCaption = "Rule:";
                    if ($scope.entityName) {
                        lstData = $Entityintellisenseservice.GetIntellisenseData($scope.entityName, "", "", true, false, false, true, false, false);
                    }
                    else {
                        lstData = $Entityintellisenseservice.GetIntellisenseData($scope.formobject.dictAttributes.sfwEntity, "", "", true, false, false, true, false, false);
                    }
                }
                else if ($scope.SelectedObject.dictAttributes.hasOwnProperty("sfwExecuteMethodType") && $scope.SelectedObject.dictAttributes.sfwExecuteMethodType == "ObjectMethod") {
                    $scope.TargetFormCaption = "Object Method:";
                    if ($scope.entityName) {
                        lstData = $Entityintellisenseservice.GetIntellisenseData($scope.entityName, "", "", true, false, true, false, false, false);
                    }
                    else {
                        lstData = $Entityintellisenseservice.GetIntellisenseData($scope.formobject.dictAttributes.sfwEntity, "", "", true, false, true, false, false, false);
                    }
                }
                else if ($scope.SelectedObject.dictAttributes.hasOwnProperty("sfwExecuteMethodType") && $scope.SelectedObject.dictAttributes.sfwExecuteMethodType == "XmlMethod") {
                    $scope.TargetFormCaption = "Xml Method:";
                    if ($scope.entityName) {
                        lstData = $Entityintellisenseservice.GetIntellisenseData($scope.entityName, "", "", true, false, false, false, false, true);
                    }
                    else {
                        lstData = $Entityintellisenseservice.GetIntellisenseData($scope.formobject.dictAttributes.sfwEntity, "", "", true, false, false, false, false, true);
                    }
                }
                else {
                    if ($scope.entityName) {
                        lstData = $Entityintellisenseservice.GetIntellisenseData($scope.entityName, "", "", true, false, true, false, false, false);
                    }
                    else {
                        lstData = $Entityintellisenseservice.GetIntellisenseData($scope.formobject.dictAttributes.sfwEntity, "", "", true, false, true, false, false, false);
                    }
                }
                var strObjectMethod = $scope.SelectedObject.dictAttributes.sfwObjectMethod.trim();
                $scope.TargetForm = strObjectMethod;
                //var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();


                var lsttempData = [];
                var objMethod;
                if (lstData) {
                    angular.forEach(lstData, function (item) {
                        if (!objMethod) {
                            if (item.ID == strObjectMethod) {
                                objMethod = item;
                            }
                        }
                    });
                }

                if (objMethod) {
                    var paramerters = objMethod.Parameters;
                    //var paramerters = GetObjectMethodParameters(entityIntellisenseList, $scope.formobject.dictAttributes.sfwEntity, strObjectMethod);
                    if (paramerters) {
                        angular.forEach(paramerters, function (objParam) {
                            if (objMethod.RuleType && ["LogicalRule", "DecisionTable", "ExcelMatrix"].indexOf(objMethod.RuleType) > -1) {
                                if (objParam.Direction == "In") {
                                    if ($scope.SelectedObject.dictAttributes.sfwMethodName == "btnExecuteBusinessMethodSelectRows_Click") {
                                        if (["Object", "Collection", "List"].indexOf(objParam.DataType) > -1) {
                                            var objParameter = {
                                                ParameterField: objParam.ID, ParameterValue: null, IsObject: true
                                            };
                                            $scope.MethodParameterCollection.push(objParameter);
                                        }
                                        else {
                                            var objParameter = {
                                                ParameterField: objParam.ID, ParameterValue: null, IsObject: false
                                            };
                                            $scope.MethodParameterCollection.push(objParameter);
                                        }

                                    }
                                    else {
                                        var objParameter = {
                                            ParameterField: objParam.ID, ParameterValue: null, IsObject: false
                                        };
                                        $scope.MethodParameterCollection.push(objParameter);
                                    }

                                }
                            }
                            else {
                                var objParameter = {
                                    ParameterField: objParam.ID, ParameterValue: null,
                                    IsObject: false
                                };
                                $scope.MethodParameterCollection.push(objParameter);
                            }
                        });
                        $scope.PopulateParamValues($scope.MethodParameterCollection);
                    }
                }
            }

        }
        else if ($scope.SelectedObject.dictAttributes.sfwMethodName == "btnExecuteServerMethod_Click" || $scope.SelectedObject.dictAttributes.sfwMethodName == "btnWizardFindAndNext_Click" || $scope.SelectedObject.dictAttributes.sfwMethodName == "btnDownload_Click") {
            $scope.TargetFormCaption = "Server Method:";
            var astrParamValue = $scope.SelectedObject.dictAttributes.sfwObjectMethod;
            if (astrParamValue == undefined || astrParamValue == "") { return; }

            var strObjectMethod = astrParamValue.trim();
            $scope.TargetForm = strObjectMethod;

            if (strObjectMethod == "" || strObjectMethod == undefined)
                return;

            var RemoteObjectName = "srvCommon";
            if ($scope.formobject && $scope.formobject.dictAttributes.sfwRemoteObject) {
                RemoteObjectName = $scope.formobject.dictAttributes.sfwRemoteObject;
            }

            var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
            var objServerObject = GetServerMethodObject(RemoteObjectName, $scope.formobject.RemoteObjectCollection);
            var paramerters = GetSrvMethodParameters(objServerObject, strObjectMethod);
            if (paramerters) {
                angular.forEach(paramerters, function (objParam) {
                    var objParameter = {
                        ParameterField: objParam.dictAttributes.ID
                    };
                    $scope.MethodParameterCollection.push(objParameter);
                });
                $scope.PopulateParamValues($scope.MethodParameterCollection);
            }
        }

        else if ($scope.SelectedObject.dictAttributes.sfwActiveForm || $scope.SelectedObject.dictAttributes.sfwXmlDocument) {
            //($scope.SelectedObject.isPlaceHolder && $scope.SelectedObject.placeHolder) || 

            var strActiveForm = $scope.SelectedObject.dictAttributes.sfwActiveForm;

            //if (!strActiveForm && $scope.SelectedObject.isPlaceHolder) {
            //    strActiveForm = $scope.SelectedObject.placeHolder;
            //}

            if (!strActiveForm && $scope.SelectedObject.Name === "sfwXMLPanel") {
                strActiveForm = $scope.SelectedObject.dictAttributes.sfwXmlDocument;
                var alForms = $scope.SelectedObject.dictAttributes.sfwXmlDocument.split(';');
            }
            else {
                var alForms = $scope.SelectedObject.dictAttributes.sfwActiveForm.split(';');
            }

            if (alForms.length > 0) {
                var tempActiveForm = "";
                for (var i = 0; i < alForms.length; i++) {
                    if (alForms[i] && alForms[i].contains("=")) {
                        if (tempActiveForm == "") {
                            tempActiveForm = alForms[i].substring(alForms[i].indexOf('=') + 1);
                        }
                        else {
                            tempActiveForm += "," + alForms[i].substring(alForms[i].indexOf('=') + 1);
                        }
                    }
                }
                if (tempActiveForm != "") {
                    strActiveForm = tempActiveForm;
                }
            }

            //    strActiveForm = alForms[0];


            $scope.TargetFormCaption = "Target Form :";
            $scope.TargetForm = strActiveForm;
            if (alForms && alForms.length > 0 && alForms[0].contains("=")) {
                strActiveForm = alForms[0].substring(alForms[0].indexOf('=') + 1);
            }
            if (strActiveForm) {
                $.connection.hubMain.server.getSingleFileDetail(strActiveForm).done(function (filedata) {
                    $scope.receiveSingleFileDetail(filedata);
                });
            }
        }
        //Add Defualt Navigation parameter for btnOpen_click i.e "aintPrimaryKey" if active form is not set
        else if ($scope.SelectedObject.dictAttributes.sfwMethodName && ($scope.SelectedObject.dictAttributes.sfwMethodName == "btnOpen_Click" || $scope.SelectedObject.dictAttributes.sfwMethodName == "btnWizardFinish_Click")) {
            var objParameter = { ParameterField: "aintPrimaryKey", ParameterValue: "", Constants: false };
            if (!$scope.XmlParameterCollection.some(function (x) { return x.ParameterField == objParameter.ParameterField; })) {
                $scope.XmlParameterCollection.push(objParameter);
            }
            $scope.PopulateParamValues($scope.XmlParameterCollection);
        }
        if (curscope.currentfile.FileType == "FormLinkMaintenance" || curscope.currentfile.FileType == "FormLinkLookup" || curscope.currentfile.FileType == "FormLinkWizard") {
            $scope.PopulateAvailableFieldsForFormLink(undefined);
            $scope.isFormLink = true;
        }
        else {
            $scope.PopulateAvailableFields();
            $scope.isFormLink = false;
        }

        $.connection.hubForm.server.getGlobleParameters().done(function (data) {
            $scope.$apply(function () {
                $scope.objGlobleParameters = data;
                $scope.PopulateGlobalParameters();
            });
        });
    };

    $scope.PopulateParamValues = function (ParameterCollection) {
        var istrParameters = $scope.SelectedObject.dictAttributes.sfwNavigationParameter;
        if (istrParameters != undefined && istrParameters != "") {


            var alParams = istrParameters.split(';');
            angular.forEach(alParams, function (strParam) {
                var strParamField = strParam;
                var strParamsValue = strParam;
                var blnConstant = false;

                if (strParam.contains("=")) {
                    strParamField = strParam.substring(0, strParam.indexOf('='));
                    strParamsValue = strParam.substring(strParam.indexOf('=') + 1);

                    if (strParamsValue.match("^#")) {
                        strParamsValue = strParamsValue.substring(1);
                        blnConstant = true;
                    }


                    angular.forEach(ParameterCollection, function (objParameter) {
                        if (objParameter.ParameterField && strParamField && objParameter.ParameterField.toLowerCase() == strParamField.toLowerCase()) {
                            objParameter.ParameterValue = strParamsValue;
                            objParameter.Constants = blnConstant;
                        }
                    });
                }
            });
        }
    };


    //#endregion


    $scope.receiveSingleFileDetail = function (data) {
        $scope.sigleFileDetail = data;
        $scope.$apply(function () {
            $scope.newFormModel = data;
            if ($scope.newFormModel != null && $scope.newFormModel != undefined) {
                if (($scope.newFormModel.dictAttributes.sfwType == "Maintenance" || $scope.newFormModel.dictAttributes.sfwType == "Wizard" ||
                    $scope.newFormModel.dictAttributes.sfwType == "FormLinkMaintenance" || $scope.newFormModel.dictAttributes.sfwType == "FormLinkWizard") && $scope.newFormModel.dictAttributes.sfwEntity != undefined && $scope.newFormModel.dictAttributes.sfwEntity != "") {
                    var blnNewButton = $scope.SelectedObject.dictAttributes.sfwMethodName == "btnNew_Click"
                        || $scope.SelectedObject.dictAttributes.sfwMethodName == "btnUpdate_Click" || $scope.SelectedObject.dictAttributes.sfwMethodName == "btnSaveNew_Click";
                    $scope.activeFormEntity = $scope.newFormModel.dictAttributes.sfwEntity;
                    var method = "";
                    for (var i = 0; i < $scope.newFormModel.Elements.length; i++) {
                        if ($scope.newFormModel.Elements[i].Name == "initialload") {
                            for (var j = 0; j < $scope.newFormModel.Elements[i].Elements.length; j++) {
                                if (!blnNewButton) {
                                    if ($scope.newFormModel.Elements[i].Elements[j].Name == 'callmethods' && (!$scope.newFormModel.Elements[i].Elements[j].dictAttributes.sfwMode || $scope.newFormModel.Elements[i].Elements[j].dictAttributes.sfwMode == 'Update')) {
                                        if ($scope.newFormModel.dictAttributes.sfwRemoteObject != undefined && $scope.newFormModel.dictAttributes.sfwRemoteObject != "") {
                                            method = $scope.newFormModel.Elements[i].Elements[j].dictAttributes.sfwMethodName;
                                            break;
                                        }

                                        else {
                                            method = $scope.newFormModel.Elements[i].Elements[j].dictAttributes.sfwMethodName;
                                            break;
                                        }
                                    }
                                }
                                else {
                                    if ($scope.newFormModel.Elements[i].Elements[j].Name == 'callmethods' && (!$scope.newFormModel.Elements[i].Elements[j].dictAttributes.sfwMode || $scope.newFormModel.Elements[i].Elements[j].dictAttributes.sfwMode == 'New')) {
                                        if ($scope.newFormModel.dictAttributes.sfwRemoteObject != undefined && $scope.newFormModel.dictAttributes.sfwRemoteObject != "") {
                                            method = $scope.newFormModel.Elements[i].Elements[j].dictAttributes.sfwMethodName;
                                            break;
                                        }

                                        else {
                                            method = $scope.newFormModel.Elements[i].Elements[j].dictAttributes.sfwMethodName;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    var vrParCollection = [];
                    var strParamField = "";
                    var strParamValue = "";
                    var blnConstant = false;

                    if ($scope.newFormModel.dictAttributes.sfwRemoteObject != undefined && $scope.newFormModel.dictAttributes.sfwRemoteObject != "") {
                        var objServerObject = GetServerMethodObject($scope.newFormModel.dictAttributes.sfwRemoteObject, $scope.formobject.RemoteObjectCollection);
                        var paramerters = GetSrvMethodParameters(objServerObject, method);
                        if (paramerters) {
                            for (j = 0; j < paramerters.length; j++) {
                                var objParameter = { ParameterField: paramerters[j].dictAttributes.ID, ParameterValue: "", Constants: false };
                                vrParCollection.push(objParameter);
                            }
                        }
                    }
                    else {
                        if (method) {
                            var xmlMethodParameters = $EntityIntellisenseFactory.getXmlMethodParameters($scope.activeFormEntity, method, true);
                            if (xmlMethodParameters && xmlMethodParameters.length) {
                                for (j = 0, len = xmlMethodParameters.length; j < len; j++) {
                                    var objParameter = { ParameterField: xmlMethodParameters[j].ID, EntityField: xmlMethodParameters[j].Value, ParameterValue: xmlMethodParameters[j].Value, Constants: false };
                                    vrParCollection.push(objParameter);
                                }
                            }
                        }
                    }
                    if ($scope.SelectedObject && $scope.SelectedObject.dictAttributes.sfwMethodName == "btnNew_Click") {
                        for (var i = 0; i < $scope.newFormModel.Elements.length; i++) {
                            if ($scope.newFormModel.Elements[i].Name == "initialload") {
                                for (var j = 0; j < $scope.newFormModel.Elements[i].Elements.length; j++) {
                                    if ($scope.newFormModel.Elements[i].Elements[j].Name == "session") {
                                        var objSession = $scope.newFormModel.Elements[i].Elements[j];
                                        if (objSession.Elements && objSession.Elements.length > 0) {
                                            for (k = 0; k < objSession.Elements.length; k++) {
                                                var objParameter = { ParameterField: objSession.Elements[k].dictAttributes.ID, ParameterValue: "", Constants: false };
                                                vrParCollection.push(objParameter);
                                            }
                                        }
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                    }

                    //Add Defualt Navigation parameter for btnOpen_click i.e "aintPrimaryKey" if active form has no xml methods
                    if ($scope.SelectedObject && ($scope.SelectedObject.dictAttributes.sfwMethodName == "btnOpen_Click" || $scope.SelectedObject.dictAttributes.sfwMethodName == "btnWizardFinish_Click") && $scope.newFormModel.Elements) {
                        var blnAddDefaultParameter = true;
                        var objIntialLoad = $scope.newFormModel.Elements.filter(function (aElement) { return aElement.Name && aElement.Name == "initialload"; });
                        if (objIntialLoad.length > 0 && objIntialLoad[0].Elements) {
                            var objCallMethds = objIntialLoad[0].Elements.filter(function (aCallMethod) { return aCallMethod.Name && aCallMethod.Name == "callmethods"; });
                            if (objCallMethds.length > 0) {
                                blnAddDefaultParameter = false;
                            }
                        }
                        if (blnAddDefaultParameter) {
                            var objParameter = { ParameterField: "aintPrimaryKey", ParameterValue: "", Constants: false };
                            vrParCollection.push(objParameter);
                        }
                    }
                    var vrXmlParCollection = [];
                    for (i = 0; i < vrParCollection.length; i++) {
                        if (!$scope.XmlParameterCollection.some(function (x) { return x.ParameterField == vrParCollection[i].ParameterField; })) {

                            var objParameter = { ParameterField: vrParCollection[i].ParameterField, EntityField: vrParCollection[i].EntityField, ParameterValue: "", Constants: false };
                            vrXmlParCollection.push(objParameter);
                        }
                    }
                    angular.forEach(vrXmlParCollection, function (x) {
                        $scope.XmlParameterCollection.push(x);
                    });


                    var customAttribute = $scope.SelectedObject.dictAttributes.sfwNavigationParameter;
                    if (customAttribute != undefined && customAttribute != "") {
                        $scope.PopulateParameters(customAttribute, "Maintenance");
                    }

                }
                else if ($scope.newFormModel.dictAttributes.sfwType == "Lookup") {
                    for (var i = 0; i < $scope.newFormModel.Elements.length; i++) {
                        if ($scope.newFormModel.Elements[i].Name == "sfwTable") {
                            $scope.isPanelCriteria = false;
                            $scope.PopulateLookupPanel($scope.newFormModel.Elements[i]);

                            var customAttribute = $scope.SelectedObject.dictAttributes.sfwNavigationParameter;
                            if (customAttribute != undefined && customAttribute != "") {
                                $scope.PopulateXmlParameters(customAttribute, "Lookup");

                                $scope.IsNewActiveForm = true;
                                for (i = 0; i < vrLookupField.length; i++) {
                                    for (j = 0; j < $scope.LookupParameterCollection.length; j++) {
                                        if ($scope.LookupParameterCollection[j].ParameterField == vrLookupField[i].ParameterField) {
                                            $scope.IsNewActiveForm = false;
                                        }
                                    }
                                }
                            }
                            if ((customAttribute != undefined && customAttribute != "") && $scope.LookupParameterCollection.length != vrLookupField.length && !$scope.IsNewActiveForm) {
                                var vrLookupParCollection = [];
                                for (i = 0; i < vrLookupField.length; i++) {
                                    for (j = 0; j < $scope.LookupParameterCollection.length; j++) {
                                        if ($scope.LookupParameterCollection[j].ParameterField != vrLookupField[i].ParameterField) {
                                            var objParameter = { ControlId: vrLookupField[i].ControlId, ParameterField: vrLookupField[i].ParameterField, ParameterValue: "", Constants: false };
                                            var isParameterFieldPresent = false;
                                            var isParameterFieldPresentExist = false;
                                            if (vrLookupParCollection.length > 0) {
                                                for (var k = 0; k < vrLookupParCollection.length; k++) {
                                                    if (vrLookupParCollection[k].ParameterField == objParameter.ParameterField) {
                                                        isParameterFieldPresent = true;
                                                    }
                                                }
                                            }
                                            if ($scope.LookupParameterCollection.length > 0) {
                                                for (var k = 0; k < $scope.LookupParameterCollection.length; k++) {
                                                    if ($scope.LookupParameterCollection[k].ParameterField == objParameter.ParameterField) {
                                                        isParameterFieldPresentExist = true;
                                                    }
                                                }
                                            }

                                            if (!isParameterFieldPresent && !isParameterFieldPresentExist && objParameter && objParameter.ParameterField) {
                                                vrLookupParCollection.push(objParameter);
                                            }
                                        }
                                        else if ($scope.LookupParameterCollection[j].ParameterField == vrLookupField[i].ParameterField) {
                                            $scope.LookupParameterCollection[j].ControlId = vrLookupField[i].ControlId;
                                        }
                                    }
                                }

                                angular.forEach(vrLookupParCollection, function (objParameter) {
                                    //var isParameterFieldPresent = $scope.LookupParameterCollection.filter(function (LookupCollection) { return x == LookupCollection.ParameterField; });
                                    if (objParameter && objParameter.ParameterField) {
                                        var isParameterFieldPresent = $scope.LookupParameterCollection.filter(function (item) { return item.ParameterField && item.ParameterField == objParameter.ParameterField; });
                                        if (isParameterFieldPresent.length == 0) {
                                            $scope.LookupParameterCollection.push(objParameter);
                                        }
                                    }
                                });
                            }
                            else if ($scope.LookupParameterCollection.length == vrLookupField.length && !$scope.IsNewActiveForm) {
                                for (i = 0; i < vrLookupField.length; i++) {
                                    for (j = 0; j < $scope.LookupParameterCollection.length; j++) {
                                        if ($scope.LookupParameterCollection[j].ParameterField == vrLookupField[i].ParameterField) {
                                            $scope.LookupParameterCollection[j].ControlId = vrLookupField[i].ControlId;
                                        }
                                    }
                                }
                            }
                            else {
                                $scope.LookupParameterCollection = [];
                                if (vrLookupField.length > 0) {
                                    angular.forEach(vrLookupField, function (item) {
                                        if (item && item.ParameterField) {
                                            var isParameterFieldPresent = $scope.LookupParameterCollection.filter(function (x) { return x.ParameterField && x.ParameterField == item.ParameterField; });
                                            if (isParameterFieldPresent.length == 0) {
                                                $scope.LookupParameterCollection.push(item);
                                            }
                                        }
                                    });
                                }
                            }

                            break;
                        }
                    }
                }
            }
        });

        $scope.$evalAsync(function () {
            $rootScope.IsLoading = false;
        });

    };

    //#region Receive FormModel from server for Active Form
    $scope.receivenewformmodel = function (data) {
        $scope.$apply(function () {
            $scope.newFormModel = data;
            if ($scope.newFormModel != null && $scope.newFormModel != undefined) {
                if ($scope.ActiveFormType == "Maintenance" && $scope.newFormModel.dictAttributes.sfwEntity != undefined && $scope.newFormModel.dictAttributes.sfwEntity != "") {
                    $scope.activeFormEntity = $scope.newFormModel.dictAttributes.sfwEntity;
                    var method = "";
                    for (var i = 0; i < $scope.newFormModel.Elements.length; i++) {
                        if ($scope.newFormModel.Elements[i].Name == "initialload") {
                            for (var j = 0; j < $scope.newFormModel.Elements[i].Elements.length; j++) {
                                if ($scope.newFormModel.Elements[i].Elements[j].dictAttributes.sfwMode) {
                                    var method = $scope.newFormModel.Elements[i].Elements[j].dictAttributes.sfwMethodName;
                                }
                            }
                        }
                    }
                    var vrParCollection = [];
                    var strParamField = "";
                    var strParamValue = "";
                    var blnConstant = false;

                    if (method) {
                        var xmlMethodParameters = $EntityIntellisenseFactory.getXmlMethodParameters($scope.activeFormEntity, method, true);
                        if (xmlMethodParameters && xmlMethodParameters.length) {
                            for (j = 0, len = xmlMethodParameters.length; j < len; j++) {
                                var objParameter = { ParameterField: xmlMethodParameters[j].ID, EntityField: xmlMethodParameters[j].Value, ParameterValue: xmlMethodParameters[j].Value, Constants: false };
                                vrParCollection.push(objParameter);
                            }
                            var customAttribute = $scope.SelectedObject.dictAttributes.sfwNavigationParameter;
                            if (customAttribute != undefined && customAttribute != "") {
                                $scope.PopulateXmlParameters(customAttribute, "Maintenance");

                                $scope.IsNewActiveForm = true;
                                for (i = 0; i < vrParCollection.length; i++) {
                                    for (j = 0; j < $scope.XmlParameterCollection.length; j++) {
                                        if ($scope.XmlParameterCollection[j].ParameterField == vrParCollection[i].ParameterField) {
                                            $scope.IsNewActiveForm = false;
                                        }
                                    }
                                }
                            }
                            if ((customAttribute != undefined && customAttribute != "") && $scope.XmlParameterCollection.length != vrParCollection.length && !$scope.IsNewActiveForm) {
                                var vrXmlParCollection = [];
                                for (i = 0; i < vrParCollection.length; i++) {
                                    for (j = 0; j < $scope.XmlParameterCollection.length; j++) {
                                        if ($scope.XmlParameterCollection[j].ParameterField != vrParCollection[i].ParameterField) {
                                            var objParameter = { ParameterField: vrParCollection[i].ParameterField, EntityField: vrParCollection[i].EntityField, ParameterValue: "", Constants: false };
                                            vrXmlParCollection.push(objParameter);
                                        }
                                    }
                                }
                                angular.forEach(vrXmlParCollection, function (x) {
                                    $scope.XmlParameterCollection.push(x);
                                });
                            }
                            else if ($scope.XmlParameterCollection.length == vrParCollection.length && !$scope.IsNewActiveForm) {
                                /*var vrXmlParCollection = [];
                                for (i = 0; i < vrParCollection.length; i++) {
                                    for (j = 0; j < $scope.XmlParameterCollection.length; j++) {
                                        if ($scope.XmlParameterCollection[j].ParameterField != vrParCollection[i].ParameterField) {
                                            var objParameter = { ParameterField: vrParCollection[i].ParameterField, ParameterValue: "", Constants: false };
                                            vrXmlParCollection.push(objParameter);
                                        }
                                    }
                                }
                                angular.forEach(vrXmlParCollection, function (x) {
                                    $scope.XmlParameterCollection.push(x);
                                });*/
                            }
                            else {
                                $scope.XmlParameterCollection = [];
                                angular.forEach(vrParCollection, function (x) {
                                    $scope.XmlParameterCollection.push(x);
                                });
                            }
                        }
                    }


                    var vrSessionParCollection = [];
                    var vrNewParCollection = [];
                    var lstInitialLoad = $scope.formobject.Elements.filter(function (itm) { return itm.Name == "initialload"; });
                    //Add Session Field as Navigation Parameter 
                    if ($scope.SelectedObject && $scope.SelectedObject.Name == "sfwButton" && $scope.SelectedObject.dictAttributes.sfwMethodName && $scope.SelectedObject.dictAttributes.sfwMethodName == "btnNew_Click") {
                        if (lstInitialLoad && lstInitialLoad.length > 0) {
                            var objInitialLoad = lstInitialLoad[0];
                            var objSession = objInitialLoad.Elements.filter(function (itm) { return itm.Name == "session"; });
                            if (objSession && objSession.Elements && objSession.Elements.length > 0) {
                                for (k = 0; k < objSession.Elements.length; k++) {
                                    var objParameter = { ParameterField: objSession.Elements[k].dictAttributes.ID, ParameterValue: "", Constants: false };
                                    vrNewParCollection.push(objParameter);
                                }
                            }
                        }
                    }
                    for (i = 0; i < vrNewParCollection.length; i++) {
                        if (!$scope.XmlParameterCollection.some(function (x) { return x.ParameterField == vrNewParCollection[i].ParameterField; })) {

                            var objParameter = { ParameterField: vrNewParCollection[i].ParameterField, ParameterValue: "", Constants: false };
                            vrSessionParCollection.push(objParameter);
                        }
                    }

                    angular.forEach(vrSessionParCollection, function (x) {
                        $scope.XmlParameterCollection.push(x);
                    });
                }
                else if ($scope.ActiveFormType == "Lookup") {
                    for (var i = 0; i < $scope.newFormModel.Elements.length; i++) {
                        if ($scope.newFormModel.Elements[i].Name == "sfwTable") {
                            $scope.isPanelCriteria = false;
                            $scope.PopulateLookupPanel($scope.newFormModel.Elements[i]);

                            var customAttribute = $scope.SelectedObject.dictAttributes.sfwNavigationParameter;
                            if (customAttribute != undefined && customAttribute != "") {
                                $scope.PopulateXmlParameters(customAttribute, "Lookup");

                                $scope.IsNewActiveForm = true;
                                for (i = 0; i < vrLookupField.length; i++) {
                                    for (j = 0; j < $scope.LookupParameterCollection.length; j++) {
                                        if ($scope.LookupParameterCollection[j].ParameterField == vrLookupField[i].ParameterField) {
                                            $scope.IsNewActiveForm = false;
                                        }
                                    }
                                }
                            }
                            if ((customAttribute != undefined && customAttribute != "") && $scope.LookupParameterCollection.length != vrLookupField.length && !$scope.IsNewActiveForm) {
                                var vrLookupParCollection = [];
                                for (i = 0; i < vrLookupField.length; i++) {
                                    for (j = 0; j < $scope.LookupParameterCollection.length; j++) {
                                        if ($scope.LookupParameterCollection[j].ParameterField != vrLookupField[i].ParameterField) {
                                            var objParameter = { ControlId: vrLookupField[i].ControlId, ParameterField: vrLookupField[i].ParameterField, ParameterValue: "", Constants: false };
                                            var isParameterFieldPresent = false;
                                            var isParameterFieldPresentExist = false;
                                            if (vrLookupParCollection.length > 0) {
                                                for (var k = 0; k < vrLookupParCollection.length; k++) {
                                                    if (vrLookupParCollection[k].ParameterField == objParameter.ParameterField) {
                                                        isParameterFieldPresent = true;
                                                    }
                                                }
                                            }
                                            if ($scope.LookupParameterCollection.length > 0) {
                                                for (var k = 0; k < $scope.LookupParameterCollection.length; k++) {
                                                    if ($scope.LookupParameterCollection[k].ParameterField == objParameter.ParameterField) {
                                                        isParameterFieldPresentExist = true;
                                                    }
                                                }
                                            }

                                            if (!isParameterFieldPresent && !isParameterFieldPresentExist) {
                                                vrLookupParCollection.push(objParameter);
                                            }
                                        }
                                        else if ($scope.LookupParameterCollection[j].ParameterField == vrLookupField[i].ParameterField) {
                                            $scope.LookupParameterCollection[j].ControlId = vrLookupField[i].ControlId;
                                        }
                                    }
                                }

                                angular.forEach(vrLookupParCollection, function (x) {
                                    var isParameterFieldPresent = $scope.LookupParameterCollection.filter(function (LookupCollection) { return x == LookupCollection.ParameterField; });

                                    $scope.LookupParameterCollection.push(x);
                                });
                            }
                            else if ($scope.LookupParameterCollection.length == vrLookupField.length && !$scope.IsNewActiveForm) {
                                for (i = 0; i < vrLookupField.length; i++) {
                                    for (j = 0; j < $scope.LookupParameterCollection.length; j++) {
                                        if ($scope.LookupParameterCollection[j].ParameterField == vrLookupField[i].ParameterField) {
                                            $scope.LookupParameterCollection[j].ControlId = vrLookupField[i].ControlId;
                                        }
                                    }
                                }
                            }
                            else {
                                //if (vrLookupField.length > 0) {
                                //    angular.forEach(vrLookupField, function (x) {
                                //        $scope.LookupParameterCollection.push(x);
                                //    });
                                //}
                                $scope.LookupParameterCollection = [];
                                if (vrLookupField.length > 0) {
                                    angular.forEach(vrLookupField, function (x) {
                                        $scope.LookupParameterCollection.push(x);
                                    });
                                }
                            }

                            break;
                        }
                    }
                }
            }
            //$scope.PopulateAvailableFields();
        });

        $scope.$evalAsync(function () {
            $rootScope.IsLoading = false;
        });
    };
    //#endregion

    //#region Populate Entity Fields In Left section
    $scope.PopulateAvailableFields = function () {
        $scope.EntityFieldCollection = [];
        var mainItem = { ID: "Main", IsExpanded: false, IsSelected: false, Elements: [] };
        $scope.IsLookup = $scope.formobject.dictAttributes.sfwType == 'Lookup' ? true : false;
        $scope.blnIsReport = $scope.formobject.dictAttributes.sfwType == 'Report' ? true : false;
        $scope.blnIsCorr = $scope.formobject.dictAttributes.sfwType == 'Correspondence' ? true : false;
        var strProperty;
        if ($scope.IsFormCodeGroup || $scope.SelectedObject.dictAttributes.sfwMethodName == "btnNew_Click" || $scope.SelectedObject.Name == "sfwCascadingDropDownList" || $scope.SelectedObject.Name == "sfwSeries") {
            strProperty = "ID";
        }
        else if ($scope.IsLookup)
            strProperty = "sfwDataField";
        else if ($scope.blnIsReport || $scope.blnIsCorr) {
            strProperty = "ID";
        }
        else
            strProperty = "sfwEntityField";

        if ($scope.SelectedObject.Name == "sfwOpenDetail") {
            if ($scope.SelectedObject.dictAttributes.sfwQueryID) {
                var lst = $scope.SelectedObject.dictAttributes.sfwQueryID.split('.');
                if (lst && lst.length == 2) {
                    var entityName = lst[0];
                    var strQueryID = lst[1];
                    var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                    var lstEntity = $filter('filter')(entityIntellisenseList, { ID: entityName }, true);
                    if (lstEntity && lstEntity.length > 0) {
                        var objEntity = lstEntity[0];
                        var lstQuery = objEntity.Queries.filter(function (x) { return x.ID == strQueryID; });
                        if (lstQuery && lstQuery.length > 0) {
                            var objQuery = lstQuery[0];
                            $.connection.hubForm.server.getEntityQueryColumns($scope.SelectedObject.dictAttributes.sfwQueryID, "NavigationParameterController").done(function (data) {
                                $scope.receiveQueryColumns(data);
                            });
                        }
                    }
                }
            }
        }
        else {
            if ($scope.SelectedObject.IsShowAllControl == true) {

                var table;
                for (var i = 0; i < $scope.formobject.Elements.length; i++) {
                    if ($scope.formobject.Elements[i].Name == "sfwTable") {
                        table = $scope.formobject.Elements[i];
                        break;
                    }
                }

                $scope.PopulateControls(table, mainItem, strProperty);
            }
            else {
                if ($scope.blnIsReport || $scope.blnIsCorr) {
                    $scope.PopulateControls($scope.currentPanel, mainItem, strProperty);
                }
                else {
                    $scope.PopulateControls($scope.currentPanel.Elements[0], mainItem, strProperty);
                }
            }
            $scope.EntityFieldCollection.push(mainItem);
        }

    };

    $scope.receiveQueryColumns = function (data) {
        $scope.$apply(function () {
            var mainItem = { ID: $scope.SelectedObject.dictAttributes.sfwQueryID, IsSelected: false, Elements: [] };
            //$scope.EntityFieldCollection.push(mainItem);
            for (var i = 0; i < data.length; i++) {
                var tnChild = { ID: data[i].CodeID, IsSelected: false, Elements: [] };
                mainItem.Elements.push(tnChild);
            }
            $scope.EntityFieldCollection.push(mainItem);
        });
    };

    $scope.PopulateControls = function (asfxTable, tnNode, strProperty) {
        var strTreeCaption = "";

        if (asfxTable) {
            angular.forEach(asfxTable.Elements, function (sfxRow) {
                for (var iCol = 0; iCol < sfxRow.Elements.length; iCol++) {
                    var sfxCell = sfxRow.Elements[iCol];
                    if (sfxCell) {
                        angular.forEach(sfxCell.Elements, function (sfxCtrl) {
                            if (sfxCtrl.Name == "sfwPanel" || sfxCtrl.Name == "sfwDialogPanel" || sfxCtrl.Name == "sfwListView") {

                                strTreeCaption = sfxCtrl.dictAttributes.ID;
                                if (strTreeCaption == "" || strTreeCaption == undefined)
                                    strTreeCaption = sfxCtrl.Name;
                                var tnChild = { ID: strTreeCaption, IsSelected: false, Elements: [] };

                                tnChild.IsExpanded = false;

                                if (sfxCtrl.Elements.length > 0 && sfxCtrl.Elements[0].Name == "sfwTable") {
                                    $scope.PopulateControls(sfxCtrl.Elements[0], tnChild, strProperty);
                                }
                                tnNode.Elements.push(tnChild);
                            }
                            else if (sfxCtrl.Name == "sfwTabContainer") {
                                if (sfxCtrl.Elements.length > 0 && sfxCtrl.Elements[0].Name == "Tabs") {
                                    var sfxTabs = sfxCtrl.Elements[0];
                                    angular.forEach(sfxTabs.Elements, function (sfxTabSheet) {
                                        strTreeCaption = sfxTabSheet.dictAttributes.HeaderText;
                                        if (strTreeCaption == "")
                                            strTreeCaption = sfxTabSheet.dictAttributes.ID;
                                        var tnChild = { ID: strTreeCaption, IsSelected: false, Elements: [] };

                                        if (sfxTabSheet.Elements.length > 0 && sfxTabSheet.Elements[0].Name == "sfwTable") {
                                            $scope.PopulateControls(sfxTabSheet.Elements[0], tnChild, strProperty);
                                        }
                                        if (tnChild.Elements.length > 0) {
                                            tnNode.Elements.push(tnChild);
                                        }

                                    });
                                }
                            }
                            else if (sfxCtrl.Name == "sfwWizard") {
                                angular.forEach(sfxCtrl.Elements, function (objWizard) {
                                    if (objWizard.Name == "HeaderTemplate") {
                                        strTreeCaption = "HeaderTemplate";
                                        var tnChild = { ID: strTreeCaption, IsSelected: false, Elements: [] };
                                        if (objWizard.Elements.length > 0 && objWizard.Elements[0].Name == "sfwTable") {
                                            $scope.PopulateControls(objWizard.Elements[0], tnChild, strProperty);
                                        }
                                        if (tnChild.Elements.length > 0) {
                                            tnNode.Elements.push(tnChild);
                                        }
                                    }
                                    else {
                                        angular.forEach(objWizard.Elements, function (sfxWizardStep) {
                                            strTreeCaption = sfxWizardStep.dictAttributes.Title;
                                            if (strTreeCaption == "")
                                                strTreeCaption = sfxWizardStep.dictAttributes.ID;
                                            var tnChild = { ID: strTreeCaption, IsSelected: false, Elements: [] };
                                            if (sfxWizardStep.Elements.length > 0 && sfxWizardStep.Elements[0].Name == "sfwTable") {
                                                $scope.PopulateControls(sfxWizardStep.Elements[0], tnChild, strProperty);
                                                if (tnChild.Elements.length > 0) {
                                                    tnNode.Elements.push(tnChild);
                                                }
                                            }
                                        });
                                    }
                                });
                            }
                            else if (sfxCtrl.Elements.length > 0 && sfxCtrl.Name == "sfwGridView") {

                                var strGridId = sfxCtrl.dictAttributes.ID;

                                var objControl = { ID: strGridId + " (Data Keys)", IsSelected: false, Elements: [] };
                                tnNode.Elements.push(objControl);

                                if (sfxCtrl.Elements.length > 0 && sfxCtrl.Elements[0].Name == "Columns") {
                                    for (var j = 0; j < sfxCtrl.Elements[0].Elements.length; j++) {
                                        var objTempField = sfxCtrl.Elements[0].Elements[j];
                                        if (objTempField.Elements.length > 0 && objTempField.Elements[0].Name == "ItemTemplate") {
                                            var objItemTempField = objTempField.Elements[0];
                                            angular.forEach(objItemTempField.Elements, function (sfxControl) {
                                                //in grid always it will be entity field in lookup and maintenance
                                                if ("sfwEntityField" in sfxControl.dictAttributes) {
                                                    var strFieldName = "";

                                                    strFieldName = sfxControl.dictAttributes["sfwEntityField"];
                                                    if (strFieldName != "" && strFieldName != undefined) {
                                                        objControl.Elements.push({ ID: strFieldName, IsSelected: false, Elements: [] });
                                                    }
                                                }
                                            });
                                        }
                                    }
                                }
                            }
                            else {
                                if (strProperty != undefined && strProperty != "") {
                                    if (!$scope.blnIsReport && !$scope.blnIsCorr) {
                                        if ($scope.IsLookup && !IsCriteriaField(sfxCtrl)) {
                                            strProperty = 'sfwEntityField';
                                        }
                                        if ("sfwDataField" in sfxCtrl.dictAttributes) {
                                            strTreeCaption = sfxCtrl.dictAttributes[strProperty];
                                        }

                                        else if ("sfwEntityField" in sfxCtrl.dictAttributes) {
                                            strTreeCaption = sfxCtrl.dictAttributes[strProperty];
                                        }
                                    }
                                    else {
                                        strTreeCaption = sfxCtrl.dictAttributes[strProperty];
                                    }
                                }
                                else {
                                    strTreeCaption = sfxCtrl.dictAttributes.ID;
                                }
                                if (strTreeCaption != "" && strTreeCaption != undefined && (sfxCtrl.Name != "sfwButton" && sfxCtrl.Name != "sfwLinkButton" && sfxCtrl.Name != "sfwImageButton")) {
                                    //strTreeCaption = sfxCtrl.Name;
                                    if (!tnNode.Elements.some(function (itm) { return itm.ID == strTreeCaption; })) {
                                        var tnControl = { ID: strTreeCaption, Elements: [] };
                                        tnNode.Elements.push(tnControl);
                                    }
                                }
                            }

                        });
                    }
                }
            });
        }
    };

    $scope.PopulateEntityFields = function (asfxTable, newItem) {

        for (var i = 0; i < asfxTable.Elements.length; i++) {
            if (asfxTable.Elements[i].dictAttributes.sfwEntityField != undefined) {
                newItem.Elements.push({ ID: asfxTable.Elements[i].dictAttributes.sfwEntityField, Elements: [] });
            }

            if (asfxTable.Elements[i].Elements.length > 0) {
                $scope.PopulateEntityFields(asfxTable.Elements[i], newItem);
            }
        }
    };

    $scope.PopulateGlobalParameters = function () {
        $scope.GlobalParamCollection = [];
        function AddInobjGlobalParam(itm) {
            if (itm.dictAttributes && itm.dictAttributes.ID) {
                var strFieldName = itm.dictAttributes.ID;
                if (!globalParameters.filter(function (itm) { return itm == strFieldName.trim(); })) {
                    globalParameters.push(strFieldName.trim());
                }
                // objGlobalParam.Children.Add(new clsAvailableControl { ControlName = strFieldName });
                var mainItem = {
                    ID: "~" + strFieldName, IsExpanded: false, IsSelected: false, Elements: []
                };
                objGlobalParam.Elements.push(mainItem);
            }
        }
        if ($scope.objGlobleParameters) {
            var strFormType = $scope.formobject.dictAttributes.sfwType;
            if (($scope.SelectedObject.Name == "sfwTextBox" || $scope.SelectedObject.Name == "sfwButton" ||
                $scope.SelectedObject.Name == "sfwCascadingDropDownList" || $scope.SelectedObject.Name == "sfwDropDownList" || $scope.SelectedObject.Name == "sfwMultiSelectDropDownList" ||
                $scope.SelectedObject.Name == "sfwSeries" || $scope.SelectedObject.Name == "sfwListBox"
                || $scope.SelectedObject.Name == "sfwCheckBoxList" || $scope.SelectedObject.Name == "sfwRadioButtonList" || $scope.SelectedObject.Name == "sfwMultiCorrespondence")
                /*&& strFormType != "Correspondence"*/) {
                if ($scope.SelectedObject.Name == "sfwButton") {
                    if ($scope.SelectedObject.dictAttributes.sfwMethodName != "btnOpen_Click" && $scope.SelectedObject.dictAttributes.sfwMethodName != "btnNew_Click")
                        return;
                }
                var globalParameters = [];

                if ($scope.objGlobleParameters.Elements.length > 0) {
                    var objGlobalParam = { ID: "Global Parameters", IsExpanded: false, IsSelected: false, Elements: [], IsVisible: true };

                    angular.forEach($scope.objGlobleParameters.Elements, AddInobjGlobalParam);
                    if (objGlobalParam.Elements.length > 0) {
                        $scope.EntityFieldCollection.push(objGlobalParam);
                        if (strFormType == "Correspondence") {
                            $scope.GlobalParamCollection.push(objGlobalParam);
                        }
                    }
                }

            }
        }
    };
    //#endregion

    //#region Populate navigation Parameter on Click and Query Change

    $scope.GetQueryFromEntity = function () {
        var objQuery;
        if ($scope.SelectedObject.dictAttributes.sfwLoadSource && $scope.SelectedObject.dictAttributes.sfwLoadType == "Query") {
            var lst = $scope.SelectedObject.dictAttributes.sfwLoadSource.split('.');
            if (lst && lst.length == 2) {
                var entityName = lst[0];
                var strQueryID = lst[1];
                var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                var lstEntity = $filter('filter')(entityIntellisenseList, { ID: entityName }, true);
                if (lstEntity && lstEntity.length > 0) {
                    var objEntity = lstEntity[0];
                    var lstQuery = objEntity.Queries.filter(function (x) { return x.ID == strQueryID; });
                    if (lstQuery && lstQuery.length > 0) {
                        objQuery = lstQuery[0];
                    }
                }
            }
        }
        return objQuery;
    };

    $scope.PopulateNavigationParameters = function () {
        if ($scope.SelectedObject.Name === "sfwCascadingDropDownList" || ($scope.SelectedObject.Name === "sfwMultiSelectDropDownList" && $scope.SelectedObject.dictAttributes.sfwLoadType === "CodeGroup")) {
            $scope.strSelectedParameters = $scope.SelectedObject.dictAttributes.sfwParameters;
        }
        else {
            $scope.strSelectedParameters = $scope.SelectedObject.dictAttributes.sfwNavigationParameter;

        }

        if ($scope.SelectedObject.dictAttributes.sfwLoadSource && $scope.SelectedObject.dictAttributes.sfwLoadType == "Query") {
            $scope.thisQuery = $scope.GetQueryFromEntity();

            if ($scope.thisQuery != undefined && $scope.thisQuery != "") {
                $scope.ParameterCollection = [];
                angular.forEach($scope.thisQuery.Parameters, function (strParam) {
                    ParameterField = strParam.ID;
                    if (ParameterField.contains("@")) {
                        strParamField = ParameterField.substring(ParameterField.indexOf('@') + 1, ParameterField.length);
                    }
                    else {
                        strParamField = ParameterField;
                    }

                    var objParameter = { ParameterField: strParamField, ParameterValue: "" };
                    $scope.ParameterCollection.push(objParameter);
                });
            }
        }
        else if ($scope.SelectedObject.dictAttributes.sfwLoadSource && $scope.SelectedObject.dictAttributes.sfwLoadType == "ChildMethod") {
            var strObjectMethod = $scope.SelectedObject.dictAttributes.sfwLoadSource.trim();
            $scope.TargetForm = strObjectMethod;

            if (strObjectMethod == "" || strObjectMethod == undefined)
                return;

            $scope.TargetForm = strObjectMethod;
            var objParent = FindParent($scope.SelectedObject, "sfwGridView");
            if (objParent == null) {

                objParent = FindParent($scope.SelectedObject, "sfwListView");
            }
            if (objParent) {
                var objParentField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.formobject.dictAttributes.sfwEntity, objParent.dictAttributes.sfwEntityField);
                if (objParentField && objParentField.Entity) {
                    var lstData = $Entityintellisenseservice.GetIntellisenseData(objParentField.Entity, "", "", true, false, true, false, false, false);
                    var lsttempData = [];
                    var objMethod;
                    if (lstData) {
                        angular.forEach(lstData, function (item) {
                            if (!objMethod) {
                                if (item.ID == strObjectMethod) {
                                    objMethod = item;
                                }
                            }
                        });
                    }

                    if (objMethod) {
                        var paramerters = objMethod.Parameters;

                        if (paramerters) {
                            angular.forEach(paramerters, function (objParam) {
                                var objParameter = { ParameterField: objParam.ID, ParameterValue: "" };
                                $scope.ParameterCollection.push(objParameter);
                            });
                        }
                    }
                }
            }


        }

        else if ($scope.SelectedObject.dictAttributes.sfwLoadSource && $scope.SelectedObject.dictAttributes.sfwLoadType == "Method") {
            var strObjectMethod = $scope.SelectedObject.dictAttributes.sfwLoadSource.trim();
            $scope.TargetForm = strObjectMethod;

            if (strObjectMethod == "" || strObjectMethod == undefined)
                return;

            $scope.TargetForm = strObjectMethod;

            var lstData = $Entityintellisenseservice.GetIntellisenseData($scope.formobject.dictAttributes.sfwEntity, "", "", true, false, true, false, false, false);
            var lsttempData = [];
            var objMethod;
            if (lstData) {
                angular.forEach(lstData, function (item) {
                    if (!objMethod) {
                        if (item.ID == strObjectMethod) {
                            objMethod = item;
                        }
                    }
                });
            }

            if (objMethod) {
                var paramerters = objMethod.Parameters;
                //var paramerters = GetObjectMethodParameters(entityIntellisenseList, $scope.formobject.dictAttributes.sfwEntity, strObjectMethod);
                if (paramerters) {
                    angular.forEach(paramerters, function (objParam) {
                        var objParameter = { ParameterField: objParam.ID, ParameterValue: "" };
                        $scope.ParameterCollection.push(objParameter);
                    });
                }
            }

            //  var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();

            // var paramerters = GetObjectMethodParameters(entityIntellisenseList, $scope.formobject.dictAttributes.sfwEntity, strObjectMethod);

        }
        else if ($scope.SelectedObject && $scope.SelectedObject.dictAttributes.sfwLoadSource && $scope.SelectedObject.dictAttributes.sfwLoadType == "ServerMethod") {
            var strObjectMethod = $scope.SelectedObject.dictAttributes.sfwLoadSource.trim();
            $scope.TargetForm = strObjectMethod;

            if (strObjectMethod == "" || strObjectMethod == undefined)
                return;

            $scope.TargetForm = strObjectMethod;

            var RemoteObjectName = "srvCommon";
            if ($scope.formobject && $scope.formobject.dictAttributes.sfwRemoteObject) {
                RemoteObjectName = $scope.formobject.dictAttributes.sfwRemoteObject;
            }

            if (RemoteObjectName) {
                var objServerObject = GetServerMethodObject(RemoteObjectName, $scope.formobject.RemoteObjectCollection);
                var paramerters = GetSrvMethodParameters(objServerObject, strObjectMethod);
                if (paramerters) {
                    for (j = 0; j < paramerters.length; j++) {
                        var objParameter = { ParameterField: paramerters[j].dictAttributes.ID, ParameterValue: "", Constants: false };
                        $scope.XmlParameterCollection.push(objParameter);
                    }
                }
            }
        }
        // set param for codegroup only for cascading dropdownlist - BALA
        else if (($scope.SelectedObject.Name == "sfwCascadingDropDownList" || $scope.SelectedObject.Name == "sfwMultiSelectDropDownList") && (($scope.SelectedObject.dictAttributes.sfwLoadSource || $scope.SelectedObject.placeHolder) && $scope.SelectedObject.dictAttributes.sfwLoadType == "CodeGroup")) {
            $scope.ParameterCollection.push({ ParameterField: "data1", ParameterValue: "" });
            $scope.ParameterCollection.push({ ParameterField: "data2", ParameterValue: "" });
            $scope.ParameterCollection.push({ ParameterField: "data3", ParameterValue: "" });
        }
        if ($scope.ParameterCollection != undefined && $scope.ParameterCollection.length > 0 && $scope.strSelectedParameters != undefined) {
            var lst = $scope.strSelectedParameters.split(";");
            for (var i = 0; i < lst.length; i++) {
                var strParam = lst[i];
                //var lstControlsID = lst[i].split("=");
                var strControlID = strParam;
                var strParamsValue = strParam;
                var blnConstant = false;

                if (strParam.contains("=")) {
                    strControlID = strParam.substring(0, strParam.indexOf('='));
                    strParamsValue = strParam.substring(strParam.indexOf('=') + 1);

                    if (strParamsValue.match("^#")) {
                        strParamsValue = strParamsValue.substring(1);
                        blnConstant = true;
                    }
                }
                for (var j = 0; j < $scope.ParameterCollection.length; j++) {
                    if ($scope.ParameterCollection[j].ParameterField == strControlID) {
                        $scope.ParameterCollection[j].ParameterValue = strParamsValue;
                        $scope.ParameterCollection[j].Constants = blnConstant;
                    }
                }
            }
        }
    };

    function fnUpdateNavParams() {
        if ($scope.thisQuery) {
            angular.forEach($scope.thisQuery.Parameters, function (strParam) {
                ParameterField = strParam.ID;
                if (ParameterField.contains("@")) {
                    strParamField = ParameterField.substring(ParameterField.indexOf('@') + 1, ParameterField.length);
                }

                var objParameter = { ParameterField: strParamField, ParameterValue: "" };
                $scope.ParameterCollection.push(objParameter);
            });
        }
    }
    //#endregion

    //#region Populate Lookup Panel Criteria When Selected ActiveFormType is Lookup, In Approve Button
    var vrLookupField = [];
    $scope.PanelCriteria;
    $scope.PopulateLookupPanel = function (asfxTable) {
        if (asfxTable) {
            var desc = getDescendents(asfxTable);
            if (desc && desc.length > 0) {
                var desc = desc.filter(function (item) { return item.Name == "sfwPanel"; });
                if (desc && desc.length > 0) {
                    for (var index = 0; index < desc.length; index++) {
                        var panelDesc = getDescendents(desc[index]);
                        if (panelDesc && panelDesc.length > 0) {
                            if (panelDesc.some(function (item) { return item.Name == "sfwTable" && item.dictAttributes.ID == "tblCriteria"; })) {
                                $scope.PanelCriteria = desc[index];
                                var controls = getDescendents($scope.PanelCriteria);;//.filter(function (item) { return item.Name == "sfwTextBox" || item.Name == "sfwDropDownList"; });
                                if (controls && controls.length > 0) {
                                    for (var idx = 0; idx < controls.length; idx++) {
                                        if (controls[idx] && controls[idx].dictAttributes.sfwDataField) {
                                            var objParameter = { ControlId: controls[idx].dictAttributes.ID, ParameterField: controls[idx].dictAttributes.sfwDataField, ParameterValue: "", Constants: false };
                                            vrLookupField.push(objParameter);
                                        }
                                    }
                                }
                                break;
                            }
                        }
                    }
                }
            }
        }
    };

    $scope.XmlParameterCollection = [];
    $scope.PopulateXmlParameters = function (customAttribute, formType) {

        var alParams = customAttribute.split(';');

        angular.forEach(alParams, function (strParam) {
            if (strParam == undefined || strParam == "") {

            }
            else {
                var strParamField = strParam;
                var strParamValue = strParam;
                var blnConstant = false;

                if (strParam.contains("=")) {
                    strParamField = strParam.substring(0, strParam.indexOf('='));
                    strParamValue = strParam.substring(strParam.indexOf('=') + 1);

                    if (strParamValue.match("^#")) {
                        strParamValue = strParamValue.substring(1);
                        blnConstant = true;
                    }
                }

                if (formType == "Maintenance") {
                    var objParameter = { ParameterField: strParamField, EntityField: strParamValue, ParameterValue: strParamValue, Constants: blnConstant };
                    $scope.XmlParameterCollection.push(objParameter);
                }
                else if (formType == "Lookup") {
                    var objParameter = { ControlId: "", ParameterField: strParamField, ParameterValue: strParamValue, Constants: blnConstant };
                    $scope.LookupParameterCollection.push(objParameter);
                }
                else {
                    var objParameter = {
                        ParameterField: strParamField, ParameterValue: strParamValue, Constants: blnConstant
                    };
                    $scope.MethodParameterCollection.push(objParameter);
                }
            }
        });

        //if ($scope.XmlParameterCollection.length != $scope.thisQuery.Parameters.length) {
        //    var vrParCollection = [];
        //    for (i = 0; i < $scope.thisQuery.Parameters.length; i++) {
        //        for (j = 0; j < $scope.ParameterCollection.length; j++) {
        //            if ($scope.ParameterCollection[j].ParameterField != $scope.thisQuery.Parameters[i].ID.substring($scope.thisQuery.Parameters[i].ID.indexOf('@') + 1, $scope.thisQuery.Parameters[i].ID.length)) {
        //                var objParameter = { ParameterField: $scope.thisQuery.Parameters[i].ID.substring($scope.thisQuery.Parameters[i].ID.indexOf('@') + 1, $scope.thisQuery.Parameters[i].ID.length), ParameterValue: "" };
        //                vrParCollection.push(objParameter);
        //            }
        //        }
        //    }
        //    angular.forEach(vrParCollection, function (x) {
        //        $scope.ParameterCollection.push(x);
        //    });
        //}
    };


    $scope.PopulateParameters = function (customAttribute, formType) {
        var alParams = customAttribute.split(';');

        angular.forEach(alParams, function (strParam) {
            if (strParam == undefined || strParam == "") {

            }
            else {
                var strParamField = strParam;
                var strParamValue = strParam;
                var blnConstant = false;

                if (strParam.contains("=")) {
                    strParamField = strParam.substring(0, strParam.indexOf('='));
                    strParamValue = strParam.substring(strParam.indexOf('=') + 1);

                    if (strParamValue.match("^#")) {
                        strParamValue = strParamValue.substring(1);
                        blnConstant = true;
                    }
                }

                if (formType == "Maintenance") {
                    var lst = $scope.XmlParameterCollection.filter(function (x) { return x.ParameterField == strParamField; });
                    if (lst && lst.length > 0) {
                        lst[0].ParameterValue = strParamValue;
                        lst[0].Constants = blnConstant;
                    }
                }
                else if (formType == "Lookup") {
                    var lst = $scope.LookupParameterCollection.filter(function (x) { return x.ParameterField == strParamField; });
                    if (lst && lst.length > 0) {
                        lst[0].ParameterValue = strParamValue;
                        lst[0].Constants = blnConstant;
                    }
                }
                else {
                    var lst = $scope.MethodParameterCollection.filter(function (x) { return x.ParameterField == strParamField; });
                    if (lst && lst.length > 0) {
                        lst[0].ParameterValue = strParamValue;
                        lst[0].Constants = blnConstant;
                    }
                }
            }
        });
    };
    //#endregion

    //#region Common Functionality
    $scope.showAllControlChange = function (event) {
        $scope.PopulateAvailableFields();
        $scope.PopulateGlobalParameters();
    };

    $scope.ExpandCollapsedControl = function (field, event) {
        field.IsExpanded = !field.IsExpanded;
    };

    $scope.SelectFieldClick = function (field, event) {
        $scope.SelectedField = field;
        if (event) {
            event.stopPropagation();
        }
    };

    $scope.SetFieldClass = function (obj) {
        if (obj == $scope.SelectedField) {
            return "selected";
        }
    };
    //#endregion

    //#region When dialog close on Ok and Cancel button
    $scope.strSelectedParameters;
    $scope.onOkClick = function () {
        var strCustomAttribute = "";
        if ($scope.ParameterCollection.length > 0) {
            strCustomAttribute = $scope.GetSavedString($scope.ParameterCollection);

            //$scope.SelectedObject.dictAttributes.sfwParameters = strCustomAttribute;
        }
        else if ($scope.LookupParameterCollection.length > 0) {
            strCustomAttribute = $scope.GetSavedString($scope.LookupParameterCollection);
        }
        else if ($scope.XmlParameterCollection.length > 0) {
            strCustomAttribute = $scope.GetSavedString($scope.XmlParameterCollection);
        }
        else if ($scope.MethodParameterCollection.length > 0) {
            strCustomAttribute = $scope.GetSavedString($scope.MethodParameterCollection);
        }

        if (strCustomAttribute != undefined) {
            if ($scope.SelectedObject.Name == "sfwCascadingDropDownList" || ($scope.SelectedObject.Name === "sfwMultiSelectDropDownList" && $scope.SelectedObject.dictAttributes.sfwLoadType === "CodeGroup")) {
                $rootScope.EditPropertyValue($scope.SelectedObject.dictAttributes.sfwParameters, $scope.SelectedObject.dictAttributes, "sfwParameters", strCustomAttribute);
            }
            else {
                if ($scope.SelectedObject.dictAttributes.sfwActiveForm && $scope.SelectedObject.dictAttributes.sfwActiveForm.trim().length > 0) {
                    if ($scope.SelectedObject.dictAttributes.sfwMethodName == "btnNew_Click") {
                        var relatedControl = $scope.SelectedObject.dictAttributes.sfwActiveForm.contains("=") ? $scope.SelectedObject.dictAttributes.sfwRelatedControl : "";
                        if (strCustomAttribute == "") {
                            $rootScope.EditPropertyValue($scope.SelectedObject.dictAttributes.sfwNavigationParameter, $scope.SelectedObject.dictAttributes, "sfwNavigationParameter", relatedControl);

                        }
                        else {
                            if (relatedControl && relatedControl != "") {
                                $rootScope.EditPropertyValue($scope.SelectedObject.dictAttributes.sfwNavigationParameter, $scope.SelectedObject.dictAttributes, "sfwNavigationParameter", strCustomAttribute + ";" + relatedControl);

                            }
                            else {
                                $rootScope.EditPropertyValue($scope.SelectedObject.dictAttributes.sfwNavigationParameter, $scope.SelectedObject.dictAttributes, "sfwNavigationParameter", strCustomAttribute);
                            }
                        }
                    }
                    else if ($scope.SelectedObject.dictAttributes.sfwMethodName == "btnOpen_Click") {
                        var entityField = $scope.SelectedObject.dictAttributes.sfwActiveForm.contains("=") ? $scope.SelectedObject.dictAttributes.sfwEntityField : "";
                        if (strCustomAttribute == "") {
                            $rootScope.EditPropertyValue($scope.SelectedObject.dictAttributes.sfwNavigationParameter, $scope.SelectedObject.dictAttributes, "sfwNavigationParameter", entityField);

                        }
                        else {
                            if (entityField) {
                                $rootScope.EditPropertyValue($scope.SelectedObject.dictAttributes.sfwNavigationParameter, $scope.SelectedObject.dictAttributes, "sfwNavigationParameter", strCustomAttribute + ";" + entityField);

                            }
                            else {
                                $rootScope.EditPropertyValue($scope.SelectedObject.dictAttributes.sfwNavigationParameter, $scope.SelectedObject.dictAttributes, "sfwNavigationParameter", strCustomAttribute);

                            }
                        }
                    }
                    else {
                        $rootScope.EditPropertyValue($scope.SelectedObject.dictAttributes.sfwNavigationParameter, $scope.SelectedObject.dictAttributes, "sfwNavigationParameter", strCustomAttribute);

                    }
                }
                else {
                    $rootScope.EditPropertyValue($scope.SelectedObject.dictAttributes.sfwNavigationParameter, $scope.SelectedObject.dictAttributes, "sfwNavigationParameter", strCustomAttribute);

                }
            }
        }

        $scope.onCancelClick();
    };

    $scope.onCancelClick = function () {
        //ngDialog.close($scope.NavigationParameterDialog.id);

        $scope.NavigationParameterDialog.close();
    };

    $scope.GetSavedString = function (ParameterCollection) {
        var strReturn = "";
        angular.forEach(ParameterCollection, function (objParams) {
            var strParamField = objParams.ParameterField;
            var strParamValue = objParams.ParameterValue;
            if (strParamValue != "" && strParamField != undefined) {
                if ((strParamValue != undefined && strParamValue != "") && (strParamField != undefined && strParamField != "")) {
                    var blnConstatnt = objParams.Constants;

                    if (blnConstatnt) {
                        strParamValue = "#" + strParamValue;
                    }

                    var strParam = strParamValue;

                    if (strParamValue != undefined && strParamValue != "" && strParamValue.toLowerCase() != strParamField.toLowerCase()) {
                        strParam = strParamField + '=' + strParamValue;
                    }
                    if (strParam != undefined && strParam != "") {
                        if (strReturn == "") {
                            strReturn = strParam;
                        }
                        else {
                            strReturn += ';' + strParam;
                        }
                    }
                }
            }
        });
        return strReturn;
    };
    //#endregion

    //#region Form Link
    $scope.PopulateAvailableFieldsForFormLink = function (strPropID) {
        $scope.EntityFieldCollection = [];
        if ($scope.formobject) {
            var arrIDs = [];
            var istrValue = $scope.formobject.dictAttributes.sfwType;
            var blnIsLookup = istrValue.toUpperCase().trim() == "FORMLINKLOOKUP";

            $scope.SourceForm = $scope.formobject.dictAttributes.ID;

            var strProperty;
            if ($scope.IsFormCodeGroup || ($scope.SelectedObject.dictAttributes.sfwMethodName && $scope.SelectedObject.dictAttributes.sfwMethodName == "btnNew_Click") || $scope.SelectedObject.Name == "sfwCascadingDropDownList" || $scope.SelectedObject.Name == "sfwSeries") {
                strProperty = "ID";
            }
            else if (blnIsLookup)
                strProperty = "sfwDataField";
            else
                strProperty = "sfwEntityField";

            if ($scope.SelectedObject.Name == "sfwOpenDetail") {
                if ($scope.SelectedObject.dictAttributes.sfwQueryID) {
                    var lst = $scope.SelectedObject.dictAttributes.sfwQueryID.split('.');
                    if (lst && lst.length == 2) {
                        var entityName = lst[0];
                        var strQueryID = lst[1];
                        var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                        var lstEntity = $filter('filter')(entityIntellisenseList, { ID: entityName }, true);
                        if (lstEntity && lstEntity.length > 0) {
                            var objEntity = lstEntity[0];
                            var lstQuery = objEntity.Queries.filter(function (x) { return x.ID == strQueryID; });
                            if (lstQuery && lstQuery.length > 0) {
                                var objQuery = lstQuery[0];
                                $.connection.hubForm.server.getEntityQueryColumns($scope.SelectedObject.dictAttributes.sfwQueryID, "NavigationParameterController").done(function (data) {
                                    $scope.receiveQueryColumns(data);
                                });
                            }
                        }
                    }
                }
            }
            else {
                var objControl = { ID: "Main", IsExpanded: false, IsSelected: false, Elements: [] };

                var objItems = $scope.GetItemsModel();
                if (objItems) {
                    if (strPropID != undefined && strPropID != "") {
                        $scope.PopulateChildIDsFormLink(strPropID, objItems, arrIDs);
                    }
                    $scope.PopulateAvailableFieldsFormLink(strProperty, objItems, objControl.Elements, arrIDs, strPropID);
                }

                if (objControl.Elements.length > 0)
                    $scope.EntityFieldCollection.push(objControl);
            }
        }
    };

    $scope.GetSelectedWizardStep = function (aCntrlModel) {
        var retVal = null;
        var parent = aCntrlModel.ParentVM;
        while (null != parent) {
            if (parent.Name == "sfwWizardStep") {
                retVal = parent;
                break;
            }
            parent = parent.ParentVM;
        }
        return retVal;
    };

    $scope.GetItemsModel = function () {
        var retVal;

        retVal = $scope.formobject.Elements.filter(function (item) {
            return item.Name == "items";
        });

        if (retVal && retVal.length > 0) {
            return retVal[0];
        }
        return retVal;
    };

    $scope.PopulateChildIDsFormLink = function (strPropID, sfxTable, arrID) {
        function iterator(sfxCtrl) {
            if (sfxCtrl._dictAttributes.hasOwnProperty("sfwParentControl")) {
                var strID = sfxCtrl.dictAttributes.ID;
                var strParentID = sfxCtrl.dictAttributes.sfwParentControl;
                if (strParentID == strPropID) {
                    arrID.push(strID);
                    PopulateChildIDsFormLink(strID, sfxCtrl, arrID);
                }
            }
        }
        if (sfxTable) {

            angular.foreach(sfxTable.Elements, iterator);
        }
    };

    $scope.PopulateAvailableFieldsFormLink = function (strProperty, sfxTable, list, arrIDs, strPropID) {
        var i = 0;
        function iteratorarrIDs(strID) {
            if (strID == strCtrlID) {
                blnAdd = false;
                return;
            }
        }

        function iterateWizardSteps(sfxWizardStep) {
            strTreeCaption = sfxWizardStep.dictAttributes.Title;
            if (strTreeCaption == "" || strTreeCaption == undefined)
                strTreeCaption = sfxWizardStep.dictAttributes.ID;
            list.push({ ID: strTreeCaption, Elements: [], IsExpanded: false, IsSelected: false });
            if (sfxWizardStep.Elements.length > 0) {
                $scope.PopulateAvailableFieldsFormLink(strProperty, sfxWizardStep.Elements[0], list[i].Elements, arrIDs, strPropID);
                if (list[i].Elements.length == 0) {
                    list.splice(i, 1);
                }
                else {
                    i++;
                }
            }
        }
        function iterateWizardItems(objWizard) {
            if (objWizard.Name == "HeaderTemplate") {
                strTreeCaption = "HeaderTemplate";
                list.push({ ID: strTreeCaption, Elements: [], IsExpanded: false, IsSelected: false });
                if (objWizard.Elements.length > 0) {
                    $scope.PopulateAvailableFieldsFormLink(strProperty, objWizard.Elements[0], list[i].Elements, arrIDs, strPropID);
                }
                if (list[i].Elements.length == 0) {
                    list.splice(i, 1);
                }
                else {
                    i++;
                }

            }
            else {
                angular.forEach(objWizard.Elements, iterateWizardSteps);
            }
        }
        function iterateTabSheet(sfxTabSheet) {
            strTreeCaption = sfxTabSheet.dictAttributes.HeaderText;
            if (strTreeCaption == "" || strTreeCaption == undefined)
                strTreeCaption = sfxTabSheet.dictAttributes.ID;
            list.push({ ID: strTreeCaption, Elements: [], IsExpanded: false, IsSelected: false });
            if (sfxTabSheet.Elements.length > 0) {
                $scope.PopulateAvailableFieldsFormLink(strProperty, sfxTabSheet.Elements[0], list[i].Elements, arrIDs, strPropID);
            }
            if (list[i].Elements.length == 0) {
                list.splice(i, 1);
            }
            else {
                i++;
            }
        }


        function iterator(sfxCtrl) {
            {
                var strTreeCaption = "";

                if (sfxCtrl.Name == "items") {
                    $scope.PopulateAvailableFieldsFormLink(strProperty, sfxCtrl, list[i].Elements, arrIDs, strPropID);
                }
                else if (sfxCtrl.Name == "sfwListView") {
                    strTreeCaption = sfxCtrl.dictAttributes.sfwCaption;
                    if (!strTreeCaption)
                        strTreeCaption = sfxCtrl.dictAttributes.ID;
                    var obj = { ID: strTreeCaption, Elements: [], IsExpanded: false, IsSelected: false };
                    if (sfxCtrl.Elements.length > 0) {
                        $scope.PopulateAvailableFieldsFormLink(strProperty, sfxCtrl, obj.Elements, arrIDs, strPropID);
                    }
                    list.push(obj);
                }

                else if (sfxCtrl.Name == "sfwPanel" || sfxCtrl.Name == "sfwDialogPanel") {
                    strTreeCaption = sfxCtrl.dictAttributes.sfwCaption;
                    if (!strTreeCaption)
                        strTreeCaption = sfxCtrl.dictAttributes.ID;
                    var obj = { ID: strTreeCaption, Elements: [], IsExpanded: false, IsSelected: false };
                    if (sfxCtrl.Elements.length > 0) {
                        $scope.PopulateAvailableFieldsFormLink(strProperty, sfxCtrl.Elements[0], obj.Elements, arrIDs, strPropID);
                    }

                    list.push(obj);
                }
                else if (sfxCtrl.Name == "sfwTabContainer") {
                    if (sfxCtrl.Elements.length > 0 && sfxCtrl.Elements[0].Name == "Tabs") {
                        var sfxTabs = sfxCtrl.Elements[0];
                        angular.forEach(sfxTabs.Elements, iterateTabSheet);
                    }
                }

                else if (sfxCtrl.Name == "sfwWizard") {
                    angular.forEach(sfxCtrl.Elements, iterateWizardItems);
                }
                else if (sfxCtrl.Name == "sfwGridView" && ($scope.SelectedObject.Name != "sfwTextBox")) {
                    var strGridId = sfxCtrl.dictAttributes.ID;

                    var objControl = { ID: strGridId + " (Data Keys)", Elements: [], IsSelected: false, IsExpanded: false };
                    list.push(objControl);

                    var strDataKeys = sfxCtrl.dictAttributes.sfwDataKeyNames;
                    if (strDataKeys)
                        var strDataKeyNames = strDataKeys.split(",");

                    if (sfxCtrl.Elements.length > 0 && sfxCtrl.Elements[0].Name == "Columns") {
                        for (var j = 0; j < sfxCtrl.Elements[0].Elements.length; j++) {
                            var objTempField = sfxCtrl.Elements[0].Elements[j];
                            if (objTempField.Elements.length > 0 && objTempField.Elements[0].Name == "ItemTemplate") {
                                var objItemTempField = objTempField.Elements[0];
                                angular.forEach(objItemTempField.Elements, function (sfxControl) {
                                    if ("sfwEntityField" in sfxControl.dictAttributes) {
                                        var strFieldName = "";
                                        if (strPropID != "" && strPropID != undefined) {
                                            strFieldName = sfxCtrl.dictAttributes.ID;
                                        }
                                        else {
                                            strFieldName = sfxControl.dictAttributes.sfwEntityField;
                                        }
                                        //strFieldName = sfxControl.dictAttributes.sfwDataField;
                                        if (strFieldName != undefined && strFieldName != "") {
                                            objControl.Elements.push({ ID: strFieldName, Elements: [], IsSelected: false, IsExpanded: false });
                                        }
                                    }
                                });
                            }
                        }
                    }
                }
                else if (strProperty in sfxCtrl.dictAttributes) {
                    var blnAdd = true;
                    var strCtrlID = sfxCtrl.dictAttributes.ID;

                    angular.forEach(arrIDs, iteratorarrIDs);
                    if (blnAdd) {
                        var strFieldName = "";
                        if (strPropID != undefined && strPropID != "") {
                            strFieldName = sfxCtrl.dictAttributes.ID;
                        }
                        else {
                            strFieldName = sfxCtrl.dictAttributes[strProperty];
                        }
                        if (strFieldName && sfxCtrl.Name != "sfwButton") {
                            list.push({ ID: strFieldName, Elements: [], IsSelected: false, IsExpanded: false });

                        }
                        if (sfxCtrl.Elements.length > 0) {
                            $scope.PopulateAvailableFieldsFormLink(strProperty, sfxCtrl.Elements[0], list[i].Elements, arrIDs, strPropID);
                        }
                        i++;
                    }

                }
            }
        }

        if (sfxTable != null) {
            angular.forEach(sfxTable.Elements, iterator);
        }
    };

    //#endregion

    $scope.Init();
}]);

app.directive("parameterdraggable", [function () {
    return {
        restrict: 'A',
        scope: {
            dragdata: '=',
        },
        link: function (scope, element, attributes) {
            var el = element[0];
            el.draggable = true;

            el.addEventListener('dragstart', onDragStart, false);

            function onDragStart(e) {
                e.stopPropagation();
                if (scope.dragdata != undefined && scope.dragdata != "") {
                    dragDropData = scope.dragdata;
                    e.dataTransfer.setData("text", JSON.stringify(scope.dragdata));
                }
            }
        }
    };
}]);

app.directive("parameterdroppable", [function () {
    return {
        restrict: 'A',
        scope: {
            dropdata: '=',
        },
        link: function (scope, element, attributes) {
            var el = element[0];

            el.addEventListener("dragover", function (e) {
                e.dataTransfer.dropEffect = 'copy';
                if (e.preventDefault) {
                    e.preventDefault();
                }
            });

            el.addEventListener("drop", function (e) {
                e.preventDefault();

                var strData = e.dataTransfer.getData("Text");
                if (strData == "" && lstEntityTreeFieldData != null) {
                    var obj = lstEntityTreeFieldData;
                    var Id = obj[0];
                    var DisplayName = obj[1];
                    var DataType = obj[2];
                    var data = obj[3];//JSON.parse(obj[3]);
                    var isparentTypeCollection = obj[4];
                    var fullpath = Id;
                    if (DisplayName != "") {
                        fullpath = DisplayName + "." + Id;
                    }
                    if (isparentTypeCollection == "false" && DataType !== "Collection" && DataType !== "List") {
                        if (data != undefined && data != "") {
                            scope.$apply(function () {
                                scope.dropdata = fullpath;
                            });
                        }
                    }
                    lstEntityTreeFieldData = null;
                } else {
                    lstEntityTreeFieldData = null;
                    if (dragDropData) {
                        scope.$apply(function () {
                            scope.dropdata = dragDropData;
                            dragDropData = null;
                        });
                    }
                }


                if (e.stopPropagation) {
                    e.stopPropagation();
                }
            }, false);
        }
    };
}]);
app.controller("NavParamGridSearchController", ["$scope", "$rootScope", "$filter", "ParameterFactory", "$EntityIntellisenseFactory", "$ValidationService", function ($scope, $rootScope, $filter, ParameterFactory, $EntityIntellisenseFactory, $ValidationService) {

    $scope.SelectedObject.IsShowAllControl = false;
    $scope.FieldCollection = [];

    $scope.Init = function () {
        if ($scope.formobject.dictAttributes.sfwType == "FormLinkMaintenance" || $scope.formobject.dictAttributes.sfwType == "FormLinkLookup" || $scope.formobject.dictAttributes.sfwType == "FormLinkWizard") {

            var objItems;
            var arrNavParams;
            var mainItem = { ID: "Main", IsExpanded: false, IsSelected: false, Elements: [] };
            var strNavParam = $scope.SelectedObject.dictAttributes.sfwNavigationParameter;

            if (strNavParam) {
                arrNavParams = strNavParam.split(';');
            }
            if ($scope.formobject) {
                for (var i = 0; i < $scope.formobject.Elements.length; i++) {
                    if ($scope.formobject.Elements[i].Name == "items") {
                        objItems = $scope.formobject.Elements[i];
                        break;
                    }
                }
            }

            if (objItems) {
                $scope.PopulateAvailableFieldsFormLink(arrNavParams, objItems, mainItem);
                if (mainItem.Elements.length > 0) {
                    $scope.FieldCollection.push(mainItem);
                }
            }
            $scope.isFormLink = true;
        }
        else {
            $scope.PopulateAvailableFields();
            $scope.isFormLink = false;
        }
    };

    //#region Common Methods
    $scope.PopulateAvailableFields = function () {
        $scope.FieldCollection = [];
        var arrNavParams;
        var mainItem = { ID: "Main", IsExpanded: false, IsSelected: false, Elements: [] };
        var strNavParam = $scope.SelectedObject.dictAttributes.sfwNavigationParameter;
        if (strNavParam) {
            arrNavParams = strNavParam.split(';');
        }
        if ($scope.SelectedObject.IsShowAllControl == true) {
            var table;
            for (var i = 0; i < $scope.formobject.Elements.length; i++) {
                if ($scope.formobject.Elements[i].Name == "sfwTable") {
                    table = $scope.formobject.Elements[i];
                    break;
                }
            }

            $scope.PopulateControls(table, mainItem, arrNavParams);
        }
        else {
            if ($scope.currentTable) {
                $scope.PopulateControls($scope.currentTable, mainItem, arrNavParams);
            }
        }
        if (mainItem.Elements.length > 0) {
            $scope.FieldCollection.push(mainItem);
        }

    };

    $scope.PopulateControls = function (sfxTable, mainItem, arrNavParams) {
        var strTreeCaption = "";
        function iterateWizardSteps(sfxWizardStep) {
            strTreeCaption = sfxWizardStep.dictAttributes.Title;
            if (strTreeCaption == "" || strTreeCaption == undefined)
                strTreeCaption = sfxWizardStep.dictAttributes.ID;
            var tnChild = { ID: strTreeCaption, Elements: [], IsExpanded: false, IsSelected: false };
            if (sfxWizardStep.Elements.length > 0) {
                $scope.PopulateControls(sfxWizardStep.Elements[0], tnChild, arrNavParams);
                if (tnChild.Elements.length > 0) {
                    mainItem.Elements.push(tnChild);
                    mainItem.IsExpanded = true;
                }
            }
        }
        function iterateWizardItems(objWizard) {
            if (objWizard.Name == "HeaderTemplate") {
                strTreeCaption = "HeaderTemplate";
                var tnChild = { ID: strTreeCaption, Elements: [], IsExpanded: false, IsSelected: false };
                if (objWizard.Elements.length > 0) {
                    $scope.PopulateControls(objWizard.Elements[0], tnChild, arrNavParams);
                }
                if (tnChild.Elements.length > 0) {
                    mainItem.Elements.push(tnChild);
                    mainItem.IsExpanded = true;
                }
            }
            else {

                angular.forEach(objWizard.Elements, iterateWizardSteps);
            }
        }
        function iterateTabSheet(sfxTabSheet) {
            strTreeCaption = sfxTabSheet.dictAttributes.HeaderText;
            if (strTreeCaption == undefined || strTreeCaption == "")
                strTreeCaption = sfxTabSheet.dictAttributes.ID;
            var tnChild = { ID: strTreeCaption, IsExpanded: false, IsSelected: false, Elements: [] };

            if (sfxTabSheet.Elements.length > 0 && sfxTabSheet.Elements[0].Name == "sfwTable") {
                $scope.PopulateControls(sfxTabSheet.Elements[0], tnChild, arrNavParams);
                tnChild.IsExpanded = true;
            }
            if (tnChild.Elements.length > 0) {
                mainItem.Elements.push(tnChild);
                mainItem.IsExpanded = true;
            }
        }
        function iterateCell(sfxCtrl) {

            if (sfxCtrl.Name == "sfwPanel") {
                strTreeCaption = sfxCtrl.dictAttributes.sfwCaption;
                if (strTreeCaption == undefined || strTreeCaption == "")
                    strTreeCaption = sfxCtrl.dictAttributes.ID;
                var tnChild = { ID: strTreeCaption, IsExpanded: false, IsSelected: false, Elements: [] };
                if (sfxCtrl.Elements.length > 0 && sfxCtrl.Elements[0].Name == "sfwTable") {
                    $scope.PopulateControls(sfxCtrl.Elements[0], tnChild, arrNavParams);
                    tnChild.IsExpanded = true;
                }
                if (tnChild.Elements.length > 0) {
                    mainItem.Elements.push(tnChild);
                    mainItem.IsExpanded = true;
                }
            }
            else if (sfxCtrl.Name == "sfwTabContainer") {
                if (sfxCtrl.Elements.length > 0 && sfxCtrl.Elements[0].Name == "Tabs") {
                    var sfxTabs = sfxCtrl.Elements[0];

                    angular.forEach(sfxTabs.Elements, iterateTabSheet);
                }
            }
            else if (sfxCtrl.Name == "sfwWizard") {

                angular.forEach(sfxCtrl.Elements, iterateWizardItems);

            }
            else if (sfxCtrl.Name == "sfwTextBox" || sfxCtrl.Name == "sfwDropDownList" || sfxCtrl.Name == "sfwCascadingDropDownList") {
                var strId = sfxCtrl.dictAttributes.ID;
                if (strId != undefined && strId != "") {
                    var tnControl = { ID: strId, IsExpanded: false, IsSelected: false, IsCheckBoxVisible: true, Elements: [] };
                    if (arrNavParams) {
                        angular.forEach(arrNavParams, function (str) {
                            if (str == strId) {
                                tnControl.IsSelected = true;
                            }
                        });
                    }
                    mainItem.Elements.push(tnControl);
                }
            }
        }

        function iterateTable(sfxRow) {
            for (var iCol = 0; iCol < sfxRow.Elements.length; iCol++) {
                var sfxCell = sfxRow.Elements[iCol];
                if (sfxCell) {
                    angular.forEach(sfxCell.Elements, iterateCell);
                }
            }
        }
        if (sfxTable) {

            angular.forEach(sfxTable.Elements, iterateTable);
        }
    };

    //#endregion

    //#region Common Events
    $scope.showAllControlChange = function (event) {
        $scope.PopulateAvailableFields();
    };

    $scope.ExpandCollapsedControl = function (field, event) {
        field.IsExpanded = !field.IsExpanded;
    };

    $scope.SelectFieldClick = function (field, event) {
        $scope.SelectedField = field;
        if (event) {
            event.stopPropagation();
        }
    };

    $scope.onOkClick = function () {

        var strRetriveParems = $scope.RetrieveNavParams();
        $rootScope.UndRedoBulkOp("Start");
        if ($scope.SelectedObject.dictAttributes.sfwNavigationParameter) {
            var lstParam = $scope.SelectedObject.dictAttributes.sfwNavigationParameter.split(';');
            var lstNewParam = strRetriveParems.split(";");
            if (lstParam && lstParam.length > 0) {
                for (j = 0; j < lstParam.length; j++) {
                    if (!lstNewParam.some(function (itm) { return itm == lstParam[j]; })) {
                        var model = FindControlByID($scope.formobject, lstParam[j]);
                        if (model) {
                            $scope.CheckOtherFilterGridButton(model);
                            //if (!model.IsShowDataField) {
                            //    $rootScope.EditPropertyValue(model.dictAttributes.sfwDataField, model.dictAttributes, "sfwDataField", "");
                            //    model.IsShowDataField = false;
                            //}
                        }
                    }
                }
            }

            if (lstNewParam && lstNewParam.length > 0) {
                for (j = 0; j < lstNewParam.length; j++) {
                    if (!lstParam.some(function (itm) { return itm == lstNewParam[j]; })) {
                        var model = FindControlByID($scope.formobject, lstNewParam[j]);
                        if (model) {
                            $scope.CheckOtherFilterGridButton(model);
                            if (!model.IsShowDataField) {
                                $rootScope.EditPropertyValue(model.dictAttributes.sfwEntityField, model.dictAttributes, "sfwEntityField", "");
                                $ValidationService.checkValidListValue([], model, undefined, 'sfwEntityField', "sfwEntityField", "", undefined);

                                model.IsShowDataField = true;
                            }
                        }
                    }
                }
            }
        }

        $rootScope.EditPropertyValue($scope.SelectedObject.dictAttributes.sfwNavigationParameter, $scope.SelectedObject.dictAttributes, "sfwNavigationParameter", strRetriveParems);
        $rootScope.UndRedoBulkOp("End");
        //$scope.SelectedObject.dictAttributes.sfwNavigationParameter = strRetriveParems;
        $scope.onCancelClick();
    };

    $scope.CheckOtherFilterGridButton = function (model) {
        //$rootScope.EditPropertyValue(model.IsShowDataField, model, "IsShowDataField", false);
        var lst = [];
        FindControlListByNames($scope.formobject, ['sfwButton', 'sfwLinkButton', 'sfwImageButton'], lst);
        if (lst && lst.length > 0) {
            lst = lst.filter(function (itm) { return itm.dictAttributes.sfwMethodName == "btnGridSearch_Click"; });
            if (lst && lst.length > 0) {
                for (var i = 0; i < lst.length; i++) {
                    if (lst[i] != $scope.SelectedObject && lst[i].dictAttributes.sfwNavigationParameter) {
                        var lstParam = lst[i].dictAttributes.sfwNavigationParameter.split(';');
                        if (lstParam && lstParam.length > 0) {
                            for (j = 0; j < lstParam.length; j++) {
                                if (model && model.dictAttributes && model.dictAttributes.ID == lstParam[j]) {
                                    //model.IsShowDataField = true;
                                    $rootScope.EditPropertyValue(model.IsShowDataField, model, "IsShowDataField", true);
                                }
                            }
                        }
                    }
                }
            }
        }
    };

    $scope.RetrieveNavParams = function () {
        var strNavParam = "";
        function iterator(tn) {
            if (tn.Elements.length > 0)
                strNavParam += $scope.RetrieveNavParamsForChild(tn);
        }
        angular.forEach($scope.FieldCollection, iterator);

        strNavParam = strNavParam.trim();
        if (strNavParam.length > 0) {
            if (strNavParam[strNavParam.length - 1] == ';')
                strNavParam = strNavParam.substring(0, strNavParam.length - 1);
        }
        return strNavParam;
    };

    $scope.RetrieveNavParamsForChild = function (tnThis) {
        var strNavParam = "";
        function iterator(tn) {
            if (tn.Elements.length > 0) {
                strNavParam += $scope.RetrieveNavParamsForChild(tn);
            }
            else if ((tn.IsSelected)) {
                strNavParam += tn.ID + ";";
            }
        }
        angular.forEach(tnThis.Elements, iterator);

        return strNavParam;
    };


    $scope.onCancelClick = function () {
        if ($scope.dialog) {
            $scope.dialog.close();
        }
    };

    //#endregion


    //#region Form Link
    $scope.PopulateAvailableFieldsFormLink = function (arrNavParams, objItems, tnNode) {
        var strTreeCaption = "";
        function iterateWizardSteps(sfxWizardStep) {
            strTreeCaption = sfxWizardStep.dictAttributes.Title;
            if (strTreeCaption == "" || strTreeCaption == undefined)
                strTreeCaption = sfxWizardStep.dictAttributes.ID;
            var tnChild = { ID: strTreeCaption, Elements: [], IsExpanded: false, IsSelected: false };
            if (sfxWizardStep.Elements.length > 0) {
                $scope.PopulateControls(sfxWizardStep.Elements[0], tnChild, arrNavParams);
                if (tnChild.Elements.length > 0) {
                    tnNode.Elements.push(tnChild);
                    tnNode.IsExpanded = true;
                }
            }
        }
        function iterateWizardItems(objWizard) {
            if (objWizard.Name == "HeaderTemplate") {
                strTreeCaption = "HeaderTemplate";
                var tnChild = { ID: strTreeCaption, Elements: [], IsExpanded: false, IsSelected: false };
                if (objWizard.Elements.length > 0) {
                    $scope.PopulateControls(objWizard.Elements[0], tnChild, arrNavParams);
                }
                if (tnChild.Elements.length > 0) {
                    tnNode.Elements.push(tnChild);
                    tnNode.IsExpanded = true;
                }
            }
            else {
                angular.forEach(objWizard.Elements, iterateWizardSteps);
            }
        }

        function iterateTabSheet(sfxTabSheet) {
            strTreeCaption = sfxTabSheet.dictAttributes.HeaderText;
            if (strTreeCaption == undefined || strTreeCaption == "")
                strTreeCaption = sfxTabSheet.dictAttributes.ID;
            var tnChild = { ID: strTreeCaption, IsExpanded: false, IsSelected: false, Elements: [] };
            if (sfxTabSheet.Elements.length > 0) {
                $scope.PopulateAvailableFieldsFormLink(arrNavParams, sfxTabSheet.Elements[0], tnChild);
                tnChild.IsExpanded = true;
            }
            if (tnChild.Elements.length > 0) {
                tnNode.Elements.push(tnChild);
                tnNode.IsExpanded = true;
            }
        }

        function iterateItems(sfxCtrl) {
            if (sfxCtrl.Name == "items") {
                $scope.PopulateAvailableFieldsFormLink(arrNavParams, sfxCtrl, tnNode);
            }
            else if (sfxCtrl.Name == "sfwPanel" || sfxCtrl.Name == "sfwDialogPanel") {
                strTreeCaption = sfxCtrl.dictAttributes.sfwCaption;
                if (strTreeCaption == undefined || strTreeCaption == "")
                    strTreeCaption = sfxCtrl.dictAttributes.ID;

                var tnChild = { ID: strTreeCaption, IsExpanded: false, IsSelected: false, Elements: [] };
                if (sfxCtrl.Elements.length > 0) {
                    $scope.PopulateAvailableFieldsFormLink(arrNavParams, sfxCtrl.Elements[0], tnChild);
                    tnChild.IsExpanded = true;
                }
                if (tnChild.Elements.length > 0) {
                    tnNode.Elements.push(tnChild);
                    tnNode.IsExpanded = true;
                }
            }
            else if (sfxCtrl.Name == "sfwTabContainer") {
                if (sfxCtrl.Elements.length > 0 && sfxCtrl.Elements[0].Name == "Tabs") {
                    var sfxTabs = sfxCtrl.Elements[0];

                    angular.forEach(sfxTabs.Elements, iterateTabSheet);
                }
            }
            else if (sfxCtrl.Name == "sfwWizard") {

                angular.forEach(sfxCtrl.Elements, iterateWizardItems);

            }
            else if (sfxCtrl.Name == "sfwTextBox" || sfxCtrl.Name == "sfwDropDownList") {
                var strId = sfxCtrl.dictAttributes.ID;
                if (strId != undefined && strId != "") {
                    var tnControl = { ID: strId, IsExpanded: false, IsSelected: false, IsCheckBoxVisible: true, Elements: [] };
                    if (arrNavParams) {
                        angular.forEach(arrNavParams, function (str) {
                            if (str == strId) {
                                tnControl.IsSelected = true;
                            }
                        });
                    }
                    tnNode.Elements.push(tnControl);
                }
            }
        }

        angular.forEach(objItems.Elements, iterateItems);
    };
    //#endregion

    //#region Call Init Methods
    $scope.Init();
    //#endregion

}]);
app.controller("TooltipNavigationParameterController", ["$scope", "$rootScope", "$filter", "$EntityIntellisenseFactory", function ($scope, $rootScope, $filter, $EntityIntellisenseFactory) {

    $scope.SelectedObject.IsShowAllControl = false;
    $scope.currentPanel;
    $scope.ParameterCollection = [];
    $scope.MethodParameterCollection = [];
    $scope.XmlParameterCollection = [];
    $scope.EntityFieldCollection = [];
    $scope.thisQuery;
    $scope.TargetFormCaption = "Target Form :";
    $scope.TargetForm = "";

    //#region Init Methods
    $scope.Init = function () {
        var curscope = getCurrentFileScope();
        if (curscope.CurrPanel) {
            $scope.currentPanel = curscope.CurrPanel;
        }
        else if (curscope.MainTable) {
            $scope.currentPanel = curscope.MainTable;
        }
        else if (curscope.objQueryForm) {
            var lstTable = curscope.objQueryForm.Elements.filter(function (x) { return x.Name == "sfwTable"; });
            if (lstTable && lstTable.length > 0) {
                $scope.currentPanel = lstTable[0];
            }
        }

        $scope.ParameterCollection = [];

        if ($scope.SelectedObject.IsChildOfGrid) {
            $scope.TargetForm = $scope.SelectedObject.dictAttributes.sfwActiveForm;
        }
        //Active Form

        if ($scope.TargetForm) {
            $scope.TargetFormCaption = "Target Form :";
            $.connection.hubMain.server.getSingleFileDetail($scope.TargetForm).done(function (filedata) {
                $scope.receiveSingleFileDetail(filedata);
            });
        }

        $.connection.hubForm.server.getGlobleParameters().done(function (data) {
            $scope.$apply(function () {
                $scope.objGlobleParameters = data;
                $scope.PopulateGlobalParameters();
            });
        });
        if ($scope.formobject && $scope.formobject.dictAttributes) {
            if ($scope.formobject.dictAttributes.sfwType == "FormLinkMaintenance" || $scope.formobject.dictAttributes.sfwType == "FormLinkLookup" || $scope.formobject.dictAttributes.sfwType == "FormLinkWizard") {
                $scope.PopulateAvailableFieldsForFormLink(undefined);
            }
            else {
                $scope.PopulateAvailableFields();
            }
        }
    };
    $scope.receiveSingleFileDetail = function (data) {
        $scope.sigleFileDetail = data;
        $scope.$apply(function () {
            $scope.newFormModel = data;
            if ($scope.newFormModel) {
                var methodName;
                var lstInitialLoad = $scope.newFormModel.Elements.filter(function (itm) { return itm.Name == "initialload"; });
                if (lstInitialLoad && lstInitialLoad.length > 0) {
                    var objInitialLoad = lstInitialLoad[0];
                    var lstMethod = objInitialLoad.Elements.filter(function (itm) { return itm.Name == "callmethods"; });
                    if (lstMethod && lstMethod.length > 0) {
                        methodName = lstMethod[0].dictAttributes.sfwMethodName;
                    }
                }
                if (methodName) {
                    var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                    var EntityObject = entityIntellisenseList.filter(function (x) { return x.ID == $scope.newFormModel.dictAttributes.sfwEntity; })[0];
                    var vrParCollection = [];
                    var strParamField = "";
                    var strParamValue = "";
                    var blnConstant = false;
                    if (EntityObject.XmlMethods && EntityObject.XmlMethods.length > 0 && methodName) {

                        for (i = 0; i < EntityObject.XmlMethods.length; i++) {
                            if (EntityObject.XmlMethods[i].ID == methodName) {
                                for (j = 0; j < EntityObject.XmlMethods[i].Parameters.length; j++) {
                                    var objParameter = { ParameterField: EntityObject.XmlMethods[i].Parameters[j].ID, ParameterValue: EntityObject.XmlMethods[i].Parameters[j].Value, Constants: false };
                                    $scope.XmlParameterCollection.push(objParameter);
                                }
                            }
                        }
                    }
                    $scope.PopulateParamValues($scope.XmlParameterCollection);
                }
            }
        });

        $scope.$evalAsync(function () {
            $rootScope.IsLoading = false;
        });

    };

    $scope.PopulateGlobalParameters = function () {
        function iAddInobjGlobalParam(itm) {
            if (itm.dictAttributes && itm.dictAttributes.ID) {
                var strFieldName = itm.dictAttributes.ID;
                if (!globalParameters.filter(function (itm) { return itm == strFieldName.trim(); })) {
                    globalParameters.push(strFieldName.trim());
                }
                // objGlobalParam.Children.Add(new clsAvailableControl { ControlName = strFieldName });
                var mainItem = { ID: "~" + strFieldName, IsExpanded: false, IsSelected: false, Elements: [] };
                objGlobalParam.Elements.push(mainItem);
            }
        }
        if ($scope.objGlobleParameters && $scope.objGlobleParameters.Elements.length > 0) {
            var objGlobalParam = { ID: "Global Parameters", IsExpanded: false, IsSelected: false, Elements: [] };
            var globalParameters = [];

            angular.forEach($scope.objGlobleParameters.Elements, iAddInobjGlobalParam);
            if (objGlobalParam.Elements.length > 0) {
                $scope.EntityFieldCollection.push(objGlobalParam);
            }
            console.log("PopulateGlobalParameters ", $scope.EntityFieldCollection);
        }
    };
    $scope.PopulateParamValues = function (ParameterCollection) {
        var istrParameters = $scope.SelectedObject.dictAttributes.sfwNavigationParameter;
        if (istrParameters) {
            var alParams = istrParameters.split(';');
            angular.forEach(alParams, function (strParam) {
                var strParamField = strParam;
                var strParamsValue = strParam;
                var blnConstant = false;
                if (strParam.contains("=")) {
                    strParamField = strParam.substring(0, strParam.indexOf('='));
                    strParamsValue = strParam.substring(strParam.indexOf('=') + 1);
                    if (strParamsValue.match("^#")) {
                        strParamsValue = strParamsValue.substring(1);
                        blnConstant = true;
                    }
                }
                angular.forEach(ParameterCollection, function (objParameter) {
                    if (objParameter.ParameterField && strParamField && objParameter.ParameterField.toLowerCase() == strParamField.toLowerCase()) {
                        objParameter.ParameterValue = strParamsValue;
                        objParameter.Constants = blnConstant;
                    }
                });
            });
        }
    };


    //#endregion

    //#region Populate Entity Fields In Left section
    $scope.PopulateAvailableFields = function () {
        $scope.EntityFieldCollection = [];
        var mainItem = { ID: "Main", IsExpanded: false, IsSelected: false, Elements: [] };
        $scope.IsLookup = $scope.formobject.dictAttributes.sfwType == 'Lookup' ? true : false;
        $scope.blnIsReport = $scope.formobject.dictAttributes.sfwType == 'Report' ? true : false;
        $scope.blnIsCorr = $scope.formobject.dictAttributes.sfwType == 'Correspondence' ? true : false;
        var strProperty;
        if ($scope.SelectedObject.dictAttributes.sfwMethodName == "btnNew_Click") {
            strProperty = "ID";
        }
        else if ($scope.IsLookup)
            strProperty = "sfwDataField";
        else if ($scope.blnIsReport || $scope.blnIsCorr) {
            strProperty = "ID";
        }
        else
            strProperty = "sfwEntityField";

        if ($scope.SelectedObject.Name == "sfwOpenDetail") {
            if ($scope.SelectedObject.dictAttributes.sfwQueryID) {
                var lst = $scope.SelectedObject.dictAttributes.sfwQueryID.split('.');
                if (lst && lst.length == 2) {
                    var entityName = lst[0];
                    var strQueryID = lst[1];
                    var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                    var lstEntity = $filter('filter')(entityIntellisenseList, { ID: entityName }, true);
                    if (lstEntity && lstEntity.length > 0) {
                        var objEntity = lstEntity[0];
                        var lstQuery = objEntity.Queries.filter(function (x) { return x.ID == strQueryID; });
                        if (lstQuery && lstQuery.length > 0) {
                            var objQuery = lstQuery[0];
                            $.connection.hubForm.server.getEntityQueryColumns($scope.SelectedObject.dictAttributes.sfwQueryID, "TooltipNavigationParameterController").done(function (data) {
                                $scope.receiveQueryColumns(data);
                            });
                        }
                    }
                }
            }
        }
        else {
            if ($scope.SelectedObject.IsShowAllControl == true) {

                var table;
                for (var i = 0; i < $scope.formobject.Elements.length; i++) {
                    if ($scope.formobject.Elements[i].Name == "sfwTable") {
                        table = $scope.formobject.Elements[i];
                        break;
                    }
                }

                $scope.PopulateControls(table, mainItem, strProperty);
            }
            else {
                if ($scope.blnIsReport || $scope.blnIsCorr) {
                    $scope.PopulateControls($scope.currentPanel, mainItem, strProperty);
                }
                else {
                    $scope.PopulateControls($scope.currentPanel.Elements[0], mainItem, strProperty);
                }
            }
            $scope.EntityFieldCollection.push(mainItem);
        }

    };

    $scope.receiveQueryColumns = function (data) {
        $scope.$evalAsync(function () {
            var mainItem = { ID: $scope.SelectedObject.dictAttributes.sfwQueryID, IsSelected: false, Elements: [] };
            for (var i = 0; i < data.length; i++) {
                var tnChild = { ID: data[i].CodeID, IsSelected: false, Elements: [] };
                mainItem.Elements.push(tnChild);
            }
            $scope.EntityFieldCollection.push(mainItem);
        });
    };

    $scope.PopulateControls = function (asfxTable, tnNode, strProperty) {
        var strTreeCaption = "";

        if (asfxTable) {
            angular.forEach(asfxTable.Elements, function (sfxRow) {
                for (var iCol = 0; iCol < sfxRow.Elements.length; iCol++) {
                    var sfxCell = sfxRow.Elements[iCol];
                    if (sfxCell) {
                        angular.forEach(sfxCell.Elements, function (sfxCtrl) {
                            if (sfxCtrl.Name == "sfwPanel") {

                                strTreeCaption = sfxCtrl.dictAttributes.ID;
                                if (strTreeCaption == "" || strTreeCaption == undefined)
                                    strTreeCaption = sfxCtrl.Name;
                                var tnChild = { ID: strTreeCaption, IsSelected: false, Elements: [] };

                                tnChild.IsExpanded = false;

                                if (sfxCtrl.Elements.length > 0 && sfxCtrl.Elements[0].Name == "sfwTable") {
                                    $scope.PopulateControls(sfxCtrl.Elements[0], tnChild, strProperty);
                                }
                                tnNode.Elements.push(tnChild);
                            }
                            else if (sfxCtrl.Name == "sfwTabContainer") {
                                if (sfxCtrl.Elements.length > 0 && sfxCtrl.Elements[0].Name == "Tabs") {
                                    var sfxTabs = sfxCtrl.Elements[0];
                                    angular.forEach(sfxTabs.Elements, function (sfxTabSheet) {
                                        strTreeCaption = sfxTabSheet.dictAttributes.HeaderText;
                                        if (strTreeCaption == "")
                                            strTreeCaption = sfxTabSheet.dictAttributes.ID;
                                        var tnChild = { ID: strTreeCaption, IsSelected: false, Elements: [] };

                                        if (sfxTabSheet.Elements.length > 0 && sfxTabSheet.Elements[0].Name == "sfwTable") {
                                            $scope.PopulateControls(sfxTabSheet.Elements[0], tnChild, strProperty);
                                        }
                                        if (tnChild.Elements.length > 0) {
                                            tnNode.Elements.push(tnChild);
                                        }

                                    });
                                }
                            }
                            else if (sfxCtrl.Name == "sfwWizard") {
                                angular.forEach(sfxCtrl.Elements, function (objWizard) {
                                    if (objWizard.Name == "HeaderTemplate") {
                                        strTreeCaption = "HeaderTemplate";
                                        var tnChild = { ID: strTreeCaption, IsSelected: false, Elements: [] };
                                        if (objWizard.Elements.length > 0 && objWizard.Elements[0].Name == "sfwTable") {
                                            $scope.PopulateControls(objWizard.Elements[0], tnChild, strProperty);
                                        }
                                        if (tnChild.Elements.length > 0) {
                                            tnNode.Elements.push(tnChild);
                                        }
                                    }
                                    else {
                                        angular.forEach(objWizard.Elements, function (sfxWizardStep) {
                                            strTreeCaption = sfxWizardStep.dictAttributes.Title;
                                            if (strTreeCaption == "")
                                                strTreeCaption = sfxWizardStep.dictAttributes.ID;
                                            var tnChild = { ID: strTreeCaption, IsSelected: false, Elements: [] };
                                            if (sfxWizardStep.Elements.length > 0 && sfxWizardStep.Elements[0].Name == "sfwTable") {
                                                $scope.PopulateControls(sfxWizardStep.Elements[0], tnChild, strProperty);
                                                if (tnChild.Elements.length > 0) {
                                                    tnNode.Elements.push(tnChild);
                                                }
                                            }
                                        });
                                    }
                                });
                            }
                            else if (sfxCtrl.Elements.length > 0 && sfxCtrl.Name == "sfwGridView") {

                                var strGridId = sfxCtrl.dictAttributes.ID;

                                var objControl = { ID: strGridId + " (Data Keys)", IsSelected: false, Elements: [] };
                                tnNode.Elements.push(objControl);

                                if (sfxCtrl.Elements.length > 0 && sfxCtrl.Elements[0].Name == "Columns") {
                                    for (var j = 0; j < sfxCtrl.Elements[0].Elements.length; j++) {
                                        var objTempField = sfxCtrl.Elements[0].Elements[j];
                                        if (objTempField.Elements.length > 0 && objTempField.Elements[0].Name == "ItemTemplate") {
                                            var objItemTempField = objTempField.Elements[0];
                                            angular.forEach(objItemTempField.Elements, function (sfxControl) {
                                                if ("sfwEntityField" in sfxControl.dictAttributes) {
                                                    var strFieldName = "";

                                                    strFieldName = sfxControl.dictAttributes.sfwEntityField;
                                                    if (strFieldName != "" && strFieldName != undefined) {
                                                        objControl.Elements.push({ ID: strFieldName, IsSelected: false, Elements: [] });
                                                    }
                                                }
                                            });
                                        }
                                    }
                                }
                            }
                            else {
                                if (strProperty != undefined && strProperty != "") {
                                    if (!$scope.blnIsReport && !$scope.blnIsCorr) {
                                        if ($scope.IsLookup && !IsCriteriaField(sfxCtrl)) {
                                            strProperty = 'sfwEntityField';
                                        }
                                        if ("sfwDataField" in sfxCtrl.dictAttributes) {
                                            strTreeCaption = sfxCtrl.dictAttributes[strProperty];
                                        }

                                        else if ("sfwEntityField" in sfxCtrl.dictAttributes) {
                                            strTreeCaption = sfxCtrl.dictAttributes[strProperty];
                                        }
                                    }
                                    else {
                                        strTreeCaption = sfxCtrl.dictAttributes[strProperty];
                                    }
                                }
                                else {
                                    strTreeCaption = sfxCtrl.dictAttributes.ID;
                                }
                                if (strTreeCaption != "" && strTreeCaption != undefined) {
                                    //strTreeCaption = sfxCtrl.Name;
                                    if (!tnNode.Elements.some(function (itm) { return itm.ID == strTreeCaption; })) {
                                        var tnControl = { ID: strTreeCaption, Elements: [] };
                                        tnNode.Elements.push(tnControl);
                                    }
                                }
                            }

                        });
                    }
                }
            });
        }
    };

    //#endregion


    //#region Form Link
    $scope.PopulateAvailableFieldsForFormLink = function (strPropID) {
        $scope.EntityFieldCollection = [];
        if ($scope.formobject) {
            var arrIDs = [];
            var istrValue = $scope.formobject.dictAttributes.sfwType;
            var blnIsLookup = istrValue.toUpperCase().trim() == "FORMLINKLOOKUP";

            $scope.SourceForm = $scope.formobject.dictAttributes.ID;

            var strProperty;
            if ($scope.IsFormCodeGroup || ($scope.SelectedObject.dictAttributes.sfwMethodName && $scope.SelectedObject.dictAttributes.sfwMethodName == "btnNew_Click") || $scope.SelectedObject.Name == "sfwCascadingDropDownList" || $scope.SelectedObject.Name == "sfwSeries") {
                strProperty = "ID";
            }
            else if (blnIsLookup)
                strProperty = "sfwDataField";
            else
                strProperty = "sfwEntityField";

            var objControl = { ID: "Main", IsExpanded: false, IsSelected: false, Elements: [] };

            var objItems = $scope.GetItemsModel();
            if (objItems) {
                if (strPropID != undefined && strPropID != "") {
                    $scope.PopulateChildIDsFormLink(strPropID, objItems, arrIDs);
                }
                $scope.PopulateAvailableFieldsFormLink(strProperty, objItems, objControl.Elements, arrIDs, strPropID);
            }

            if (objControl.Elements.length > 0)
                $scope.EntityFieldCollection.push(objControl);
        }
    };


    $scope.GetItemsModel = function () {
        var retVal;

        retVal = $scope.formobject.Elements.filter(function (item) {
            return item.Name == "items";
        });

        if (retVal && retVal.length > 0) {
            return retVal[0];
        }
        return retVal;
    };

    $scope.PopulateChildIDsFormLink = function (strPropID, sfxTable, arrID) {
        function iterator(sfxCtrl) {
            if (sfxCtrl._dictAttributes.hasOwnProperty("sfwParentControl")) {
                var strID = sfxCtrl.dictAttributes.ID;
                var strParentID = sfxCtrl.dictAttributes.sfwParentControl;
                if (strParentID == strPropID) {
                    arrID.push(strID);
                    PopulateChildIDsFormLink(strID, sfxCtrl, arrID);
                }
            }
        }
        if (sfxTable) {

            angular.foreach(sfxTable.Elements, iterator);
        }
    };

    $scope.PopulateAvailableFieldsFormLink = function (strProperty, sfxTable, list, arrIDs, strPropID) {
        var i = 0;
        function iteratorarrIDs(strID) {
            if (strID == strCtrlID) {
                blnAdd = false;
                return;
            }
        }

        function iterateWizardSteps(sfxWizardStep) {
            strTreeCaption = sfxWizardStep.dictAttributes.Title;
            if (strTreeCaption == "" || strTreeCaption == undefined)
                strTreeCaption = sfxWizardStep.dictAttributes.ID;
            list.push({ ID: strTreeCaption, Elements: [], IsExpanded: false, IsSelected: false });
            if (sfxWizardStep.Elements.length > 0) {
                $scope.PopulateAvailableFieldsFormLink(strProperty, sfxWizardStep.Elements[0], list[i].Elements, arrIDs, strPropID);
                if (list[i].Elements.length == 0) {
                    list.splice(i, 1);
                }
                else {
                    i++;
                }
            }
        }
        function iterateWizardItems(objWizard) {
            if (objWizard.Name == "HeaderTemplate") {
                strTreeCaption = "HeaderTemplate";
                list.push({ ID: strTreeCaption, Elements: [], IsExpanded: false, IsSelected: false });
                if (objWizard.Elements.length > 0) {
                    $scope.PopulateAvailableFieldsFormLink(strProperty, objWizard.Elements[0], list[i].Elements, arrIDs, strPropID);
                }
                if (list[i].Elements.length == 0) {
                    list.splice(i, 1);
                }
                else {
                    i++;
                }

            }
            else {
                angular.forEach(objWizard.Elements, iterateWizardSteps);
            }
        }
        function iterateTabSheet(sfxTabSheet) {
            strTreeCaption = sfxTabSheet.dictAttributes.HeaderText;
            if (strTreeCaption == "" || strTreeCaption == undefined)
                strTreeCaption = sfxTabSheet.dictAttributes.ID;
            list.push({ ID: strTreeCaption, Elements: [], IsExpanded: false, IsSelected: false });
            if (sfxTabSheet.Elements.length > 0) {
                $scope.PopulateAvailableFieldsFormLink(strProperty, sfxTabSheet.Elements[0], list[i].Elements, arrIDs, strPropID);
            }
            if (list[i].Elements.length == 0) {
                list.splice(i, 1);
            }
            else {
                i++;
            }
        }


        function iterator(sfxCtrl) {
            {
                var strTreeCaption = "";

                if (sfxCtrl.Name == "items") {
                    $scope.PopulateAvailableFieldsFormLink(strProperty, sfxCtrl, list[i].Elements, arrIDs, strPropID);
                }
                else if (sfxCtrl.Name == "sfwPanel" || sfxCtrl.Name == "sfwDialogPanel") {
                    strTreeCaption = sfxCtrl.dictAttributes.sfwCaption;
                    if (strTreeCaption == "" || strTreeCaption == undefined)
                        strTreeCaption = sfxCtrl.dictAttributes.ID;
                    list.push({ ID: strTreeCaption, Elements: [], IsExpanded: false, IsSelected: false });
                    if (sfxCtrl.Elements.length > 0) {
                        $scope.PopulateAvailableFieldsFormLink(strProperty, sfxCtrl.Elements[0], list[i].Elements, arrIDs, strPropID);
                    }
                    if (list[i].Elements.length == 0) {
                        list.splice(i, 1);
                    }
                    else {
                        i++;
                    }
                }
                else if (sfxCtrl.Name == "sfwTabContainer") {
                    if (sfxCtrl.Elements.length > 0 && sfxCtrl.Elements[0].Name == "Tabs") {
                        var sfxTabs = sfxCtrl.Elements[0];
                        angular.forEach(sfxTabs.Elements, iterateTabSheet);
                    }
                }
                else if (sfxCtrl.Name == "sfwWizard") {
                    angular.forEach(sfxCtrl.Elements, iterateWizardItems);
                }
                else if (sfxCtrl.Name == "sfwGridView" && ($scope.SelectedObject.Name != "sfwTextBox")) {
                    var strGridId = sfxCtrl.dictAttributes.ID;

                    var objControl = { ID: strGridId + " (Data Keys)", Elements: [], IsSelected: false, IsExpanded: false };
                    list.push(objControl);

                    var strDataKeys = sfxCtrl.dictAttributes.sfwDataKeyNames;
                    if (strDataKeys)
                        var strDataKeyNames = strDataKeys.split(",");

                    if (sfxCtrl.Elements.length > 0 && sfxCtrl.Elements[0].Name == "Columns") {
                        for (var j = 0; j < sfxCtrl.Elements[0].Elements.length; j++) {
                            var objTempField = sfxCtrl.Elements[0].Elements[j];
                            if (objTempField.Elements.length > 0 && objTempField.Elements[0].Name == "ItemTemplate") {
                                var objItemTempField = objTempField.Elements[0];
                                angular.forEach(objItemTempField.Elements, function (sfxControl) {
                                    if ("sfwEntityField" in sfxControl.dictAttributes) {
                                        var strFieldName = "";
                                        if (strPropID != "" && strPropID != undefined) {
                                            strFieldName = sfxCtrl.dictAttributes.ID;
                                        }
                                        else {
                                            strFieldName = sfxControl.dictAttributes.sfwEntityField;
                                        }
                                        //strFieldName = sfxControl.dictAttributes.sfwDataField;
                                        if (strFieldName != undefined && strFieldName != "") {
                                            objControl.Elements.push({ ID: strFieldName, Elements: [], IsSelected: false, IsExpanded: false });
                                        }
                                    }
                                });
                            }
                        }
                    }
                }
                else if (strProperty in sfxCtrl.dictAttributes) {
                    var blnAdd = true;
                    var strCtrlID = sfxCtrl.dictAttributes.ID;

                    angular.forEach(arrIDs, iteratorarrIDs);
                    if (blnAdd) {
                        var strFieldName = "";
                        if (strPropID != undefined && strPropID != "") {
                            strFieldName = sfxCtrl.dictAttributes.ID;
                        }
                        else {
                            strFieldName = sfxCtrl.dictAttributes[strProperty];
                        }
                        if (strFieldName != undefined && strFieldName != "" && sfxCtrl.Name != "sfwButton") {
                            list.push({ ID: strFieldName, Elements: [], IsSelected: false, IsExpanded: false });
                            i++;
                        }
                    }
                }
            }
        }

        if (sfxTable != null) {
            angular.forEach(sfxTable.Elements, iterator);
        }
    };

    //#endregion

    //#region Populate Lookup Panel Criteria When Selected ActiveFormType is Lookup, In Approve Button
    var vrLookupField = [];
    $scope.PanelCriteria;

    $scope.XmlParameterCollection = [];

    //#endregion

    //#region Common Functionality
    $scope.showAllControlChange = function (event) {
        $scope.PopulateAvailableFields();
        $scope.PopulateGlobalParameters();
    };

    $scope.ExpandCollapsedControl = function (field, event) {
        field.IsExpanded = !field.IsExpanded;
    };

    $scope.SelectFieldClick = function (field, event) {
        $scope.SelectedField = field;
        if (event) {
            event.stopPropagation();
        }
    };

    $scope.SetFieldClass = function (obj) {
        if (obj == $scope.SelectedField) {
            return "selected";
        }
    };
    //#endregion

    //#region When dialog close on Ok and Cancel button
    $scope.strSelectedParameters;
    $scope.onOkClick = function () {
        var strCustomAttribute = "";
        if ($scope.XmlParameterCollection.length > 0) {
            strCustomAttribute = $scope.GetSavedString($scope.XmlParameterCollection);
        }

        if (strCustomAttribute != undefined) {
            $rootScope.EditPropertyValue($scope.SelectedObject.dictAttributes.sfwNavigationParameter, $scope.SelectedObject.dictAttributes, "sfwNavigationParameter", strCustomAttribute);
        }
        $scope.onCancelClick();
    };

    $scope.onCancelClick = function () {
        $scope.NavigationParameterDialog.close();
    };

    $scope.GetSavedString = function (ParameterCollection) {
        var strReturn = "";
        angular.forEach(ParameterCollection, function (objParams) {
            var strParamField = objParams.ParameterField;
            var strParamValue = objParams.ParameterValue;
            if (strParamValue != "" && strParamField != undefined) {
                if ((strParamValue != undefined && strParamValue != "") && (strParamField != undefined && strParamField != "")) {
                    var blnConstatnt = objParams.Constants;

                    if (blnConstatnt) {
                        strParamValue = "#" + strParamValue;
                    }

                    var strParam = strParamValue;

                    if (strParamValue.toLowerCase() != strParamField.toLowerCase()) {
                        strParam = strParamField + '=' + strParamValue;
                    }

                    if (strReturn == "") {
                        strReturn = strParam;
                    }
                    else {
                        strReturn += ';' + strParam;
                    }
                }
            }
        });
        return strReturn;
    };
    //#endregion

    $scope.Init();
}]);

app.controller("ClientVisibilityController", ["$scope", "$rootScope", "$filter", "ngDialog", "$EntityIntellisenseFactory", "$SgMessagesService", function ($scope, $rootScope, $filter, ngDialog, $EntityIntellisenseFactory, $SgMessagesService) {

    //#region Variables
    $scope.FieldCollection = [];
    $scope.ControlCollection = [];
    $scope.SavedControlList = [];
    $scope.arrSavedControlIdList = [];
    $scope.CodeValues = [];
    $scope.lstQryField = [];
    $scope.lstItems = [];
    //#endregion

    //#region Init Methods

    $scope.InitForm = function () {

        $scope.IsWizard = $scope.formobject.dictAttributes.sfwType == 'Wizard' ? true : false;
        $scope.SetClientVisibility();
        $scope.ClientVisibility = $scope.model.dictAttributes[$scope.strAttributeName];

        $scope.LoadSavedData();

        angular.forEach($scope.SavedControlList, function (sfxClntData) {
            angular.forEach(sfxClntData.arrVisibleControl, function (lbItem) {
                if (lbItem.Content) {
                    if (!$scope.ControlCollection.some(function (itm) { return itm.Content == lbItem.Content; })) {
                        $scope.ControlCollection.push({ Content: lbItem.Content });
                    }
                }
            });
        });

        angular.forEach($scope.arrSavedControlIdList, function (str) {
            if (str) {
                if (!$scope.ControlCollection.some(function (itm) { return itm.Content == str; })) {
                    $scope.ControlCollection.push({ Content: str });
                }
            }
        });

        $scope.PopulateAvailableFields();
        $scope.SetRemoveButtonText();
    };

    $scope.InitFormLink = function () {
        $scope.IsWizard = $scope.formobject.dictAttributes.sfwType == 'Wizard' ? true : false;
        $scope.SetClientVisibility();
        $scope.ClientVisibility = $scope.model.dictAttributes[$scope.strAttributeName];
        $scope.LoadSavedData();

        angular.forEach($scope.SavedControlList, function (sfxClntData) {
            angular.forEach(sfxClntData.arrVisibleControl, function (lbItem) {
                if (lbItem.Content) {
                    if (!$scope.ControlCollection.some(function (itm) { return itm.Content == lbItem.Content; })) {
                        $scope.ControlCollection.push({ Content: lbItem.Content });
                    }
                }
            });
        });

        angular.forEach($scope.arrSavedControlIdList, function (str) {
            if (str) {
                if (!$scope.ControlCollection.some(function (itm) { return itm.Content == str; })) {
                    $scope.ControlCollection.push({ Content: str });
                }
            }
        });

        $scope.PopulateHtxAvailableFields();
        $scope.SetRemoveButtonText();

    };
    //#endregion

    //#region Common Methods
    //#region Set client Visibility Implementation

    $scope.SetClientVisibility = function () {
        $scope.CodeValues.push({ CodeValue: "default", CodeValueDescription: "default" });// default value for Code
        $scope.lstQryField.push({ CodeID: "default", CodeValue: "default" });//default value for Query


        if ($scope.model.dictAttributes.sfwLoadType == 'CodeGroup') {
            $scope.CheckAndPopulateCodeIDValues($scope.formobject);
        }
        else if ($scope.model.dictAttributes.sfwLoadType == 'Query') {
            $scope.GetQuerySchema($scope.model.dictAttributes.sfwLoadSource);
        }
        else if ($scope.model.dictAttributes.sfwLoadType == 'Items') {
            if ($scope.model.Elements.length > 0) {
                $scope.GetItemsList($scope.model);
            }
        }
    };
    //#endregion
    $scope.CheckAndPopulateCodeIDValues = function (formObj) {
        if ($scope.model.dictAttributes.sfwLoadSource) {
            $.connection.hubMain.server.getCodeValues("ScopeId_" + $scope.$id, $scope.model.dictAttributes.sfwLoadSource);
        }
        else if ($scope.model.placeHolder) {
            $.connection.hubMain.server.getCodeValues("ScopeId_" + $scope.$id, $scope.model.placeHolder);
        }

    };

    $scope.receiveList = function (data) {
        $scope.$evalAsync(function () {
            if (data && data.length > 0) {
                if ($scope.CodeValues && $scope.CodeValues.length > 0) {
                    $scope.CodeValues = $scope.CodeValues.concat(data);
                } else {
                    $scope.CodeValues = data;
                }
            }
        });
    };

    $scope.LoadSavedData = function () {
        var objSfxClntVisiblityData;

        if ($scope.ClientVisibility != undefined && $scope.ClientVisibility != "") {
            var arrControlList = $scope.ClientVisibility.split("#");

            arrControlList[0] = arrControlList[0].substring(arrControlList[0].indexOf(":") + 1);
            var strTotalControls = arrControlList[0].split(",");
            for (var i = 0; i < strTotalControls.length; i++) {
                $scope.arrSavedControlIdList.push(strTotalControls[i]);
            }
            var iblnIsDefaultRowExists = false;
            if (arrControlList.length > 1) {
                var strValues = arrControlList[1].split(";");

                for (var i = 0; i < strValues.length; i++) {
                    if (strValues[i] != undefined && strValues[i] != "") {
                        objSfxClntVisiblityData = { arrVisibleControl: [] };
                        var strInnerValues = strValues[i].split(":");
                        objSfxClntVisiblityData.Value = strInnerValues[0];
                        if ($scope.lstItems && $scope.lstItems.length > 0) {
                            var items = $scope.lstItems.filter(function (x) { return x.dictAttributes.Value && x.dictAttributes.Value == strInnerValues[0] });
                            if (items && items.length > 0) {
                                objSfxClntVisiblityData.Value = items[0].dictAttributes.Text;
                            }

                        }
                        
                        if (objSfxClntVisiblityData.Value.trim() == "default") {
                            iblnIsDefaultRowExists = true;
                        }
                        if (strInnerValues.length > 1) {
                            var strVisibleControls = strInnerValues[1].split(",");
                            for (var j = 0; j < strVisibleControls.length; j++) {
                                var lbItem = {};

                                lbItem.Content = strVisibleControls[j];
                                objSfxClntVisiblityData.arrVisibleControl.push(lbItem);
                            }
                        }
                        $scope.SavedControlList.push(objSfxClntVisiblityData);
                    }
                }
            }
            if (!iblnIsDefaultRowExists && $scope.SavedControlList.length == 0) {
                objSfxClntVisiblityData = { arrVisibleControl: [] };
                objSfxClntVisiblityData.Value = "default";
                $scope.SavedControlList.push(objSfxClntVisiblityData);
            }
        }
    };

    $scope.PopulateAvailableFields = function () {

        $scope.FieldCollection = [];
        var iblnCtrlFound = false;
        var mainItem = { Text: $scope.formobject.dictAttributes.ID, IsExpanded: true, IsSelected: false, Items: [], IsCheckBoxVisible: false };
        var table;
        if ($scope.IsWizard || $scope.formobject.dictAttributes.sfwType == "Correspondence") {
            if ($scope.CurrentTable) {
                table = $scope.CurrentTable;
            }
        }
        else {
            for (var i = 0; i < $scope.formobject.Elements.length; i++) {
                if ($scope.formobject.Elements[i].Name == "sfwTable") {
                    table = $scope.formobject.Elements[i];
                    break;
                }
            }
        }

        $scope.PopulateControls(table, mainItem, iblnCtrlFound);
        //$scope.PopulateControls($rootScope.MainTable, mainItem, iblnCtrlFound);
        if (mainItem) {
            $scope.FieldCollection.push(mainItem);
        }
    };

    $scope.PopulateControls = function (asfxTable, tnNode, iblnCtrlFound) {
        var strTreeCaption = "";
        if (asfxTable) {
            strTreeCaption = asfxTable.dictAttributes.ID; //[ApplicationConstants.XMLFacade.ID].Trim();
            if (strTreeCaption == "" || strTreeCaption == undefined)
                strTreeCaption = asfxTable.Name; //.istrControlClass;
            var tnTable = { Text: strTreeCaption, IsSelected: false, Items: [], IsCheckBoxVisible: true };
            if ($scope.arrSavedControlIdList && $scope.arrSavedControlIdList.length > 0 && $scope.arrSavedControlIdList.some(function (x) { return x == strTreeCaption; })) {
                var index = $scope.arrSavedControlIdList.indexOf(strTreeCaption);
                $scope.arrSavedControlIdList.splice(index, 1);
                tnTable.IsSelected = true;
            }
            angular.forEach(asfxTable.Elements, function (sfxRow) {
                for (var iCol = 0; iCol < sfxRow.Elements.length; iCol++) {
                    var sfxCell = sfxRow.Elements[iCol];
                    if (sfxCell) {
                        angular.forEach(sfxCell.Elements, function (sfxCtrl) {
                            if (sfxCtrl == $scope.model) {
                                iblnCtrlFound = true;
                            }
                            if (sfxCtrl.dictAttributes.ID == "" || sfxCtrl.dictAttributes.ID == undefined) {

                            }
                            else {
                                if (sfxCtrl.Name == "sfwPanel" || sfxCtrl.Name == "sfwDialogPanel") {
                                    strTreeCaption = sfxCtrl.dictAttributes.ID; //[ApplicationConstants.XMLFacade.ID].Trim();
                                    if (strTreeCaption == "" || strTreeCaption == undefined)
                                        strTreeCaption = sfxCtrl.Name;
                                    var tnChild = { Text: strTreeCaption, IsSelected: false, Items: [], IsCheckBoxVisible: true };
                                    if ($scope.arrSavedControlIdList && $scope.arrSavedControlIdList.length > 0 && $scope.arrSavedControlIdList.some(function (x) { return x == strTreeCaption; })) {
                                        var index = $scope.arrSavedControlIdList.indexOf(strTreeCaption);
                                        $scope.arrSavedControlIdList.splice(index, 1);
                                        tnChild.IsSelected = true;
                                    }
                                    if (!iblnCtrlFound) {
                                        // tnChild.IsExpanded = true;
                                    }
                                    if (sfxCtrl.Elements.length > 0 && sfxCtrl.Elements[0].Name == "sfwTable") {
                                        $scope.PopulateControls(sfxCtrl.Elements[0], tnChild, iblnCtrlFound);
                                    }
                                    tnTable.Items.push(tnChild);
                                }
                                else if (sfxCtrl.Name == "sfwWizard") {
                                    strTreeCaption = sfxCtrl.dictAttributes.ID; //[ApplicationConstants.XMLFacade.ID].Trim();
                                    if (strTreeCaption == "" || strTreeCaption == undefined)
                                        strTreeCaption = sfxCtrl.Name;
                                    var tnWizardCtrl = { Text: strTreeCaption, Items: [], IsCheckBoxVisible: true };
                                    if ($scope.arrSavedControlIdList && $scope.arrSavedControlIdList.length > 0 && $scope.arrSavedControlIdList.some(function (x) { return x == strTreeCaption; })) {
                                        var index = $scope.arrSavedControlIdList.indexOf(strTreeCaption);
                                        $scope.arrSavedControlIdList.splice(index, 1);
                                        //arrSavedControlIdList.Remove(strTreeCaption);
                                        tnWizardCtrl.IsSelected = true;
                                    }

                                    var tnWizardStep = { Text: "WizardStep", Items: [], IsCheckBoxVisible: true };
                                    tnWizardCtrl.Items.push(tnWizardStep);
                                    angular.forEach(sfxCtrl.Elements, function (objWizard) {
                                        if (objWizard.Name == "HeaderTemplate") {
                                            var tnWizardHeader = { Text: "HeaderTemplate", Items: [], IsCheckBoxVisible: true };
                                            if (objWizard.Elements.length > 0 && objWizard.Elements[0].Name == "sfwTable") {
                                                $scope.PopulateControls(objWizard.Elements[0], tnWizardHeader, iblnCtrlFound);
                                            }
                                            tnWizardCtrl.Items.push(tnWizardHeader);

                                        }
                                        else if (objWizard.Name == "WizardSteps") {
                                            angular.forEach(objWizard.Elements, function (SfxWizardStep) {
                                                strTreeCaption = SfxWizardStep.dictAttributes.ID; //[ApplicationConstants.XMLFacade.ID].Trim();
                                                if (strTreeCaption == "" || strTreeCaption == undefined)
                                                    strTreeCaption = SfxWizardStep.Name;
                                                var tnChild = { Text: strTreeCaption, Items: [], IsCheckBoxVisible: true };
                                                if ($scope.arrSavedControlIdList && $scope.arrSavedControlIdList.length > 0 && $scope.arrSavedControlIdList.some(function (x) { return x == strTreeCaption; })) {
                                                    var index = $scope.arrSavedControlIdList.indexOf(strTreeCaption);
                                                    $scope.arrSavedControlIdList.splice(index, 1);
                                                    //arrSavedControlIdList.Remove(strTreeCaption);
                                                    tnChild.IsSelected = true;
                                                }
                                                if (SfxWizardStep.Elements.length > 0 && SfxWizardStep.Elements[0].Name == "sfwTable") {
                                                    $scope.PopulateControls(SfxWizardStep.Elements[0], tnChild, iblnCtrlFound);
                                                }
                                                tnWizardStep.Items.push(tnChild);
                                            });

                                        }
                                        else {
                                            var tnWizardSideBar = { Text: "SideBarTemplate", Items: [], IsCheckBoxVisible: true };
                                            if (objWizard.Elements.length > 0 && objWizard.Elements[0].Name == "sfwTable") {
                                                $scope.PopulateControls(objWizard.Elements[0], tnWizardSideBar, iblnCtrlFound);
                                            }
                                            tnWizardCtrl.Items.push(tnWizardSideBar);
                                        }

                                    });
                                    tnTable.Items.push(tnWizardCtrl);
                                }
                                else if (sfxCtrl.Name == "sfwTabContainer") {
                                    strTreeCaption = sfxCtrl.dictAttributes.ID;  //[ApplicationConstants.XMLFacade.ID].Trim();
                                    if (strTreeCaption == "" || strTreeCaption == undefined)
                                        strTreeCaption = sfxCtrl.Name;
                                    var tnTab = { Text: strTreeCaption, Items: [], IsCheckBoxVisible: true };
                                    if ($scope.arrSavedControlIdList && $scope.arrSavedControlIdList.length > 0 && $scope.arrSavedControlIdList.some(function (x) { return x == strTreeCaption; })) {
                                        var index = $scope.arrSavedControlIdList.indexOf(strTreeCaption);
                                        $scope.arrSavedControlIdList.splice(index, 1);
                                        // $scope.arrSavedControlIdList.Remove(strTreeCaption);
                                        tnTab.IsSelected = true;
                                    }
                                    if (sfxCtrl.Elements.length > 0 && sfxCtrl.Elements[0].Name == "Tabs") {
                                        var sfxTabs = sfxCtrl.Elements[0];
                                        angular.forEach(sfxTabs.Elements, function (sfxTabSheet) {
                                            strTreeCaption = sfxTabSheet.dictAttributes.ID; //[ApplicationConstants.XMLFacade.ID].Trim();
                                            if (strTreeCaption == "")
                                                strTreeCaption = sfxTabSheet.Name;
                                            var tnChild = { Text: strTreeCaption, Items: [], IsCheckBoxVisible: true };
                                            if ($scope.arrSavedControlIdList && $scope.arrSavedControlIdList.length > 0 && $scope.arrSavedControlIdList.some(function (x) { return x == strTreeCaption; })) {
                                                var index = $scope.arrSavedControlIdList.indexOf(strTreeCaption);
                                                $scope.arrSavedControlIdList.splice(index, 1);
                                                //arrSavedControlIdList.Remove(strTreeCaption);
                                                tnChild.IsSelected = true;
                                            }
                                            if (sfxTabSheet.Elements.length > 0 && sfxTabSheet.Elements[0].Name == "sfwTable") {
                                                $scope.PopulateControls(sfxTabSheet.Elements[0], tnChild, iblnCtrlFound);
                                            }
                                            tnTab.Items.push(tnChild);
                                        });
                                    }
                                    tnTable.Items.push(tnTab);
                                }
                                else {
                                    strTreeCaption = sfxCtrl.dictAttributes.ID; //[ApplicationConstants.XMLFacade.ID].Trim();
                                    if (strTreeCaption == "" || strTreeCaption == undefined)
                                        strTreeCaption = sfxCtrl.Name;
                                    var tnControl = { Text: strTreeCaption, Items: [], IsCheckBoxVisible: true };
                                    tnTable.Items.push(tnControl);
                                    if ($scope.arrSavedControlIdList && $scope.arrSavedControlIdList.length > 0 && $scope.arrSavedControlIdList.some(function (x) { return x == strTreeCaption; })) {
                                        var index = $scope.arrSavedControlIdList.indexOf(strTreeCaption);
                                        $scope.arrSavedControlIdList.splice(index, 1);
                                        //arrSavedControlIdList.Remove(strTreeCaption);
                                        tnControl.IsSelected = true;
                                    }
                                }
                            }
                        });
                    }
                }
            });
            tnNode.Items.push(tnTable);
        }
    };

    $scope.SetRemoveButtonText = function () {
        if ($scope.strAttributeName == "sfwClientEnable") {
            $scope.StrRemoveButtonText = "Remove Client Enable ";
            $scope.StrControlHeader = "Enabled Control(s)";
        }
        else if ($scope.strAttributeName == "sfwClientVisibility") {
            $scope.StrRemoveButtonText = "Remove Client Visibility";
            $scope.StrControlHeader = "Visible Control(s)";
        }


    };

    $scope.GetQuerySchema = function (queryId) {
        if ($scope.model.dictAttributes.sfwLoadSource) {

            $.connection.hubForm.server.getQueryColumnValues($scope.model.dictAttributes.sfwLoadSource, $scope.model.dictAttributes.DataValueField).done(function (data) {
                $scope.$evalAsync(function () {
                    if (data && data.length > 0) {
                        {
                            if ($scope.lstQryField && $scope.lstQryField.length > 0) {
                                $scope.lstQryField = $scope.lstQryField.concat(data);
                            } else {
                                $scope.lstQryField = data;
                            }

                        }
                    }
                });
            });
        }
    };

    $scope.GetItemsList = function (model) {
        angular.forEach(model.Elements, function (itm) {
            if (itm.Name == 'ListItem') {
                $scope.lstItems.push(itm);
            }
        });
        $scope.lstItems.splice(0, 0, { dictAttributes: { Text: 'default' } });

    };


    //#endregion

    //#region Update Data Methods
    $scope.GetDataFromGrid = function () {
        var strCellValue = "";
        var strListValues = "";
        angular.forEach($scope.ControlCollection, function (lvControl) {
            if (strListValues == undefined || strListValues == "") {
                strListValues = lvControl.Content;
            }
            else {
                strListValues = strListValues + "," + lvControl.Content;
            }
        });
        strListValues = "controllist:" + strListValues;
        var strcontrollist = strListValues;
        strListValues = "";
        angular.forEach($scope.SavedControlList, function (data) {
            strCellValue = data.Value;
            if ($scope.lstItems && $scope.lstItems.length > 0) {
                var itmValue = $scope.lstItems.filter(function (x) { return x.dictAttributes.Value && x.dictAttributes.Text == data.Value });
                if (itmValue && itmValue.length > 0) {
                    strCellValue = itmValue[0].dictAttributes.Value;
                }
                else {
                    strCellValue = data.Value;
                }
            }
            var strVisibleControls = "";
            angular.forEach(data.arrVisibleControl, function (lvItem) {
                if (strVisibleControls == undefined || strVisibleControls == "") {
                    strVisibleControls = lvItem.Content;
                }
                else {
                    strVisibleControls = strVisibleControls + "," + lvItem.Content;
                }
            });

            strListValues = strListValues + strCellValue + ":" + strVisibleControls + ";";
        });
        if (strListValues != undefined && strListValues != "") {
            strListValues = strcontrollist + "#" + strListValues;
        }
        return strListValues;
    };

    $scope.UpdateClientVisibility = function () {
        $rootScope.EditPropertyValue($scope.model.dictAttributes[$scope.strAttributeName], $scope.model.dictAttributes, $scope.strAttributeName, $scope.ClientVisibility);
    };

    //#endregion 

    //#region Common Events
    $scope.ExpandCollapsedControl = function (field, event) {
        field.IsExpanded = !field.IsExpanded;
    };

    $scope.SelectFieldClick = function (field, event) {
        $scope.SelectedField = field;
        if (event) {
            event.stopPropagation();
        }
    };

    $scope.SetFieldClass = function (obj) {
        if (obj == $scope.SelectedField) {
            return "selected";
        }
    };

    $scope.onRemoveClientVisibilityClick = function () {
        $scope.ClientVisibility = "";
        $scope.UpdateClientVisibility();

        $scope.onCancelClick();
    };

    $scope.onSaveClick = function () {
        $scope.ClientVisibility = $scope.GetDataFromGrid();
        $scope.UpdateClientVisibility();

        $scope.onCancelClick();
    };

    $scope.onCancelClick = function () {
        //ngDialog.close($scope.clientVisibilityDialog.id);

        $scope.objNewDialog.close();
    };

    $scope.SelectControlFromList = function (obj) {
        $scope.SelectedControl = obj;
    };

    $scope.SelectSaveControlClick = function (saveCtrl) {
        $scope.SelectedVisibility = saveCtrl;
    };

    $scope.SelectVisibleControlClick = function (ctrl) {
        $scope.SelectedItem = ctrl;
    };

    $scope.AddToListboxClick = function () {
        if ($scope.FieldCollection.length > 0) {
            $scope.AddFieldsToControlCollection($scope.FieldCollection[0].Items);
        }
    };
    $scope.AddFieldsToControlCollection = function (fieldCollection) {
        angular.forEach(fieldCollection, function (field) {
            if (field.IsSelected && field.Text) {
                var lstItem = { Content: field.Text };
                if (!$scope.ControlCollection.some(function (x) { return x.Content == field.Text; })) {
                    $scope.ControlCollection.push(lstItem);
                }
                else {
                    //MessageBox.Show("The control " + field.Text + " is already added.", "Error");
                }
            }
            if (field.Items.length > 0) {
                $scope.AddFieldsToControlCollection(field.Items);
            }
        });
    };

    $scope.DeleteToListboxClick = function () {
        if ($scope.SelectedControl != null) {
            var index = $scope.ControlCollection.indexOf($scope.SelectedControl);
            $scope.ControlCollection.splice(index, 1);

            angular.forEach($scope.SavedControlList, function (saveditem) {
                angular.forEach(saveditem.arrVisibleControl, function (lvItem) {
                    if (lvItem.Content == $scope.SelectedControl.Content) {
                        var index = saveditem.arrVisibleControl.indexOf(lvItem);
                        saveditem.arrVisibleControl.splice(index, 1);
                    }
                });
            });

            if (index < $scope.ControlCollection.length) {
                $scope.SelectedControl = $scope.ControlCollection[index];
            }
            else if ($scope.ControlCollection.length > 0) {
                $scope.SelectedControl = $scope.ControlCollection[index - 1];
            }
            if ($scope.ControlCollection.length == 0) {
                $scope.SelectedControl = undefined;
            }
        }
        else {
            $SgMessagesService.Message('Message', "Select control to remove.");
        }
    };

    $scope.AddToGridClick = function () {

        if ($scope.ControlCollection.length == 0) {
            $SgMessagesService.Message('Message', "Please add some control in List.");
        }
        else {
            $scope.AddRowToGrid();
        }
    };

    $scope.AddRowToGrid = function () {
        var objClientVisibilityData = { Value: '', arrVisibleControl: [] };
        if ($scope.SavedControlList.length == 0) {
            objClientVisibilityData.Value = "default";
            angular.forEach($scope.ControlCollection, function (lvItem) {
                var lstItem = { Content: lvItem.Content };
                objClientVisibilityData.arrVisibleControl.push(lstItem);
            });
        }

        $scope.SavedControlList.push(objClientVisibilityData);
    };

    $scope.DeleteToGridClick = function () {
        if ($scope.SelectedVisibility != null) {
            var index = $scope.SavedControlList.indexOf($scope.SelectedVisibility);
            $scope.SavedControlList.splice(index, 1);
            if (index < $scope.SavedControlList.length) {
                $scope.SelectedVisibility = $scope.SavedControlList[index];
            }
            else if ($scope.SavedControlList.length > 0) {
                $scope.SelectedVisibility = $scope.SavedControlList[index - 1];
            }
            if ($scope.SavedControlList.length == 0) {
                $scope.SelectedVisibility = undefined;
            }

        }
    };

    $scope.DeleteSaveControlFromList = function () {
        if ($scope.SelectedVisibility && $scope.SelectedItem) {
            var index = $scope.SelectedVisibility.arrVisibleControl.indexOf($scope.SelectedItem);
            $scope.SelectedVisibility.arrVisibleControl.splice(index, 1);
            if (index < $scope.SelectedVisibility.arrVisibleControl.length) {
                $scope.SelectedItem = $scope.SelectedVisibility.arrVisibleControl[index];
            }
            else if ($scope.SelectedVisibility.arrVisibleControl.length > 0) {
                $scope.SelectedItem = $scope.SelectedVisibility.arrVisibleControl[index - 1];
            }
        }
    };

    //#endregion 

    //#region Context Menu for Saved Item
    $scope.SaveControlListMenu = [['Delete', function ($itemScope) {
        $scope.SelectedItem = $itemScope.ctrl;
        if ($itemScope.$parent && $itemScope.$parent.saveCtrl) {
            $scope.SelectedVisibility = $itemScope.$parent.saveCtrl;
        }
        $scope.DeleteSaveControlFromList();
    }, null]
    ];

    //#endregion


    //#region Form Link Controls
    $scope.PopulateHtxAvailableFields = function (isWizard) {
        $scope.FieldCollection = [];
        if (isWizard) {
            var objItems = $scope.formobject.Elements.filter(function (itm) { return itm.Name == "items"; });
            if (objItems && objItems.length > 0) {
                //adding wizard
                var objWizard = objItems[0].Elements.filter(function (ele) { return ele.Name == "sfwWizard"; });
                if (objWizard && objWizard.length > 0) {

                    var objWizardField = { Text: objWizard.dictAttributes.ID, IsSelected: false, Items: [] };
                    if (objWizardField) {
                        //adding selected wizardStep
                        var objWizardStepModel = $scope.GetSelectedWizardStep($scope.model);
                        if (objWizardStepModel) {
                            var objFiled = $scope.CrateHtxAvailableField(objWizardStepModel);
                            if (objFiled) {
                                objFiled.IsCheckBoxVisible = false;
                                objWizardField.Items.push(objFiled);
                            }
                        }
                        objWizardField.IsExpanded = true;
                        $scope.FieldCollection.push(objWizardField);
                    }
                }
            }
        }
        else {
            var objFiled = $scope.CrateHtxAvailableField($scope.formobject);
            if (objFiled) {
                objFiled.IsExpanded = true;
                objFiled.IsCheckBoxVisible = false;
                $scope.FieldCollection.push(objFiled);
            }
        }
    };

    $scope.GetSelectedWizardStep = function (aCntrlModel) {
        var retVal = null;
        var parent = aCntrlModel.ParentVM;
        while (parent) {
            if (parent.Name == "sfwWizardStep") {
                retVal = parent;
                break;
            }
            parent = parent.ParentVM;
        }
        return retVal;
    };

    $scope.CrateHtxAvailableField = function (aModel) {
        function AddInobjFiled(cntrlModel) {
            var objChild = $scope.CrateHtxAvailableField(cntrlModel);
            if (objChild) {
                objFiled.Items.push(objChild);
            }
        }
        var objFiled = null;
        if (aModel.dictAttributes.ID != undefined && aModel.dictAttributes.ID != "") {

            objFiled = { Text: aModel.dictAttributes.ID, IsCheckBoxVisible: true, Items: [], IsSelected: $scope.arrSavedControlIdList.some(function (itm) { return itm == aModel.dictAttributes.ID; }) };
            var objItemsModel = null;
            if (aModel.Name == "sfwTabContainer") {
                objItemsModel = aModel.Elements.filter(function (itm) { return itm.Name == "Tabs"; });
            }
            else {
                objItemsModel = aModel.Elements.filter(function (itm) { return itm.Name == "items"; });
            }
            if (objItemsModel && objItemsModel.length > 0) {

                angular.forEach(objItemsModel[0].Elements, AddInobjFiled);
            }
        }

        return objFiled;
    };

    //#endregion


    //#region Call Init method
    if ($scope.IsForm) {
        $scope.InitForm();
    }
    else {
        $scope.InitFormLink();
    }
    //#endregion
}]);

app.directive("clientvisibilitydraggable", [function () {
    return {
        restrict: 'A',
        scope: {
            dragdata: '=',
        },
        link: function (scope, element, attributes) {
            var el = element[0];
            el.draggable = true;

            el.addEventListener('dragstart', onDragStart, false);

            function onDragStart(e) {
                if (scope.dragdata != undefined && scope.dragdata != "") {
                    e.dataTransfer.setData("text", JSON.stringify(scope.dragdata));
                }
            }
        }
    };
}]);

app.directive("clientvisibilitydroppable", [function () {
    return {
        restrict: 'A',
        scope: {
            dropdata: '=',
        },
        link: function (scope, element, attributes) {
            var el = element[0];

            el.addEventListener("dragover", function (e) {
                e.dataTransfer.dropEffect = 'copy';
                if (e.preventDefault) {
                    e.preventDefault();
                }
            });

            el.addEventListener("drop", function (e) {
                e.preventDefault();
                var data = JSON.parse(e.dataTransfer.getData("text"));
                if (data != undefined && data != "") {
                    scope.$apply(function () {
                        if (jQuery.type(scope.dropdata) === "array") {
                            if (!scope.dropdata.some(function (x) { return x.Content == data.Content; })) {
                                scope.dropdata.push(data);
                            }
                        }
                    });
                }
                if (e.stopPropagation) {
                    e.stopPropagation();
                }
            }, false);
        }
    };
}]);
app.controller("CreateButtonController", ["$scope", "$rootScope", function ($scope, $rootScope) {
    $scope.ErrorMessageForDisplay = "";
    $scope.strButtonType = "sfwButton";
    $scope.strCustomMethod = "";

    //#region Init Methods
    $scope.Init = function () {
        $scope.ButtonsDetailsCollection = [];
        $scope.LoadButtonDetails();
        $scope.LoadNewButtonList();
    };

    $scope.LoadButtonDetails = function () {
        var type = $scope.formodel.dictAttributes.sfwType;
        function AddInButtonsDetailsCollection(objBtnMethod) {
            var buttonDetails = {};
            var attr = null;
            attr = objBtnMethod.Attribute;
            buttonDetails.Method = objBtnMethod.Code;
            buttonDetails.Description = objBtnMethod.Description;
            buttonDetails.Category = objBtnMethod.Category;

            $scope.ButtonsDetailsCollection.push(buttonDetails);
        }
        if (type) {
            var lst = [];
            if (type == "Lookup") {
                lst = $rootScope.LstButtonMethodLookup;
            }
            else if (type == "Wizard") {
                lst = $rootScope.LstButtonMethodWizard;
            }
            else if (type == "Maintenance" || type == "UserControl") {
                lst = $rootScope.LstButtonMethodMaintenance;
            }

            if (lst != null) {
                angular.forEach(lst, AddInButtonsDetailsCollection);


            }
        }
    };

    $scope.LoadNewButtonList = function () {
        lstNewButtons = [];

        var strFormType = $scope.formodel.dictAttributes.sfwType;
        if (strFormType == "Lookup") {
            lstNewButtons.push({ Group: "New", MethodName: "btnNew_Click" });
            lstNewButtons.push({ Group: "New", MethodName: "btnNewUpdate_Click" });
            lstNewButtons.push({ Group: "Open", MethodName: "btnOpenLookup" });
            lstNewButtons.push({ Group: "Open", MethodName: "btnOpenDoc_Click" });
            lstNewButtons.push({ Group: "Delete", MethodName: "btnDelete_Click" });

        }
        if (strFormType == "Maintenance" || strFormType == "Wizard") {
            lstNewButtons.push({ Group: "New", MethodName: "btnNew_Click" });
            lstNewButtons.push({ Group: "New", MethodName: "btnNewUpdate_Click" });
            lstNewButtons.push({ Group: "New", MethodName: "btnNewPopupDialog_Click" });
            lstNewButtons.push({ Group: "Open", MethodName: "btnOpen_Click" });
            lstNewButtons.push({ Group: "Open", MethodName: "btnOpenDoc_Click" });
            lstNewButtons.push({ Group: "Open", MethodName: "btnOpenPopupDialog_Click" });

            //lstNewButtons.push({ Group: "Close", MethodName: "btnClosePopupDialog_Click" });
            lstNewButtons.push({ Group: "Finish", MethodName: "btnFinishPopupDialog_Click" });

            lstNewButtons.push({ Group: "Grid", MethodName: "btnGridSearch_Click" });
            lstNewButtons.push({ Group: "Grid", MethodName: "btnGridSearchCriteriaReq_Click" });

            lstNewButtons.push({ Group: "Save", MethodName: "btnSave_Click" });
            lstNewButtons.push({ Group: "Save", MethodName: "btnSaveIgnoreReadOnly_Click" });
            lstNewButtons.push({ Group: "Save", MethodName: "btnForceSave_Click" });
            lstNewButtons.push({ Group: "Save", MethodName: "btnNoChangesSave_Click" });
            lstNewButtons.push({ Group: "Save", MethodName: "btnSaveNew_Click" });
            lstNewButtons.push({ Group: "Save", MethodName: "btnSaveAndNext_Click" });

            lstNewButtons.push({ Group: "Download", MethodName: "btnDownload_Click" });
            lstNewButtons.push({ Group: "Execute", MethodName: "btnExecuteServerMethod_Click" });
            lstNewButtons.push({ Group: "Execute", MethodName: "btnValidateExecuteBusinessMethod_Click" });
            lstNewButtons.push({ Group: "Execute", MethodName: "btnExecuteBusinessMethodSelectRows_Click" });
            lstNewButtons.push({ Group: "Execute", MethodName: "btnExecuteBusinessMethod_Click" });
            lstNewButtons.push({ Group: "Workflow", MethodName: "btnCompleteWorkflowActivities_Click" });
        }
        if (strFormType == "Wizard") {
            lstNewButtons.push({ Group: "Grid", MethodName: "btnGridSearch_Click" });
            lstNewButtons.push({ Group: "Grid", MethodName: "btnGridSearchCriteriaReq_Click" });

            lstNewButtons.push({ Group: "Execute", MethodName: "btnExecuteServerMethod_Click" });
        }
    };

    //#endregion

    //#region Common Events


    $scope.AddControlToCell = function (cntrlName, sfxControlModel) {
        if (!sfxControlModel) {
            sfxControlModel = CreateControl($scope.formodel, $scope.item, cntrlName);
        }

        if (sfxControlModel != null) {
            if (["btnCompleteWorkflowActivities_Click", "btnExecuteBusinessMethodSelectRows_Click", "btnValidateExecuteBusinessMethod_Click", "btnExecuteBusinessMethod_Click"].indexOf(sfxControlModel.dictAttributes.sfwMethodName) > -1) {
                sfxControlModel.dictAttributes.sfwExecuteMethodType = "ObjectMethod";
            }
            if ($scope.item.Name === "TemplateField") {
                var obj = $scope.item.Elements.filter(function (x) { return x.Name === "ItemTemplate" });
                if (obj && obj.length > 0) {
                    $rootScope.PushItem(sfxControlModel, obj[0].Elements);
                }
            }
            else {
                $rootScope.PushItem(sfxControlModel, $scope.item.Elements);
            }

            SetFormSelectedControl($scope.formodel, sfxControlModel);
            //CheckAndUpdateSelectedControlStatus(this.MirrorElements[this.MirrorElements.Count - 1] as SfxControlVM, false);
            //this.PopulateObjectID(this.ObjVM.Model, sfxControlModel);
        }
    };


    $scope.selectButton = function (param) {
        $scope.SelectedButtonDetail = param;
    };

    $scope.onAddButtonOkClick = function (strControlName) {
        if ($scope.SelectedButtonDetail && $scope.SelectedButtonDetail.Method) {
            var isDialogClose = true;
            var obj;
            for (i = 0; i < lstNewButtons.length; i++) {
                if (lstNewButtons[i].MethodName == $scope.SelectedButtonDetail.Method) {
                    obj = lstNewButtons[i];
                    break;
                }
            }

            if (strControlName && !obj) {
                if ($scope.item.Name == "sfwColumn" || $scope.item.Name == "TemplateField" || $scope.item.Name == "ItemTemplate" || $scope.item.Name == "sfwButtonGroup") {
                    $scope.AddControlToCell(strControlName + "." + $scope.SelectedButtonDetail.Method);
                }
            }

            if (obj) {
                if ($scope.item.Name == "TemplateField" && ($scope.SelectedButtonDetail.Method == "btnGridSearch_Click"
                    || $scope.SelectedButtonDetail.Method == "btnGridSearchCriteriaReq_Click" || "btnOpenPopupDialog_Click")) {
                    $scope.AddControlToCell(strControlName + "." + $scope.SelectedButtonDetail.Method);
                }
                else {

                    isDialogClose = false;
                    var newScopeButtonWizard = $scope.$new();
                    newScopeButtonWizard.formodel = $scope.formodel;
                    newScopeButtonWizard.sfxCell = $scope.item;
                    newScopeButtonWizard.SelectedButtonDetails = $scope.SelectedButtonDetail;
                    newScopeButtonWizard.ControlName = strControlName;

                    $rootScope.IsLoading = true;

                    newScopeButtonWizard.beforeClose = function () {
                        $scope.onAddButtonCancelClick();
                    };
                    newScopeButtonWizard.title = "Create New Button";
                    newScopeButtonWizard.ButtonWizardDialog = $rootScope.showDialog(newScopeButtonWizard, newScopeButtonWizard.title, "Form/views/CreateButtonWizard/NewButtonWizard.html", { width: 1000, height: 660, beforeClose: newScopeButtonWizard.beforeClose });
                }
            }
        }
        else if ($scope.strButtonType == "CustomButton" && $scope.strCustomMethod) {
            var isDialogClose = true;
            $scope.AddControlToCell("sfwButton" + "." + $scope.strCustomMethod);
        }

        if (isDialogClose) {
            $scope.onAddButtonCancelClick();
        }
    };

    $scope.onAddButtonCancelClick = function () {
        //ngDialog.close($scope.CreateButtondialog.id);
        $scope.CreateButtonDialog.close();
    };

    $scope.$on('AddButtonCancel', function () {
        $scope.onAddButtonCancelClick();
    });

    $scope.CreateDummyObject = function (objButtonDetails, group, controlName) {


    };

    $scope.onChangeButtonType = function () {
        $scope.SelectedButtonDetail = {};
        $scope.strCustomMethod = "";
        if ($scope.strButtonType == "sfwImageButton") {
            var buttonDetails = {};
            buttonDetails.Method = "btnRetrieve_Click";
            buttonDetails.Description = "Retrieve Button";
            buttonDetails.Category = "ImageButton";
            $scope.ButtonsDetailsCollection.push(buttonDetails);
            $scope.SelectedButtonDetail = buttonDetails;
        }
        else {
            var lst = $scope.ButtonsDetailsCollection.filter(function (x) { return x.Method == "btnRetrieve_Click"; });
            if (lst && lst.length > 0) {
                var index = $scope.ButtonsDetailsCollection.indexOf(lst[0]);
                $scope.ButtonsDetailsCollection.splice(index, 1);
            }
        }
    };

    //#endregion

    //#region Validation Methods

    $scope.ValidateButton = function () {

        if ($scope.SelectedButtonDetail && $scope.SelectedButtonDetail.Method) {
            $scope.ErrorMessageForDisplay = "";
            return false;
        }
        else if ($scope.strButtonType == "CustomButton" && $scope.strCustomMethod) {
            $scope.ErrorMessageForDisplay = "";
            if (!isValidIdentifier($scope.strCustomMethod, false, false)) {
                $scope.ErrorMessageForDisplay = "Invalid method name";
                return true;
            } else {
                return false;
            }
        }
        $scope.ErrorMessageForDisplay = "Select Button Method";

        return true;
    };

    //#endregion

    //#region Call Init Methods
    $scope.Init();
    //#endregion
}]);
app.controller("NewButtonWizardController", ["$scope", "$http", "$rootScope", "$EntityIntellisenseFactory", "$ValidationService", "CONSTANTS", "$GetEntityFieldObjectService", "$Entityintellisenseservice", "$SgMessagesService", "$timeout", "$GetGridEntity", function ($scope, $http, $rootScope, $EntityIntellisenseFactory, $ValidationService, CONST, $GetEntityFieldObjectService, $Entityintellisenseservice, $SgMessagesService, $timeout, $GetGridEntity) {
    //#region Variables
    $scope.objNewButtonDialogForGrid = {};
    $scope.objCreateNewGrid = {};
    $scope.objGridObjectField = {};
    $scope.objGridObjectField.lstselectedmultiplelevelfield = [];
    $scope.objGridField = {};
    $scope.objNewButtonActiveForm = {};
    $scope.objNewButtonNaviagtionParam = {};
    $scope.objNewButtonGeneralProp = {};
    $scope.objNewButtonCustomAttr = {};
    $scope.objNewButtonFilterGrid = {};
    $scope.objNewButtonFilterGridQueryParam = {};
    $scope.objNewButtonFilterGridCriteria = {};
    $scope.objNewButtonServerMethod = {};
    $scope.objNewButtonOpenWordDoc = {};
    $scope.lstMode = [];
    $scope.IsPopupStepDisable = true;
    $scope.IsNewButtonStepDisable = true;
    $scope.IsNewGridStepDisable = true;
    $scope.IsNewFilterGridSearchCriteriaStepDisable = true;
    $scope.IsNewSaveStepsDisable = true;
    $scope.IsNewExecuteStepsDisable = true;
    $scope.IsOpenWordDocStepsDisable = true;
    $scope.IsNewExecuteBusinessStepsDisable = true;
    $scope.IsGeneralPropStepsDisable = true;
    $scope.objNewButtonCustomAttr.CustomAttributeText = "Custom Attributes";
    $scope.ControlTypes = ['', 'TextBox', 'DropDownList'];
    $scope.lstControlTypes = ['', 'Label'];
    $scope.objFilterGridFieldsDetails = {};
    $scope.objFilterGridFieldsDetails.AvailableFieldColletion = [];
    $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid = [];
    $scope.objFilterGridFieldsDetails.GridNonAvailableControlCollection = [];
    $scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection = [];
    $scope.objNewButtonFilterGridCriteria.AvailableFieldColletion = [];
    $scope.IsParentAsCollection = false;
    $scope.entityName = undefined;
    if ($scope.formodel && $scope.formodel.dictAttributes.sfwEntity) {
        $scope.entityName = $scope.formodel.dictAttributes.sfwEntity;
    }

    if ($scope.ParentModel && $scope.ParentModel.dictAttributes.sfwEntityField) {
        $scope.IsParentAsCollection = true;
        var entObject = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.formodel.dictAttributes.sfwEntity, $scope.ParentModel.dictAttributes.sfwEntityField);
        if (entObject) {
            $scope.entityName = entObject.Entity;
        }

    }


    //#endregion

    //#region Init Methods
    $scope.Init = function () {
        $scope.sfxControl = { Name: $scope.ControlName, Value: "", prefix: 'swc', dictAttributes: { Visible: 'True' }, Elements: [], Children: [] };
        CheckAndSetSfwButtonDefaultValues($scope.formodel, $scope.sfxControl, $scope.SelectedButtonDetails.Method);
        if ($scope.SelectedButtonDetails.Method == "btnOpenPopupDialog_Click" || $scope.SelectedButtonDetails.Method == "btnNewPopupDialog_Click"
            || $scope.SelectedButtonDetails.Method == "btnFinishPopupDialog_Click" || $scope.SelectedButtonDetails.Method == "btnClosePopupDialog_Click") {
            $scope.InitForGrid();
            $scope.IsPopupStepDisable = false;
        }
        else if ($scope.SelectedButtonDetails.Method == "btnNew_Click" || $scope.SelectedButtonDetails.Method == "btnNewUpdate_Click" || $scope.SelectedButtonDetails.Method == "btnOpen_Click") {
            $scope.InitForNewButtonMethod();
            $scope.InitForGridControl();

            $scope.IsNewButtonStepDisable = false;
        }
        else if ($scope.SelectedButtonDetails.Method == "btnGridSearch_Click") {
            $scope.IsNewGridStepDisable = false;
            $scope.objNewButtonFilterGrid.SelectGridOption = 'CreateNewGrid';
            $scope.InitForGridControl();
        }
        else if ($scope.SelectedButtonDetails.Method == "btnSave_Click" || $scope.SelectedButtonDetails.Method == "btnForceSave_Click"
            || $scope.SelectedButtonDetails.Method == "btnSaveNew_Click" || $scope.SelectedButtonDetails.Method == "btnSaveAndNext_Click"
            || $scope.SelectedButtonDetails.Method == "btnSaveIgnoreReadOnly_Click" || $scope.SelectedButtonDetails.Method == "btnNoChangesSave_Click") {
            $scope.IsNewSaveStepsDisable = false;
        }
        else if ($scope.SelectedButtonDetails.Method == "btnOpenDoc_Click") {
            $scope.IsOpenWordDocStepsDisable = false;
            $scope.InitForGridControl();
            $rootScope.IsLoading = true;
            $.connection.hubCreateNewObject.server.loadCorrespondenceTemplate(false).done(function (data) {
                $scope.receiveCorrespondenceTemplateForForm(data);
            });
        }
        else if ($scope.SelectedButtonDetails.Method == "btnExecuteServerMethod_Click" || $scope.SelectedButtonDetails.Method == "btnExecuteBusinessMethod_Click"
            || $scope.SelectedButtonDetails.Method == "btnValidateExecuteBusinessMethod_Click" || $scope.SelectedButtonDetails.Method == "btnDownload_Click" || $scope.SelectedButtonDetails.Method == "btnCompleteWorkflowActivities_Click") {
            $scope.IsNewExecuteStepsDisable = false;
            $scope.objNewButtonServerMethod.Init();
        }
        else if ($scope.SelectedButtonDetails.Method == "btnExecuteBusinessMethodSelectRows_Click") {
            $scope.IsNewExecuteBusinessStepsDisable = false;
            $scope.objNewButtonServerMethod.Init();
        }
        else {
            $scope.IsGeneralPropStepsDisable = false;
        }

        $scope.objNewButtonGeneralProp.PopulateMode();
        $scope.objNewButtonGeneralProp.IsLookup = $scope.formodel.dictAttributes.sfwType.toUpperCase() == "LOOKUP";
        $scope.objNewButtonGeneralProp.PopulateSecurityLevel();
        $scope.$evalAsync(function () {
            $rootScope.IsLoading = false;
        });
    };

    //#endregion

    //#region Common Methods
    $scope.objNewButtonGeneralProp.PopulateMode = function () {
        $scope.objNewButtonGeneralProp.lstMode = [];
        $scope.objNewButtonGeneralProp.lstMode.push("All");
        $scope.objNewButtonGeneralProp.lstMode.push("New");
        $scope.objNewButtonGeneralProp.lstMode.push("Update");
    };

    $scope.objNewButtonGeneralProp.PopulateSecurityLevel = function () {
        $scope.objNewButtonGeneralProp.lstSecurityLevel = [];
        $scope.objNewButtonGeneralProp.lstSecurityLevel.push({ Code: "0", Description: " None" });
        $scope.objNewButtonGeneralProp.lstSecurityLevel.push({ Code: "1", Description: " Read" });
        $scope.objNewButtonGeneralProp.lstSecurityLevel.push({ Code: "2", Description: " Modify" });
        $scope.objNewButtonGeneralProp.lstSecurityLevel.push({ Code: "3", Description: " New" });
        $scope.objNewButtonGeneralProp.lstSecurityLevel.push({ Code: "4", Description: " Delete" });
        $scope.objNewButtonGeneralProp.lstSecurityLevel.push({ Code: "5", Description: " Execute" });
    };

    $scope.CloseWizardClick = function () {
        //ngDialog.close($scope.NewButtonMainWizardVM.id);

        $scope.ButtonWizardDialog.close();
    };
    //#endregion

    //#region Validation Methods
    $scope.objNewButtonDialogForGrid.IsNextDisable = function () {
        var IsValid = true;
        if ($scope.objNewButtonDialogForGrid.SelectGridOption == "CreateNewGrid") {
            $scope.objNewButtonDialogForGrid.ErrorMessageForDisplay = "";
            if (!$scope.objNewButtonDialogForGrid.ValidateDialogPanel()) {
                IsValid = false;
            }
        }
        return IsValid;
    };

    $scope.objNewButtonDialogForGrid.IsFinishDisable = function () {
        var retVal = true;
        if ($scope.objNewButtonDialogForGrid.SelectGridOption == "UseExistingGrid") {
            $scope.objNewButtonDialogForGrid.ErrorMessageForDisplay = "";
            if (!$scope.objNewButtonDialogForGrid.ValidateDialogPanel() && !$scope.objNewButtonDialogForGrid.ValidateGridControl()) {
                retVal = false;
            }
        }
        return retVal;
    };

    $scope.objCreateNewGrid.IsNextDisable = function () {
        var IsValid = true;
        $scope.objCreateNewGrid.ErrorMessageForDisplay = "";
        if ($scope.objCreateNewGrid.SelectedEntityField && ($scope.objCreateNewGrid.SelectedEntityField.DataType == "Collection"
            || $scope.objCreateNewGrid.SelectedEntityField.DataType == "CDOCollection"
            || $scope.objCreateNewGrid.SelectedEntityField.DataType == "List")) {
            IsValid = false;
        }
        else {
            $scope.objCreateNewGrid.ErrorMessageForDisplay = "Error: A valid collection needs to be selected for the grid.";
        }
        return IsValid;
    };

    $scope.objGridObjectField.IsNextDisable = function () {
        var IsValid = true;
        $scope.objGridObjectField.ErrorMessageForDisplay = "";
        if ($scope.objGridObjectField.lstFields && $scope.objGridObjectField.lstFields.length > 0) {
            var lstList = [];
            lstList = $scope.objGridObjectField.lstselectedmultiplelevelfield;//GetSelectedFieldList($scope.objGridObjectField.lstFields, lstList);
            if (lstList.length > 0) {
                IsValid = false;
            }
            else {
                $scope.objGridObjectField.ErrorMessageForDisplay = "Error: Please select atleast one value from the list.";
            }
        } else if ($scope.isAnyErrors()) {
            IsValid = false;
        }
        return IsValid;
    };

    $scope.objNewButtonActiveForm.IsNextDisable = function () {
        var IsValid = false;
        $scope.objNewButtonActiveForm.ErrorMessageForDisplay = "";

        if ($scope.sfxControl.dictAttributes.ID == undefined || $scope.sfxControl.dictAttributes.ID == "") {
            $scope.objNewButtonActiveForm.ErrorMessageForDisplay = "Enter the button ID.";
            return true;
        } else if ($scope.isAnyErrors()) {
            return true;
        }
        if ($scope.objNewButtonActiveForm.ActiveFormType == "SingleForm") {
            if ($scope.objNewButtonActiveForm.StrActiveForm == undefined || $scope.objNewButtonActiveForm.StrActiveForm == "") {
                $scope.objNewButtonActiveForm.ErrorMessageForDisplay = "Select active form.";
                return true;
            }
            else if ($scope.objNewButtonActiveForm.StrActiveForm == $scope.formodel.dictAttributes.ID) {
                $scope.objNewButtonActiveForm.ErrorMessageForDisplay = "Can not select same form as active form.";
                return true;
            }
        }
        else if ($scope.objNewButtonActiveForm.ActiveFormType == "MultipleForm") {
            if ($scope.objNewButtonActiveForm.ActiveFormCollection.length == 0) {
                $scope.objNewButtonActiveForm.ErrorMessageForDisplay = "Atleast one active form has to be added.";
                return true;
            }
            var iActvCount = 0;
            for (var i = 0; i < $scope.objNewButtonActiveForm.ActiveFormCollection.length; i++) {
                var objActiveForm = $scope.objNewButtonActiveForm.ActiveFormCollection[i];
                if (objActiveForm.FieldValue == "ACTV") {
                    iActvCount++;
                }
                if (!objActiveForm.FieldValue) {
                    $scope.objNewButtonActiveForm.ErrorMessageForDisplay = "Please Select or enter field value of row number " + (i + 1);
                    return true;
                }
                if (!objActiveForm.ActiveForm) {
                    $scope.objNewButtonActiveForm.ErrorMessageForDisplay = "Please enter active form value of row number " + (i + 1);
                    return true;
                }
                else if (objActiveForm.ActiveForm == $scope.formodel.dictAttributes.ID) {
                    $scope.objNewButtonActiveForm.ErrorMessageForDisplay = "Can not select same form as active form.";
                    return true;
                }
            }
            if (iActvCount > 1) {
                $scope.objNewButtonActiveForm.ErrorMessageForDisplay = "Cannot add multiple active forms with same field value - ACTV";
                return true;
            }
            else {
                return false;
            }
        }
        return IsValid;
    };

    /******************************** First Screen Next Button Functionality*************************************************************/

    $scope.objNewButtonFilterGrid.IsNextDisable = function () {
        $scope.objNewButtonFilterGrid.ErrorMessageForDisplay = "";
        if ($scope.isAnyErrors()) {
            return true;
        }
        if ($scope.objNewButtonFilterGrid.SelectGridOption && $scope.objNewButtonFilterGrid.SelectGridOption == 'UseExistingGrid') {
            if (!$scope.sfxControl.dictAttributes.sfwRelatedControl) {
                $scope.objNewButtonFilterGrid.ErrorMessageForDisplay = "Please Select Grid View";
                return true;
            }
            else {
                var lst = $scope.objNewButtonFilterGrid.lstRelatedGrid.filter(function (x) { return x == $scope.sfxControl.dictAttributes.sfwRelatedControl; });
                if (!lst || (lst && lst.length == 0)) {
                    $scope.objNewButtonFilterGrid.ErrorMessageForDisplay = "Invalid Grid Selected";
                    return true;
                }
            }
        }

        if ($scope.objNewButtonFilterGrid.StrBaseQuery == undefined || $scope.objNewButtonFilterGrid.StrBaseQuery == "") {
            this.ErrorMessageForDisplay = "Please Select Base Query.";
            return true;
        }
        else {
            var strFile = $scope.objNewButtonFilterGrid.StrBaseQuery.split('.');
            if (strFile.length > 0) {

                var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                var objFile = entityIntellisenseList.filter(function (itm) { return itm.ID == strFile[0]; });
                if (objFile && objFile.length > 0 && strFile.length > 1) {
                    return $scope.objNewButtonFilterGrid.ValidateQuery(objFile[0], strFile[1]);
                }
                else {
                    $scope.objNewButtonFilterGrid.ErrorMessageForDisplay = "Invalid Base Query";
                    return true;
                }
            }
        }
        return false;
    };


    /******************************** First Screen Next Button Functionality*************************************************************/



    /******************************** Second Screen Finish Button Functionality*************************************************************/
    $scope.objNewButtonFilterGridCriteria.IsFinishDisable = function () {
        $scope.objNewButtonFilterGridCriteria.ErrorMessageForDisplay = "";
        if ($scope.objNewButtonFilterGridCriteria.StrNoOfColumn == undefined || $scope.objNewButtonFilterGridCriteria.StrNoOfColumn == "") {
            $scope.objNewButtonFilterGridCriteria.ErrorMessageForDisplay = "Please Select No of column to be Created.";
            return true;
        }
        return false;
    };


    $scope.objNewButtonServerMethod.onMethodTypeChange = function (methodType) {
        $scope.showRules = false;
        $scope.showObjectMethod = false;
        $scope.showXmlMethod = false;
        $scope.objNewButtonServerMethod.StrServerMethod = '';
        if (methodType == "ObjectMethod") {
            $scope.showObjectMethod = true;
            $scope.Title = "Object Method :";
        }
        else if (methodType == "XmlMethod") {
            $scope.showXmlMethod = true;
            $scope.Title = "Xml Method :";
        }
        else if (methodType == "Rule") {
            $scope.showRules = true;
            $scope.Title = "Rule :";
        }
        $scope.objNewButtonServerMethod.IsNextDisable();
    }
    /******************************** Second Screen Finish Button Functionality*************************************************************/

    $scope.objNewButtonServerMethod.IsFinishDisable = function () {

        if ($scope.SelectedButtonDetails.Method == "btnGridSearchCriteriaReq_Click") {
            $scope.objNewButtonServerMethod.ErrorMessageForDisplay = "";
            if ($scope.objNewButtonServerMethod.StrServerMethod == undefined || $scope.objNewButtonServerMethod.StrServerMethod == "") {
                $scope.objNewButtonServerMethod.ErrorMessageForDisplay = "Select Object Method";
                return true;
            }
        }
        else {
            return true;
        }
        return false;
    };

    $scope.objNewButtonServerMethod.IsNextDisable = function () {

        if ($scope.SelectedButtonDetails.Method != "btnGridSearchCriteriaReq_Click") {
            $scope.objNewButtonServerMethod.ErrorMessageForDisplay = "";
            if ($scope.SelectedButtonDetails.Method == "btnExecuteServerMethod_Click" || $scope.SelectedButtonDetails.Method == "btnExecuteBusinessMethod_Click" || $scope.SelectedButtonDetails.Method == "btnDownload_Click"
                || $scope.SelectedButtonDetails.Method == "btnValidateExecuteBusinessMethod_Click" || $scope.SelectedButtonDetails.Method == "btnExecuteBusinessMethodSelectRows_Click" || $scope.SelectedButtonDetails.Method == "btnCompleteWorkflowActivities_Click") {
                if ($scope.SelectedButtonDetails.Method == "btnExecuteServerMethod_Click" || $scope.SelectedButtonDetails.Method == "btnDownload_Click") {
                    if ($scope.objNewButtonServerMethod.StrServerMethod == undefined || $scope.objNewButtonServerMethod.StrServerMethod == "") {
                        $scope.objNewButtonServerMethod.ErrorMessageForDisplay = "Select Server Method.";
                        return true;
                    }
                    else if ($scope.objNewButtonServerMethod.StrServerMethod && !$scope.objNewButtonServerMethod.lstXmlMethods.some(function (x) { return x == $scope.objNewButtonServerMethod.StrServerMethod; })) {
                        $scope.objNewButtonServerMethod.ErrorMessageForDisplay = "Invalid Server Method.";
                        return true;
                    }
                }
                else {
                    if (!$scope.objNewButtonServerMethod.StrServerMethod) {
                        if ($scope.objNewButtonServerMethod.sfwExecuteMethodType == "ObjectMethod") {
                            $scope.objNewButtonServerMethod.ErrorMessageForDisplay = "Select Object Method.";
                        }
                        else if ($scope.objNewButtonServerMethod.sfwExecuteMethodType == "XmlMethod") {
                            $scope.objNewButtonServerMethod.ErrorMessageForDisplay = "Select Xml Method.";
                        }
                        else if ($scope.objNewButtonServerMethod.sfwExecuteMethodType == "Rule") {
                            $scope.objNewButtonServerMethod.ErrorMessageForDisplay = "Select Rule.";
                        }
                        else {
                            $scope.objNewButtonServerMethod.ErrorMessageForDisplay = "Select Object Method.";
                        }
                        return true;
                    }
                }
            }
            if ($scope.isAnyErrors()) {
                return true;
            }
            return false;
        }

        return true;
    };

    $scope.objNewButtonOpenWordDoc.IsNextDisable = function () {
        $scope.objNewButtonOpenWordDoc.ErrorMessageForDisplay = "";
        if ($scope.objNewButtonOpenWordDoc.TemplateName && $scope.objNewButtonOpenWordDoc.lstCorrTemplates != undefined) {
            var lst = $scope.objNewButtonOpenWordDoc.lstCorrTemplates.filter(function (itm) { return itm == $scope.objNewButtonOpenWordDoc.TemplateName; });
            if (!lst || (lst && lst.length == 0)) {
                $scope.objNewButtonOpenWordDoc.ErrorMessageForDisplay = "Invalid Template Name.";
                return true;
            }
        }
        return false;
    };

    //#endregion

    //#region For Method Open,Close,Finish and New Dialog Wizard pages Methods

    //#region Variables
    $scope.objNewButtonDialogForGrid.lstDialogPanel = [];
    $scope.objNewButtonDialogForGrid.lstRelatedGrid = [];
    $scope.objCreateNewGrid.lstselectedobjecttreefields = [];
    $scope.objGridObjectField.lstFields = [];

    //#endregion

    //#region Methods

    //#region Method For Select Grid
    $scope.InitForGrid = function () {
        $scope.objNewButtonDialogForGrid.SelectGridOption = "CreateNewGrid";
        $scope.objNewButtonDialogForGrid.SelectDialogPanelOption = "CreateNewDialogPanel";
        $scope.objNewButtonDialogForGrid.lstRelatedGrid.push("");
        PopulateRelatedGrid($scope.formodel, $scope.objNewButtonDialogForGrid.lstRelatedGrid, false);
        $scope.PopulateDialogPanels();

        $scope.objGridField.LoadControlTypes();
        $scope.objGridField.LoadDataFormat();
        $scope.objGridField.LoadDataKey();
        $scope.objGridField.LoadSort();
        $scope.objGridField.LoadOrder();
        $scope.CreateGridView();
    };

    $scope.CreateGridView = function () {
        $scope.objGridView = { Name: "sfwGridView", Value: '', prefix: "swc", dictAttributes: {}, Elements: [], Children: [] };

        $scope.objGridView.dictAttributes.ID = "dgrResult";
        $scope.objGridView.dictAttributes.AllowPaging = "True";
        $scope.objGridView.dictAttributes.AllowSorting = "True";
        $scope.objGridView.dictAttributes.sfwSelection = "Many";
    };

    $scope.PopulateDialogPanels = function () {
        var lst = [];
        FindControlListByName($scope.formodel, "sfwDialogPanel", lst);
        $scope.objNewButtonDialogForGrid.lstDialogPanel.push("");
        if (lst && lst.length > 0) {
            angular.forEach(lst, function (itm) {
                $scope.objNewButtonDialogForGrid.lstDialogPanel.push(itm.dictAttributes.ID);
            });
        }
    };

    $scope.objNewButtonDialogForGrid.ValidateDialogPanel = function () {
        var retValue = false;
        if ($scope.objNewButtonDialogForGrid.SelectDialogPanel == undefined || $scope.objNewButtonDialogForGrid.SelectDialogPanel == "") {
            $scope.objNewButtonDialogForGrid.ErrorMessageForDisplay = "Error: Dialog Panel ID can not be empty.";
            retValue = true;
        }
        else if ($scope.objNewButtonDialogForGrid.SelectDialogPanelOption == "CreateNewDialogPanel" && ($scope.objNewButtonDialogForGrid.SelectDialogPanel != undefined && $scope.objNewButtonDialogForGrid.SelectDialogPanel != "")) {
            if ($scope.objNewButtonDialogForGrid.lstDialogPanel.some(function (x) { return x == $scope.objNewButtonDialogForGrid.SelectDialogPanel; })) {
                $scope.objNewButtonDialogForGrid.ErrorMessageForDisplay = "Error: Dialog Panel ID already exist.";
                retValue = true;
            }
        }
        return retValue;
    };

    $scope.objNewButtonDialogForGrid.ValidateGridControl = function () {
        var retValue = false;
        if ($scope.objNewButtonDialogForGrid.SelectGridOption == "UseExistingGrid")
            if ($scope.objNewButtonDialogForGrid.SelectGrid == undefined || $scope.objNewButtonDialogForGrid.SelectGrid == "") {
                $scope.objNewButtonDialogForGrid.ErrorMessageForDisplay = "Error: Related Control can not be empty.";
                retValue = true;
            }
        return retValue;
    };

    //#endregion

    //#region Method For Create New Grid
    $scope.objCreateNewGrid.OnNextClick = function () {
        if ($scope.objGridObjectField.lstFields && $scope.objGridObjectField.lstFields.length > 0) {
            var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
            var primaryKey = getPrimarykey(entityIntellisenseList, $scope.objGridObjectField.lstFields[0].Entity);

            if ($scope.objGridView && $scope.objGridView.dictAttributes && $scope.objCreateNewGrid.SelectedEntityField) {
                $scope.objGridView.dictAttributes.sfwEntityField = $scope.objCreateNewGrid.SelectedEntityField.ID;
            }
        }
        if ($scope.objGridView && $scope.objGridView.dictAttributes && $scope.objCreateNewGrid.SelectedEntityField) {
            $scope.objGridView.dictAttributes.sfwEntityField = $scope.objCreateNewGrid.SelectedEntityField.ID;
        }
    };
    //#endregion

    //#region Method For Grid Obejct Field

    $scope.objGridObjectField.OnNextClick = function () {
        var lstList = [];
        $scope.objGridField.FieldCollection = [];
        lstList = $scope.objGridObjectField.lstselectedmultiplelevelfield;//GetSelectedFieldList($scope.objGridObjectField.lstFields, lstList);
        if (lstList.length > 0) {
            var primaryKeyFileds = [];
            //if (!string.IsNullOrEmpty(this.objGridView.BusObjKeyFields))
            //{
            //    primaryKeyFileds = this.objGridView.BusObjKeyFields.Split(',');
            //}
            var intCountPrimary = 0;
            angular.forEach(lstList, function (obj) {
                var objModel = obj.FieldObject;
                var sfxField = {};

                sfxField.istrFieldName = objModel.ID;
                sfxField.istrObjectID = objModel.Value;
                sfxField.istrDataType = objModel.DataType;
                var entityname = obj.Entity;
                sfxField.istrEntityName = entityname;
                sfxField.istrItemPath = obj.EntityField;//GetItemPathForEntityObject(objModel);
                sfxField.istrControlType = "Label";

                if (objModel) {
                    //var strHeaderText = sfxField.istrFieldName.substring(sfxField.istrFieldName.lastIndexOf('.') + 1);
                    var strHeaderText = GetCaptionFromField(objModel);
                    sfxField.istrHeader = strHeaderText;
                }

                sfxField.istrPropertyName = obj.EntityField;//GetItemPathForEntityObject(objModel);
                sfxField.istrVisible = "True";

                //if (null != primaryKeyFileds)
                //{
                //    if (null != primaryKeyFileds.FirstOrDefault(key => key == sfxField.istrItemPath))
                //    {
                //        intCountPrimary += 1;
                //        sfxField.istrKey = intCountPrimary.ToString();
                //    }
                //}

                $scope.objGridField.FieldCollection.push(sfxField);
            });
        }

        if ($scope.objCreateNewGrid && $scope.objCreateNewGrid.SelectedEntityField) {
            var strControlID = $scope.objCreateNewGrid.SelectedEntityField.ID;
            strControlID = CreateControlID($scope.formodel, $scope.objCreateNewGrid.SelectedEntityField.ID, "sfwGridView");
            $scope.objGridView.dictAttributes.ID = strControlID;
        }
    };

    //#endregion

    //#region Method For Grid Fields

    //#region Variables
    $scope.objGridField.ArrControlTypes = [];
    $scope.objGridField.ArrDataFormat = [];
    $scope.objGridField.ArrDataKey = [];
    $scope.objGridField.ArrSort = [];
    $scope.objGridField.ArrOrder = [];
    $scope.objGridField.ArrRelativeControl = [];
    $scope.objGridField.FieldCollection = [];
    //#endregion

    $scope.objGridField.ChangeSortExpression = function (selectedcolumn) {
        if (selectedcolumn && !selectedcolumn.istrSort) {
            selectedcolumn.istrOrder = "";
        }
    };

    $scope.objGridField.LoadControlTypes = function () {
        $scope.objGridField.ArrControlTypes = [];
        $scope.objGridField.ArrControlTypes.push("");
        $scope.objGridField.ArrControlTypes.push("Label");
        $scope.objGridField.ArrControlTypes.push("HyperLink");
        $scope.objGridField.ArrControlTypes.push("TextBox");
        $scope.objGridField.ArrControlTypes.push("Checkbox");
        $scope.objGridField.ArrControlTypes.push("DropDownList");
    };

    $scope.objGridField.LoadDataFormat = function () {
        $scope.objGridField.ArrDataFormat = [];
        $scope.objGridField.ArrDataFormat.push("");
        $scope.objGridField.ArrDataFormat.push("{0:d}");              // Date
        $scope.objGridField.ArrDataFormat.push("{0:C}");              // Currency
        $scope.objGridField.ArrDataFormat.push("{0:000-##-####}");    // SSN
        $scope.objGridField.ArrDataFormat.push("{0:(###)###-####}");  // Phone/Fax
    };

    $scope.objGridField.LoadDataKey = function () {
        $scope.objGridField.ArrDataKey = [];
        $scope.objGridField.ArrDataKey.push("");
        $scope.objGridField.ArrDataKey.push("1");
        $scope.objGridField.ArrDataKey.push("2");
        $scope.objGridField.ArrDataKey.push("3");
        $scope.objGridField.ArrDataKey.push("4");
        $scope.objGridField.ArrDataKey.push("5");
    };

    $scope.objGridField.LoadSort = function () {
        $scope.objGridField.ArrSort = [];
        $scope.objGridField.ArrSort.push("");
        $scope.objGridField.ArrSort.push("1");
        $scope.objGridField.ArrSort.push("2");
        $scope.objGridField.ArrSort.push("3");
    };

    $scope.objGridField.LoadOrder = function () {
        $scope.objGridField.ArrOrder = [];
        $scope.objGridField.ArrOrder.push("");
        $scope.objGridField.ArrOrder.push("asc");
        $scope.objGridField.ArrOrder.push("desc");
    };

    $scope.objGridField.LoadRelativeControl = function () {
        $scope.objGridField.ArrRelativeControl = [];
        $scope.objGridField.ArrRelativeControl.push("");

        angular.forEach(ialGridButtons, function (theButton) {
            var strButtonID = theButton.dictAttributes.ID;
            if (strButtonID) {
                $scope.objGridField.ArrRelativeControl.push(strButtonID);
            }
        });
    };

    $scope.objGridField.onFieldClick = function (obj) {
        $scope.objGridField.SelectGridField = obj;
    };

    $scope.objGridField.MoveUpField = function () {
        if ($scope.objGridField.SelectGridField) {
            var index = $scope.objGridField.FieldCollection.indexOf($scope.objGridField.SelectGridField);
            var item = $scope.objGridField.FieldCollection[index - 1];
            $scope.objGridField.FieldCollection[index - 1] = $scope.objGridField.SelectGridField;
            $scope.objGridField.FieldCollection[index] = item;
        }
    };

    $scope.objGridField.MoveDownField = function () {
        if ($scope.objGridField.SelectGridField) {
            var index = $scope.objGridField.FieldCollection.indexOf($scope.objGridField.SelectGridField);
            var item = $scope.objGridField.FieldCollection[index + 1];
            $scope.objGridField.FieldCollection[index + 1] = $scope.objGridField.SelectGridField;
            $scope.objGridField.FieldCollection[index] = item;
        }
    };

    $scope.objGridField.CanMoveUp = function () {
        var retVal = false;
        if ($scope.objGridField.SelectGridField) {
            var index = $scope.objGridField.FieldCollection.indexOf($scope.objGridField.SelectGridField);
            if (index == 0) {
                retVal = true;
            }
        }
        else {
            retVal = true;
        }
        return retVal;
    };
    $scope.objGridField.CanMoveDown = function () {
        var retVal = false;
        if ($scope.objGridField.SelectGridField) {
            var index = $scope.objGridField.FieldCollection.indexOf($scope.objGridField.SelectGridField);
            if (index == $scope.objGridField.FieldCollection.length - 1) {
                retVal = true;
            }
        }
        else {
            retVal = true;
        }
        return retVal;
    };

    //#endregion

    //#endregion

    //#endregion

    //#region Method For New Method Wizard Pages

    $scope.InitForNewButtonMethod = function () {
        var objGrid = FindParent($scope.sfxCell, "sfwGridView");
        if (objGrid) {
            $scope.objNewButtonActiveForm.objRelatedGrid = objGrid;
            $scope.alControls = [];
            $scope.PopulateControlsForActiveForm($scope.alControls, iblnIsLookup);
        }
        $scope.objNewButtonActiveForm.ActiveFormCollection = [];
        $scope.objNewButtonActiveForm.lstRelatedControl = [];
        var iblnIsLookup = $scope.formodel.dictAttributes.sfwType.toUpperCase() == "LOOKUP";
        var strParent = "";
        if ($scope.sfxControl.dictAttributes.sfwMethodName == "btnNew_Click" || $scope.sfxControl.dictAttributes.sfwMethodName == "btnNewUpdate_Click") {
            if (iblnIsLookup)
                strParent = "tblCriteria panel fields";
            else
                strParent = "Form fields";
        }
        else if ($scope.sfxControl.dictAttributes.sfwMethodName == "btnOpen_Click") {
            PopulateRelatedGrid($scope.formodel, $scope.objNewButtonActiveForm.lstRelatedControl, false);
            var strGridID = $scope.sfxControl.dictAttributes.sfwRelatedControl;
            if (strGridID == "")
                strParent = "Grid fields";
            else
                strParent = strGridID + " fields";
        }
        $scope.alControls = [];
        $scope.PopulateControlsForActiveForm($scope.alControls, iblnIsLookup);
        $scope.objNewButtonActiveForm.StrActiveForm = $scope.sfxControl.dictAttributes.sfwActiveForm;

        $scope.objNewButtonActiveForm.StrEntityField = $scope.sfxControl.dictAttributes.sfwEntityField;
        $scope.InitializeActiveForms($scope.objNewButtonActiveForm.StrActiveForm, $scope.sfxControl.dictAttributes.sfwEntityField, $scope.alControls, strParent);

        $scope.objNewButtonActiveForm.ActiveFormType = 'SingleForm';
        function iterator(itm) {
            if (itm) {
                $scope.objNewButtonActiveForm.lstRelatedControl.push(itm);
            }
        }
        if ($scope.sfxControl.dictAttributes.sfwMethodName == "btnNew_Click") {
            if ($scope.objNewButtonActiveForm.lstFields && $scope.objNewButtonActiveForm.lstFields.length > 0) {
                angular.forEach($scope.objNewButtonActiveForm.lstFields, iterator);
            }
        }
    };

    //#region New Button Active Form  Method

    $scope.objNewButtonActiveForm.onRelatedControlChanged = function () {
        $scope.objNewButtonActiveForm.ActiveFormCollection = [];
        var iblnIsLookup = $scope.formodel.dictAttributes.sfwType.toUpperCase() == "LOOKUP";
        if ($scope.sfxControl.dictAttributes.sfwRelatedControl != undefined && $scope.sfxControl.dictAttributes.sfwRelatedControl != "") {
            if ($scope.sfxControl.dictAttributes.sfwMethodName == "btnOpen_Click") {
                var strGridID = $scope.sfxControl.dictAttributes.sfwRelatedControl;
                if (strGridID == "")
                    strParent = "Grid fields";
                else
                    strParent = strGridID + " fields";

                $scope.alControls = [];

                $scope.PopulateControlsForActiveForm($scope.alControls, iblnIsLookup);
                $scope.objNewButtonActiveForm.StrActiveForm = $scope.sfxControl.dictAttributes.sfwActiveForm;

                $scope.objNewButtonActiveForm.StrEntityField = $scope.sfxControl.dictAttributes.sfwEntityField;
                $scope.InitializeActiveForms($scope.objNewButtonActiveForm.StrActiveForm, $scope.sfxControl.dictAttributes.sfwEntityField, $scope.alControls, strParent);
            }
            else if ($scope.sfxControl.dictAttributes.sfwMethodName == "btnNew_Click") {
                $scope.objNewButtonActiveForm.alCodeVal = [];
                if ($scope.sfxControl.dictAttributes.sfwRelatedControl) {
                    var objControl = FindControlByID($scope.formodel, $scope.sfxControl.dictAttributes.sfwRelatedControl);
                    if (objControl && objControl.dictAttributes && objControl.dictAttributes.sfwLoadType == "CodeGroup") {
                        $scope.IsValue = true;
                        if (objControl.dictAttributes.sfwLoadSource) {
                            $.connection.hubMain.server.getCodeValues("ScopeId_" + $scope.$id, objControl.dictAttributes.sfwLoadSource);
                        }
                        else if (objControl.placeHolder) {
                            $.connection.hubMain.server.getCodeValues("ScopeId_" + $scope.$id, objControl.placeHolder);
                        }
                    }
                    else {
                        $scope.IsValue = false;
                    }
                }
            }
        }
    };

    $scope.PopulateControlsForActiveForm = function (alControls, iblnIsLookup) {
        if ($scope.sfxControl) {
            var altmpControls = [];
            if ($scope.sfxControl.dictAttributes.sfwMethodName == "btnNew_Click" || $scope.sfxControl.dictAttributes.sfwMethodName == "btnNewUpdate_Click") {
                if (iblnIsLookup)
                    GetAllControls($scope.formodel, "sfwLabel,sfwTextBox,sfwDropDownList,sfwCheckBox,sfwRadioButtonList,sfwLinkButton", "tblcriteria", "", false, altmpControls, false);
                else
                    GetAllControls($scope.formodel, "sfwLabel,sfwTextBox,sfwDropDownList,sfwCheckBox,sfwRadioButtonList,sfwLinkButton,sfwScheduler", "", "", false, altmpControls, true);
            }
            else if ($scope.sfxControl.dictAttributes.sfwMethodName == "btnOpen_Click") {
                var strGridID = $scope.sfxControl.dictAttributes.sfwRelatedControl;
                if ($scope.objNewButtonActiveForm.objRelatedGrid && $scope.objNewButtonActiveForm.objRelatedGrid.dictAttributes) {
                    strGridID = $scope.objNewButtonActiveForm.objRelatedGrid.dictAttributes.ID;
                }
                if (strGridID != "")
                    GetAllControls($scope.formodel, "", "", strGridID, false, altmpControls);
            }

            angular.forEach(altmpControls, function (objCtrl) {
                var strCodeGroup = "";
                if ("sfwLoadSource" in objCtrl.dictAttributes) {
                    strCodeGroup = objCtrl.dictAttributes.sfwLoadSource;
                }
                if (strCodeGroup == "" || strCodeGroup == "0") {
                    strCodeGroup = "~";
                    if (objCtrl.Elements.length > 0) {
                        // System.Web.UI.WebControls.ListItemCollection listItems = ((System.Web.UI.WebControls.ListControl)objCtrl.webctrl).Items;
                        angular.forEach(objCtrl.Elements, function (item) {
                            if (item.Name == "ListItem") {
                                if (item.dictAttributes.Value) {
                                    strCodeGroup += item.dictAttributes.Value + ",";
                                }
                            }
                        });
                    }
                }
                if (iblnIsLookup) {
                    if ("sfwDataField" in objCtrl.dictAttributes && objCtrl.dictAttributes.sfwDataField) {
                        if ($scope.sfxControl.dictAttributes.sfwMethodName == "btnNew_Click") {
                            alControls.push(objCtrl.dictAttributes.ID + "~" + strCodeGroup);
                        }
                        else {
                            alControls.push(objCtrl.dictAttributes.sfwDataField + "~" + strCodeGroup);
                        }
                    }
                }
                else {
                    if ("sfwEntityField" in objCtrl.dictAttributes && objCtrl.dictAttributes.sfwEntityField) {
                        alControls.push(objCtrl.dictAttributes.sfwEntityField);
                    }
                }
            });
        }
    };

    $scope.InitializeActiveForms = function (astrActiveForms, astrObjectField, alAvlFlds, astrParentID) {
        $scope.objNewButtonActiveForm.lstFields = [];
        ilAvlFlds = alAvlFlds;

        if ($scope.sfxControl.dictAttributes.sfwMethodName == "btnNew_Click" || $scope.sfxControl.dictAttributes.sfwMethodName == "btnNewUpdate_Click") {
            GetObjectFields($scope.formodel, $scope.objNewButtonActiveForm.lstFields, $scope.sfxControl);
        }
        else if ($scope.sfxControl.dictAttributes.sfwMethodName == "btnDelete_Click") {
        }
        else if ($scope.sfxControl.dictAttributes.sfwMethodName == "btnOpen_Click") {
            var strMessage = "(Object Fields are populated from the " + astrParentID + ".)";

            $scope.objNewButtonActiveForm.lstFields.push("");

            if (alAvlFlds.length > 0) {
                for (var i = 0; i < alAvlFlds.length; i++) {
                    var s = alAvlFlds[i];
                    var strParamValue = "";
                    if (s.indexOf("~") > -1)
                        strParamValue = s.substring(0, s.indexOf("~"));
                    else
                        strParamValue = s;
                    $scope.objNewButtonActiveForm.lstFields.push(strParamValue);
                }
            }
        }
    };

    $scope.objNewButtonActiveForm.OnAddExpressionClick = function () {
        var objActiveForm = { FieldValue: "", ActiveForm: "" };

        $scope.objNewButtonActiveForm.ActiveFormCollection.push(objActiveForm);
        $scope.objNewButtonActiveForm.SelectedExpression = objActiveForm;
    };

    $scope.objNewButtonActiveForm.OnDeleteExpressionClick = function () {
        if ($scope.objNewButtonActiveForm.SelectedExpression != null) {
            var index = $scope.objNewButtonActiveForm.lstFields.indexOf($scope.objNewButtonActiveForm.SelectedExpression);
            $scope.objNewButtonActiveForm.ActiveFormCollection.splice(index, 1);
            if ($scope.objNewButtonActiveForm.ActiveFormCollection.length > 0) {
                $scope.objNewButtonActiveForm.SelectedExpression = $scope.objNewButtonActiveForm.ActiveFormCollection[$scope.objNewButtonActiveForm.ActiveFormCollection.length - 1];
            }
            else {
                $scope.objNewButtonActiveForm.SelectedExpression = $scope.objNewButtonActiveForm.ActiveFormCollection[0];
            }
        }
    };

    $scope.objNewButtonActiveForm.onEntityFieldChange = function () {
        $scope.IsValue = false;
        $scope.objNewButtonActiveForm.alCodeVal = [];
        var fieldName;
        if ($scope.objNewButtonActiveForm.StrEntityField) {
            fieldName = $scope.objNewButtonActiveForm.StrEntityField;
            var strentityName = $scope.formodel.dictAttributes.sfwEntity;
            if ($scope.sfxControl.dictAttributes.sfwMethodName == "btnOpen_Click") {
                objControl = FindControlByID($scope.formodel, $scope.sfxControl.dictAttributes.sfwRelatedControl);
                if ($scope.objNewButtonActiveForm.objRelatedGrid && $scope.objNewButtonActiveForm.objRelatedGrid.dictAttributes) {
                    objControl = $scope.objNewButtonActiveForm.objRelatedGrid;
                }
                if (objControl && objControl.dictAttributes && objControl.dictAttributes.sfwEntityField) {
                    var objAttribute = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(strentityName, objControl.dictAttributes.sfwEntityField);
                    if (objAttribute) {
                        strentityName = objAttribute.Entity;
                    }
                }
            }

            var lstEntity = $EntityIntellisenseFactory.getEntityIntellisense().filter(function (itm) {
                return itm.ID == strentityName;
            });
            if (lstEntity && lstEntity.length > 0) {
                var attribute = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(strentityName, fieldName);
                if (attribute) {
                    var value = attribute.Value;
                    if (value.match("_value$")) {
                        var val = value.replace("_value", "_id");
                        var valAttribute = $GetEntityFieldObjectService.GetEntityFieldObjectFromFieldValue(strentityName, val);
                        if (valAttribute) {
                            $scope.IsValue = true;
                            var strCodeID = valAttribute.CodeID;
                            $.connection.hubMain.server.getCodeValues("ScopeId_" + $scope.$id, strCodeID);
                        }
                    }
                }
            }
        }
    };

    $scope.receiveList = function (data) {
        $scope.$evalAsync(function () {
            var lstCodeVal = data;
            if (lstCodeVal && lstCodeVal.length > 0) {
                $scope.objNewButtonActiveForm.alCodeVal.push("");
                angular.forEach(lstCodeVal, function (itm) {
                    $scope.objNewButtonActiveForm.alCodeVal.push(itm.CodeValue);
                });
            }
        });
    };

    $scope.objNewButtonActiveForm.objActiveFormTypeChange = function () {
        $scope.objNewButtonActiveForm.StrActiveForm = "";
        $scope.objNewButtonActiveForm.StrEntityField = "";
        $scope.objNewButtonActiveForm.ActiveFormCollection = [];
    };

    //#endregion

    //#region New Button Navigation Parameter Method

    $scope.objNewButtonNaviagtionParam.showAllControlChange = function () {
        $scope.$evalAsync(function () {
            $scope.objNewButtonNaviagtionParam.PopulateAvailableFields();
        });
    };

    $scope.objNewButtonNaviagtionParam.Init = function () {
        if ($scope.IsOpenWordDocStepsDisable) {
            $scope.objNewButtonNaviagtionParam.ParameterCollection = [];
            $scope.objNewButtonNaviagtionParam.FieldCollection = [];
            $scope.objNewButtonNaviagtionParam.PopulateAvailableFields();

            var strMethodName = $scope.sfxControl.dictAttributes.sfwMethodName;
            var strParamValue = "";
            if (strMethodName == "btnExecuteServerMethod_Click" || strMethodName == "btnDownload_Click")
                strParamValue = $scope.sfxControl.dictAttributes.sfwObjectMethod;
            else if (strMethodName == "btnExecuteBusinessMethod_Click" || strMethodName == "btnCompleteWorkflowActivities_Click" ||
                strMethodName == "btnValidateExecuteBusinessMethod_Click") {
                if ($scope.sfxControl.dictAttributes.sfwEntityMethod) {
                    strParamValue = $scope.sfxControl.dictAttributes.sfwEntityMethod + '.' + $scope.sfxControl.dictAttributes.sfwObjectMethod;
                }
                else {
                    strParamValue = $scope.sfxControl.dictAttributes.sfwObjectMethod;
                }
            }
            else if (strMethodName == "btnExecuteBusinessMethodSelectRows_Click") {
                var strGridID = $scope.sfxControl.dictAttributes.sfwRelatedControl;
                var strParam = "";
                if (strGridID != undefined && strGridID != "") {
                    var lstTable = $scope.formodel.Elements.filter(function (itm) { return itm.Name == "sfwTable"; });
                    if (lstTable && lstTable.length > 0) {
                        strParamValue = strGridID + ":" + $scope.PopulateDataKeyForGrid(strGridID, lstTable[0], strParam);
                    }
                }
                else {
                    strParamValue = "";
                }
            }
            else if (strMethodName == "btnWizardFindAndNext_Click") {
                strParamValue = $scope.sfxControl.dictAttributes.sfwObjectMethod;
            }
            else if (strMethodName == "btnSaveNew_Click") {
                strParamValue = $scope.formodel.dictAttributes.ID;
            }
            else {
                if ($scope.sfxControl.dictAttributes.sfwActiveForm != undefined && $scope.sfxControl.dictAttributes.sfwActiveForm != "") {
                    strParamValue = $scope.sfxControl.dictAttributes.sfwActiveForm;
                }
                else
                    strParamValue = $scope.sfxControl.dictAttributes.sfwXmlDocument;
            }

            $scope.objNewButtonNaviagtionParam.PopulateParameters(strMethodName, strParamValue);
        }
    };

    $scope.objNewButtonNaviagtionParam.PopulateAvailableFields = function (strPropID) {
        $scope.objMainTable = undefined;
        var CurrentTable = undefined;
        if ($scope.formodel && $scope.sfxControl && $scope.sfxControl.dictAttributes && $scope.sfxControl.dictAttributes.sfwMethodName == "btnNew_Click") {
            var larrPanels = getDescendents($scope.formodel, "sfwPanel");
            if (larrPanels && larrPanels.length > 0) {
                var objPanel = larrPanels.filter(function (pnl) { return pnl.dictAttributes.ID === "pnlMain" || pnl.dictAttributes.ID === "pnlCriteria" })[0];
                if (objPanel && objPanel.Elements && objPanel.Elements.length > 0) {
                    CurrentTable = objPanel.Elements[0];
                }
            }
        }

        if (!CurrentTable) {
            CurrentTable = FindParent($scope.sfxCell, "sfwTable");
        }

        var lst = $scope.formodel.Elements.filter(function (x) { return x.Name == "sfwTable"; });
        if (lst && lst.length > 0) {
            $scope.objMainTable = lst[0];
        }

        $scope.objNewButtonNaviagtionParam.FieldCollection = [];
        if ($scope.formodel) {
            var istrValue = $scope.formodel.dictAttributes.sfwType;
            var blnIsLookup = istrValue.toUpperCase().trim() == "LOOKUP";

            var strProperty;
            var isNewButton = false;
            if ($scope.sfxControl && $scope.sfxControl.dictAttributes && $scope.sfxControl.dictAttributes.sfwMethodName == "btnNew_Click") {
                strProperty = "ID";
                isNewButton = true;
            }
            else if (blnIsLookup)
                strProperty = "sfwDataField";
            else
                strProperty = "sfwEntityField";

            var objControl = { Text: "Main", Items: [], IsSelected: false, IsCheckBoxVisible: false };
            objControl.ControlName = "Main";

            if ($scope.objNewButtonNaviagtionParam.IsShowAllControl) {
                PopulateAvailableFields(strProperty, $scope.objMainTable, objControl, false, blnIsLookup, isNewButton);
            }
            else {
                if (CurrentTable) {
                    PopulateAvailableFields(strProperty, CurrentTable, objControl, false, blnIsLookup, isNewButton);
                }
                else {
                    PopulateAvailableFields(strProperty, $scope.objMainTable, objControl, false, blnIsLookup, isNewButton);
                }
            }
            if (objControl.Items.length > 0)
                $scope.objNewButtonNaviagtionParam.FieldCollection.push(objControl);
            // tvFields.DataContext = list;
        }
    };

    $scope.objNewButtonNaviagtionParam.AddParamGridRow = function (astrParamType, astrParamField, astrParamValue, astrControlID) {
        var objParameter = {};
        objParameter.Type = astrParamType;
        objParameter.ParameterField = astrParamField;
        if (astrParamValue) {
            if (astrParamValue.match("^#")) {
                objParameter.Constants = true;
                objParameter.ParameterValue = astrParamValue.substring(1);
            }
            else {
                objParameter.ParameterValue = astrParamValue;
            }
            objParameter.EntityField = astrParamValue;
            objParameter.IsReadOnly = true;
        }
        objParameter.ControlID = astrControlID;
        $scope.objNewButtonNaviagtionParam.ParameterCollection.push(objParameter);
    };

    $scope.objNewButtonNaviagtionParam.PopulateParameters = function (astrMethodName, astrParamValue) {
        $scope.objNewButtonNaviagtionParam.IsControlIDVisible = false;
        $scope.objNewButtonNaviagtionParam.TargetFormCaption = "Target Form:";
        var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
        if (astrMethodName == "btnSave_Click" ||
            astrMethodName == "btnNoChangesSave_Click" ||
            astrMethodName == "btnForceSave_Click" ||
            astrMethodName == "btnWizardSaveAndNext_Click" ||
            astrMethodName == "btnWizardSaveAndPrevious_Click" ||
            astrMethodName == "btnSaveAndNext_Click" ||
            astrMethodName == "btnSaveIgnoreReadOnly_Click")  // Load parameters from the source form.
        {
            if ($scope.formodel) {
                var InitialLoadVM;
                $scope.objNewButtonNaviagtionParam.TargetForm = $scope.formodel.dictAttributes.ID;
                var lst = $scope.formodel.Elements.filter(function (x) { return x.Name == "initialload"; });
                if (lst && lst.length > 0) {
                    InitialLoadVM = lst[0];
                }

                if (InitialLoadVM) {
                    var strMethod = "";
                    var lst = InitialLoadVM.Elements.filter(function (x) { return x.Name == "callmethods" && (x.dictAttributes.sfwMode == "" || x.dictAttributes.sfwMode == undefined || x.dictAttributes.sfwMode == "Update"); });
                    if (lst && lst.length) {
                        strMethod = lst[0].dictAttributes.sfwMethodName;
                    }


                    if (strMethod != undefined && strMethod != "") {
                        if ($scope.formodel.dictAttributes.sfwRemoteObject) {
                            var objServerObject = GetServerMethodObject($scope.formodel.dictAttributes.sfwRemoteObject, $scope.formodel.RemoteObjectCollection);
                            var paramerters = GetSrvMethodParameters(objServerObject, strMethod);
                            if (paramerters) {
                                for (j = 0; j < paramerters.length; j++) {
                                    $scope.objNewButtonNaviagtionParam.AddParamGridRow(paramerters[j].dictAttributes.sfwDataType, paramerters[j].dictAttributes.ID, "");
                                }
                            }
                        }
                        else {
                            var EntityObject = entityIntellisenseList.filter(function (x) { return x.ID == $scope.formodel.dictAttributes.sfwEntity; });
                            if (EntityObject && EntityObject[0].XmlMethods != undefined && EntityObject[0].XmlMethods.length > 0) {
                                for (i = 0; i < EntityObject[0].XmlMethods.length; i++) {
                                    if (EntityObject[0].XmlMethods[i].ID == strMethod) {
                                        for (j = 0; j < EntityObject[0].XmlMethods[i].Parameters.length; j++) {
                                            $scope.objNewButtonNaviagtionParam.AddParamGridRow(EntityObject[0].XmlMethods[i].Parameters[j].DataType, EntityObject[0].XmlMethods[i].Parameters[j].ID, EntityObject[0].XmlMethods[i].Parameters[j].Value);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else if (astrMethodName == "btnExecuteServerMethod_Click" ||
            astrMethodName == "btnWizardFindAndNext_Click" || astrMethodName == "btnDownload_Click")  // Load server method parameters.
        {
            $scope.objNewButtonNaviagtionParam.TargetFormCaption = "Server Method:";

            if (astrParamValue == undefined || astrParamValue == "") { return; }

            var strObjectMethod = astrParamValue.trim();
            $scope.objNewButtonNaviagtionParam.TargetForm = strObjectMethod;

            if (strObjectMethod == "" || strObjectMethod == undefined)
                return;
            var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();

            var RemoteObjectName = "srvCommon";
            if ($scope.formodel && $scope.formodel.dictAttributes.sfwRemoteObject) {
                RemoteObjectName = $scope.formodel.dictAttributes.sfwRemoteObject;
            }

            var objServerObject = GetServerMethodObject(RemoteObjectName, $scope.formodel.RemoteObjectCollection);
            var paramerters = GetSrvMethodParameters(objServerObject, strObjectMethod);
            angular.forEach(paramerters, function (objParam) {
                $scope.objNewButtonNaviagtionParam.AddParamGridRow(objParam.dictAttributes.sfwDataType, objParam.dictAttributes.ID, "");
            });
        }
        else if (astrMethodName == "btnExecuteBusinessMethod_Click" ||
            astrMethodName == "btnValidateExecuteBusinessMethod_Click" || astrMethodName == "btnCompleteWorkflowActivities_Click")
        // Load business object method parameters.
        {
            var lstData = [];
            if ($scope.objNewButtonServerMethod && $scope.objNewButtonServerMethod.sfwExecuteMethodType) {
                if ($scope.objNewButtonServerMethod.sfwExecuteMethodType == "ObjectMethod") {
                    $scope.objNewButtonNaviagtionParam.TargetFormCaption = "Object Method:";

                    if ($scope.entityName) {
                        lstData = $Entityintellisenseservice.GetIntellisenseData($scope.entityName, "", "", true, false, true, false, false, false);
                    }
                    else {
                        lstData = $Entityintellisenseservice.GetIntellisenseData($scope.formodel.dictAttributes.sfwEntity, "", "", true, false, true, false, false, false);
                    }
                }
                else if ($scope.objNewButtonServerMethod.sfwExecuteMethodType == "XmlMethod") {
                    $scope.objNewButtonNaviagtionParam.TargetFormCaption = "Xml Method:";
                    if ($scope.entityName) {
                        lstData = $Entityintellisenseservice.GetIntellisenseData($scope.entityName, "", "", true, false, false, false, false, true);
                    }
                    else {
                        lstData = $Entityintellisenseservice.GetIntellisenseData($scope.formodel.dictAttributes.sfwEntity, "", "", true, false, false, false, false, true);
                    }
                }
                else if ($scope.objNewButtonServerMethod.sfwExecuteMethodType == "Rule") {
                    $scope.objNewButtonNaviagtionParam.TargetFormCaption = "Rule:";
                    if ($scope.entityName) {
                        lstData = $Entityintellisenseservice.GetIntellisenseData($scope.entityName, "", "", true, false, false, true, false, false);
                    }
                    else {
                        lstData = $Entityintellisenseservice.GetIntellisenseData($scope.formodel.dictAttributes.sfwEntity, "", "", true, false, false, true, false, false);
                    }
                }
            }
            else {
                $scope.objNewButtonNaviagtionParam.TargetFormCaption = "Object Method:";
                if ($scope.entityName) {
                    lstData = $Entityintellisenseservice.GetIntellisenseData($scope.entityName, "", "", true, false, true, false, false, false);
                }
                else {
                    lstData = $Entityintellisenseservice.GetIntellisenseData($scope.formodel.dictAttributes.sfwEntity, "", "", true, false, true, false, false, false);
                }
            }

            var strObjectMethod = astrParamValue.trim();
            $scope.objNewButtonNaviagtionParam.TargetForm = strObjectMethod;

            if (strObjectMethod == "" || strObjectMethod == undefined)
                return;

            var strObjectID = "";
            if (strObjectMethod.contains(".")) {
                strObjectID = strObjectMethod.substring(0, strObjectMethod.indexOf('.'));
                strObjectMethod = strObjectMethod.substring(strObjectMethod.indexOf('.') + 1);
            }

            var lsttempData = [];
            var objMethod;
            if (lstData) {
                angular.forEach(lstData, function (item) {
                    if (!objMethod) {
                        if (item.ID == strObjectMethod) {
                            objMethod = item;
                        }
                    }
                });
            }

            if (objMethod) {
                var paramerters = objMethod.Parameters;
                //var paramerters = GetObjectMethodParameters(entityIntellisenseList, $scope.formobject.dictAttributes.sfwEntity, strObjectMethod);
                if (paramerters) {
                    angular.forEach(paramerters, function (objParam) {

                        if (objMethod.RuleType && ["LogicalRule", "DecisionTable", "ExcelMatrix"].indexOf(objMethod.RuleType) > -1) {
                            if (objParam.Direction == "In") {
                                if (astrMethodName == "btnExecuteBusinessMethodSelectRows_Click") {
                                    if (["Object", "Collection", "List"].indexOf(objParam.DataType) > -1) {

                                        $scope.objNewButtonNaviagtionParam.AddParamGridRow(objParam.DataType, objParam.ID, null);
                                    }
                                }
                                else {

                                    $scope.objNewButtonNaviagtionParam.AddParamGridRow(objParam.DataType, objParam.ID, null);

                                }
                            }

                        }
                        else {
                            $scope.objNewButtonNaviagtionParam.AddParamGridRow(objParam.DataType, objParam.ID, null);
                        }

                    });
                }
            }

            // var paramerters = GetObjectMethodParameters(entityIntellisenseList, $scope.formodel.dictAttributes.sfwEntity, strObjectMethod);
        }
        //else if (astrMethodName == "btnExecuteBusinessMethodSelectRows_Click" || astrMethodName == "btnCompleteWorkflowActivities_Click")
        //{
        //    this.TargetFormCaption = "Target Grid:";
        //    if (astrParamValue != string.Empty && astrParamValue.IndexOf(":") > 0)
        //    {
        //        this.TargetForm = astrParamValue.Substring(0, astrParamValue.IndexOf(":"));
        //        string istrParamValue = astrParamValue.Substring(astrParamValue.IndexOf(":") + 1).Trim();
        //        string[] strDataKeyNames = istrParamValue.Split(',');
        //        foreach (string strDataKey in strDataKeyNames)
        //        {
        //            AddParamGridRow("Data Key", strDataKey);
        //    }
        //}
        //else
        //{
        //  $scope.objNewButtonNaviagtionParam.TargetForm = "Please provide the related control.";
        //}
        else if (astrMethodName == "btnSaveNew_Click") {
            $scope.objNewButtonNaviagtionParam.TargetForm = $scope.formodel.dictAttributes.ID;
            $scope.receivenewformmodel($scope.formodel);
        }
        else // Load parameters from the target form. If Active Form is a list of forms, take the first one.
        {
            if (astrParamValue == undefined || astrParamValue == "") { return; }

            var strActiveForm = astrParamValue.trim();

            var alForms = strActiveForm.split(';');
            if (alForms.length > 0) {
                strActiveForm = alForms[0];
                var target = "";
                for (var i = 0; i < alForms.length; i++) {
                    var form = alForms[i];
                    if (form.contains("="))
                        form = form.substring(form.indexOf('=') + 1);
                    if (target == "") {
                        target += form;
                    } else {
                        target += ";" + form;
                    }
                }
            }

            if (strActiveForm.contains("="))
                strActiveForm = strActiveForm.substring(strActiveForm.indexOf('=') + 1);

            $scope.objNewButtonNaviagtionParam.TargetForm = target;


            $.connection.hubForm.server.getNewFormModel(strActiveForm).done(function (data) {
                $scope.receivenewformmodel(data);
            });
            $rootScope.IsLoading = true;
        }
    };

    $scope.receivenewformmodel = function (data) {
        $scope.$evalAsync(function () {
            $rootScope.IsLoading = false;
            var objSfxForm = data;
            var astrMethodName = $scope.sfxControl.dictAttributes.sfwMethodName;
            if (objSfxForm) {
                var istrValue = objSfxForm.dictAttributes.sfwType;
                var blnIsLookup = istrValue.toUpperCase().trim() == "LOOKUP";

                if (blnIsLookup) {
                    $scope.objNewButtonNaviagtionParam.IsSaveWithControlIDVisible = true;

                    $scope.objNewButtonNaviagtionParam.IsControlIDVisible = true;
                    var lstTable = objSfxForm.Elements.filter(function (itm) { return itm.Name == "sfwTable"; });
                    if (lstTable && lstTable.length > 0) {
                        var sfxCriteriaPanel = GetCriteriaPanel(lstTable[0]);
                        if (sfxCriteriaPanel) {
                            angular.forEach(sfxCriteriaPanel.Elements, function (sfxRow) {
                                angular.forEach(sfxRow.Elements, function (sfxCell) {
                                    if (sfxCell) {
                                        angular.forEach(sfxCell.Elements, function (sfxCtrl) {
                                            if ("sfwDataField" in sfxCtrl.dictAttributes) {
                                                var strFieldName = sfxCtrl.dictAttributes.sfwDataField;
                                                var strControlID = sfxCtrl.dictAttributes.ID;
                                                if (strFieldName != "" && strFieldName != undefined)
                                                    $scope.objNewButtonNaviagtionParam.AddParamGridRow("Criteria Field", strFieldName, "", strControlID);
                                            }
                                        });
                                    }
                                });
                            });
                        }
                    }
                }
                else {
                    var blnNewButton = astrMethodName == "btnNew_Click"
                        || astrMethodName == "btnUpdate_Click" || astrMethodName == "btnSaveNew_Click";
                    var InitialLoadVM;
                    var lst = objSfxForm.Elements.filter(function (x) { return x.Name == "initialload"; });
                    if (lst && lst.length > 0) {
                        InitialLoadVM = lst[0];
                    }

                    if (InitialLoadVM) {
                        var strMethod = "";
                        var lst = InitialLoadVM.Elements.filter(function (x) { return x.Name == "callmethods" && (x.dictAttributes.sfwMode == "" || x.dictAttributes.sfwMode == undefined || x.dictAttributes.sfwMode == "Update"); });
                        if (lst && lst.length) {
                            strMethod = lst[0].dictAttributes.sfwMethodName;
                        }

                        if (blnNewButton) {
                            var lst = InitialLoadVM.Elements.filter(function (x) { return x.Name == "callmethods" && (x.dictAttributes.sfwMode == "" || x.dictAttributes.sfwMode == undefined || x.dictAttributes.sfwMode == "New"); });
                            if (lst && lst.length) {
                                strMethod = lst[0].dictAttributes.sfwMethodName;
                            }
                        }

                        if (strMethod != undefined && strMethod != "") {
                            var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                            if (objSfxForm.dictAttributes.sfwRemoteObject != undefined && objSfxForm.dictAttributes.sfwRemoteObject != "") {
                                var objServerObject = GetServerMethodObject(objSfxForm.dictAttributes.sfwRemoteObject, $scope.formodel.RemoteObjectCollection);
                                var paramerters = GetSrvMethodParameters(objServerObject, strMethod);
                                if (paramerters) {
                                    for (j = 0; j < paramerters.length; j++) {
                                        $scope.objNewButtonNaviagtionParam.AddParamGridRow(paramerters[j].dictAttributes.sfwDataType, paramerters[j].dictAttributes.ID, "");
                                        //var objParameter = { ParameterField: paramerters[j].dictAttributes.ID, ParameterValue: "", Constants: false };
                                        //vrParCollection.push(objParameter);
                                    }
                                }
                            }
                            else {
                                var paramerters = GetEntityXMLMethodParameters(entityIntellisenseList, objSfxForm.dictAttributes.sfwEntity, strMethod);
                                if (paramerters) {
                                    angular.forEach(paramerters, function (objParam) {
                                        $scope.objNewButtonNaviagtionParam.AddParamGridRow(objParam.DataType, objParam.ID, objParam.Value);
                                    });
                                }
                            }
                        }

                        if (blnNewButton) {
                            var lst = InitialLoadVM.Elements.filter(function (x) { return x.Name == "session"; });
                            if (lst && lst.length > 0) {
                                angular.forEach(lst[0].Elements, function (objSessionField) {
                                    $scope.objNewButtonNaviagtionParam.AddParamGridRow("Session Field", objSessionField.dictAttributes.ID);
                                });
                            }
                        }
                    }
                }
            }
        });
    };

    $scope.ExpandCollapsedCustomAttrField = function (field, event) {
        field.IsExpanded = !field.IsExpanded;
    };

    $scope.SetFieldClass = function (obj) {
        if (obj == $scope.SelectedField) {
            return "selected";
        }
    };

    $scope.SelectFieldClick = function (obj, event) {
        //if (event.ctrlKey) {
        //    if (obj.IsSelected) {
        //        obj.IsSelected = false;
        //    } else {
        //        obj.IsSelected = true;
        //    }
        //} else {
        //    if (obj.IsSelected) {
        //        // do nothing
        //    } else {
        //        if ($scope.objNewButtonCustomAttr.FieldCollection && $scope.objNewButtonCustomAttr.FieldCollection.length > 0 && $scope.objNewButtonCustomAttr.FieldCollection[0]) {
        //            angular.forEach($scope.objNewButtonCustomAttr.FieldCollection[0].Items, function (itemObj, key) {
        //                if (itemObj.Items.length > 0) {
        //                    TraverseFieldCollection(itemObj);
        //                    itemObj.IsSelected = false;
        //                } else {
        //                    itemObj.IsSelected = false;
        //                }
        //            });
        //            obj.IsSelected = true;
        //        }
        //    }
        //}
        $scope.SelectedField = obj;
        if (event) {
            event.stopPropagation();
        }
    };

    $scope.objNewButtonNaviagtionParam.onMessageIdChange = function () {
        $scope.objNewButtonNaviagtionParam.MessageDescription = "";
        if ($scope.sfxControl.dictAttributes.sfwMessageId != undefined && $scope.sfxControl.dictAttributes.sfwMessageId != "") {
            hubMain.server.populateMessageList().done(function (lstMessages) {
                $scope.$evalAsync(function () {
                    if (lstMessages && lstMessages.length > 0) {
                        var lst = lstMessages.filter(function (x) { return x.MessageID == $scope.sfxControl.dictAttributes.sfwMessageId; });
                        if (lst && lst.length > 0) {
                            $scope.objNewButtonNaviagtionParam.MessageDescription = lst[0].DisplayMessage;
                        }
                    }
                });
            });

        }
    };

    $scope.objNewButtonNaviagtionParam.onMessageIdClick = function () {
        $scope.strCode = "Messages";

        $scope.$on('onOKClick', function (event, data) {
            $scope.sfxControl.dictAttributes.sfwMessageId = data.ID;
            $scope.objNewButtonNaviagtionParam.onMessageIdChange();
        });

        //$scope.dialog = ngDialog.open({
        //    template: 'Views/Form/SearchIDDescription.html',
        //    scope: $scope,
        //    className: 'ngdialog-theme-default',
        //    controller: "SearchIDDescriptionController",
        //    closeByDocument: false,
        //});

        var newScope = $scope.$new(true);
        newScope.strCode = "Messages";

        newScope.SearchIDDescrDialog = $rootScope.showDialog(newScope, "Search ID Description", "Common/views/SearchIDDescription.html", { width: 800 });
    };

    //#endregion

    //#region New Button Custom Attributes
    $scope.InitForCustomAttributes = function (strPropertyName) {
        $scope.objNewButtonCustomAttr.IsShowAllControl = false;
        if (strPropertyName == "sfwCustomAttributes") {
            $scope.objNewButtonCustomAttr.CustomAttributeText = "Custom Attributes:";
            if ($scope.objNewButtonCustomAttr.IsShowAllControlForCustAttr !== undefined) {
                $scope.objNewButtonCustomAttr.IsShowAllControl = $scope.objNewButtonCustomAttr.IsShowAllControlForCustAttr;
            }
        }
        else {
            $scope.objNewButtonCustomAttr.CustomAttributeText = "User Log Parameters:";
            if ($scope.objNewButtonCustomAttr.IsShowAllControlForUserParam !== undefined) {
                $scope.objNewButtonCustomAttr.IsShowAllControl = $scope.objNewButtonCustomAttr.IsShowAllControlForUserParam;
            }
        }

        $scope.objNewButtonCustomAttr.FieldCollection = [];
        $scope.objNewButtonCustomAttr.ParameterCollection = [];
        $scope.objNewButtonCustomAttr.SelectedParameter = undefined;
        $scope.objNewButtonCustomAttr.LoadAvailableFields();
        $scope.objNewButtonCustomAttr.Initialize(strPropertyName);
    };
    //#endregion

    //#region Common Method for Custom Attributes and User Log Parameter

    $scope.objNewButtonCustomAttr.SelectParameter = function (param) {
        $scope.objNewButtonCustomAttr.SelectedParameter = param;
    }

    $scope.objNewButtonCustomAttr.Initialize = function (propertyName) {
        var customAttribute = $scope.sfxControl.dictAttributes[propertyName];
        if (customAttribute != undefined && customAttribute != "") {
            var alParams = customAttribute.split(';');
            angular.forEach(alParams, function (strParam) {
                if (strParam == undefined || strParam == "") {
                }
                else {
                    var strParamField = strParam;
                    var strParamValue = strParam;
                    var blnConstant = false;

                    if (strParam.contains("=")) {
                        strParamField = strParam.substring(0, strParam.indexOf('='));
                        strParamValue = strParam.substring(strParam.indexOf('=') + 1);

                        if (strParamValue.match("^#")) {
                            strParamValue = strParamValue.substring(1);
                            blnConstant = true;
                        }
                    }
                    var objParameter = {
                        ParameterField: strParamField, ParameterValue: strParamValue, Constants: blnConstant
                    };

                    $scope.objNewButtonCustomAttr.ParameterCollection.push(objParameter);
                }
            });
        }
    };

    $scope.objNewButtonCustomAttr.LoadAvailableFields = function () {
        var strProperty = "";
        var iblnIsLookup = $scope.formodel.dictAttributes.sfwType.toUpperCase() == "LOOKUP";

        if (iblnIsLookup) {
            strProperty = "sfwDataField";
        }
        else {
            strProperty = "sfwEntityField";
        }

        $scope.objMainTable = undefined;
        var CurrentTable = FindParent($scope.sfxCell, "sfwTable");
        var lst = $scope.formodel.Elements.filter(function (x) { return x.Name == "sfwTable"; });
        if (lst && lst.length > 0) {
            $scope.objMainTable = lst[0];
        }

        $scope.objNewButtonCustomAttr.FieldCollection = [];

        var mainItem = {
            Text: "Main", Items: [], IsSelected: false, IsCheckBoxVisible: false
        };

        if ($scope.objNewButtonCustomAttr.IsShowAllControl) {
            PopulateAvailableFields(strProperty, $scope.objMainTable, mainItem, true, iblnIsLookup, false);
        }
        else {
            PopulateAvailableFields(strProperty, CurrentTable, mainItem, true, iblnIsLookup, false);
        }

        if (mainItem.Items.length > 0) {
            $scope.objNewButtonCustomAttr.FieldCollection.push(mainItem);
            // console.log($scope.objNewButtonCustomAttr.FieldCollection);
        }
    };

    $scope.objNewButtonCustomAttr.showAllControlChange = function () {
        $scope.objNewButtonCustomAttr.LoadAvailableFields();
    };

    $scope.objNewButtonCustomAttr.AddToGridClick = function () {
        if ($scope.objNewButtonCustomAttr.FieldCollection.length > 0) {
            $scope.objNewButtonCustomAttr.TraverseFieldCollection($scope.objNewButtonCustomAttr.FieldCollection[0].Items);
            if ($scope.objNewButtonCustomAttr.ParameterCollection.length > 0) {
                $scope.objNewButtonCustomAttr.SelectedParameter = $scope.objNewButtonCustomAttr.ParameterCollection[$scope.objNewButtonCustomAttr.ParameterCollection.length - 1];
            }
        }
    };

    $scope.objNewButtonCustomAttr.onAddParameter = function () {
        $scope.objNewButtonCustomAttr.ParameterCollection.push({
            ParameterField: "", ParameterValue: ""
        });
        if ($scope.objNewButtonCustomAttr.ParameterCollection.length > 0) {
            $scope.objNewButtonCustomAttr.SelectedParameter = $scope.objNewButtonCustomAttr.ParameterCollection[$scope.objNewButtonCustomAttr.ParameterCollection.length - 1];
        }
    };

    $scope.objNewButtonCustomAttr.onDeleteParameter = function () {
        if ($scope.objNewButtonCustomAttr.SelectedParameter) {
            var index = $scope.objNewButtonCustomAttr.ParameterCollection.indexOf($scope.objNewButtonCustomAttr.SelectedParameter);
            $scope.objNewButtonCustomAttr.ParameterCollection.splice(index, 1);

            if (index < $scope.objNewButtonCustomAttr.ParameterCollection.length) {
                $scope.SelectedParameter = $scope.objNewButtonCustomAttr.ParameterCollection[index];
            }
            else if ($scope.objNewButtonCustomAttr.ParameterCollection.length > 0) {
                $scope.objNewButtonCustomAttr.SelectedParameter = $scope.objNewButtonCustomAttr.ParameterCollection[index - 1];
            }
            else if ($scope.objNewButtonCustomAttr.ParameterCollection.length == 0) {
                $scope.objNewButtonCustomAttr.SelectedParameter = undefined;
            }
        }
    };

    $scope.objNewButtonCustomAttr.TraverseFieldCollection = function (fieldCollection) {
        angular.forEach(fieldCollection, function (field) {
            if (field.IsSelected) {
                var strFld = field.Text;
                var blnFound = false;
                var lst = $scope.objNewButtonCustomAttr.ParameterCollection.filter(function (itm) {
                    return itm.ParameterValue == strFld;
                });
                if (lst && lst.length > 0) {
                    blnFound = true;
                }

                if (blnFound) {
                    $SgMessagesService.Message('Message', strFld + " Column is already added in Collection, please check.");
                }
                else {
                    var strValue = $scope.objNewButtonCustomAttr.GetCaptionFromFieldName(strFld);
                    strValue = $scope.objNewButtonCustomAttr.RemoveInternalSpace(strValue);
                    var objParameters = { ParameterField: strValue, ParameterValue: strFld };
                    $scope.objNewButtonCustomAttr.ParameterCollection.push(objParameters);
                }
                field.IsSelected = false;
            }
            if (field.Items.length > 0) {
                $scope.objNewButtonCustomAttr.TraverseFieldCollection(field.Items);
            }
        });
    };

    $scope.objNewButtonCustomAttr.RemoveInternalSpace = function (astrInput) {
        astrInput = astrInput.trim();
        while (astrInput.indexOf(" ") > 0) {
            astrInput = astrInput.substring(0, astrInput.indexOf(" ")).trim() + astrInput.substring(astrInput.indexOf(" ")).trim();
        }
        return astrInput;
    };

    $scope.objNewButtonCustomAttr.GetCaptionFromFieldName = function (str) {
        if (str.match("^icdo"))
            str = str.replace("icdo", "");

        var strCaption = "";
        var blnCapsNext = true;

        for (var i = 0; i < str.length; i++) {
            if ("._".contains("" + str[i])) {
                blnCapsNext = true;
                strCaption += " ";
            }
            else {
                strCaption += blnCapsNext ? str.toUpperCase()[i] : str[i];
                blnCapsNext = false;
            }
        }

        if (strCaption.match(" Id$"))
            strCaption = strCaption.replace(" Id", " ID");
        if (strCaption.contains("Ssn"))
            strCaption = strCaption.replace("Ssn", "SSN");

        var intValuePos = strCaption.indexOf(" Value");
        if (intValuePos > 0)
            strCaption = strCaption.substring(0, intValuePos);

        var intDescPos = strCaption.indexOf(" Description");
        if (intDescPos > 0)
            strCaption = strCaption.substring(0, intDescPos);

        return strCaption;
    };

    $scope.objNewButtonCustomAttr.GetSavedString = function () {
        var strReturn = "";
        angular.forEach($scope.objNewButtonCustomAttr.ParameterCollection, function (objParams) {
            var strParamField = objParams.ParameterField;
            var strParamValue = objParams.ParameterValue;
            if ((strParamValue != undefined && strParamValue != "") || (strParamField != undefined && strParamField != "")) {
                var blnConstatnt = objParams.Constants;

                if (blnConstatnt) {
                    strParamValue = "#" + strParamValue;
                }

                var strParam = strParamValue;

                if (strParamValue.toLowerCase() != strParamField.toLowerCase()) {
                    strParam = strParamField + '=' + strParamValue;
                }

                if (strReturn == "") {
                    strReturn = strParam;
                }
                else {
                    strReturn += ';' + strParam;
                }
            }
        });
        return strReturn;
    };

    //#endregion

    //#region New Button User Log Parameters
    $scope.objNewButtonCustomAttr.OnBackClick = function () {
        var strUserLogParameters = $scope.objNewButtonCustomAttr.GetSavedString();
        if (strUserLogParameters != undefined && strUserLogParameters != "") {
            $scope.sfxControl.dictAttributes.sfwUserLogParameters = strUserLogParameters;
        }
        $scope.objNewButtonCustomAttr.IsShowAllControlForUserParam = $scope.objNewButtonCustomAttr.IsShowAllControl;
        $scope.InitForCustomAttributes("sfwCustomAttributes");
    };

    $scope.objNewButtonCustomAttr.OnBackToGeneralPropClick = function () {
        var strUserLogParameters = $scope.objNewButtonCustomAttr.GetSavedString();
        $scope.sfxControl.dictAttributes.sfwCustomAttributes = strUserLogParameters;
        $scope.objNewButtonCustomAttr.IsShowAllControlForCustAttr = $scope.objNewButtonCustomAttr.IsShowAllControl;
    }
    //#endregion

    //#endregion

    //#region Method For Filter Grid Pages 
    $scope.InitForGridControl = function () {
        $scope.objNewButtonFilterGrid.lstRelatedGrid = [];

        PopulateRelatedGrid($scope.formodel, $scope.objNewButtonFilterGrid.lstRelatedGrid, false);
    };

    $scope.objNewButtonFilterGrid.onQuerySearchClick = function (param) {
        $scope.IsFilterGridSearch = true;
        $scope.QueryDialog = ngDialog.open({
            template: "Views/Form/BrowseForQuery.html",
            scope: $scope,
            closeByDocument: false,
            className: 'ngdialog-theme-default ngdialog-theme-custom',
        });
    };

    $scope.$on('onFilterGridSerchClick', function (event, data, QueryID) {
        if (data) {
            $scope.objNewButtonFilterGrid.StrBaseQuery = QueryID;

        }
    });


    $scope.objNewButtonFilterGrid.PopulateQueryParam = function (parameters, isGrid) {
        var objGrid = undefined;
        if (isGrid) {
            objGrid = $scope.GetGridModel();
        }
        angular.forEach(parameters, function (x) {
            $scope.objNewButtonFilterGrid.lstQryField.push({
                CodeID: x.ID
            });
        });
        if (objGrid) {
            var lst = objGrid.Elements.filter(function (x) {
                return x.Name == "Parameters";
            });
            if (lst && lst.length > 0) {
                var gridParams = lst[0];
                if (gridParams.Elements.length > 0) {
                    angular.forEach(gridParams.Elements, function (itm) {
                        var lst1 = $scope.objNewButtonFilterGrid.lstQryField.filter(function (x) {
                            return x.CodeID == itm.dictAttributes.ID;
                        });
                        if (lst1 && lst1.length > 0) {
                            lst1[0].ParamValue = itm.dictAttributes.sfwEntityField;
                        }
                    });
                }
            }
        }
    };

    $scope.objNewButtonFilterGrid.onQueryChange = function () {
        $scope.objNewButtonFilterGrid.lstQryField = [];
        $scope.objNewButtonFilterGridCriteria.AvailableFieldColletion = [];
        $scope.objFilterGridFieldsDetails.AvailableFieldColletion = [];
        $scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection = [];
        $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid = [];
        if ($scope.objNewButtonFilterGrid.StrBaseQuery) {

            var queryId = $scope.objNewButtonFilterGrid.StrBaseQuery;
            var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
            var lst = queryId.split('.');
            if (lst && lst.length == 2) {
                var entityName = lst[0];
                var strQueryID = lst[1];
                $scope.entityName = lst[0];
                var lstEntity = entityIntellisenseList.filter(function (x) {
                    return x.ID == entityName;
                });
                if (lstEntity && lstEntity.length > 0) {
                    var objEntity = lstEntity[0];
                    var lstQuery = objEntity.Queries.filter(function (x) {
                        return x.ID == strQueryID;
                    });
                    if (lstQuery && lstQuery.length > 0) {
                        var objQuery = lstQuery[0];
                        $scope.objNewButtonFilterGrid.PopulateQueryParam(objQuery.Parameters, false);
                    }
                }
            }
        }
    };

    $scope.objNewButtonFilterGrid.ValidateQuery = function (objFile, astrQuery) {
        if (objFile) {
            var objQueries = objFile.Queries.filter(function (itm) {
                return itm.ID == astrQuery;
            });

            // XElement xEleQueries = xDoc.Descendants(ApplicationConstants.XMLFacade.QUERIES).FirstOrDefault();
            if (!objQueries || (objQueries && objQueries.length == 0)) {
                this.ErrorMessageForDisplay = "Invalid Base Query";
                return true;
            }
        }
        return false;
    };


    /************************************ populating Available fields (second screen)*********************************************************/
    $scope.objNewButtonFilterGridCriteria.PopulateQueryFields = function () {
        angular.forEach($scope.objNewButtonFilterGridCriteria.lstColumns, function (x) {
            /*for second screen*/
            if ($scope.objNewButtonFilterGridCriteria.AvailableFieldColletion.length > 0 && !$scope.objNewButtonFilterGridCriteria.AvailableFieldColletion.some(function (field) { return field.ControlName == x.CodeID })) {
                $scope.objNewButtonFilterGridCriteria.AvailableFieldColletion.push({
                    ControlName: x.CodeID, IsSelected: x.IsSelected, DataType: x.DataType
                });
            }
            if ($scope.objNewButtonFilterGridCriteria.AvailableFieldColletion.length == 0) {
                $scope.objNewButtonFilterGridCriteria.AvailableFieldColletion.push({
                    ControlName: x.CodeID, IsSelected: x.IsSelected, DataType: x.DataType
                });
            }
            // /*for third screen for Query Schema*/

            $scope.objFilterGridFieldsDetails.AvailableFieldColletion = angular.copy($scope.objNewButtonFilterGridCriteria.AvailableFieldColletion);

        });
    };
    //$scope.objFilterGridFieldsDetails.PopulateQueryFields = function () {
    //    angular.forEach($scope.objFilterGridFieldsDetails.lstQueryColumn, function (x) {

    //        if ($scope.objFilterGridFieldsDetails.AvailableFieldColletion.length > 0 && !$scope.objFilterGridFieldsDetails.AvailableFieldColletion.some(function (field) { return field.ControlName == x.CodeID })) {
    //            $scope.objFilterGridFieldsDetails.AvailableFieldColletion.push({
    //                ControlName: x.CodeID, IsSelected: x.IsSelected, DataType: x.DataType
    //            });
    //        }
    //        if ($scope.objFilterGridFieldsDetails.AvailableFieldColletion.length == 0) {
    //            $scope.objFilterGridFieldsDetails.AvailableFieldColletion.push({
    //                ControlName: x.CodeID, IsSelected: x.IsSelected, DataType: x.DataType
    //            });
    //        }

    //    });
    //};

    $scope.objNewButtonFilterGrid.onRelatedGridChange = function () {
        var objGrid = $scope.GetGridModel();
        if (objGrid) {
            $scope.objNewButtonFilterGrid.StrBaseQuery = objGrid.dictAttributes.sfwBaseQuery;
            $scope.objNewButtonFilterGrid.onQueryChange();
            $scope.objNewButtonFilterGrid.LoadQueryColumns($scope.objNewButtonFilterGrid.StrBaseQuery, false);
        }
    };
    $scope.objNewButtonFilterGridCriteria.onMoveUpClick = function () {
        if ($scope.objNewButtonFilterGridCriteria.SelectedGridField) {
            var index = $scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection.indexOf($scope.objNewButtonFilterGridCriteria.SelectedGridField);
            var item = $scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection[index - 1];
            $scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection[index - 1] = $scope.objNewButtonFilterGridCriteria.SelectedGridField;
            $scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection[index] = item;
            $scope.scrollBySelectedField("#filter-grid-result", ".selected");
        }
    };

    $scope.objNewButtonFilterGridCriteria.CanMoveUp = function () {
        var retVal = false;
        if ($scope.objNewButtonFilterGridCriteria.SelectedGridField) {
            var index = $scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection.indexOf($scope.objNewButtonFilterGridCriteria.SelectedGridField);
            if (index == 0) {
                retVal = true;
            }
        }
        else {
            retVal = true;
        }
        return retVal;
    };

    $scope.objNewButtonFilterGridCriteria.CanMoveDown = function () {
        var retVal = false;
        if ($scope.objNewButtonFilterGridCriteria.SelectedGridField) {
            var index = $scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection.indexOf($scope.objNewButtonFilterGridCriteria.SelectedGridField);
            if (index == $scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection.length - 1) {
                retVal = true;
            }
        }
        else {
            retVal = true;
        }
        return retVal;
    };

    $scope.objNewButtonFilterGridCriteria.onMoveDownClick = function () {
        if ($scope.objNewButtonFilterGridCriteria.SelectedGridField) {
            var index = $scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection.indexOf($scope.objNewButtonFilterGridCriteria.SelectedGridField);
            var item = $scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection[index + 1];
            $scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection[index + 1] = $scope.objNewButtonFilterGridCriteria.SelectedGridField;
            $scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection[index] = item;
            $scope.scrollBySelectedField("#filter-grid-result", ".selected");
        }
    };

    $scope.scrollBySelectedField = function (parentDiv, selectedElement) {
        var $divDom = $(parentDiv);
        if ($divDom && $divDom.hasScrollBar()) {
            $divDom.scrollTo($divDom.find(selectedElement), { offsetTop: 300, offsetLeft: 0 }, null);
            return false;
        }
    }

    $scope.objNewButtonFilterGridCriteria.onDeleteControlClick = function () {
        if ($scope.objNewButtonFilterGridCriteria.SelectedGridField) {
            var index = $scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection.indexOf($scope.objNewButtonFilterGridCriteria.SelectedGridField);
            $scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection.splice(index, 1);

            if (index < $scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection.length) {
                $scope.objNewButtonFilterGridCriteria.SelectedGridField = $scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection[index];
            }
            else if ($scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection.length > 0) {
                $scope.objNewButtonFilterGridCriteria.SelectedGridField = $scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection[index - 1];
            }
            else {
                $scope.objNewButtonFilterGridCriteria.SelectedGridField = undefined;
            }
        }
    };
    //#endregion

    //#region Method For Filter Grid Criteria Required

    //#region Add Available Fields
    $scope.objNewButtonFilterGridCriteria.addAvailableFields = function () {

        $scope.AddFieldsFromQuery($scope.objNewButtonFilterGridCriteria.AvailableFieldColletion, $scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection);
    };

    $scope.AddFieldsFromQuery = function (AvailableFieldColletion, GridNonAvailableControlCollection) {
        function iChecklstQueryColumnSelected(item) {
            if (item.IsSelected && item.IsSelected == true) {
                if (GridNonAvailableControlCollection && !GridNonAvailableControlCollection.some(function (x) { return x.ID == item.ControlName; })) {
                    var Field = {};
                    Field.ID = item.ControlName;
                    if (QueryID && item.ControlName && item.ControlName.indexOf("_value") > -1) {
                        Field.ControlClass = "DropDownList";
                        Field.ControlName = "ddl" + CreateControlIDInCamelCase(item.ControlName);
                        var objControl = FindControlByID($scope.formodel, Field.ControlName);
                        if (objControl) {
                            Field.ControlName = GetNewSeriesName(Field.ControlName, $scope.formodel, 1)
                        }
                        if (item.ControlName.indexOf("_value") > -1) {
                            var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                            Field.CodeGroup = GetCodeIDByValue(QueryID, item.ControlName, entityIntellisenseList);
                        }
                        else {
                            Field.CodeGroup = "";
                        }
                        Field.Operator = "=";
                    }
                    else {
                        Field.ControlClass = "TextBox";
                        Field.ControlName = "txt" + CreateControlIDInCamelCase(item.ControlName);
                        var objControl = FindControlByID($scope.formodel, Field.ControlName);
                        if (objControl) {
                            Field.ControlName = GetNewSeriesName(Field.ControlName, $scope.formodel, 1)
                        }

                    }
                    Field.strDataType = item.DataType;
                    if (item.DataType) {
                        if (item.DataType.toLowerCase() == "int") {
                            Field.strDataType = "int";
                        }
                        else if (item.DataType.toLowerCase() == "string") {
                            Field.strDataType = "string";
                        }
                    }
                    if (item && item.Value) {
                        Field.strHeaderText = item.Value.substring(item.Value.lastIndexOf('.') + 1);
                    }
                    Field.strHeaderText = GetCaptionFromField(Field);


                    Field.IsVisible = "True";
                    Field.strControlType = 'Label';
                    if (item.ControlName.Caption && item.ControlName.Caption.trim().indexOf(":") == item.ControlName.Caption.trim().length - 1) { // if caption alreday has colon (:)
                        Field.strCaption = GetCaptionFromFieldName(item.ControlName);
                    }
                    else {
                        Field.strCaption = GetCaptionFromFieldName(item.ControlName) + " : ";
                    }

                    GridNonAvailableControlCollection.push(Field);
                }
                item.IsSelected = false;
            }
        }


        var QueryID = $scope.objNewButtonFilterGrid.StrBaseQuery.split('.')[0];

        angular.forEach(AvailableFieldColletion, iChecklstQueryColumnSelected);

    }
    //#endregion
    //#endregion

    //#region Method for Open Word Document Button Method
    $scope.receiveCorrespondenceTemplateForForm = function (data) {
        $scope.$apply(function () {
            $scope.objNewButtonOpenWordDoc.lstCorrTemplates = data;
            $rootScope.IsLoading = false;
        });
    };

    //#endregion

    //#region Method For Execute Button Methods

    $scope.objNewButtonServerMethod.Init = function () {
        $scope.Title = "Object Method :";
        $scope.objNewButtonServerMethod.sfwExecuteMethodType = "ObjectMethod";
        $scope.showObjectMethod = true;
        $scope.objNewButtonServerMethod.PopulateEntityXmlMethod();
        $scope.objNewButtonServerMethod.onRemoteObjectChanged();
    };

    $scope.objNewButtonServerMethod.onEntityChange = function () {
        $scope.objNewButtonServerMethod.lstXmlMethods = [];
        //if ($scope.SelectedButtonDetails.Method == "btnExecuteBusinessMethod_Click"
        //            || $scope.SelectedButtonDetails.Method == "btnValidateExecuteBusinessMethod_Click" || $scope.SelectedButtonDetails.Method == "btnExecuteBusinessMethodSelectRows_Click") {
        //    var objMethod = { ID: "", SrvName: "" };
        //    $scope.objNewButtonServerMethod.lstXmlMethods.push(objMethod);
        //}
        $scope.objNewButtonServerMethod.PopulateEntityXmlMethod();
    };

    $scope.objNewButtonServerMethod.PopulateEntityXmlMethod = function () {
        var lstObjectMethods = GetObjectMethods($EntityIntellisenseFactory.getEntityIntellisense(), $scope.formodel.dictAttributes.sfwEntity);
        $scope.objNewButtonServerMethod.lstXmlMethods = PopulateServerMethod(lstObjectMethods, $scope.sfxControl, undefined);

    };

    $scope.objNewButtonServerMethod.onRemoteObjectChanged = function () {
        var RemoteObjectName = "srvCommon";
        if ($scope.formodel && $scope.formodel.dictAttributes.sfwRemoteObject) {
            RemoteObjectName = $scope.formodel.dictAttributes.sfwRemoteObject;
        }
        var obj = GetServerMethodObject(RemoteObjectName, $scope.formodel.RemoteObjectCollection);
        var lstObjectMethods = GetObjectMethods($EntityIntellisenseFactory.getEntityIntellisense(), $scope.formodel.dictAttributes.sfwEntity);
        $scope.objNewButtonServerMethod.lstXmlMethods = PopulateServerMethod(lstObjectMethods, $scope.sfxControl, obj);
    };
    //#endregion

    //#region On Next
    $scope.objNewButtonActiveForm.OnNextClick = function () {
        if ($scope.objNewButtonActiveForm.ActiveFormType == "SingleForm") {
            $scope.sfxControl.dictAttributes.sfwActiveForm = $scope.objNewButtonActiveForm.StrActiveForm;
        }
        else {
            if ($scope.objNewButtonActiveForm.StrEntityField != undefined && $scope.objNewButtonActiveForm.StrEntityField != "") {
                $scope.sfxControl.dictAttributes.sfwEntityField = $scope.objNewButtonActiveForm.StrEntityField;
            }
            $scope.objNewButtonActiveForm.UpdateActiveForms();
        }

        $scope.objNewButtonNaviagtionParam.Init();
    };

    $scope.objNewButtonActiveForm.UpdateActiveForms = function () {
        var istrActiveForms = "";
        $scope.objNewButtonNaviagtionParam.TargetForm = "";
        angular.forEach($scope.objNewButtonActiveForm.ActiveFormCollection, function (objActiveForm) {
            var strFieldValue = objActiveForm.FieldValue;
            var strActiveForm = objActiveForm.ActiveForm;

            if ((strFieldValue != undefined && strFieldValue != "") && (strActiveForm != undefined && strActiveForm != "")) {
                var strForm = strFieldValue + "=" + strActiveForm;

                if (istrActiveForms == "")
                    istrActiveForms = strForm;
                else
                    istrActiveForms += ';' + strForm;
            }
        });
        if ($scope.sfxControl) {
            $scope.sfxControl.dictAttributes.sfwActiveForm = istrActiveForms;
        }
    };

    $scope.objNewButtonNaviagtionParam.OnNextClick = function () {
        $scope.objNewButtonNaviagtionParam.UpdateParameters();
        $scope.InitForCustomAttributes("sfwCustomAttributes");
    };

    $scope.objNewButtonNaviagtionParam.UpdateParameters = function () {
        var istrParameters = "";

        angular.forEach($scope.objNewButtonNaviagtionParam.ParameterCollection, function (objParameter) {
            if (objParameter.ParameterValue != undefined && objParameter.ParameterValue != "") {
                var strParamValue = objParameter.ParameterValue;

                if (strParamValue != "") {
                    var blnConstant = (objParameter.Constants != undefined) ? objParameter.Constants : false;
                    if (blnConstant)
                        strParamValue = "#" + strParamValue;

                    var strParam = strParamValue;
                    var strParamField = objParameter.ParameterField;

                    if (strParamValue.toLowerCase() != strParamField.toLowerCase())
                        strParam = strParamField + '=' + strParamValue;

                    if (istrParameters == "")
                        istrParameters = strParam;
                    else
                        istrParameters += ';' + strParam;
                }
            }
        });

        if ($scope.sfxControl.dictAttributes.sfwMethodName == "btnNew_Click") {

            /*Related control will come in navigation parameter only for Multiple Active Forms*/
            var relatedControl = $scope.sfxControl.dictAttributes.sfwActiveForm.contains("=") ? $scope.sfxControl.dictAttributes.sfwRelatedControl : "";
            if (istrParameters == "") {
                $scope.sfxControl.dictAttributes.sfwNavigationParameter = relatedControl;
            }
            else {

                if (relatedControl) {
                    $scope.sfxControl.dictAttributes.sfwNavigationParameter = istrParameters + ";" + relatedControl;

                }
                else {
                    $scope.sfxControl.dictAttributes.sfwNavigationParameter = istrParameters;

                }

            }
        }
        else if ($scope.sfxControl.dictAttributes.sfwActiveForm && $scope.sfxControl.dictAttributes.sfwActiveForm.contains("=")) {
            if ($scope.sfxControl.dictAttributes.sfwMethodName == "btnOpen_Click") {
                if (istrParameters == "") {
                    $scope.sfxControl.dictAttributes.sfwNavigationParameter = $scope.sfxControl.dictAttributes.sfwEntityField;
                }
                else {
                    $scope.sfxControl.dictAttributes.sfwNavigationParameter = istrParameters + ";" + $scope.sfxControl.dictAttributes.sfwEntityField;
                }
            }
            else {
                $scope.sfxControl.dictAttributes.sfwNavigationParameter = istrParameters;
            }
        }
        else {
            $scope.sfxControl.dictAttributes.sfwNavigationParameter = istrParameters;
        }
    };

    $scope.objNewButtonGeneralProp.OnNextClick = function () {
        $scope.InitForCustomAttributes("sfwCustomAttributes");
    };

    $scope.objNewButtonCustomAttr.OnNextClick = function () {
        var strCustomAttribute = $scope.objNewButtonCustomAttr.GetSavedString();
        $scope.sfxControl.dictAttributes.sfwCustomAttributes = strCustomAttribute;

        $scope.objNewButtonCustomAttr.IsShowAllControlForCustAttr = $scope.objNewButtonCustomAttr.IsShowAllControl;
        $scope.InitForCustomAttributes("sfwUserLogParameters");
    };

    $scope.objNewButtonFilterGrid.OnNextClick = function () {
        if ($scope.objNewButtonFilterGrid.StrBaseQuery) {
            if ($scope.objNewButtonFilterGrid.SelectGridOption == "UseExistingGrid") {
                var objGrid = $scope.GetGridModel();
                if (objGrid) {
                    if (objGrid.dictAttributes.sfwBaseQuery != $scope.objNewButtonFilterGrid.StrBaseQuery) {
                        objGrid.dictAttributes.sfwBaseQuery = $scope.objNewButtonFilterGrid.StrBaseQuery;
                    }

                }
            }
            else {

            }
            $scope.objNewButtonFilterGrid.LoadQueryColumns($scope.objNewButtonFilterGrid.StrBaseQuery, true);
            if ($scope.objNewButtonFilterGrid.SelectGridOption == "UseExistingGrid") {
                $scope.objNewButtonFilterGrid.UpdateQueryParam();
            }
            $scope.objNewButtonFilterGridCriteria.StrNoOfColumn = "2";
        }
    };

    $scope.GetGridModel = function () {
        $scope.objMainTable = undefined;
        var lst = $scope.formodel.Elements.filter(function (x) {
            return x.Name == "sfwTable";
        });
        if (lst && lst.length > 0) {
            $scope.objMainTable = lst[0];
        }
        var objGrid = FindControlByID($scope.objMainTable, $scope.sfxControl.dictAttributes.sfwRelatedControl);
        return objGrid;
    };

    $scope.objNewButtonFilterGrid.LoadQueryColumns = function (queryId, IsFilterGrid) {
        if (queryId) {
            var lst = queryId.split('.');
            if (lst && lst.length == 2) {
                var entityName = lst[0];
                var strQueryID = lst[1];
                var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                var lstEntity = entityIntellisenseList.filter(function (x) {
                    return x.ID == entityName;
                });
                if (lstEntity && lstEntity.length > 0) {
                    var objEntity = lstEntity[0];
                    var lstQuery = objEntity.Queries.filter(function (x) {
                        return x.ID == strQueryID;
                    });
                    if (lstQuery && lstQuery.length > 0) {
                        var objQuery = lstQuery[0];
                        $rootScope.IsLoading = true;
                        if (IsFilterGrid) {
                            $.connection.hubForm.server.getEntityQueryColumns(queryId, "").done(function (data) {
                                $scope.receiveGridBaseQueryColumns(data);
                            });
                        }
                        else {
                            $.connection.hubForm.server.getEntityQueryColumns(queryId, "CreateNewButton").done(function (data) {
                                $scope.receiveGridBaseQueryColumns(data);
                            });
                        }
                    }
                }
            }
        }
    };

    /*****************************   getting query Schema for second Screen *******************/
    $scope.receiveGridBaseQueryColumns = function (data) {

        $scope.$apply(function () {
            $scope.objNewButtonFilterGridCriteria.lstColumns = data;
            if ($scope.objNewButtonFilterGridCriteria.lstColumns.length > 0) {
                $scope.objNewButtonFilterGridCriteria.PopulateQueryFields(); // getting available fields(for second screen) once we are getting query Schema from  hub
            }
            $rootScope.IsLoading = false;
        });
    };


    $scope.objNewButtonFilterGrid.UpdateQueryParam = function () {
        if ($scope.objNewButtonFilterGrid.lstQryField.length > 0) {
            var objGrid = $scope.GetGridModel();
            if (objGrid) {
                var objParams = objGrid.Elements.filter(function (itm) {
                    return itm.Name == "Parameters";
                });
                if (objParams && objParams.length > 0) {
                    var index = objGrid.Elements.indexOf(objParams[0]);
                    objGrid.Elements.splice(index, 1);
                }

                objParams = {
                    Name: "Parameters", Value: '', dictAttributes: {
                    }, Elements: [], Children: []
                };
                objParams.ParentVM = objGrid;
                objGrid.Elements.push(objParams);
                angular.forEach($scope.objNewButtonFilterGrid.lstQryField, function (objParam) {
                    var param = {
                        Name: "parameter", Value: '', dictAttributes: {
                            ID: objParam.CodeID, sfwEntityField: objParam.ParamValue
                        }, Elements: [], Children: []
                    };
                    objParams.Elements.push(param);
                });
            }
        }
    };

    $scope.objNewButtonOpenWordDoc.OnNextClick = function () {
        $scope.objNewButtonOpenWordDoc.SetNavigationParam();
    };

    $scope.objNewButtonOpenWordDoc.SetNavigationParam = function () {
        if (($scope.objNewButtonOpenWordDoc.TemplateName != undefined && $scope.objNewButtonOpenWordDoc.TemplateName != "") && ($scope.objNewButtonOpenWordDoc.TrackingID != undefined && $scope.objNewButtonOpenWordDoc.TrackingID != "")) {
            $scope.sfxControl.dictAttributes.sfwNavigationParameter = "TemplateName=" + $scope.objNewButtonOpenWordDoc.TemplateName + ";TrackingID=" + $scope.objNewButtonOpenWordDoc.TrackingID;
        }
        else if ($scope.objNewButtonOpenWordDoc.TemplateName != undefined && $scope.objNewButtonOpenWordDoc.TemplateName != "") {
            $scope.sfxControl.dictAttributes.sfwNavigationParameter = "TemplateName=" + $scope.objNewButtonOpenWordDoc.TemplateName;
        }
        else if ($scope.objNewButtonOpenWordDoc.TrackingID != undefined && $scope.objNewButtonOpenWordDoc.TrackingID != "") {
            $scope.sfxControl.dictAttributes.sfwNavigationParameter = "TrackingID=" + $scope.objNewButtonOpenWordDoc.TrackingID;
        }
    };

    $scope.objNewButtonServerMethod.OnNextClick = function () {
        if ($scope.SelectedButtonDetails.Method == "btnExecuteServerMethod_Click" || $scope.SelectedButtonDetails.Method == "btnExecuteBusinessMethod_Click"
            || $scope.SelectedButtonDetails.Method == "btnValidateExecuteBusinessMethod_Click" || $scope.SelectedButtonDetails.Method == "btnDownload_Click"
            || $scope.SelectedButtonDetails.Method == "btnExecuteBusinessMethodSelectRows_Click" || $scope.SelectedButtonDetails.Method == "btnCompleteWorkflowActivities_Click") {
            if ($scope.SelectedButtonDetails.Method == "btnExecuteServerMethod_Click" || $scope.SelectedButtonDetails.Method == "btnDownload_Click") {
                //$scope.sfxControl.dictAttributes.sfwRemoteObject = $scope.objNewButtonServerMethod.StrRemoteObject;
            }

            $scope.sfxControl.dictAttributes.sfwObjectMethod = $scope.objNewButtonServerMethod.StrServerMethod;
            if ($scope.objNewButtonServerMethod.sfwExecuteMethodType) {
                $scope.sfxControl.dictAttributes.sfwExecuteMethodType = $scope.objNewButtonServerMethod.sfwExecuteMethodType;
            }
            $scope.objNewButtonNaviagtionParam.Init();
        }
    };

    //#endregion


    //#region On Finish
    $scope.OnFinishClick = function () {
        $rootScope.UndRedoBulkOp("Start");


        /* now filter Grid & "Filter Grid Criteria Required" are merged only in button wizard if "IscriteriaRequired" is checked then "Filter Grid Criteria Required" else "Filter Grid".*/
        if ($scope.objNewButtonFilterGrid.IsCriteriaRequired == "True") {
            $scope.sfxControl.dictAttributes["ID"] = "GridSearchCriteriaReq_Click";
            $scope.sfxControl.dictAttributes["sfwMethodName"] = "btnGridSearchCriteriaReq_Click";
            $scope.sfxControl.dictAttributes["Text"] = "btnGridSearchCriteriaReq_Click";
        }

        if ($scope.SelectedButtonDetails.Method == "btnOpenPopupDialog_Click" || $scope.SelectedButtonDetails.Method == "btnNewPopupDialog_Click"
            || $scope.SelectedButtonDetails.Method == "btnFinishPopupDialog_Click" || $scope.SelectedButtonDetails.Method == "btnClosePopupDialog_Click") {
            $scope.CreatePopupButton();
        }
        else if (!$scope.IsNewButtonStepDisable || !$scope.IsNewSaveStepsDisable || !$scope.IsOpenWordDocStepsDisable || !$scope.IsNewExecuteStepsDisable
            || !$scope.IsNewExecuteBusinessStepsDisable) {
            var strCustomAttribute = $scope.objNewButtonCustomAttr.GetSavedString();
            if (strCustomAttribute) {
                $scope.sfxControl.dictAttributes.sfwUserLogParameters = strCustomAttribute;
            }
            if ($scope.objNewButtonActiveForm.objRelatedGrid) {
                $scope.sfxControl.IsChildOfGrid = true;
            }
            if ($scope.sfxControl) {
                $scope.AddControlToCell("sfwButton", $scope.sfxCell, $scope.sfxControl);
            }
        }
        else if (!$scope.IsNewGridStepDisable) {
            if ($scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection.length > 0) {
                $scope.objNewButtonFilterGridCriteria.AddControls($scope.sfxCell, $scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection);
            }
            else {
                if ($scope.sfxControl) {
                    $scope.AddControlToCell("sfwButton", $scope.sfxCell, $scope.sfxControl);
                }
            }

            $scope.objNewButtonFilterGridCriteria.SetNavigationParameter();
        }
        else if (!$scope.IsNewFilterGridSearchCriteriaStepDisable) {
            $scope.sfxControl.dictAttributes.sfwObjectMethod = $scope.objNewButtonServerMethod.StrServerMethod;
            if ($scope.sfxControl) {
                $scope.AddControlToCell("sfwButton", $scope.sfxCell, $scope.sfxControl);
            }
        }
        else if (!$scope.IsGeneralPropStepsDisable) {
            if ($scope.sfxControl) {
                $scope.AddControlToCell("sfwButton", $scope.sfxCell, $scope.sfxControl);
            }
        }
        $rootScope.UndRedoBulkOp("End");
        $scope.CloseWizardClick();
    };


    /********************************************** Third Screen Start******************************************************/
    $scope.objFilterGridFieldsDetails.Init = function () {
        $scope.objFilterGridFieldsDetails.LoadData();

    }

    //#region  Move up for Fields Properties

    $scope.objFilterGridFieldsDetails.moveSelectedRowUp = function () {
        if ($scope.objFilterGridFieldsDetails.SelectedCurrentResultGridRow) {
            var index = $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid.indexOf($scope.objFilterGridFieldsDetails.SelectedCurrentResultGridRow);
            var item = $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid[index - 1];
            $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid[index - 1] = $scope.objFilterGridFieldsDetails.SelectedCurrentResultGridRow;
            $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid[index] = item;
            $scope.scrollBySelectedField(".lookup-result-grid", ".selected");
        }
    };

    // disable the move up button if there is no element to move up
    $scope.objFilterGridFieldsDetails.canmoveSelectedRowUp = function () {
        $scope.Flag = true;
        if ($scope.objFilterGridFieldsDetails.SelectedCurrentResultGridRow) {
            for (var i = 0; i < $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid.length; i++) {
                if ($scope.objFilterGridFieldsDetails.lstResultFieldsForGrid[i] == $scope.objFilterGridFieldsDetails.SelectedCurrentResultGridRow) {
                    if (i > 0) {
                        $scope.Flag = false;
                    }
                }
            }

        }

        return $scope.Flag;
    };
    //#endregion

    //#region  Move Down for Fields Properties
    $scope.scrollBySelectedField = function (parentDiv, selectedElement) {
        $timeout(function () {
            var $divDom = $(parentDiv);
            if ($divDom && $divDom.hasScrollBar()) {
                $divDom.scrollTo($divDom.find(selectedElement), { offsetTop: 300, offsetLeft: 0 }, null);
                return false;
            }

        });
    }

    $scope.objFilterGridFieldsDetails.moveSelectedRowDown = function () {
        if ($scope.objFilterGridFieldsDetails.SelectedCurrentResultGridRow) {
            var index = $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid.indexOf($scope.objFilterGridFieldsDetails.SelectedCurrentResultGridRow);
            var item = $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid[index + 1];
            $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid[index + 1] = $scope.objFilterGridFieldsDetails.SelectedCurrentResultGridRow;
            $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid[index] = item;
            $scope.scrollBySelectedField(".lookup-result-grid", ".selected");
        }
    };

    $scope.objFilterGridFieldsDetails.canmoveSelectedRowDown = function () {
        $scope.Flag = true;
        if ($scope.objFilterGridFieldsDetails.SelectedCurrentResultGridRow) {
            for (var i = 0; i < $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid.length; i++) {
                if ($scope.objFilterGridFieldsDetails.lstResultFieldsForGrid[i] == $scope.objFilterGridFieldsDetails.SelectedCurrentResultGridRow) {
                    if (i < $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid.length - 1) {
                        $scope.Flag = false;
                    }
                }
            }
        }

        return $scope.Flag;
    };
    //#endregion

    $scope.objFilterGridFieldsDetails.deleteSelectedRow = function () {
        var index = $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid.indexOf($scope.objFilterGridFieldsDetails.SelectedCurrentResultGridRow);
        if (index >= 0) {
            $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid.splice(index, 1);
            if (index < $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid.length) {
                $scope.objFilterGridFieldsDetails.SelectedCurrentResultGridRow = $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid[index];
            }
            else if ($scope.objFilterGridFieldsDetails.lstResultFieldsForGrid.length > 0) {
                $scope.objFilterGridFieldsDetails.SelectedCurrentResultGridRow = $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid[index - 1];
            }
        }
        $scope.LoadSort();
    };
    $scope.objFilterGridFieldsDetails.canDeleteSelectedRow = function () {
        var retValue = false;
        if (!$scope.objFilterGridFieldsDetails.SelectedCurrentResultGridRow) {
            retValue = true;
        }
        if ($scope.objFilterGridFieldsDetails.lstResultFieldsForGrid.length == 0) {
            retValue = true;
        }
        return retValue;
    };
    $scope.objFilterGridFieldsDetails.onFinishButtonWizardClick = function () {

    }

    //#region Result Fields


    $scope.objFilterGridFieldsDetails.LoadData = function () {

        if ($scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection && $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid) {
            angular.forEach($scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection, function (item) {

                if ($scope.objFilterGridFieldsDetails.lstResultFieldsForGrid && !$scope.objFilterGridFieldsDetails.lstResultFieldsForGrid.some(function (x) { return x.ID == item.ID; })) {
                    var Field = {};
                    Field.ID = item.ID;

                    Field.strDataType = item.strDataType;
                    if (item.DataType) {
                        if (item.strDataType.toLowerCase() == "int") {
                            Field.strDataType = "int";
                        }
                        else if (item.strDataType.toLowerCase() == "string") {
                            Field.strDataType = "string";
                        }
                    }
                    if (item && item.Value) {
                        Field.strHeaderText = item.Value.substring(item.Value.lastIndexOf('.') + 1);
                    }
                    Field.strHeaderText = GetCaptionFromField(Field);


                    Field.IsVisible = "True";
                    Field.strControlType = 'Label';
                    if (item.ControlName.Caption && item.ControlName.Caption.trim().indexOf(":") == item.ControlName.Caption.trim().length - 1) { // if caption alreday has colon (:)
                        Field.strCaption = GetCaptionFromFieldName(item.ControlName);
                    }
                    else {
                        Field.strCaption = GetCaptionFromFieldName(item.ControlName) + " : ";
                    }

                    $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid.push(Field);


                }
            });
        }
        $scope.LoadSort();
        $scope.LoadOrder();
    };


    $scope.LoadSort = function () {
        $scope.ArrSort = [];
        $scope.ArrSort.push("");
        if ($scope.objFilterGridFieldsDetails.lstResultFieldsForGrid.length > 0) {
            for (var i = 0; i < $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid.length; i++) {
                $scope.ArrSort.push(i + 1);
            }
        }

    };

    $scope.LoadOrder = function () {
        $scope.ArrOrder = [];
        $scope.ArrOrder.push("");
        $scope.ArrOrder.push("asc");
        $scope.ArrOrder.push("desc");
    };

    $scope.objFilterGridFieldsDetails.addResultFields = function () {
        $scope.AddFieldsFromQuery($scope.objFilterGridFieldsDetails.AvailableFieldColletion, $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid);
        $scope.LoadSort();

    };
    $scope.objFilterGridFieldsDetails.SelectedResultGridRow = function (obj) {
        if (obj) {
            $scope.objFilterGridFieldsDetails.SelectedCurrentResultGridRow = obj;
        }
    };

    //#region for Load Grid Data for Result Grid

    $scope.objFilterGridFieldsDetails.LoadGridDataForResultFields = function (ResultFieldCollection, isLoad) {
        if (!$scope.objFilterGridFieldsDetails.lstResultFieldsForGrid) {
            $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid = [];
        }

        var intCountPrimary = 0;

        var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
        var primaryKeyFields = getPrimarykey(entityIntellisenseList, $scope.entityName);

        function iterator(itm) {
            var isFound = false;
            for (var i = 0; i < $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid.length; i++) {
                if ($scope.objFilterGridFieldsDetails.lstResultFieldsForGrid[i].strFieldName == itm.EntityField) {
                    isFound = true;
                    break;
                }
            }
            if (!isFound) {
                var item = {
                };
                var ResultField = itm.FieldObject;
                item.strFieldName = itm.EntityField;
                if (isLoad) {
                    ResultField = itm;
                    item.strFieldName = itm.ID;
                }
                else {
                    item.IsAddFromResultFieldScreen = true;
                }
                //ResultField.ID;
                item.strDataType = ResultField.DataType;
                if (ResultField.DataType) {
                    if (ResultField.DataType.toLowerCase() == "int") {
                        item.strDataType = "int";
                    }
                    else if (ResultField.DataType.toLowerCase() == "string") {
                        item.strDataType = "string";
                    }
                }
                if (ResultField && ResultField.Value) {
                    item.strHeaderText = ResultField.Value.substring(ResultField.Value.lastIndexOf('.') + 1);
                }
                item.strHeaderText = GetCaptionFromField(ResultField);


                if (item.strDataType && (item.strDataType.toLowerCase() == "datetime" || item.strDataType.toLowerCase() == "date")) {
                    item.strDataFormat = '{0:d}';
                }
                else if (item.strDataType && item.strDataType.toLowerCase() == "decimal" && (ResultField.Value.indexOf("_amt") > -1 || ResultField.Value.indexOf("_amount") > -1)) {
                    item.strDataFormat = "{0:C}";
                }
                else if (ResultField.Value.contains("ssn")) {
                    item.strDataFormat = '{0:000-##-####}';
                }
                else if (ResultField.Value.contains("phone") || ResultField.Value.contains("fax")) {
                    item.strDataFormat = '{0:(###)###-####}';
                }
                else {
                    item.strDataFormat = '';
                }
                item.IsVisible = "True";
                item.strControlType = 'Label';
                if (primaryKeyFields.length > 0) {
                    var lstKey = primaryKeyFields.filter(function (x) { return x.ID.toLowerCase() == ResultField.ID.toLowerCase(); });
                    if (lstKey && lstKey.length > 0) {
                        item.strDataKey = lstKey[0].KeyNo;
                    }
                }

                if (!$scope.objFilterGridFieldsDetails.lstResultFieldsForGrid.some(function (field) { return field.strFieldName == itm.ID; })) {
                    $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid.push(item);
                }
            }
            if (!isLoad) {
                if (!$scope.objFilterGridFieldsDetails.preselectedfields.some(function (field) { return field.ID == itm.EntityField; })) {
                    if (itm.FieldObject) {
                        itm.FieldObject.IsSelected = "False";
                    }
                }
            }
        }

        if (ResultFieldCollection.length > 0) {
            angular.forEach(ResultFieldCollection, iterator);
        }
    };



    //#endregion
    //#endregion
    //#region Update data on Result Grid(sixth Screen)

    $scope.UpdateResultFields = function (objGridView) {
        function iterator(objGrid) {
            var strFieldName = objGrid.ID;
            var strDataType = objGrid.strDataType;
            var strHeaderText = objGrid.strHeaderText;
            var strControlType = objGrid.strControlType;
            var strDataFormat = objGrid.strDataFormat;

            strVisible = strFieldName.substring(strFieldName.lastIndexOf('.') + 1);
            strVisible = IsAuditField(strVisible) ? "False" : "True";


            var lobjTemp = {
                Name: 'TemplateField', prefix: 'asp', Value: '', dictAttributes: {}, Elements: [], Children: []
            };
            lobjTemp.dictAttributes.HeaderText = strHeaderText;
            lobjTemp.dictAttributes.Visible = strVisible;


            var objItemTemplate = {
                Name: 'ItemTemplate', prefix: 'asp', Value: '', dictAttributes: {}, Elements: [], Children: []
            };
            if (strControlType) {
                objControl = {
                    Name: 'sfwLabel', prefix: 'swc', Value: '', dictAttributes: {}, Elements: [], Children: []
                };
            }


            if (objControl.Name != "sfwLabel" && objControl.Name != "sfwButton" && objControl.Name != "sfwLinkButton" && objControl.Name != "sfwImageButton" && objControl.Name !== "sfwButtonGroup") {
                objGridView.dictAttributes.AllowEditing = "True";
                objGridView.dictAttributes.sfwTwoWayBinding = "True";
                objGridView.dictAttributes.sfwCommonFilterBox = "False";
                objGridView.dictAttributes.sfwFilterOnKeyPress = "False";
            }
            objControl.dictAttributes.sfwEntityField = objGrid.ID;
            objControl.dictAttributes.sfwDataFormat = strDataFormat;
            if (objGrid.IsVisible == "False") {
                objControl.dictAttributes.Visible = objGrid.IsVisible;
            }
            objItemTemplate.Elements.push(objControl);
            lobjTemp.Elements.push(objItemTemplate);
            objColumn.Elements.push(lobjTemp);

        }

        if ($scope.objFilterGridFieldsDetails.lstResultFieldsForGrid && $scope.objFilterGridFieldsDetails.lstResultFieldsForGrid.length > 0) {
            for (var i = 0; i < objGridView.Elements.length; i++) {
                if (objGridView.Elements[i].Name == "Columns") {
                    objGridView.Elements.splice(i, 1);
                    break;
                }
            }

            var objColumn = {
                Name: 'Columns', Value: '', dictAttributes: {}, Elements: [], Children: []
            };

            angular.forEach($scope.objFilterGridFieldsDetails.lstResultFieldsForGrid, iterator);

            $scope.UpdateGridProperties($scope.objFilterGridFieldsDetails.lstResultFieldsForGrid, objGridView);

            objGridView.Elements.push(objColumn);
        }
    };


    //#endregion

    /********************************************** Third Screen End******************************************************/

    $scope.objNewButtonFilterGridCriteria.SetNavigationParameter = function () {
        var strNavParam = "";
        angular.forEach($scope.objNewButtonFilterGridCriteria.GridNonAvailableControlCollection, function (tn) {
            strNavParam += tn.ControlName + ";";
        });

        if (strNavParam.length > 0) {
            if (strNavParam[strNavParam.length - 1] == ';')
                strNavParam = strNavParam.substring(0, strNavParam.length - 1);
        }
        $scope.sfxControl.dictAttributes.sfwNavigationParameter = strNavParam;
    };

    //#region For Create filter grid Methods
    $scope.objNewButtonFilterGridCriteria.AddControls = function (selectedCntrlVM, lstGrid) {
        var blnIsLookup = $scope.formodel.dictAttributes.sfwType.toUpperCase() == "LOOKUP";
        var strTabSheetID = "";

        if (blnIsLookup) {
            if ($sope.sfxCell.ParentVM.Name == "sfwTabSheet") {
                strTabSheetID = $sope.sfxCell.ParentVM.dictAttributes.ID;
                if ((strTabSheetID != undefined && strTabSheetID != "") && (strTabSheetID == "tshAdvSort" || strTabSheetID == "tshSql")) {
                    return;
                }
            }
        }

        var dRowMultiplier = 0;

        var totalControlCount = 1;

        totalControlCount = lstGrid.length * 2;

        var colCount = $scope.objNewButtonFilterGridCriteria.StrNoOfColumn;
        var intRows = (totalControlCount / colCount) + dRowMultiplier;

        intRows = Math.round(intRows);
        if (intRows <= 0)   //atleast one row should be added
            intRows = 1;

        var cellVM = GetVM("sfwColumn", selectedCntrlVM);

        var intCurRowInd;
        if (cellVM) {
            var rownvM = cellVM.ParentVM;
            var rowindex = rownvM.ParentVM.Elements.indexOf(rownvM);
            intCurRowInd = rowindex;
        }
        else {
            var RowCount = tableVM.Elements.length;
            intCurRowInd = RowCount - 1;
        }

        var cellLst = [];

        var cellInd = 0;

        var sfxPanel = {
            Name: "sfwPanel", Value: '', prefix: "swc", dictAttributes: {}, Elements: [], Children: []
        };
        sfxPanel.ParentVM = $scope.sfxCell;
        sfxPanel.dictAttributes.ID = CreateControlID($scope.formodel, "NewPanel", "sfwPanel");
        var sfxTable = { Name: "sfwTable", Value: '', prefix: "swc", dictAttributes: {}, Elements: [], Children: [] };
        sfxTable.ParentVM = sfxPanel;
        sfxPanel.IsVisible = true;
        sfxPanel.initialvisibilty = true;
        sfxPanel.isLoaded = true;

        for (var rowInd = 1; rowInd <= intRows; rowInd++) {
            var sfxRowModel = {
                Name: "sfwRow", Value: '', prefix: "swc", dictAttributes: {}, Elements: [], Children: []
            };
            sfxRowModel.ParentVM = sfxTable;

            for (var colInd = 0; colInd < $scope.objNewButtonFilterGridCriteria.StrNoOfColumn; colInd++) {
                var sfxCellModel = {
                    Name: "sfwColumn", Value: '', prefix: "swc", dictAttributes: {
                    }, Elements: [], Children: []
                };
                sfxCellModel.ParentVM = sfxRowModel;
                $rootScope.PushItem(sfxCellModel, sfxRowModel.Elements);

            }
            $rootScope.PushItem(sfxRowModel, sfxTable.Elements);

        }
        $rootScope.PushItem(sfxTable, sfxPanel.Elements);

        $rootScope.PushItem(sfxPanel, $scope.sfxCell.Elements);

        angular.forEach(sfxTable.Elements, function (rowVM) {
            if (rowVM.Name == "sfwRow") {
                angular.forEach(rowVM.Elements, function (vm) {
                    var cellitem = {
                    };
                    cellitem.key = cellInd;
                    cellitem.value = vm;
                    cellLst.push(cellitem);
                    cellInd++;
                });
            }
        });


        cellInd = 0;

        angular.forEach(lstGrid, function (objGrid) {
            var strControlType = undefined;
            if (objGrid.ControlClass && objGrid.ControlClass == "TextBox") {
                strControlType = "sfwTextBox";
            }
            else if (objGrid.ControlClass && objGrid.ControlClass == "DropDownList") {
                strControlType = "sfwDropDownList";
            }
            cellInd = $scope.objNewButtonFilterGridCriteria.AddControlsGrid(cellLst, strControlType, objGrid, cellInd);
        });

        var sfxGridRow = {
            Name: "sfwRow", Value: '', prefix: "swc", dictAttributes: {
            }, Elements: [], Children: []
        };
        sfxGridRow.ParentVM = sfxTable;

        for (var colInd = 0; colInd < $scope.objNewButtonFilterGridCriteria.StrNoOfColumn; colInd++) {
            var sfxGridColumn = {
                Name: "sfwColumn", Value: '', prefix: "swc", dictAttributes: {
                }, Elements: [], Children: []
            };
            sfxGridColumn.ParentVM = sfxGridRow;
            $rootScope.PushItem(sfxGridColumn, sfxGridRow.Elements);

        }

        if (sfxGridRow.Elements.length > 0) {
            var index1 = $scope.objNewButtonFilterGridCriteria.StrNoOfColumn - 1; //Convert.ToInt32(index);
            $rootScope.PushItem($scope.sfxControl, sfxGridRow.Elements[index1].Elements);
            $rootScope.PushItem(sfxGridRow, sfxTable.Elements);

        }
        if ($scope.objNewButtonFilterGrid.SelectGridOption == 'CreateNewGrid') {
            var objGridView = { Name: "sfwGridView", Value: '', prefix: "swc", dictAttributes: {}, Elements: [], Children: [] };
            var strControlID = CreateControlID($scope.formodel, 'grvGridView', "sfwGridView");
            objGridView.dictAttributes.ID = strControlID;
            objGridView.dictAttributes.AllowPaging = "True";
            objGridView.dictAttributes.AllowSorting = "True";
            objGridView.dictAttributes.sfwSelection = "Many";
            objGridView.dictAttributes.sfwBaseQuery = $scope.objNewButtonFilterGrid.StrBaseQuery;
            objGridView.dictAttributes.sfwBoundToQuery = "True";
            objGridView.dictAttributes.sfwQueryLoadType = "Solution";
            $scope.sfxControl.dictAttributes.sfwRelatedControl = objGridView.dictAttributes.ID;
            $scope.UpdateResultFields(objGridView);
            var row = {
                Name: "sfwRow", Value: '', prefix: "swc", dictAttributes: {
                }, Elements: [], Children: []
            };
            row.ParentVM = sfxTable;
            for (var colInd = 0; colInd < $scope.objNewButtonFilterGridCriteria.StrNoOfColumn; colInd++) {
                var column = {
                    Name: "sfwColumn", Value: '', prefix: "swc", dictAttributes: {
                    }, Elements: [], Children: []
                };
                column.ParentVM = row;
                $rootScope.PushItem(column, row.Elements);

            }
            $rootScope.PushItem(row, sfxTable.Elements);
            if (sfxTable.Elements.length > 0) {
                var lastRow = sfxTable.Elements[sfxTable.Elements.length - 1];
                if (lastRow.Elements.length > 0) {
                    var lstcol = lastRow.Elements.filter(function (x) { return x.Name == "sfwColumn" });
                    if (lstcol && lstcol[0]) {
                        $rootScope.PushItem(objGridView, lstcol[0].Elements);
                        $scope.objNewButtonFilterGrid.UpdateQueryParam();
                    }
                }
            }
        }

    };

    $scope.objNewButtonFilterGridCriteria.AddControlsGrid = function (acellLst, astrControlClass, aobjGrid, aintCellInd) {
        var cellVM;
        var newControl;

        cellVM = acellLst[aintCellInd].value;
        aintCellInd++;

        newControl = {
            Name: "sfwLabel", Value: '', prefix: "swc", dictAttributes: {}, Elements: [], Children: []
        };
        newControl.ParentVM = cellVM;
        var strLableId = aobjGrid.ControlName;
        if (aobjGrid.ControlName.match("^txt") || aobjGrid.ControlName.match("^ddl")) {
            strLableId = aobjGrid.ControlName.substring(3);
        }
        var strLabelID = CreateControlID($scope.formodel, strLableId, "sfwLabel", true);
        newControl.dictAttributes.ID = strLabelID;
        newControl.dictAttributes.Text = GetCaptionFromFieldName(aobjGrid.ID) + " : ";
        newControl.dictAttributes.AssociatedControlID = aobjGrid.ControlName;
        newControl.dictAttributes.sfwIsCaption = "True";
        $rootScope.PushItem(newControl, cellVM.Elements);

        cellVM = acellLst[aintCellInd].value;
        aintCellInd++;
        newControl = {
            Name: astrControlClass, Value: '', prefix: "swc", dictAttributes: {}, Elements: [], Children: []
        };
        newControl.ParentVM = cellVM;
        newControl.dictAttributes.ID = aobjGrid.ControlName;
        newControl.dictAttributes.sfwDataField = aobjGrid.ID;
        newControl.IsShowDataField = true;
        if (astrControlClass == "sfwDropDownList") {
            if (aobjGrid.ID.match("_value$")) {
                var objGrid = $scope.GetGridModel();
                if (objGrid) {
                    var strCDOName = objGrid.dictAttributes.sfwBaseQuery;
                    if (strCDOName) {
                        strCDOName = strCDOName.substring(0, strCDOName.indexOf('.'));
                    }
                    var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                    var strCodeGroup = GetCodeID(strCDOName, aobjGrid.strCaption, entityIntellisenseList);
                    //if (strCodeGroup.length == 0) {
                    //    strCodeGroup = "0";
                    //}
                    newControl.dictAttributes.sfwLoadType = "CodeGroup";
                    newControl.dictAttributes.sfwLoadSource = strCodeGroup;
                }
            }
        }
        $rootScope.PushItem(newControl, cellVM.Elements);
        return aintCellInd;
    };

    //#endregion

    //#region Finish Method for Open,Close,Finish and New Dialog Wizard pages
    $scope.CreatePopupButton = function () {
        var strMethodName = $scope.sfxControl.Name + "." + $scope.SelectedButtonDetails.Method;
        if ($scope.objNewButtonDialogForGrid.SelectGridOption == "CreateNewGrid") {
            $scope.UpdateGridPropertiesForPopUp($scope.objGridField.FieldCollection, $scope.objGridView);
            $scope.UpdateGridFields($scope.objGridField.FieldCollection);
            $scope.AddButtonOpenDialog(true, strMethodName);
        }
        else if ($scope.objNewButtonDialogForGrid.SelectGridOption == "UseExistingGrid") {
            $scope.AddButtonOpenDialog(false, strMethodName);
        }
    };

    $scope.AddButtonOpenDialog = function (CreateNewGrid, strMethodName) {
        // First add the button control
        var rowCell;
        var sfwControlVM;
        var tableVM = FindParent($scope.sfxCell, "sfwTable");
        var rowVM;
        var lst = tableVM.Elements.filter(function (x) {
            return x.Name == "sfwRow";
        });
        if (lst && lst.length > 0) {
            rowVM = lst[lst.length - 1];
        }
        if (CreateNewGrid) {
            if (rowVM) {
                rowCell = undefined;
                lst = rowVM.Elements.filter(function (x) {
                    return x.Name == "sfwColumn";
                });
                if (lst && lst.length > 0) {
                    rowCell = lst[0];
                }
                if (rowCell != null) {
                    strRelatedControl = $scope.CrateGridForOpenDialogVM(rowCell);
                    if (strRelatedControl != undefined && strRelatedControl != "") {
                        $scope.AddControlToCell(strMethodName, $scope.sfxCell);
                        sfwControlVM = $scope.sfxCell.Elements[$scope.sfxCell.Elements.length - 1];
                        if (sfwControlVM != null) {
                            sfwControlVM.dictAttributes.sfwRelatedControl = strRelatedControl;
                        }
                        else {
                            return;
                        }
                    }
                    else {
                        return;
                    }
                }
            }
        }
        else {
            $scope.AddControlToCell(strMethodName, $scope.sfxCell);
            sfwControlVM = $scope.sfxCell.Elements[$scope.sfxCell.Elements.length - 1];
            if (sfwControlVM) {
                sfwControlVM.dictAttributes.sfwRelatedControl = $scope.objNewButtonDialogForGrid.SelectGrid;
            }
            else {
                return;
            }
        }

        // After Adding Button add new Row to add Dialog Panel
        var lst = tableVM.Elements.filter(function (x) {
            return x.Name == "sfwRow";
        });
        if (lst && lst.length > 0) {
            rowVM = lst[lst.length - 1];
        }
        if (rowVM != null) {
            lst = rowVM.Elements.filter(function (x) {
                return x.Name == "sfwColumn";
            });
            if (lst && lst.length > 0) {
                rowCell = lst[0];
            }
        }

        $scope.OnInsertRowBelowClick(rowCell, tableVM);
        var rowVM1;
        var lst = tableVM.Elements.filter(function (x) {
            return x.Name == "sfwRow";
        });
        if (lst && lst.length > 0) {
            rowVM1 = lst[lst.length - 1];
        }
        if (rowVM1) {
            lst = rowVM1.Elements.filter(function (x) {
                return x.Name == "sfwColumn";
            });
            if (lst && lst.length > 0) {
                rowCell = lst[0];
            }
            if (rowCell) {
                var strNewDialogID = $scope.objNewButtonDialogForGrid.SelectDialogPanel;
                if ($scope.objNewButtonDialogForGrid.SelectDialogPanelOption == "CreateNewDialogPanel") {
                    strNewDialogID = $scope.AddDialogVM($scope.objNewButtonDialogForGrid.SelectDialogPanel, rowCell);
                }
                if (strNewDialogID != undefined && strNewDialogID != "") {
                    sfwControlVM.dictAttributes.sfwRelatedDialogPanel = strNewDialogID;
                }
            }
        }
        else {
            // Means we are not able to create new row;
        }
    };

    $scope.AddControlToCell = function (cntrlName, cellVM, sfxControlModel) {
        if (!sfxControlModel) {
            sfxControlModel = CreateControl($scope.formodel, cellVM, cntrlName);
        }

        if (sfxControlModel) {
            $rootScope.PushItem(sfxControlModel, cellVM.Elements);
            SetFormSelectedControl($scope.formodel, sfxControlModel);
        }
        if ($scope.objNewButtonFilterGrid.SelectGridOption == 'CreateNewGrid') {

            var objGridView = { Name: "sfwGridView", Value: '', prefix: "swc", dictAttributes: {}, Elements: [], Children: [] };
            var strControlID = CreateControlID($scope.formodel, 'grvGridView', "sfwGridView");
            objGridView.dictAttributes.ID = strControlID;
            objGridView.dictAttributes.AllowPaging = "True";
            objGridView.dictAttributes.AllowSorting = "True";
            objGridView.dictAttributes.sfwSelection = "Many";
            objGridView.dictAttributes.sfwBoundToQuery = "True";
            objGridView.dictAttributes.sfwBaseQuery = $scope.objNewButtonFilterGrid.StrBaseQuery;
            $scope.sfxControl.dictAttributes.sfwRelatedControl = objGridView.dictAttributes.ID;
            $scope.UpdateResultFields(objGridView);
            $rootScope.PushItem(objGridView, cellVM.Elements);
            $scope.objNewButtonFilterGrid.UpdateQueryParam();

        }
    };

    $scope.CrateGridForOpenDialogVM = function (rowCell) {
        var strGridID = "";
        var selectedField = $scope.objCreateNewGrid.SelectedEntityField;

        if (selectedField) {
            if (selectedField.DataType == "Collection" || selectedField.DataType == "CDOCollection" || selectedField.DataType == "List") {
                {
                    if (rowCell) {
                        {
                            var tableVM = FindParent(rowCell, "sfwTable");
                            if (tableVM) {
                                var newRowModel = {
                                    Name: "sfwRow", Value: '', prefix: 'swc', dictAttributes: {
                                    }, Elements: [], Children: []
                                };
                                newRowModel.ParentVM = tableVM;

                                var newcellModel = {
                                    Name: "sfwColumn", Value: '', prefix: 'swc', dictAttributes: {
                                    }, Elements: [], Children: []
                                };
                                newcellModel.ParentVM = newRowModel;
                                $rootScope.PushItem($scope.objGridView, newcellModel.Elements);
                                $scope.objGridView.ParentVM = newcellModel;
                                strGridID = $scope.objGridView.dictAttributes.ID;
                                $rootScope.PushItem(newcellModel, newRowModel.Elements);
                                var rowVM;
                                var lst = tableVM.Elements.filter(function (x) {
                                    return x.Name == "sfwRow";
                                });
                                if (lst && lst.length > 0) {
                                    rowVM = lst[lst.length - 1];
                                }
                                if (rowVM) {
                                    for (var ind = 1; ind < rowVM.Elements.length; ind++) {
                                        newcellModel = {
                                            Name: "sfwColumn", Value: '', prefix: 'swc', dictAttributes: {
                                            }, Elements: [], Children: []
                                        };
                                        newcellModel.ParentVM = newRowModel;
                                        $rootScope.PushItem(newcellModel, newRowModel.Elements);
                                    }
                                }
                                $rootScope.PushItem(newRowModel, tableVM.Elements);
                            }
                        }
                    }
                }
            }
            else {
                $SgMessagesService.Message('Message', "A valid collection needs to be selected for the grid.");
            }
        }
        return strGridID;
    };

    $scope.OnInsertRowBelowClick = function (aParam, tableVM) {
        // this.ClearSelection();
        var iRowIndex = tableVM.Elements.indexOf(aParam.ParentVM);

        $scope.InsertRow(aParam, true, iRowIndex, tableVM);

    };

    $scope.InsertRow = function (aParam, isBelow, iRowIndex, tableVM) {
        if (aParam) {
            //  BaseUndoRedoVM selectedControlVM = aParam as BaseUndoRedoVM;

            // bool isValid = this.CanValidForInsert();

            // SfxRowVM rowVM = UtilityFunctions.GetVM<SfxRowVM>(selectedControlVM);
            // if (null != rowVM && isValid)
            {
                var prefix = "swc";
                var sfxRowModel = {
                    Name: "sfwRow", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: []
                };
                sfxRowModel.ParentVM = tableVM;

                var ColCount = GetMaxColCount(aParam.ParentVM, tableVM);
                for (var colInd = 0; colInd < ColCount; colInd++) {
                    var sfxCellModel = {
                        Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {
                        }, Elements: [], Children: []
                    };
                    sfxCellModel.ParentVM = sfxRowModel;
                    sfxRowModel.Elements.push(sfxCellModel);
                }

                var index;
                if (isBelow) {
                    index = iRowIndex + 1;
                }
                else {
                    index = iRowIndex;
                }

                $rootScope.InsertItem(sfxRowModel, tableVM.Elements, index);

                //BaseUndoRedoVM newRowVM = this.MirrorElements[index];
                //if (newRowVM.Elements.Count > 0)
                //{
                //    if (newRowVM.MirrorElements[0] is SfxControlVM)
                //    {
                //        this.ObjVM.DesignVM.CheckAndUpdateSelectedControlStatus(newRowVM.MirrorElements[0] as SfxControlVM, false);
                //    }
                //}
            }
        }
    };

    $scope.AddDialogVM = function (astrDialogPanelID, cellVM) {
        var strNewDialogID = "";

        $scope.AddControlToCell("DialogPanel", cellVM);
        var dialog = cellVM.Elements[cellVM.Elements.length - 1];
        if (astrDialogPanelID != undefined && astrDialogPanelID != "") {
            dialog.dictAttributes.ID = astrDialogPanelID;
        }
        if (dialog)
            strNewDialogID = dialog.dictAttributes.ID;
        return strNewDialogID;
    };
    $scope.UpdateGridPropertiesForPopUp = function (FieldCollection, objGridView) {
        var strKeySeq;
        var strKeyNames = "";

        var strSortSeq;
        var strSortExpression = "";

        if (FieldCollection != null && FieldCollection.length > 0) {
            angular.forEach(FieldCollection, function (objSfxField) {
                //string strPropertyName = objSfxField.istrItemPath.Substring(objSfxField.istrObjectID.Length + 1);
                strKeySeq = objSfxField.istrKey;
                if (strKeySeq != undefined && strKeySeq != "") {
                    if (strKeyNames.length == 0) {
                        strKeyNames = strKeySeq + ";" + objSfxField.istrPropertyName;
                    }
                    else {
                        strKeyNames += "," + strKeySeq + ";" + objSfxField.istrPropertyName;
                    }
                }

                strSortSeq = objSfxField.istrSort;
                if (strSortSeq != undefined && strSortSeq != "") {
                    if (strSortExpression.length == 0) {
                        strSortExpression = strSortSeq + ";" + objSfxField.istrPropertyName + " " + objSfxField.istrOrder;
                    }
                    else {
                        strSortExpression += "," + strSortSeq + ";" + objSfxField.istrPropertyName + " " + objSfxField.istrOrder;
                    }
                }
            });
        }
        var slFieldSeq = {};
        var strDataKeyNames = strKeyNames.split(',');

        angular.forEach(strDataKeyNames, function (strKeyName) {
            var strKeyField = strKeyName.substring(strKeyName.indexOf(';') + 1).trim();
            slFieldSeq[strKeyName] = strKeyField;
        });
        strKeyNames = "";

        angular.forEach(slFieldSeq, function (value, key) {
            if (strKeyNames.length == 0) {
                strKeyNames = value;
            }
            else {
                strKeyNames += "," + value;
            }
        });
        objGridView.dictAttributes.sfwDataKeyNames = strKeyNames;

        slFieldSeq = {
        };
        var strSortExpFields = strSortExpression.split(',');

        angular.forEach(strSortExpFields, function (strSortExp) {
            var strSortField = strSortExp.substring(strSortExp.indexOf(';') + 1).trim();
            slFieldSeq[strSortExp] = strSortField;
        });
        strSortExpression = "";

        angular.forEach(slFieldSeq, function (value, key) {
            if (strSortExpression.length == 0)
                strSortExpression = value;
            else
                strSortExpression += "," + value;
        });
        objGridView.dictAttributes.sfwSortExpression = strSortExpression;
    };

    $scope.UpdateGridProperties = function (FieldCollection, objGridView) {
        var strKeySeq;
        var strKeyNames = "";

        var strSortSeq;
        var strSortExpression = "";

        if (FieldCollection != null && FieldCollection.length > 0) {
            angular.forEach(FieldCollection, function (objSfxField) {
                //string strPropertyName = objSfxField.istrItemPath.Substring(objSfxField.istrObjectID.Length + 1);
                strKeySeq = objSfxField.istrKey;
                if (strKeySeq != undefined && strKeySeq != "") {
                    if (strKeyNames.length == 0) {
                        strKeyNames = strKeySeq + ";" + objSfxField.ID;
                    }
                    else {
                        strKeyNames += "," + strKeySeq + ";" + objSfxField.ID;
                    }
                }

                strSortSeq = objSfxField.strSort;
                if (strSortSeq) {
                    if (strSortExpression.length == 0) {
                        strSortExpression = strSortSeq + ";" + objSfxField.ID + " " + objSfxField.strOrder;
                    }
                    else {
                        strSortExpression += "," + strSortSeq + ";" + objSfxField.ID + " " + objSfxField.strOrder;
                    }
                }
            });
        }
        var slFieldSeq = {};
        var strDataKeyNames = strKeyNames.split(',');

        angular.forEach(strDataKeyNames, function (strKeyName) {
            var strKeyField = strKeyName.substring(strKeyName.indexOf(';') + 1).trim();
            slFieldSeq[strKeyName] = strKeyField;
        });
        strKeyNames = "";

        angular.forEach(slFieldSeq, function (value, key) {
            if (strKeyNames.length == 0) {
                strKeyNames = value;
            }
            else {
                strKeyNames += "," + value;
            }
        });
        objGridView.dictAttributes.sfwDataKeyNames = strKeyNames;

        slFieldSeq = {
        };
        var strSortExpFields = strSortExpression.split(',');

        angular.forEach(strSortExpFields, function (strSortExp) {
            var strSortField = strSortExp.substring(strSortExp.indexOf(';') + 1).trim();
            slFieldSeq[strSortExp] = strSortField;
        });
        strSortExpression = "";

        angular.forEach(slFieldSeq, function (value, key) {
            if (strSortExpression.length == 0)
                strSortExpression = value;
            else
                strSortExpression += "," + value;
        });
        objGridView.dictAttributes.sfwSortExpression = strSortExpression;
    };

    $scope.UpdateGridFields = function (FieldCollection) {
        $scope.objGridView.Elements = [];

        if (FieldCollection && FieldCollection.length > 0) {
            var sfxControl;
            var objColumn = {
                Name: "Columns", Value: '', dictAttributes: {
                }, Elements: [], Children: []
            };
            objColumn.ParentVM = $scope.objGridView;

            angular.forEach(FieldCollection, function (objSfxField) {
                var strDataType = objSfxField.istrDataType;
                var strHAlign = "";
                if (strDataType == "Decimal")
                    strHAlign = "Right";

                objTemp = { Name: "TemplateField", Value: '', prefix: 'asp', dictAttributes: {}, Elements: [], Children: [] };
                objTemp.ParentVM = objColumn;

                objTemp.dictAttributes.Visible = objSfxField.istrVisible;
                objTemp.dictAttributes.HeaderText = objSfxField.istrHeader;
                objTemp.dictAttributes["ItemStyle.HorizontalAlign"] = strHAlign;

                var objItmTemp = {
                    Name: "ItemTemplate", Value: '', prefix: 'asp', dictAttributes: {
                    }, Elements: [], Children: []
                };
                objItmTemp.ParentVM = objTemp;
                switch (objSfxField.istrControlType) {
                    case "HyperLink":
                        sfxControl = {
                            Name: "sfwLabel", Value: '', prefix: 'swc', dictAttributes: {
                            }, Elements: [], Children: []
                        };
                        sfxControl.ParentVM = objItmTemp;
                        //sfxControl.SetName(ApplicationConstants.XMLFacade.SFWLABEL, ApplicationConstants.XMLFacade.PREFIX_SWC);
                        sfxControl.dictAttributes.sfwLinkable = "True";
                        sfxControl.dictAttributes.sfwRelatedControl = "btnOpen";
                        break;
                    case "TextBox":
                        sfxControl = {
                            Name: "sfwTextBox", Value: '', prefix: 'swc', dictAttributes: {
                            }, Elements: [], Children: []
                        };
                        sfxControl.ParentVM = objItmTemp;
                        // sfxControl.SetName(ApplicationConstants.XMLFacade.SFWTEXTBOX, ApplicationConstants.XMLFacade.PREFIX_SWC);
                        if (strDataType == "DateTime")
                            sfxControl.dictAttributes.sfwDataType = strDataType;
                        break;
                    case "DropDownList":
                        sfxControl = {
                            Name: "sfwDropDownList", Value: '', prefix: 'swc', dictAttributes: {
                            }, Elements: [], Children: []
                        };
                        sfxControl.ParentVM = objItmTemp;
                        // sfxControl.SetName(ApplicationConstants.XMLFacade.SFWDROPDOWNLIST, ApplicationConstants.XMLFacade.PREFIX_SWC);
                        if (endsWith(objSfxField.istrObjectID, "_value")) {
                            var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                            var codegroup = GetCodeID($scope.objCreateNewGrid.SelectedEntityField.Entity, objSfxField.istrItemPath, entityIntellisenseList);
                            //var codegroup = UtilityFunctions.GetCodeID(objSfxField.istrItemPath);

                            if (codegroup.length == 0) {
                                codegroup = "0";
                            }
                            if (codegroup != undefined && codegroup != "") {
                                sfxControl.dictAttributes.sfwLoadType = "CodeGroup";
                            }
                        }
                        break;
                    case "Checkbox":
                        sfxControl = {
                            Name: "sfwCheckBox", Value: '', prefix: 'swc', dictAttributes: {
                            }, Elements: [], Children: []
                        };
                        sfxControl.ParentVM = objItmTemp;
                        //sfxControl.SetName(ApplicationConstants.XMLFacade.SFWCHECKBOX, ApplicationConstants.XMLFacade.PREFIX_SWC);
                        break;
                    default:
                        sfxControl = {
                            Name: "sfwLabel", Value: '', prefix: 'swc', dictAttributes: {
                            }, Elements: [], Children: []
                        };
                        sfxControl.ParentVM = objItmTemp;
                        //sfxControl.SetName(ApplicationConstants.XMLFacade.SFWLABEL, ApplicationConstants.XMLFacade.PREFIX_SWC);
                        break;
                }

                sfxControl.dictAttributes.sfwEntityField = objSfxField.istrItemPath;

                objTemp.dictAttributes.sfwSortExpression = sfxControl.dictAttributes.sfwEntityField;

                sfxControl.dictAttributes.sfwDataFormat = objSfxField.istrFormat;
                sfxControl.dictAttributes.sfwRelatedControl = objSfxField.istrRelatedControl;

                if (sfxControl.Name != "sfwLabel" && sfxControl.Name != "sfwButton" && sfxControl.Name != "sfwLinkButton" && sfxControl.Name != "sfwImageButton" && sfxControl.Name !== "sfwButtonGroup") {
                    $scope.objGridView.dictAttributes.AllowEditing = "True";
                    $scope.objGridView.dictAttributes.sfwTwoWayBinding = "True";
                    $scope.objGridView.dictAttributes.sfwCommonFilterBox = "False";
                    $scope.objGridView.dictAttributes.sfwFilterOnKeyPress = "False";
                }

                $rootScope.PushItem(sfxControl, objItmTemp.Elements);
                $rootScope.PushItem(objItmTemp, objTemp.Elements);
                $rootScope.PushItem(objTemp, objColumn.Elements);

            });

            $rootScope.PushItem(objColumn, $scope.objGridView.Elements);

        }
    };
    //#endregion


    $scope.onNextForNewGridCreation = function () {
        $scope.objFilterGridFieldsDetails.Init();
    }
    //#endregion


    $scope.onFinishButtonWizardClick = function () {
        $scope.$emit('AddButtonCancel', {
        });
    };

    //#region Call Init Methods
    $scope.Init();
    //#endregion

    $scope.setTitle = function (title) {
        if ($scope.$parent.title) {
            $scope.$parent.title = title;
            $scope.$parent.ButtonWizardDialog.updateTitle($scope.$parent.title);
        }
    };

    $scope.validateId = function (obj) {
        if ($scope.currentFileScope) {
            $ValidationService.validateID(obj, $scope.currentFileScope.validationErrorList, obj.dictAttributes.ID);
        } else {
            $scope.currentFileScope = $scope.getFileScope();
            $ValidationService.validateID(obj, $scope.currentFileScope.validationErrorList, obj.dictAttributes.ID);
        }
    };
    $scope.validateDuplicateId = function (obj) {
        if ($scope.currentFileScope) {
            $ValidationService.checkDuplicateId(obj, $scope.currentFileScope.formTableModel, $scope.currentFileScope.validationErrorList, false, CONST.FORM.NODES);
        } else {
            $scope.currentFileScope = $scope.getFileScope();
            $ValidationService.checkDuplicateId(obj, $scope.currentFileScope.formTableModel, $scope.currentFileScope.validationErrorList, false, CONST.FORM.NODES);
        }
    };
    $scope.isAnyErrors = function () {
        var returnValue = false;
        returnValue = $ValidationService.isEmptyObj($scope.sfxControl.errors);
        return returnValue;
    };
    $scope.getFileScope = function () {
        if ($rootScope.currentopenfile && $rootScope.currentopenfile.file) {
            var scope = getScopeByFileName($rootScope.currentopenfile.file.FileName);
            if (scope) {
                return scope;
            } else {
                return undefined;
            }
        }
    };


    $scope.onChangeOfSelectGridOption = function () {
        $scope.sfxControl.dictAttributes.sfwRelatedControl = '';
        $scope.objNewButtonFilterGrid.StrBaseQuery = '';
        $scope.objNewButtonFilterGrid.lstQryField = [];
    }
    $scope.OnChangeOfGridOption = function () {
        {
            $scope.objNewButtonDialogForGrid.SelectGrid = '';
        }
    }

}]);

function onTrackingIDDrop(e) {
    var scp = angular.element($(e.target)).scope();
    var parent = scp.$parent;
    while (parent && !parent.objNewButtonOpenWordDoc.SelectedField) {
        parent = parent.$parent;
    }

    if (scp && scp.$parent && parent.objNewButtonOpenWordDoc.SelectedField) {
        var field = parent.objNewButtonOpenWordDoc.SelectedField;
        var value = field.ID;
        while (field.objParent && !field.objParent.IsMainEntity) {
            field = field.objParent;
            value = [field.ID, value].join(".");
        }

        scp.$apply(function () {
            scp.objNewButtonOpenWordDoc.TrackingID = value;
        });
    }
}

function onFieldCollectionDrop(event) {
    event.preventDefault();
    var scope = angular.element(event.target).scope();
    if (scope && scope.objNewButtonCustomAttr && scope.objNewButtonCustomAttr.AddToGridClick) {
        scope.$apply(function () {
            scope.objNewButtonCustomAttr.AddToGridClick();
        });
    }
}

function TraverseFieldCollection(objColl) {
    angular.forEach(objColl.Items, function (itemObj, key) {
        if (itemObj.Items.length > 0) {
            TraverseFieldCollection(itemObj);
            itemObj.IsSelected = false;
        } else {
            itemObj.IsSelected = false;
        }
    });
}
app.controller("BrowseForQueryController", ["$scope", "$rootScope", "ngDialog", "share", "ParameterFactory", "$EntityIntellisenseFactory", "$filter", "$timeout", function ($scope, $rootScope, ngDialog, share, ParameterFactory, $EntityIntellisenseFactory, $filter, $timeout) {
    $scope.sharedata = share;
    $scope.blnShowAllFilesForBrowse = false;

    $scope.Init = function () {
        
        $scope.lstEntity = [];
        var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
        var scopecreatenewobj = getScopeByFileName('createNewObject');
        if (scopecreatenewobj && scopecreatenewobj.objNewItems && scopecreatenewobj.objNewItems.SelectedOption === "File") {
            $scope.strPath = scopecreatenewobj.objFileDetails.Path;
        }
        else if (scopecreatenewobj && scopecreatenewobj.objFormsDetails && scopecreatenewobj.objFormsDetails.Path) {
            $scope.strPath = scopecreatenewobj.objFormsDetails.Path;
        }
        else if (scopecreatenewobj && scopecreatenewobj.objFormLinkDetails && scopecreatenewobj.objFormLinkDetails.Path) {
            $scope.strPath = scopecreatenewobj.objFormLinkDetails.Path;
        }
        
        else if (scopecreatenewobj && scopecreatenewobj.objReportDetails && scopecreatenewobj.objReportDetails.Path) {
            $scope.strPath = scopecreatenewobj.objReportDetails.Path;
        }
        else if (!scopecreatenewobj && $rootScope.currentopenfile) {
            var currentfile = $rootScope.currentopenfile.file.FilePath.split('\\');
            $scope.strPath = currentfile[currentfile.length - 2];
        }
        function AddInlstEntity(item) {
            $scope.lstEntity.push(item);
        }
        if ($scope.strPath) {
            var lstObj = entityIntellisenseList.filter(function (x) {
                var lstsplit = [];
                if (x.FilePath) {
                    lstsplit = x.FilePath.split('\\');
                    var entityfolder = lstsplit[lstsplit.length - 2];
                    return $scope.strPath == entityfolder;
                }
            });
            angular.forEach(lstObj, AddInlstEntity);

        }
        else {
            $scope.lstEntity = entityIntellisenseList;
        }

        if ($scope.subQueryType) {
            angular.forEach(entityIntellisenseList, function (item) {
                if (item.Queries.length > 0) {
                    angular.forEach(item.Queries, function (itm) {
                        itm.IsVisible = false;
                        if (itm.QueryType == $scope.subQueryType) {
                            itm.IsVisible = true;
                        }

                    });
                }

            });
        }
        else {
            angular.forEach(entityIntellisenseList, function (item) {
                if (item.Queries.length > 0) {
                    angular.forEach(item.Queries, function (itm) {
                        if (itm.QueryType != "SubSelectQuery") {
                            itm.IsVisible = true;
                        }
                    });
                }

            });
        }

        function UpdateParameterValue(value, key) {
            var parameter = $scope.selectedCurrentQuery.Parameters.filter(function (item) {
                return item.ID == value.ID;
            });
            if (parameter.length > 0) {
                parameter[0].Value = value.Value ? value.Value : "";
            }
        }

        if ($scope.strSelectedQuery != undefined && $scope.strSelectedQuery != "") {
            var lst = $scope.strSelectedQuery.split('.');
            if (lst && lst.length == 2) {
                var entityName = lst[0];
                var queryID = lst[1];
                var lst = $scope.lstEntity.filter(function (x) { return x.ID == entityName; });
                if (lst && lst.length > 0) {
                    $scope.selectedCurrentEntity = lst[0];
                    $scope.ScrollToCurrentEntity();
                    $scope.queryCount = $scope.selectedCurrentEntity.Queries.length;
                    var lstQuery = $scope.selectedCurrentEntity.Queries.filter(function (x) { return x.ID == queryID; });
                    if (lstQuery && lstQuery.length > 0) {
                        $scope.selectedCurrentQuery = lstQuery[0];
                        // for setting paramter and values of the already selected query - applicable only in BPM
                        if ($scope.queryParameters && $scope.queryParameters.length > 0) {

                            angular.forEach($scope.queryParameters, UpdateParameterValue);
                                }
                        $scope.ScrollToCurrentQuery();
                        //$scope.sharedata.selectedCurrentQuery = $scope.selectedCurrentQuery;
                    }
                }
            }
        }
    };

    $scope.ScrollToCurrentEntity = function () {
        if ($scope.selectedCurrentEntity) {
            var item = document.getElementById($scope.selectedCurrentEntity.ID);
            if (item) {
                item.scrollIntoView();
            }
            else {
                var selectionInterval = setInterval(function () {
                    var item = document.getElementById($scope.selectedCurrentEntity.ID);
                    if (item) {
                        item.scrollIntoView();
                        if (selectionInterval) {
                            clearInterval(selectionInterval);
                        }
                    }
                    setTimeout(function () {
                        if (selectionInterval) {
                            clearInterval(selectionInterval);
                        }
                    }, 5000);
                }, 100);
            }
        }
    };

    $scope.ScrollToCurrentQuery = function () {
        if ($scope.selectedCurrentQuery) {
            var item = document.getElementById($scope.selectedCurrentEntity.ID + '_' + $scope.selectedCurrentQuery.ID);
            if (item) {
                item.scrollIntoView();
            }
            else {
                var selectionInterval = setInterval(function () {
                    var item = document.getElementById($scope.selectedCurrentEntity.ID + '_' + $scope.selectedCurrentQuery.ID);
                    if (item) {
                        item.scrollIntoView();
                        if (selectionInterval) {
                            clearInterval(selectionInterval);
                        }
                    }
                    setTimeout(function () {
                        if (selectionInterval) {
                            clearInterval(selectionInterval);
                        }
                    }, 5000);
                }, 100);
            }
        }
    };


    $scope.ShowAllFilesForBrowseClick = function (blnShowAllFilesForBrowse) {
        var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
        setTimeout(function () {
            $scope.$evalAsync(function () {
                if (blnShowAllFilesForBrowse) {
                    $scope.lstEntity = entityIntellisenseList;
                }
                else {
                    var scopecreatenewobj = getScopeByFileName('createNewObject');
                    if (scopecreatenewobj && scopecreatenewobj.objNewItems && scopecreatenewobj.objNewItems.SelectedOption === "File") {
                        $scope.strPath = scopecreatenewobj.objFileDetails.Path;
                    }
                    else if (scopecreatenewobj && scopecreatenewobj.objFormsDetails && scopecreatenewobj.objFormsDetails.Path) {
                        $scope.strPath = scopecreatenewobj.objFormsDetails.Path;
                    }
                    else if (scopecreatenewobj && scopecreatenewobj.objReportDetails && scopecreatenewobj.objReportDetails.Path) {
                        $scope.strPath = scopecreatenewobj.objReportDetails.Path;
                    }
                    else if (!scopecreatenewobj && $rootScope.currentopenfile) {
                        var currentfile = $rootScope.currentopenfile.file.FilePath.split('\\');
                        $scope.strPath = currentfile[currentfile.length - 2];
                    }
                    if ($scope.strPath) {
                        $scope.lstEntity = [];
                        $scope.selectedCurrentEntity = {};
                        $scope.selectedCurrentQuery = {
                        };
                        var lstObj = entityIntellisenseList.filter(function (x) {
                            var lstsplit = [];
                            if (x.FilePath) {
                                lstsplit = x.FilePath.split('\\');
                                var entityfolder = lstsplit[lstsplit.length - 2];
                                return $scope.strPath == entityfolder;
                            }
                        });
                        angular.forEach(lstObj, function (item) {
                            $scope.lstEntity.push(item);
                        });
                    }
                }
            });
        }, 5);
    };

    //#region Browse
    $scope.selectedEntityClick = function (obj, isScroll) {
        $scope.queryCount = 0;
        $scope.selectedCurrentEntity = obj;
        if ($scope.subQueryType) {
            var lst = $scope.selectedCurrentEntity.Queries.filter(function (x) { return x.QueryType == $scope.subQueryType; });
            if (lst && lst.length > 0) {
                $scope.queryCount = lst.length;
            }

        }
        else {
            var lst = $scope.selectedCurrentEntity.Queries.filter(function (x) { return x.QueryType != "SubSelectQuery"; });
            if (lst && lst.length > 0) {
                $scope.queryCount = lst.length;
            }
        }
        if (isScroll) {
            $scope.ScrollToCurrentEntity();
        }
    };
    $scope.selectedQueryClick = function (obj, isScroll) {
        $scope.selectedCurrentQuery = obj;
        if (isScroll) {
            $scope.ScrollToCurrentQuery();
        }
    };

    $scope.selectedParameterClick = function (obj) {
        $scope.selectedCurrentParameter = obj;
    };

    var KeyCodes = {
        UPARROW: 38,
        DOWNARROW: 40,
    };

    $scope.$on('arrowpress', function (msg, e) {
        if (e.code == KeyCodes.UPARROW) {
            var index = $scope.lstEntity.indexOf($scope.selectedCurrentEntity);

            if (index > 0) {
                $scope.selectedEntityClick($scope.lstEntity[index - 1]);
            }
        }
        else if (e.code == KeyCodes.DOWNARROW) {
            var index = $scope.lstEntity.indexOf($scope.selectedCurrentEntity);

            if (index < $scope.lstEntity.length - 1) {
                $scope.selectedEntityClick($scope.lstEntity[index + 1]);
            }
        }

        $scope.$apply();

        $timeout(function () {
            var elem;
            if ($scope.isSet(1)) {
                elem = $("#divBrowse").find(".selected");
            }
            else if ($scope.isSet(2)) {
                elem = $("#divTable").find(".selected");
            }

            if ($scope.isSet(1) && elem.length > 0) {
                $('#divBrowse > .col-xs-12 > .browse-for-query-form > .col-xs-6 > .browse-query-panel > .form-group > #divBrowseEntity').scrollTop($(elem[0]).offset().top - $('#divBrowse > .col-xs-12 > .browse-for-query-form > .col-xs-6 > .browse-query-panel > .form-group > #divBrowseEntity').offset().top + $('#divBrowse > .col-xs-12 > .browse-for-query-form > .col-xs-6 > .browse-query-panel > .form-group > #divBrowseEntity').scrollTop() - 10);
            }
        }, 300);
    });

    //#endregion


    //#region Table

    $scope.getTableList = function (obj) {
        $scope.lstEntityQuery = [];
        $scope.selectedTableRow = undefined;
        $scope.selectedCurrentQuery = undefined;
        if (obj) {
            var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
            $scope.lstEntityQuery = $filter('entitybyTable')(entityIntellisenseList, obj, $scope.subQueryType);
        }
    };

    $scope.selectTableClick = function (obj) {
        if (obj) {
            $scope.selectedCurrentQuery = obj;
        }
    };

    $scope.selectedTableParametersClick = function (index, obj) {
        if (obj) {
            $scope.selectedTableParametersRow = index;
            $scope.selectedCurrentTableParametersRow = obj;
        }
    };

    $scope.closeClick = function () {
        //if ($scope.QueryDialog && $scope.QueryDialog.id) {
        //    ngDialog.close($scope.QueryDialog.id);
        //}
        //else if ($scope.queryDialogID && $scope.queryDialogID.id) {
        //    ngDialog.close($scope.queryDialogID.id);
        //}
        $scope.QueryDialog.close();
    };
    $scope.okClick = function () {
        var QueryID;
        if ($scope.tab == 1 && $scope.selectedCurrentEntity && $scope.selectedCurrentEntity.ID) {
            QueryID = $scope.selectedCurrentEntity.ID + "." + $scope.selectedCurrentQuery.ID;
        }
        else if ($scope.selectedCurrentQuery && $scope.selectedCurrentQuery.ID) {
            QueryID = $scope.selectedCurrentQuery.ID;
        }
        if ($scope.IsBPM) {
            var selectedQueryObj = { Id: QueryID, Parameters: $scope.selectedCurrentQuery.Parameters };
            $scope.$emit("onQueryClickBPM", selectedQueryObj);
        }
        else if ($scope.IsRetrieval) {
            $scope.$emit("onRetrievalClick", QueryID);
        }
        else if ($scope.IsAutoComplete) {
            $scope.$emit("onAutoCompleteClick", QueryID);
        }
        else if ($scope.IsForm) {
            $scope.$emit("onFormQueryClick", QueryID);
        }
        else if ($scope.IsFilterGridSearch) {
            $scope.$emit("onFilterGridSerchClick", $scope.selectedCurrentQuery, QueryID);
        }
        else if ($scope.IsBaseQuery) {
            $scope.$emit("onBaseQueryClick", QueryID);
        }
        else {
            $scope.$emit("onQueryClick", QueryID);
            $scope.sharedata.selectedCurrentQuery = $scope.selectedCurrentQuery;
            $scope.sharedata.isNewQuerySelected = true;

            //ParameterFactory.setParameterObject($scope.selectedCurrentQuery, true);

        }
        //$scope.$emit("onQueryClick", QueryID);
        //ngDialog.close($scope.QueryDialog.id);
        $timeout(function () {
            if ($scope.validateQuery) $scope.validateQuery();
        });
        
        $scope.QueryDialog.close();
    };

    $scope.ValidateDataAll = function () {

        $scope.ErrorMessageForDisplay = "";
        if ($scope.tab == 1) //for browse tab
        {
            if ($scope.selectedCurrentQuery == undefined) {
                $scope.ErrorMessageForDisplay = "Error: A appropriate Query needs to be selected.";
                return true;
            }

            else if ($scope.selectedCurrentQuery.SqlQuery == undefined || $scope.selectedCurrentQuery.SqlQuery == "") {
                $scope.ErrorMessageForDisplay = "Error: Selected Query Should Not be blank. ";

                return true;
            }
            return false;
        }
        else {
            if ($scope.selectedCurrentQuery == undefined) {
                $scope.ErrorMessageForDisplay = "Error: A appropriate Query needs to be selected.";

                return true;
            }
            return false;
        }
    };

    //#endregion

    $scope.clearTab = function () {
        $scope.selectedCurrentQuery = undefined;
        $scope.selectedCurrentEntity = undefined;
        $scope.EntityName = "";
        $scope.QueryID = "";
        $scope.TableName = undefined;
        $scope.lstEntityQuery = [];
        $scope.selectedTableRow = undefined;
    };

    //Functionality to implement Tab On the Page
    $scope.tab = 1;
    $scope.setTab = function (newTab) {
        $scope.tab = newTab;
        $scope.clearTab();
    };
    $scope.isSet = function (tabNum) {
        return $scope.tab === tabNum;
    };

    $scope.Init();
}]);

app.factory('ParameterFactory', [function () {
    var sharedata = { selectedCurrentQuery: {}, isNewQuerySelected: false };
    return {

        getParameterObject: function () {
            return sharedata;
        },
        setParameterObject: function (selectedCurrentQuery, isNewQuerySelected) {
            sharedata.selectedCurrentQuery = selectedCurrentQuery;
            sharedata.isNewQuerySelected = isNewQuerySelected;
        },
        clearParameterFactory: function(){
            sharedata.selectedCurrentQuery = {};
            sharedata.isNewQuerySelected = {};
        }
    };
}]);

app.directive('keyScroll', [function () {
    return function (scope, elem) {
        elem.bind('keydown', function (event) {
            if (event.keyCode == 38 || event.keyCode == 40) {
                scope.$emit('arrowpress', { code: event.keyCode });
            }
        });
    };
}]);
app.controller("ValidationRulesController", ["$scope", "$rootScope", "$timeout", "$ValidationService", function ($scope, $rootScope, $timeout, $ValidationService) {

    //#region Variables
    $scope.HardErrorList = [];
    $scope.SoftErrorList = [];
    $scope.IsChildOfWizardStep = false;

    //#endregion    
    //#region Init Methods
    $scope.Init = function () {
        var strRuleGroup = "";
        var objWizardStep = FindParent($scope.model, "sfwWizardStep");
        if (objWizardStep) {
            $scope.IsChildOfWizardStep = true;
            strRuleGroup = objWizardStep.dictAttributes.sfwRulesGroup;
        }
        var exisistingRules = $scope.model.dictAttributes.sfwValidationRules;
        $scope.LoadRules(strRuleGroup, exisistingRules);
    };

    $scope.LoadRules = function (strRuleGroup, exisistingRules) {
        var lstHardErrorsTemp;
        var lstSoftErrorsTemp;
        if ($scope.IsChildOfWizardStep && $scope.entityID) {
            hubMain.server.getEntityExtraData($scope.entityID).done(function (data) {
                if (data) {
                    $scope.$evalAsync(function () {
                        lstHardErrorsTemp = GetBuisnessRules(data, "", "", strRuleGroup, $scope.IsChildOfWizardStep);
                        angular.forEach(lstHardErrorsTemp, function (item) {
                            if (item != undefined && item != "") {
                                $scope.HardErrorList.push({ Name: item, IsSelected: false });
                }
            });
                        $scope.selectExistingRules(exisistingRules);
                    });  
        }
        else {
                    $scope.HardErrorList = [];
                }
            });
                    
        }
        else if ($scope.entityID) {
            hubMain.server.getEntityExtraData($scope.entityID).done(function (data) {
                if (data && data.lstHardErrorList) {
                    $scope.$evalAsync(function () {
                        var hardErrorModel = data.lstHardErrorList[0];
                if (hardErrorModel && hardErrorModel.Elements.length > 0) {
                    angular.forEach(hardErrorModel.Elements, function (item) {
                        if (item != undefined && item.dictAttributes.ID != "") {
                            $scope.HardErrorList.push({ Name: item.dictAttributes.ID, IsSelected: false });
                        }
                    });
                            $scope.selectExistingRules(exisistingRules);
                }
                    });
                }
                else {
                    $scope.HardErrorList = [];
                }
            });
                
            }
           
           //lstSoftErrorsTemp = GetBuisnessRules($scope.formobject.objExtraData, "softerror", "item", strRuleGroup, $scope.IsChildOfWizardStep);
        };
   
    $scope.selectExistingRules = function (exisistingRules) {
        if (exisistingRules != undefined && exisistingRules != "") {
            var strRules = exisistingRules.split(';');
            for (var i = 0; i < strRules.length; i++) {
                var hardError = $scope.HardErrorList.filter(function (x) { return x.Name == strRules[i]; });
                if (hardError && hardError.length > 0) {
                    hardError[0].IsSelected = true;
                }
            }

        }
    };
    //#endregion
    var strErrors = "";
    function iterator(error) {
        if (error.IsSelected) {
            strErrors += error.Name + ";";
        }
    }

    function FindParent(aModel, parentCtrlName) {
        var parent = aModel.ParentVM;

        while (parent && parent.Name != parentCtrlName) {
            parent = parent.ParentVM;
        }

        return parent;
    }

    //#region Common Events
    
    $scope.onSaveClick = function () {
        angular.forEach($scope.HardErrorList,iterator);
        angular.forEach($scope.SoftErrorList, iterator); 
        if (strErrors != undefined && strErrors != "") {
            strErrors = strErrors.substring(0, strErrors.lastIndexOf(';'));
        }

        $scope.model.dictAttributes.sfwValidationRules = strErrors;
        $timeout(function () {
            var list = [];
            if ($scope.HardErrorList) {
              list = $ValidationService.getListByPropertyName($scope.HardErrorList, 'Name');
            }
        if ($scope.validateValidationRules) $scope.validateValidationRules(list);
        });
        
        $scope.onCancelClick();
    };
    $scope.onCancelClick = function () {
        $scope.dialogValidation.close();
    };

    //#endegion

    //#region Call Init Method

    $scope.Init();

    //#endregion
}]);
app.controller("ActiveFormsController", ["$scope", "$rootScope", "$filter", "ngDialog", "$EntityIntellisenseFactory", "$timeout", "$GetEntityFieldObjectService", function ($scope, $rootScope, $filter, ngDialog, $EntityIntellisenseFactory, $timeout, $GetEntityFieldObjectService) {
    $scope.lstEntityField = [];
    $scope.lstrEntityField = "";
    $scope.isDropDown = false;
    $scope.IsHtxForm = false;
    var iblnIsLookup = $scope.formmodel.dictAttributes.sfwType == "Lookup";
    var iblnIsFormLinkLookup = $scope.formmodel.dictAttributes.sfwType == "FormLinkLookup";
    $scope.strParent = "";
    if ($scope.model.dictAttributes && $scope.model.dictAttributes.sfwEntityField) {
        $scope.lstrEntityField = $scope.model.dictAttributes.sfwEntityField;
    }
    if ($scope.model.dictAttributes.sfwMethodName == "btnNew_Click" || $scope.model.dictAttributes.sfwMethodName == "btnNewUpdate_Click") {
        if (iblnIsLookup || iblnIsFormLinkLookup)
            $scope.strParent = "tblCriteria panel fields";
        else
            $scope.strParent = "Form fields";
    }
    else if ($scope.model.dictAttributes.sfwMethodName == "btnOpen_Click") {
        var strGridID = $scope.model.dictAttributes.sfwRelatedControl;
        var objGrid = FindParent($scope.model, "sfwGridView");
        if (objGrid && objGrid.dictAttributes) {
            strGridID = objGrid.dictAttributes.ID;
        }
        if (strGridID == "" || strGridID == undefined)
            $scope.strParent = "Grid fields";
        else
            $scope.strParent = strGridID + " fields";
    }

    $scope.InitializeActiveForms = function (astrActiveForms, astrObjectField, alAvlFlds, astrParentID) {
        $scope.lstEntityField = [];
        ilAvlFlds = alAvlFlds;

        if ($scope.model.dictAttributes.sfwMethodName == "btnNew_Click" || $scope.model.dictAttributes.sfwMethodName == "btnNewUpdate_Click") {
            GetObjectFields($scope.formmodel, $scope.lstEntityField, $scope.model);
        }
        else if ($scope.model.dictAttributes.sfwMethodName == "btnDelete_Click") {

        }
        else if ($scope.model.dictAttributes.sfwMethodName == "btnOpen_Click") {
            var strMessage = "(Object Fields are populated from the " + astrParentID + ".)";

            $scope.lstEntityField.push("");

            if (alAvlFlds.length > 0) {
                for (var i = 0; i < alAvlFlds.length; i++) {
                    var s = alAvlFlds[i];
                    var strParamValue = "";
                    if (s.indexOf("~") > -1)
                        strParamValue = s.substring(0, s.indexOf("~"));
                    else
                        strParamValue = s;
                    if (!$scope.lstEntityField.some(function (itm) { return itm == strParamValue; })) {
                        $scope.lstEntityField.push(strParamValue);
                    }
                }
            }
        }
    };

    $scope.alControls = [];
    PopulateControlsForActiveForm($scope.alControls, $scope.formmodel, $scope.model, iblnIsLookup || iblnIsFormLinkLookup);
    $scope.InitializeActiveForms($scope.model.dictAttributes.sfwActiveForm, $scope.lstrEntityField, $scope.alControls, $scope.strParent);

    //if ($scope.model.dictAttributes.sfwRelatedControl && $scope.model.dictAttributes.sfwRelatedControl != "") {
    //    var gridObj = {};
    //    GetVMUsingID("sfwGridView", $scope.formmodel, $scope.model.dictAttributes.sfwRelatedControl, $scope.lstEntityField);
    //}
    //else {
    //    
    //    else
    //        PopulateFormEntityField($scope.formmodel, $scope.lstEntityField, iblnIsLookup);
    //}
    $scope.checkAndGetCodeValues = function () {
        var columnName = "";
        $scope.isDropDown = false;
        if ($scope.model.dictAttributes.sfwMethodName == "btnNew_Click") {
            if ($scope.model.dictAttributes.sfwRelatedControl != undefined && $scope.model.dictAttributes.sfwRelatedControl != "") {
                var objControl = FindControlByID($scope.formmodel, $scope.model.dictAttributes.sfwRelatedControl);
                if (objControl && objControl.dictAttributes && objControl.dictAttributes.sfwLoadType == "CodeGroup") {
                    if (objControl.dictAttributes.sfwLoadSource != undefined && objControl.dictAttributes.sfwLoadSource != "") {
                        $scope.isDropDown = true;
                        $scope.CurrentCodeID = objControl.dictAttributes.sfwLoadSource;
                    }
                    else if (objControl.placeHolder) {
                        $scope.isDropDown = true;
                        $scope.CurrentCodeID = objControl.placeHolder;
                    }
                }
            }
        }
        else {
            var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
            if (($scope.model.dictAttributes.sfwRelatedControl || $scope.model.IsChildOfGrid) && !iblnIsLookup && !iblnIsFormLinkLookup) {
                var lstFormEntity = $filter('filter')(entityIntellisenseList, { ID: $scope.formmodel.dictAttributes.sfwEntity }, true);
                if (lstFormEntity) {
                    var gridObject = [];
                    var strRelatedControl = $scope.model.dictAttributes.sfwRelatedControl;
                    var objGrid = FindParent($scope.model, "sfwGridView");
                    if (objGrid && objGrid.dictAttributes) {
                        strRelatedControl = objGrid.dictAttributes.ID;
                    }
                    GetGridObject("sfwGridView", $scope.formmodel, strRelatedControl, gridObject);
                    if (gridObject.length > 0 && gridObject[0].dictAttributes.sfwEntityField) {
                        var gridEntityField = gridObject[0].dictAttributes.sfwEntityField;
                        // Getting Grid EntityName
                        var object = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.formmodel.dictAttributes.sfwEntity, gridEntityField);
                        var strEntityName = "";
                        if (object) {
                            strEntityName = object.Entity;
                        }
                        if (strEntityName) {
                            //Getting Grid Entity Object
                            if ($scope.lstrEntityField) {
                                var objectField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(strEntityName, $scope.lstrEntityField);
                                var columnName = "";
                                if (objectField) {
                                    columnName = objectField.Value;
                                }
                                if (columnName && columnName.lastIndexOf('_value') == columnName.length - '_value'.length) {
                                    $scope.isDropDown = true;
                                    $scope.CurrentCodeID = GetCodeID(strEntityName, $scope.lstrEntityField, entityIntellisenseList);
                                } else {
                                    $scope.isDropDown = false;
                                }
                            }
                        }
                    }
                }
            }
            else {
                var lst = $filter('filter')(entityIntellisenseList, { ID: $scope.formmodel.dictAttributes.sfwEntity }, true);
                if (lst && lst.length > 0) {
                    if (lst[0].Attributes.length > 0 && $scope.lstrEntityField) {
                        var lstAttribute = $filter('filter')(lst[0].Attributes, { ID: $scope.lstrEntityField }, true);
                        if (lstAttribute.length > 0)
                            columnName = lstAttribute[0].Value;
                    }
                }
                if (columnName.lastIndexOf('_value') == columnName.length - '_value'.length) {
                    $scope.isDropDown = true;
                    $scope.CurrentCodeID = GetCodeID($scope.formmodel.dictAttributes.sfwEntity, $scope.lstrEntityField, entityIntellisenseList);
                } else {
                    $scope.isDropDown = false;
                }
            }
        }
    };
    $scope.checkAndGetCodeValues();
    $scope.lstActiveForm = [];
    if ($scope.model.dictAttributes.sfwActiveForm && $scope.model.dictAttributes.sfwActiveForm.contains("=")) {
        var tempActiveForm = $scope.model.dictAttributes.sfwActiveForm.split(";");
        if (tempActiveForm) {
            for (var i = 0; i < tempActiveForm.length; i++) {
                var tempObj = tempActiveForm[i].split("=");
                $scope.lstActiveForm.push({ FieldValue: tempObj[0], ActiveForm: tempObj[1] });
            }
        }
    }
    $scope.AddActiveForm = function () {
        $scope.lstActiveForm.push({ FieldValue: "", ActiveForm: "" });

        $scope.checkAndGetCodeValues();
    };
    $scope.DeleteActiveForm = function () {
        if ($scope.selectedActiveForm && $scope.selectedActiveForm != "") {
            var index = $scope.lstActiveForm.indexOf($scope.selectedActiveForm);
            if (index > -1) {
                $scope.lstActiveForm.splice(index, 1);
            }
            else {
                $scope.selectedActiveForm = undefined;
            }
        }
    };
    $scope.selectActiveFormRow = function (form) {
        $scope.selectedActiveForm = form;
    };
    $scope.OkClick = function () {
        var activeFormString = "";
        $rootScope.UndRedoBulkOp("Start");
        $rootScope.EditPropertyValue($scope.model.dictAttributes.sfwEntityField, $scope.model.dictAttributes, "sfwEntityField", $scope.lstrEntityField);
        if ($scope.lstActiveForm.length > 0) {
            for (var i = 0; i < $scope.lstActiveForm.length; i++) {
                if ($scope.lstActiveForm[i].FieldValue != "" && $scope.lstActiveForm[i].ActiveForm != "") {
                    if (activeFormString == "") {
                        activeFormString = $scope.lstActiveForm[i].FieldValue + "=" + $scope.lstActiveForm[i].ActiveForm;
                    }
                    else {
                        activeFormString += ";" + $scope.lstActiveForm[i].FieldValue + "=" + $scope.lstActiveForm[i].ActiveForm;
                    }
                }
            }
            $rootScope.EditPropertyValue($scope.model.dictAttributes.sfwActiveForm, $scope.model.dictAttributes, "sfwActiveForm", activeFormString);
        }
        else {
            $rootScope.EditPropertyValue($scope.model.dictAttributes.sfwActiveForm, $scope.model.dictAttributes, "sfwActiveForm", "");
        }
        $rootScope.UndRedoBulkOp("End");
        //ngDialog.close($scope.ActiveForm.id);
        $timeout(function () {
            if ($scope.validateActiveForm) $scope.validateActiveForm();
        });
        $scope.ActiveFormDialog.close();
    };

    $scope.CancelClick = function () {
        $scope.ActiveFormDialog.close();
    };

    $scope.validateActiveForms = function () {
        var IsValid = false;
        $scope.ErrorMessageForDisplay = "";
        if ($scope.lstActiveForm.length == 0) {
            $scope.ErrorMessageForDisplay = "Atleast one active form has to be added.";
            return true;
        }
        if ($scope.lstActiveForm.length > 0) {
            var iActvCount = 0;
            for (var i = 0; i < $scope.lstActiveForm.length; i++) {
                var objActiveForm = $scope.lstActiveForm[i];
                if (objActiveForm.FieldValue == "ACTV") {
                    iActvCount++;
                }
                if (!objActiveForm.FieldValue) {
                    $scope.ErrorMessageForDisplay = "Please enter field value of row number " + (i + 1);
                    return true;
                }
                if (!objActiveForm.ActiveForm) {
                    $scope.ErrorMessageForDisplay = "Please enter active form value of row number " + (i + 1);
                    return true;
                }

            }
            if (iActvCount > 1) {
                $scope.ErrorMessageForDisplay = "Cannot add multiple active forms with same field value - ACTV";
                return true;
            }
            else {
                return false;
            }
        }
        return IsValid;
    };

    $scope.clearActiveFormList = function () {
        $scope.lstActiveForm = [];
    };
}]);


function GetGridObject(ControlName, sfxControl, ctrlID, lstgridObj) {
    angular.forEach(sfxControl.Elements, function (ctrl) {
        if (ctrl.Name == ControlName && ctrl.dictAttributes.ID == ctrlID) {
            lstgridObj.push(ctrl);
        }
        if (ctrl.Elements.length > 0) {
            GetGridObject(ControlName, ctrl, ctrlID, lstgridObj);
        }
    });
}
app.controller("SearchActiveFormController", ["$scope", "$rootScope", "$filter", "ngDialog", "$timeout", function ($scope, $rootScope, $filter, ngDialog, $timeout) {
    $scope.ID = "";
    $scope.Title = "";
    $scope.Location = "";
    $scope.IsShowSearch = false;
    $scope.ActiveFormCount = 50;

    $.connection.hubForm.server.getFormList().done(function (data) {
        $scope.filelist = JSON.parse(data);
        $scope.lstActiveForms = [];
        function iterator(itm) {
            $scope.AddInList(itm);
        }
        angular.forEach($scope.filelist, iterator);
    });

    $scope.filterForms = function (list) {
        return list.FileType == "Lookup" || list.FileType == "Maintenance" || list.FileType == "Wizard";
    };
    $scope.lstActiveForms = $filter('filter')($scope.filelist, $scope.filterForms, true);


    $scope.filterActiveForm = function (lstActiveForm) {
        return lstActiveForm.FileName.contains($scope.ID);
    };
    $scope.selectActiveFormRow = function (form) {
        $scope.selectedForm = form;
    };
    $scope.OkClick = function () {
        if ($scope.selectedForm && $scope.selectedForm != "") {
            if ($scope.isupdatefromexternalprop) {
                $scope.$emit("onSearchActiveFormOkClick", $scope.selectedForm.FileName);
            }
            else {
                if ($scope.model) {
                    if ($scope.model.dictAttributes) {
                        $scope.model.dictAttributes.sfwActiveForm = $scope.selectedForm.FileName;
                    }
                    else {
                        $scope.model.ActiveForm = $scope.selectedForm.FileName;
                        $scope.model.StrActiveForm = $scope.selectedForm.FileName;
                    }
                }
            }
            //$scope.setActiveFormValue=$scope.selectedForm.FileName;
        }
        else {
            if (!$scope.isupdatefromexternalprop) {
                if ($scope.model) {
                    if ($scope.model.dictAttributes) {
                        $scope.model.dictAttributes.sfwActiveForm = undefined;
                    }
                    else {
                        $scope.model.ActiveForm = undefined;
                        $scope.model.StrActiveForm = undefined;
                    }
                }
            }
        }
        $timeout(function () {
            if ($scope.validateActiveForm) $scope.validateActiveForm();
        });

        $scope.onCancelClick();
    };
    $scope.onCancelClick = function () {
        //ngDialog.close($scope.SearchActiveForm.id);
        $scope.SearchActiveFormDialog.close();
    };

    $scope.onSearch = function (event) {

        if (!$scope.IsShowSearch) {
            $scope.IsShowSearch = true;
        }

    };

    $scope.AddInList = function (obj) {
        var objForm = { FileName: obj.FileID, Location: obj.Location };
        if ($scope.selectFormType && $scope.selectFormType.length > 0 && $scope.selectFormType.indexOf(obj.FileType) > -1) {
            $scope.lstActiveForms.push(objForm);
        }
    };

    $scope.OnActiveFormScroll = function () {
        if ($scope.ActiveFormCount < $scope.lstActiveForms.length) {
            if ($scope.ActiveFormCount + 10 < $scope.lstActiveForms.length) {
                $scope.$evalAsync(function () {
                    $scope.ActiveFormCount = $scope.ActiveFormCount + 10;
                });
            }
            else {
                $scope.$evalAsync(function () {
                    $scope.ActiveFormCount = $scope.lstActiveForms.length;
                });
            }
        }
    };
}]);
app.controller("RetrievalButtonParameterController", ["$scope", "$rootScope", "$filter", "ngDialog", function ($scope, $rootScope, $filter, ngDialog) {
    $scope.ShowAll = {};
    $scope.ShowAll.isShowAll = false;
    if ($scope.$parent.formmodel && $scope.$parent.formmodel.dictAttributes) {
        $scope.sourceForm = $scope.$parent.formmodel.dictAttributes.ID;
    }
    if ($scope.targetFormModel && $scope.targetFormModel.dictAttributes.sfwType == "Lookup") {
        $scope.targetForm = $scope.targetFormModel.dictAttributes.ID;
        var criteriaPanel = GetCriteriaPanel($scope.targetFormModel);
    }
    else if ($scope.targetFormModel && $scope.targetFormModel.dictAttributes.sfwType == "FormLinkLookup") {
        $scope.targetForm = $scope.targetFormModel.dictAttributes.ID;
        var criteriaPanel = $scope.targetFormModel.Elements.filter(function (itm) { return itm.Name == "items"; });
        if (criteriaPanel && criteriaPanel.length > 0) {
            criteriaPanel = criteriaPanel[0];
        }
    }

    $scope.lstTargetFields = [];
    // var abc = "sfwRetrievalParameters";
    if (criteriaPanel) {
        GetRetrievalTargetControls(criteriaPanel, $scope.lstTargetFields);
    }
    $scope.lstSourceFields = [];
    var panelObject = [];
    if ($scope.isFormLink && $scope.isFormLink == true) {
        panelObject = GetVM("items", $scope.model);
    }
    else {
        if ($scope.$parent.formmodel && $scope.$parent.formmodel.dictAttributes && $scope.$parent.formmodel.dictAttributes.sfwType == "Wizard") {
            panelObject = GetVM("sfwWizardStep", $scope.model);
        }
        else if ($scope.$parent.formmodel && $scope.$parent.formmodel.dictAttributes &&
            ($scope.$parent.formmodel.dictAttributes.sfwType == "Report" || $scope.$parent.formmodel.dictAttributes.sfwType == "Correspondence" || $scope.$parent.formmodel.dictAttributes.sfwType == "UserControl" )) {
            panelObject = GetVM("sfwTable", $scope.model);
        }
        else {
            panelObject = GetVM("sfwPanel", $scope.model);
        }
    }
    if (panelObject) {
        GetRetrievalSourceControls(panelObject, $scope.lstSourceFields);
    }
    $scope.ShowAllControls = function () {
        $scope.lstSourceFields = [];
        if ($scope.ShowAll.isShowAll) {
            GetRetrievalSourceControls($scope.formmodel, $scope.lstSourceFields);
        }
        else {
            GetRetrievalSourceControls(panelObject, $scope.lstSourceFields);
        }
    };
    if ($scope.model.dictAttributes.sfwRetrievalParameters && $scope.model.dictAttributes.sfwRetrievalParameters != "") {
        var tempparameters = $scope.model.dictAttributes.sfwRetrievalParameters.split(";");
        for (var i = 0; i < tempparameters.length; i++) {
            var tempparameter = tempparameters[i].split("=");
            for (var j = 0; j < $scope.lstTargetFields.length; j++) {
                if ($scope.lstTargetFields[j].ID == tempparameter[0]) {
                    if (tempparameter[1].contains("#")) {
                        var sourceControl = tempparameter[1].replace("#", "");
                        $scope.lstTargetFields[j].isConstant = true;
                        $scope.lstTargetFields[j].sourceControl = sourceControl;
                    }
                    else {
                        $scope.lstTargetFields[j].sourceControl = tempparameter[1];
                    }

                }
            }
        }
    }

    $scope.okClick = function () {
        var retrievalparameter = "";
        for (var i = 0; i < $scope.lstTargetFields.length; i++) {
            if ($scope.lstTargetFields[i].sourceControl && $scope.lstTargetFields[i].sourceControl != "") {
                if (retrievalparameter == "") {
                    if ($scope.lstTargetFields[i].isConstant) {
                        retrievalparameter = $scope.lstTargetFields[i].ID + "=#" + $scope.lstTargetFields[i].sourceControl;
                    }
                    else {
                        retrievalparameter = $scope.lstTargetFields[i].ID + "=" + $scope.lstTargetFields[i].sourceControl;
                    }
                }
                else {
                    if ($scope.lstTargetFields[i].isConstant) {
                        retrievalparameter += ";" + $scope.lstTargetFields[i].ID + "=#" + $scope.lstTargetFields[i].sourceControl;
                    }
                    else {
                        retrievalparameter += ";" + $scope.lstTargetFields[i].ID + "=" + $scope.lstTargetFields[i].sourceControl;
                    }
                }
            }
        }
        $rootScope.EditPropertyValue($scope.model.dictAttributes.sfwRetrievalParameters, $scope.model.dictAttributes, "sfwRetrievalParameters", retrievalparameter);
        //$scope.model.dictAttributes.sfwRetrievalParameters = retrievalparameter;
        $scope.RetrievalcloseClick();
    };
    $scope.RetrievalcloseClick = function () {
        //ngDialog.close($scope.RetrievalButtonParameterDialog.ID);
        $scope.RetrievalButtonParaDialog.close();
    };
    $scope.selectControlID = function (controlID) {
        $scope.selectedControlID = controlID;
    };
    $scope.ExpandCollapsedControl = function (ObjControl) {
        ObjControl.IsExpanded = !ObjControl.IsExpanded;
    };
}]);
app.controller("ObjectTreeDragDropController", ["$scope", "$http", "$rootScope", "$GetEntityFieldObjectService", "$ValidationService", "$EntityIntellisenseFactory", "$SgMessagesService", function ($scope, $http, $rootScope, $GetEntityFieldObjectService, $ValidationService, $EntityIntellisenseFactory, $SgMessagesService) {

    $scope.lstControls = [];
    $scope.lstValidControls = [];
    var dragDropdata = $scope.dragdropdata;

    $scope.$evalAsync(function () { });

    for (var i = 0; i < $scope.model.Elements.length; i++) {
        var att = $scope.model.Elements[i].dictAttributes;
        var fieldname = "";
        if (att.sfwDataField) {
            fieldname = att.sfwDataField;
        }
        else {
            fieldname = att.sfwEntityField;
        }

        var canAddControl = false;
        if ($rootScope.lstWebControls && $rootScope.lstWebControls.length > 0) {
            var lst = $rootScope.lstWebControls.filter(function (x) {
                return x.ControlName == $scope.model.Elements[i].Name;
            });
            lst = JSON.parse(JSON.stringify(lst));
            if (lst && lst.length > 0) {

                canAddControl = CanAddControlToDropList(lst[0], $scope.formmodel, $scope.model.Elements[i]);
            }
        }

        if (canAddControl && ["Collection", "List", "Object", "CDOCollection"].indexOf($scope.dragdropdata.Type) == -1)

            $scope.lstControls.push({ Controltype: $scope.model.Elements[i].Name, ID: att.ID, Name: fieldname, Index: i, IsExistingControl: true });
    }
    var fieldname = "";
    if ($scope.currentControl.dictAttributes.sfwDataField) {
        fieldname = $scope.currentControl.dictAttributes.sfwDataField;
    }
    else {
        fieldname = $scope.currentControl.dictAttributes.sfwEntityField;
    }
    $scope.lstControls.push({ Controltype: $scope.currentControl.Name, ID: $scope.currentControl.dictAttributes.ID, Name: fieldname, Index: "New Control" });
    $scope.selectedControl = $scope.lstControls[$scope.lstControls.length - 1];

    $scope.selectRow = function (control) {
        $scope.selectedControl = control;
    };

    $scope.IsChildOfGrid = function () {
        var isChild = false;
        var objParent = FindParent($scope.model, "sfwGridView");
        if (!objParent) {
            objParent = FindParent($scope.model, "sfwDialogPanel");
            if (!objParent) {
                objParent = FindParent($scope.model, "sfwListView");
            }
        }

        if (objParent) {
            isChild = true;
        }
        return isChild;
    };

    //#region Show controls according to selected type form Entity Tree
    $scope.showControlbasedOnType = function (SelectedField) {


        $scope.IsGridSeleected = $scope.IsChildOfGrid();
        var IsFound = false;
        if (["Collection", "List", "Object", "CDOCollection"].indexOf(SelectedField.Type) > -1 && (FindParent($scope.model, "sfwListView") || FindParent($scope.model, "sfwDialogPanel"))) {
            IsFound = true;
        }
        if ($scope.formmodel && $scope.formmodel.dictAttributes && $scope.formmodel.dictAttributes.sfwType && SelectedField) {

            if (["Lookup", "Tooltip"].indexOf($scope.formmodel.dictAttributes.sfwType) === -1 && !$scope.formmodel.IsLookupCriteriaEnabled && ["Collection", "Object", "List", "CDOCollection"].indexOf(SelectedField.Type) === -1 && SelectedField.DataType) {
                $scope.lstValidControls.push("sfwLabel");
            }

            else if ($scope.formmodel.dictAttributes.sfwType === "Tooltip" && !$scope.formmodel.IsLookupCriteriaEnabled && ["Collection", "Object", "List", "CDOCollection"].indexOf(SelectedField.Type) === -1) {
                $scope.lstValidControls.push("sfwLabel");
            }
            if ($scope.formmodel.dictAttributes.sfwType !== "Tooltip" && ["Collection", "Object", "CDOCollection", "List",].indexOf(SelectedField.Type) === -1 && SelectedField.DataType) {
                $scope.lstValidControls.push("sfwTextBox", "sfwDropDownList", "sfwMultiSelectDropDownList", "sfwCheckBox", "sfwRadioButtonList");
            }
            if ($scope.formmodel.dictAttributes.sfwType !== "Tooltip" && !$scope.IsGridSeleected && ["Collection", "Object", "CDOCollection", "List",].indexOf(SelectedField.Type) === -1 && SelectedField.DataType) {
                $scope.lstValidControls.push("sfwCascadingDropDownList");
            }
            if (["Tooltip", "Lookup"].indexOf($scope.formmodel.dictAttributes.sfwType) === -1 && ["Collection", "Object", "CDOCollection", "List",].indexOf(SelectedField.Type) === -1 && SelectedField.DataType) {
                $scope.lstValidControls.push("sfwRadioButton");
            }
            if (!$scope.IsGridSeleected && $scope.formmodel.dictAttributes.sfwType !== 'Tooltip' && ["CDOCollection"].indexOf(SelectedField.Type) > -1) {
                $scope.lstValidControls.push("sfwCheckBoxList");
            }
            if (!$scope.IsGridSeleected && $scope.formmodel.dictAttributes.sfwType !== 'Lookup' && ["Collection", "List"].indexOf(SelectedField.Type) > -1 && !IsFound) {
                $scope.lstValidControls.push("sfwGridView", "sfwChart");
            }
            if (!$scope.IsGridSeleected && ["Lookup", "UserControl", "Tooltip"].indexOf($scope.formmodel.dictAttributes.sfwType) === -1 && ["Object"].indexOf(SelectedField.Type) > -1 && !IsFound) {
                $scope.lstValidControls.push("UserControl");
            }
            if (!$scope.IsGridSeleected && ["Lookup"].indexOf($scope.formmodel.dictAttributes.sfwType) > -1 && SelectedField.DataType && ["DateTime", "Int", "Decimal", "Double"].indexOf(SelectedField.DataType) > -1 && !IsFound) {
                $scope.lstValidControls.push("sfwRange");
            }
            if (["Tooltip"].indexOf($scope.formmodel.dictAttributes.sfwType) === -1 && SelectedField.DataType && ["DateTime", "datetime"].indexOf(SelectedField.DataType) > -1) {
                $scope.lstValidControls.push("sfwDateTimePicker");
            }
            if (!$scope.IsGridSeleected && ["Maintenance", "Wizard"].indexOf($scope.formmodel.dictAttributes.sfwType) > -1 && ["Collection", "List"].indexOf(SelectedField.Type) > -1) {
                $scope.lstValidControls.push("sfwCalendar", "sfwScheduler");
            }
            if (["Maintenance", "Wizard"].indexOf($scope.formmodel.dictAttributes.sfwType) > -1 && !$scope.IsGridSeleected && ["Collection", "List"].indexOf(SelectedField.Type) > -1 && !IsFound) {
                $scope.lstValidControls.push("sfwListView");
            }
            if (["Maintenance", "Wizard", "UserControl",].indexOf($scope.formmodel.dictAttributes.sfwType) > -1 && ["String", "string"].indexOf(SelectedField.DataType) > -1) {
                $scope.lstValidControls.push("sfwJSONData");
            }
        }

    };
    if (dragDropdata) {
        $scope.showControlbasedOnType(dragDropdata);
        if ($scope.lstControls && $scope.lstControls.length > 0 && $scope.lstValidControls && $scope.lstValidControls.length > 0) {
            $scope.lstControls[$scope.lstControls.length - 1].Controltype = $scope.lstValidControls[0];
            $scope.lstControls[$scope.lstControls.length - 1].ID = CreateControlID($scope.formmodel, $scope.fieldName, $scope.lstControls[$scope.lstControls.length - 1].Controltype, false);
        }
    }

    $scope.setControlIDByControlType = function () {
        var controlType = $scope.selectedControl.Controltype;

        if (controlType === "UserControl") {
            controlType = "udc";
        }
        $scope.selectedControl.ID = CreateControlID($scope.formmodel, $scope.fieldName, controlType, false)
    };
    //#endregion

    //#region Add User Control

    $scope.addUserControl = function () {
        if ($scope.selectedControl) {
            var newScope = $scope.$new();
            $scope.currentControl.Name = "udc";
            $scope.currentControl.dictAttributes.ID = $scope.selectedControl.ID;
            newScope.objSetUCProp = {
                StrId: $scope.currentControl.dictAttributes.ID, StrName: '', StrEntityField: $scope.selectedControl.Name, StrResource: '', formObject: $scope.formmodel
            };
            newScope.formodel = $scope.formmodel;
            newScope.onUserControlOkClick = function () {

                $scope.currentControl.dictAttributes.ID = newScope.objSetUCProp.StrId;
                $scope.currentControl.dictAttributes.Name = newScope.objSetUCProp.StrName;
                if (newScope.objSetUCProp.StrEntityField) {
                    $scope.currentControl.dictAttributes.sfwEntityField = newScope.objSetUCProp.StrEntityField;
                }

                $scope.currentControl.dictAttributes.sfwResource = newScope.objSetUCProp.StrResource;

                if ($scope.currentControl.dictAttributes.Name !== undefined && $scope.currentControl.dictAttributes.Name != "") {
                    var fileList = [];
                    var obj = {
                        FileName: $scope.currentControl.dictAttributes.Name, ID: $scope.currentControl.dictAttributes.ID
                    };
                    fileList.push(obj);
                    $.connection.hubForm.server.getUserControlModel(fileList, "").done(function (udcFileList) {
                        newScope.receiveUcMainTable(udcFileList);
                        newScope.onUserControlCancelClick();
                    });
                }

                $rootScope.PushItem($scope.currentControl, $scope.model.Elements);

            };

            newScope.onUserControlCancelClick = function () {
                if (ucPropDialog) {
                    ucPropDialog.close();
                }
                $scope.closeClick();
            };

            newScope.receiveUcMainTable = function (data) {

                newScope.tableTemp;
                for (var i = 0; i < $scope.formmodel.Elements.length; i++) {
                    if ($scope.formmodel.Elements[i].Name == "sfwTable") {
                        newScope.tableTemp = $scope.formmodel.Elements[i];
                        break;
                    }
                }
                for (var i = 0; i < data.length; i++) {
                    var ucControl = FindControlByID(newScope.tableTemp, data[i].ID);
                    //console.log("table: ", $scope.tableTemp);
                    if (ucControl) {
                        $scope.$apply(function () {
                            ucControl.UcChild = data ? [data[i].udcModel] : []; // converting object to array 
                            setParentControlName(ucControl.UcChild[0]);
                        });
                    }
                }
            };


            newScope.ValidateUserProp = function () {
                var retVal = false;
                newScope.ErrorMessageForDisplay = "";
                if (newScope.objSetUCProp.StrId == undefined || newScope.objSetUCProp.StrId == "") {
                    newScope.ErrorMessageForDisplay = "Error: Enter the ID.";
                    retVal = true;
                }
                else {
                    var lstIds = [];
                    CheckforDuplicateID($scope.formmodel, newScope.objSetUCProp.StrId, lstIds);
                    if (lstIds.length > 0) {
                        newScope.ErrorMessageForDisplay = "Error: Duplicate ID.";
                        retVal = true;
                    } else if (!isValidIdentifier(newScope.objSetUCProp.StrId, false, false)) {
                        newScope.ErrorMessageForDisplay = "Error: Invalid ID.";
                        retVal = true;
                    }
                }
                if (!newScope.objSetUCProp.StrName || newScope.objSetUCProp.StrName == '') {
                    newScope.ErrorMessageForDisplay = "Please Enter Active Form.";
                    retVal = true;
                }
                //else if (!newScope.objSetUCProp.StrEntityField || newScope.objSetUCProp.StrEntityField == "") {
                //    newScope.ErrorMessageForDisplay = "Please Enter Entity field.";
                //    retVal = true;
                //}
                else if (!newScope.objSetUCProp.StrResource || newScope.objSetUCProp.StrResource == '') {
                    newScope.ErrorMessageForDisplay = "Please Enter Resource.";
                    retVal = true;
                }

                if (newScope.ErrorMessageForDisplay == undefined || newScope.ErrorMessageForDisplay == "") {
                    if (newScope.objSetUCProp.StrEntityField != undefined && newScope.objSetUCProp.StrEntityField != "") {
                        var object = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.formmodel.dictAttributes.sfwEntity, newScope.objSetUCProp.StrEntityField);
                        if (!object || object.Type != "Object") {
                            newScope.ErrorMessageForDisplay = "Entity Field should be Object.";
                            retVal = true;
                        }
                    }
                }
                return retVal;
            };


            var ucPropDialog = $rootScope.showDialog(newScope, "User Control", "Form/views/SetUserControlProperties.html");
        }
    };
    //#endregion

    //#region Add Grid Control

    $scope.addGridControl = function () {
        var newScope = $scope.$new();
        newScope.objGridView = {
            Name: 'sfwGridView',
            prefix: 'swc',
            Value: '',
            dictAttributes: {
                //sfwDatasourceType: "EntityCollection",
            },
            Elements: [],
            Children: []
        };
        newScope.objGridView.LstDisplayedEntities = [];
        newScope.objGridView.lstselectedmultiplelevelfield = [];
        newScope.objGridView.selectedentityobjecttreefields = [];
        newScope.cellVM = $scope.model;
        newScope.selectedEntityField = $scope.dragdropdata;
        newScope.FormModel = $scope.formmodel;
        newScope.ParentEntityName = $scope.dragdropdata.Entity;
        if ($scope.formmodel.dictAttributes.sfwType == "Tooltip") {
            newScope.skipSecondStep = true;
        }
        newScope.IsAddToExistingCell = true;
        var lstTable = $scope.formmodel.Elements.filter(function (itm) { return itm.Name == "sfwTable"; });
        if (lstTable && lstTable.length > 0) {
            newScope.SfxMainTable = lstTable[0];
        }
        newScope.title = "Create New Grid";
        newScope.LstDisplayedEntities = [];
        if ($scope.formmodel.dictAttributes.sfwType == "Tooltip") newScope.skipSecondStep = true;
        if (newScope.FormModel && newScope.FormModel.dictAttributes.ID.startsWith("wfp")) {
            newScope.IsPrototype = true;
        }
        else {
            newScope.IsPrototype = false;
        }
        newScope.objGridDialog = $rootScope.showDialog(newScope, newScope.title, "Form/views/CreateGridViewControl.html", { width: 1000, height: 700 });
    };
    //#endregion

    //#region Add Chart Control

    $scope.addChartControl = function () {
        $scope.ParentEntityName = $scope.dragdropdata.Entity;
        var cellVM = $scope.model;
        if (null != cellVM) {
            var newScope = $scope.$new();
            newScope.ObjChartModel = {
                Name: 'sfwChart',
                prefix: 'swc',
                Value: '',
                dictAttributes: {
                    ID: '', sfwEntityField: $scope.selectedControl.Name, ChartType: '', Width: '', Height: '', ShowLegend: 'True'
                },
                Elements: [],
                Children: []
            };
            newScope.ObjChartModel.lstselectedobjecttreefields = [];
            newScope.ObjChartModel.selectedobjecttreefield;
            newScope.lstChartType = $rootScope.ChartTypes;
            newScope.lstToolTipTypes = ['None', 'Chart', 'Table', 'Both'];
            newScope.DataFormats = ['', '{0:d}', '{0:C}', '{0:000-##-####}', '{0:(###)###-####}'];


            newScope.SeriesModel = {
                Name: 'Series',
                prefix: '',
                Value: '',
                dictAttributes: {
                },
                Elements: [],
                Children: []
            };
            newScope.SeriesModel.ParentVM = newScope.ObjChartModel;
            newScope.ObjChartModel.Elements.push(newScope.SeriesModel);

            var ChartAreasModel = {
                Name: 'ChartAreas',
                prefix: '',
                Value: '',
                dictAttributes: {
                },
                Elements: [],
                Children: []
            };
            ChartAreasModel.ParentVM = newScope.ObjChartModel;
            newScope.ObjChartModel.Elements.push(ChartAreasModel);

            newScope.sfwChartAreaModel = {
                Name: 'sfwChartArea',
                prefix: 'swc',
                Value: '',
                dictAttributes: {
                    ChartAreaName: '', BackColor: ''
                },
                Elements: [],
                Children: []
            };
            newScope.sfwChartAreaModel.ParentVM = ChartAreasModel;
            ChartAreasModel.Elements.push(newScope.sfwChartAreaModel);

            newScope.Area3DStyle = {
                Name: 'Area3DStyle',
                prefix: '',
                Value: '',
                dictAttributes: {
                    IsEnable3D: 'false', Inclination: '', LightStyle: ''
                },
                Elements: [],
                Children: []
            };
            newScope.Area3DStyle.ParentVM = newScope.sfwChartAreaModel;
            newScope.sfwChartAreaModel.Elements.push(newScope.Area3DStyle);


            newScope.onSfxChartFinishClick = function () {
                newScope.UpdateNavigationParam();

                if (newScope.ObjChartModel && newScope.ObjChartModel.dictAttributes) {
                    if (!newScope.ObjChartModel.dictAttributes.ID.match("^chr")) {
                        newScope.ObjChartModel.dictAttributes.ID = "chr" + newScope.ObjChartModel.dictAttributes.ID;
                    }
                }
                $rootScope.PushItem(newScope.ObjChartModel, $scope.model.Elements);

                SetFormSelectedControl($scope.formmodel, newScope.ObjChartModel, event);

                newScope.onSfxChartCancelClick();
                $scope.closeClick();
            };

            newScope.UpdateNavigationParam = function () {
                var strParameters = "";
                function item(grdParam) {
                    var strParamValue = grdParam.ParmeterValue;

                    if (strParamValue != null && strParamValue != "") {
                        var blnConstant = grdParam.ParmeterConstant;
                        if (blnConstant)
                            strParamValue = "#" + strParamValue;

                        var strParam = strParamValue;
                        var strParamField = grdParam.ParmeterField;

                        if (strParamValue.toLowerCase() != strParamField.toLowerCase())
                            strParam = strParamField + '=' + strParamValue;

                        if (strParameters == "")
                            strParameters = strParam;
                        else
                            strParameters += ';' + strParam;
                    }
                }
                function iterator(aobjSeriesModel) {
                    strParameters = "";
                    angular.forEach(aobjSeriesModel.FormParameters, item);
                    aobjSeriesModel.dictAttributes.sfwNavigationParameter = strParameters;
                }
                angular.forEach(newScope.SeriesModel.Elements, iterator);
            };

            newScope.onSfxChartCancelClick = function () {
                if (newScope.CreateChartDialog) {
                    newScope.CreateChartDialog.close();
                }

            };

            newScope.isChartNextDisable = function () {
                var IsValid = false;
                newScope.ObjChartModel.ErrorMessageForDisplay = "";
                if (!newScope.ObjChartModel.ValidateChartName()) {
                    IsValid = true;
                }
                else if (!newScope.ObjChartModel.ValidateEntityCollection()) {
                    IsValid = true;
                }

                else if (!newScope.ObjChartModel.ValidateChartType()) {
                    IsValid = true;
                }
                else if (!newScope.ObjChartModel.ValidateWidth()) {
                    IsValid = true;
                }
                else if (!newScope.ObjChartModel.ValidateHeight()) {
                    IsValid = true;
                }

                return IsValid;

            };


            //#region Validation for Create Chart

            //#region Validate Chart Name
            newScope.ObjChartModel.ValidateChartName = function () {
                var retValue = true;
                if (!newScope.ObjChartModel.dictAttributes.ID) {
                    newScope.ObjChartModel.ErrorMessageForDisplay = "Error: Please enter ID.";
                    retValue = false;
                }
                return retValue;
            };
            //#endregion

            //#region Validation for Entity Collecction
            newScope.ObjChartModel.ValidateEntityCollection = function () {
                var retValue = true;
                if (!newScope.ObjChartModel.dictAttributes.sfwEntityField) {
                    newScope.ObjChartModel.ErrorMessageForDisplay = "Error: Please enter a Entity.";
                    retValue = false;
                }

                return retValue;
            };
            //#endregion


            //#region Validation for Chart Type
            newScope.ObjChartModel.ValidateChartType = function () {
                var retValue = true;
                if (!newScope.ObjChartModel.dictAttributes.ChartType) {
                    newScope.ObjChartModel.ErrorMessageForDisplay = "Error: Please Select a ChartType.";
                    retValue = false;
                }
                return retValue;
            };
            //#endregion

            //#region Validation for Width
            newScope.ObjChartModel.ValidateWidth = function () {
                var retValue = true;
                if (!newScope.ObjChartModel.dictAttributes.Width) {
                    newScope.ObjChartModel.ErrorMessageForDisplay = "Error: Please enter a Width.";
                    retValue = false;
                }

                return retValue;
            };
            //#endregion

            //#region Validation for Height
            newScope.ObjChartModel.ValidateHeight = function () {
                var retValue = true;
                if (!newScope.ObjChartModel.dictAttributes.Height) {
                    newScope.ObjChartModel.ErrorMessageForDisplay = "Error: Please enter a Height.";
                    retValue = false;
                }

                return retValue;
            };
            //#endregion


            //#region add series

            newScope.ShowSeriesDetail = function (itm) {

                itm.ShowDetails = !itm.ShowDetails;
            };

            newScope.SelectSeries = function (obj) {
                if (newScope.ObjSeriesModel && newScope.ObjSeriesModel != obj) {
                    if (newScope.ObjSeriesModel.ShowDetails) {
                        newScope.ObjSeriesModel.ShowDetails = false;
                    }
                }
                newScope.ObjSeriesModel = obj;
            };

            newScope.GetSeriesID = function () {
                var strItemKey = "Series";
                var iItemNum = 0;
                var strItemName = strItemKey;

                var newTemp = newScope.SeriesModel.Elements.filter(function (x) {
                    return x.dictAttributes.Name == strItemName;
                });

                while (newTemp.length > 0) {
                    iItemNum++;
                    strItemName = strItemKey + iItemNum;
                    newTemp = newScope.SeriesModel.Elements.filter(function (x) {
                        return x.dictAttributes.Name == strItemName;
                    });
                }
                return strItemName;
            };

            newScope.OnAddSeriesClick = function () {
                var newSeriesScope = newScope.$new();

                newSeriesScope.ObjSeriesModel = {
                    Name: 'sfwSeries',
                    prefix: 'swc',
                    Value: '',
                    dictAttributes: {
                        Name: '', XValueMember: '', YValueMembers: '', YMemberColor: '', IsValueShownAsLabel: 'False', sfwFormatField: '', sfwTooltipType: '', sfwTooltipTableParams: '', sfwActiveForm: ''
                    },
                    Elements: [],
                    Children: []
                };
                newSeriesScope.ObjSeriesModel.dictAttributes.Name = newScope.GetSeriesID();
                newSeriesScope.ObjSeriesModel.ParentVM = newScope.SeriesModel;
                newSeriesScope.ObjSeriesModel.lstselectedobjecttreefields = [];
                newSeriesScope.ObjSeriesModel.selectedobjecttreefield;
                newSeriesScope.ObjSeriesModel.ShowDetails = true;
                newSeriesScope.ObjSeriesModel.FormParameters = [];
                newSeriesScope.ShowParameters = false;
                //$scope.populateParamtersForform = function () {

                //    $.connection.hubForm.server.getFormParameters(newSeriesScope.ObjSeriesModel.dictAttributes.sfwActiveForm, "").done(function (lstparams) {
                //        $scope.receiveFormParameters(lstparams, "");
                //    });
                //};

                $scope.receiveFormParameters = function (lstparams, formtype) {
                    if (lstparams) {
                        newSeriesScope.$evalAsync(function () {
                            newSeriesScope.ObjSeriesModel.FormParameters = lstparams;
                            newSeriesScope.ShowParameters = true;
                        });
                    }
                };
                newSeriesScope.ClearParamtersForform = function () {
                    if (newSeriesScope.ObjSeriesModel && newSeriesScope.ObjSeriesModel.FormParameters) {
                        newSeriesScope.ObjSeriesModel.FormParameters = "";
                    }
                    if (newSeriesScope.ObjSeriesModel && newSeriesScope.ObjSeriesModel.dictAttributes.sfwActiveForm != "") {
                        newSeriesScope.seriesactiveform = true;
                    }
                    newSeriesScope.ShowParameters = false;
                };

                //#region Validation for Add Series


                newSeriesScope.isChartFinishDisable = function () {
                    var IsValid = false;
                    newSeriesScope.ErrorMessageForDisplay = "";
                    if (newSeriesScope.ObjSeriesModel) {
                        if (!newSeriesScope.ValidateSeriesName()) {
                            IsValid = true;
                        }
                        else if (!newSeriesScope.ValidateXValue()) {
                            IsValid = true;
                        }
                        else if (!newSeriesScope.ValidateYValue()) {
                            IsValid = true;
                        }

                    }
                    return IsValid;
                };

                //#region Validation for Series Name
                newSeriesScope.ValidateSeriesName = function () {
                    var retValue = true;
                    if (!newSeriesScope.ObjSeriesModel.dictAttributes.Name) {
                        newSeriesScope.ErrorMessageForDisplay = "Error: Please enter a Series Name.";
                        retValue = false;
                    }

                    return retValue;
                };
                //#endregion

                //#region Validation for X Value Member
                newSeriesScope.ValidateXValue = function () {
                    var retValue = true;
                    if (!newSeriesScope.ObjSeriesModel.dictAttributes.XValueMember) {
                        newSeriesScope.ErrorMessageForDisplay = "Error: Please enter a Series XValueMember.";
                        retValue = false;
                    }

                    return retValue;
                };
                //#endregion


                //#region Validation for Y Value Member
                newSeriesScope.ValidateYValue = function () {
                    var retValue = true;
                    if (!newSeriesScope.ObjSeriesModel.dictAttributes.YValueMembers) {
                        newSeriesScope.ErrorMessageForDisplay = "Error: Please enter a Series YValueMembers.";
                        retValue = false;
                    }

                    return retValue;
                };
                //#endregion

                //#region Validation for Y Value Member
                newSeriesScope.ValidateYValue = function () {
                    var retValue = true;
                    if (!newSeriesScope.ObjSeriesModel.dictAttributes.YValueMembers) {
                        newSeriesScope.ErrorMessageForDisplay = "Error: Please enter a Series YValueMembers.";
                        retValue = false;
                    }

                    return retValue;
                };
                //#endregion

                //#endregion

                newSeriesScope.OpenTooltipParams = function () {
                    newScope.OpenTooltipParams(newSeriesScope);
                };

                newSeriesScope.onAdditionalChartColumnClick = function () {
                    newScope.onAdditionalChartColumnClick(newSeriesScope);
                };


                newSeriesScope.onCancelClick = function () {
                    if (seriesDialog) {
                        seriesDialog.close();
                    }
                };

                newSeriesScope.OnOkClick = function () {
                    newSeriesScope.ObjSeriesModel.dictAttributes.ChartType = newScope.ObjChartModel.dictAttributes.ChartType;
                    newScope.SeriesModel.Elements.push(newSeriesScope.ObjSeriesModel);
                    if (seriesDialog) {
                        seriesDialog.close();
                    }
                };


                var seriesDialog = $rootScope.showDialog(newSeriesScope, "Add Series", "Form/views/AddEditSeries.html", { width: 600, height: 600 });

            };

            newScope.OpenTooltipParams = function (newSeriesScope) {
                var newParamScope = newSeriesScope.$new();
                newScope.objTooltipParamsVM = $rootScope.showDialog(newParamScope, "Set Tooltip Parameters", "Form/views/SetToolTipParameters.html", { width: 500, height: 420 });

                newParamScope.onSfxChartTooltipTableCancelClick = function () {
                    if (newScope.objTooltipParamsVM) {
                        newScope.objTooltipParamsVM.close();
                    }

                };

                newParamScope.onSfxChartTooltipTableOKClick = function () {
                    var lstselectedfields = [];
                    lstselectedfields = GetSelectedFieldList(newSeriesScope.ObjSeriesModel.lstselectedobjecttreefields, lstselectedfields);
                    var DisplayedEntity = getDisplayedEntity(newSeriesScope.ObjSeriesModel.LstDisplayedEntities);
                    var itempath = "";
                    if (DisplayedEntity && DisplayedEntity.strDisplayName != "") {
                        itempath = DisplayedEntity.strDisplayName;
                    }
                    function iUpdatetooltipparam(itm) {
                        var ID = itm.ID;
                        if (itempath) {
                            ID = itempath + "." + ID;
                        }
                        if (tooltipparam) {
                            tooltipparam = tooltipparam + ";" + ID;
                        }
                        else {
                            tooltipparam = ID;
                        }
                    }
                    if (lstselectedfields.length > 0) {
                        var tooltipparam;

                        angular.forEach(lstselectedfields, iUpdatetooltipparam);

                        newSeriesScope.ObjSeriesModel.dictAttributes.sfwTooltipTableParams = tooltipparam;

                    }
                    newParamScope.onSfxChartTooltipTableCancelClick();

                };
            };

            newScope.OnRemoveSeriesClick = function () {

                if (newScope.ObjSeriesModel) {
                    var index = newScope.SeriesModel.Elements.indexOf(newScope.ObjSeriesModel);
                    newScope.SeriesModel.Elements.splice(index, 1);

                    if (index < newScope.SeriesModel.Elements.length) {
                        newScope.SelectSeries(newScope.SeriesModel.Elements[index]);
                    }
                    else if (newScope.SeriesModel.Elements.length > 0) {
                        newScope.SelectSeries(newScope.SeriesModel.Elements[index - 1]);
                    }
                    else {
                        newScope.ObjSeriesModel = undefined;
                    }
                }

            };

            newScope.OnEditSeries = function (itm) {
                var newSeriesScope = newScope.$new();
                newSeriesScope.ObjSeriesModel = itm;
                newSeriesScope.ObjSeriesModel.ParentVM = undefined;
                if (newSeriesScope.ObjSeriesModel.FormParameters && newSeriesScope.ObjSeriesModel.FormParameters.length > 0) {
                    newSeriesScope.ShowParameters = true;
                }
                else {
                    newSeriesScope.ShowParameters = false;
                }

                newSeriesScope.seriesactiveform = true;
                //$scope.populateParamtersForform = function () {

                //    $.connection.hubForm.server.getFormParameters(newSeriesScope.ObjSeriesModel.dictAttributes.sfwActiveForm, "").done(function (lstparams) {
                //        $scope.receiveFormParameters(lstparams, "");
                //    });
                //};

                $scope.receiveFormParameters = function (lstparams, formtype) {

                    if (lstparams) {
                        newSeriesScope.$evalAsync(function () {
                            function iUpdateParams(param) {

                                var lst = params.filter(function (obj) {
                                    return param.ParmeterField == obj.ParmeterField;
                                });
                                if (lst && lst.length > 0) {
                                    param.ParmeterValue = lst[0].ParmeterValue;
                                    param.ParmeterConstant = lst[0].ParmeterConstant;
                                }
                            }
                            var params = newSeriesScope.ObjSeriesModel.FormParameters;
                            newSeriesScope.ObjSeriesModel.FormParameters = [];
                            if (params && params.length > 0) {


                                angular.forEach(lstparams, iUpdateParams);
                            }
                            newSeriesScope.ObjSeriesModel.FormParameters = lstparams;
                            newSeriesScope.ShowParameters = true;
                        });
                    }
                };
                newSeriesScope.ClearParamtersForform = function () {
                    if (newSeriesScope.ObjSeriesModel && newSeriesScope.ObjSeriesModel.FormParameters) {
                        newSeriesScope.ObjSeriesModel.FormParameters = "";
                    }
                    if (newSeriesScope.ObjSeriesModel && newSeriesScope.ObjSeriesModel.dictAttributes.sfwActiveForm != "") {
                        newSeriesScope.seriesactiveform = true;
                    }
                    newSeriesScope.ShowParameters = false;
                };

                //#region Validation for Add Series


                newSeriesScope.isChartFinishDisable = function () {
                    var IsValid = false;
                    newSeriesScope.ErrorMessageForDisplay = "";
                    if (newSeriesScope.ObjSeriesModel) {
                        if (!newSeriesScope.ValidateSeriesName()) {
                            IsValid = true;
                        }
                        else if (!newSeriesScope.ValidateXValue()) {
                            IsValid = true;
                        }
                        else if (!newSeriesScope.ValidateYValue()) {
                            IsValid = true;
                        }

                    }
                    return IsValid;
                };

                //#region Validation for Series Name
                newSeriesScope.ValidateSeriesName = function () {
                    var retValue = true;
                    if (!newSeriesScope.ObjSeriesModel.dictAttributes.Name) {
                        newSeriesScope.ErrorMessageForDisplay = "Error: Please enter a Series Name.";
                        retValue = false;
                    }

                    return retValue;
                };
                //#endregion

                //#region Validation for X Value Member
                newSeriesScope.ValidateXValue = function () {
                    var retValue = true;
                    if (!newSeriesScope.ObjSeriesModel.dictAttributes.XValueMember) {
                        newSeriesScope.ErrorMessageForDisplay = "Error: Please enter a Series XValueMember.";
                        retValue = false;
                    }

                    return retValue;
                };
                //#endregion


                //#region Validation for Y Value Member
                newSeriesScope.ValidateYValue = function () {
                    var retValue = true;
                    if (!newSeriesScope.ObjSeriesModel.dictAttributes.YValueMembers) {
                        newSeriesScope.ErrorMessageForDisplay = "Error: Please enter a Series YValueMembers.";
                        retValue = false;
                    }

                    return retValue;
                };
                //#endregion


                //#region Validation for Y Value Member
                newScope.ValidateActiveForm = function () {
                    var retValue = true;
                    if (!newSeriesScope.ObjSeriesModel.dictAttributes.sfwActiveForm) {
                        newSeriesScope.ErrorMessageForDisplay = "Error: Please enter a Series Navigation Form.";
                        retValue = false;
                    }

                    return retValue;
                };
                //#endregion


                //#region Validation for Y Value Member
                newScope.ValidateYValue = function () {
                    var retValue = true;
                    if (!newSeriesScope.ObjSeriesModel.dictAttributes.YValueMembers) {
                        newSeriesScope.ErrorMessageForDisplay = "Error: Please enter a Series YValueMembers.";
                        retValue = false;
                    }

                    return retValue;
                };
                //#endregion

                //#endregion

                newSeriesScope.OpenTooltipParams = function () {
                    newScope.OpenTooltipParams(newSeriesScope);
                };

                newSeriesScope.onAdditionalChartColumnClick = function () {
                    newScope.onAdditionalChartColumnClick(newSeriesScope);
                };

                newSeriesScope.onCancelClick = function () {
                    if (seriesDialog) {
                        seriesDialog.close();
                    }
                };

                newSeriesScope.OnOkClick = function () {
                    newSeriesScope.ObjSeriesModel.ParentVM = newScope.SeriesModel;
                    newSeriesScope.onCancelClick();
                };


                var seriesDialog = $rootScope.showDialog(newSeriesScope, "Edit Series", "Form/views/AddEditSeries.html", { width: 600, height: 600 });
            };
            //#endregion

            newScope.onAdditionalChartColumnClick = function (newSeriesScope) {
                var newColumnScope = newSeriesScope.$new();
                newColumnScope.sfwAddtionalChartColumns = [];
                newColumnScope.SelectedObject = newSeriesScope.ObjSeriesModel;
                //newColumnScope.ParentEntityName = $scope.FormModel.dictAttributes.sfwEntity;
                if (newSeriesScope.ObjSeriesModel.dictAttributes.swfAddtionalChartColumns) {
                    var temp = newSeriesScope.ObjSeriesModel.dictAttributes.swfAddtionalChartColumns.split(",");
                    for (var i = 0; i < temp.length; i++) {
                        newColumnScope.sfwAddtionalChartColumns.push({ Property: temp[i] });
                    }
                }
                var AdditionalChartdialog = $rootScope.showDialog(newColumnScope, "Multiple Objects Selection", "Form/views/AdditionalChartColumnsDialog.html", { width: 1000, height: 490 });
                newColumnScope.onCancelClick = function () {
                    AdditionalChartdialog.close();
                };
                newColumnScope.onOkClick = function () {
                    var AddtionalChartColumns = "";
                    for (var i = 0; i < newColumnScope.sfwAddtionalChartColumns.length; i++) {
                        if (newColumnScope.sfwAddtionalChartColumns[i].Property != "") {
                            if (AddtionalChartColumns == "") {
                                AddtionalChartColumns = newColumnScope.sfwAddtionalChartColumns[i].Property;
                            }
                            else {
                                AddtionalChartColumns += "," + newColumnScope.sfwAddtionalChartColumns[i].Property;
                            }
                        }
                    }
                    $rootScope.EditPropertyValue(newSeriesScope.ObjSeriesModel.dictAttributes.swfAddtionalChartColumns, newSeriesScope.ObjSeriesModel.dictAttributes, "swfAddtionalChartColumns", AddtionalChartColumns);
                    AdditionalChartdialog.close();
                };
                newColumnScope.selectRow = function (row) {
                    newColumnScope.selectedRow = row;
                };
                newColumnScope.addProperty = function () {
                    newColumnScope.sfwAddtionalChartColumns.push({ Property: "" });
                };
                newColumnScope.deleteProperty = function () {
                    var index = -1;
                    if (newColumnScope.selectedRow) {
                        for (var i = 0; i < newColumnScope.sfwAddtionalChartColumns.length; i++) {
                            if (newColumnScope.selectedRow == newColumnScope.sfwAddtionalChartColumns[i]) {
                                index = i;
                                break;
                            }
                        }
                    }
                    if (index > -1) {
                        newColumnScope.sfwAddtionalChartColumns.splice(index, 1);
                        if (newColumnScope.sfwAddtionalChartColumns.length > 0) {
                            if (index > 0) {
                                newColumnScope.selectedRow = newColumnScope.sfwAddtionalChartColumns[index - 1];
                            }
                            else {
                                newColumnScope.selectedRow = newColumnScope.sfwAddtionalChartColumns[newColumnScope.sfwAddtionalChartColumns.length - 1];
                            }
                        }
                        else {
                            newColumnScope.selectedRow = undefined;
                        }
                    }
                };
            };
            newScope.title = "Create Chart";
            newScope.CreateChartDialog = $rootScope.showDialog(newScope, newScope.title, "Form/views/CreateChart.html", { width: 1000, height: 700 });
            //#endregion 
        }


    };

    //#endregion

    //#region Add Calendar Control

    $scope.addCalendarControl = function (isAddScheduler) {
        var newScope = $scope.$new();
        var name = "sfwCalendar";
        newScope.IsAddScheduler = isAddScheduler;
        if (isAddScheduler) {
            name = "sfwScheduler";
        }
        newScope.objCalendar = {
            Name: name,
            prefix: 'swc',
            Value: '',
            dictAttributes: {
            },
            Elements: [],
            Children: []
        };
        //var DisplayedEntity = getDisplayedEntity($scope.LstDisplayedEntities);
        //var itempath = selectedField.ID;
        //if (DisplayedEntity && DisplayedEntity.strDisplayName != "") {
        //    itempath = DisplayedEntity.strDisplayName + "." + selectedField.ID;
        //}
        var cellVM = $scope.model;
        newScope.objCalendar.dictAttributes.ID = $scope.selectedControl.ID
        newScope.objCalendar.dictAttributes.sfwEntityField = $scope.fieldName;
        newScope.FormModel = $scope.formmodel;
        newScope.ParentEntityName = $scope.dragdropdata.Entity;;
        var lstTable = $scope.formmodel.Elements.filter(function (itm) { return itm.Name == "sfwTable"; });
        if (lstTable && lstTable.length > 0) {
            newScope.SfxMainTable = lstTable[0];
        }
        newScope.title = "Create New Calendar";
        if (isAddScheduler) {
            newScope.title = "Create New Scheduler";
            newScope.lstRelatedDialog = PopulateRelatedDialogList(newScope.SfxMainTable);
        }
        //#region Validate Calendar Control

        newScope.ValidateCalendar = function () {
            newScope.ErrorMessageForDisplay = "";
            if (!newScope.objCalendar.dictAttributes.ID) {
                newScope.ErrorMessageForDisplay = "Enter ID.";
                return true;
            }
            else if (newScope.objCalendar.dictAttributes.ID && !isValidIdentifier(newScope.objCalendar.dictAttributes.ID, false, false)) {
                newScope.ErrorMessageForDisplay = "Invalid ID.";
                return true;
            } else {
                var lstIds = [];
                CheckforDuplicateID($scope.formmodel, newScope.objCalendar.dictAttributes.ID, lstIds);
                if (lstIds.length > 0) {
                    newScope.ErrorMessageForDisplay = "Duplicate ID.";
                    return true;
                }
            }
            if (newScope.objCalendar.dictAttributes.sfwEventId == undefined || newScope.objCalendar.dictAttributes.sfwEventId == "") {
                newScope.ErrorMessageForDisplay = "Enter Event Id.";
                return true;
            }
            if (newScope.objCalendar.dictAttributes.sfwEventName == undefined || newScope.objCalendar.dictAttributes.sfwEventName == "") {
                newScope.ErrorMessageForDisplay = "Enter Event Name.";
                return true;
            }
            if (newScope.objCalendar.dictAttributes.sfwEventStartDate == undefined || newScope.objCalendar.dictAttributes.sfwEventStartDate == "") {
                newScope.ErrorMessageForDisplay = "Enter Event Start Date.";
                return true;
            }
            if (newScope.objCalendar.dictAttributes.sfwEventEndDate == undefined || newScope.objCalendar.dictAttributes.sfwEventEndDate == "") {
                newScope.ErrorMessageForDisplay = "Enter Event End Date.";
                return true;
            }
            //else if (isAddScheduler && !newScope.objCalendar.dictAttributes.sfwEventCategory) {
            //    newScope.ErrorMessageForDisplay = "Enter Event Category.";
            //    return true;
            //} else if (isAddScheduler && !newScope.objCalendar.dictAttributes.sfwRelatedDialogPanel) {
            //    newScope.ErrorMessageForDisplay = "Enter Related Dialog Panel.";
            //    return true;
            //}

            if (newScope.objCalendar.errors && $ValidationService.isEmptyObj(newScope.objCalendar.errors)) {
                return true;
            }

            return false;
        };

        //#endregion

        newScope.onOkClick = function () {

            $rootScope.PushItem(newScope.objCalendar, $scope.model.Elements);

            SetFormSelectedControl($scope.formmodel, newScope.objCalendar, event);

            newScope.onCancelClick();
            $scope.closeClick();
        };

        newScope.onCancelClick = function () {
            if (newScope.objCalendar.errors) {
                newScope.objCalendar.errors = {};
                $ValidationService.removeObjInToArray($scope.validationErrorList, newScope.objCalendar);
            }
            if (newScope.objCalendarDialog) {
                newScope.objCalendarDialog.close();
            }
        };

        newScope.objCalendarDialog = $rootScope.showDialog(newScope, newScope.title, "Form/views/AddCalendarControl.html", { width: 700, height: 700 });
        ComponentsPickers.init();
    };
    //#endregion

    //#region  Add Repeater Control
    $scope.addRepeaterControl = function () {
        var strID = CreateControlID($scope.formmodel, "RepeaterViewPanel", "sfwListView");
        var prefix = "swc";
        var objRepeaterControl = { Name: "sfwListView", value: '', prefix: prefix, dictAttributes: { ID: strID }, Elements: [], Children: [] };
        var DisplayedEntity = getDisplayedEntity($scope.LstDisplayedEntities);
        var itempath = $scope.dragdropdata.ID;
        if (DisplayedEntity && DisplayedEntity.strDisplayName != "") {
            itempath = DisplayedEntity.strDisplayName + "." + $scope.dragdropdata.ID;
        }
        strControlID = CreateControlID($scope.formmodel, $scope.dragdropdata.ID, 'sfwListView');
        objRepeaterControl.dictAttributes.ID = strControlID;
        objRepeaterControl.ParentVM = $scope.model;
        objRepeaterControl.dictAttributes.sfwEntityField = itempath;

        var tableVM = GetVM("sfwTable", $scope.model);
        if (tableVM) {

            if (objRepeaterControl) {
                objRepeaterControl.dictAttributes.sfwSelection = "Many";
                objRepeaterControl.dictAttributes.sfwCaption = "List View";
                objRepeaterControl.dictAttributes.AllowPaging = "True";
                objRepeaterControl.dictAttributes.PageSize = "1";


                var parentenetityname = $scope.dragdropdata.Entity;
                var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                objRepeaterControl.dictAttributes.sfwDataKeyNames = GetTableKeyFields(parentenetityname, entityIntellisenseList);

                var prefix = "swc";


                var objListTableModel = AddListViewTable($scope.formmodel, objRepeaterControl);
                objRepeaterControl.Elements.push(objListTableModel);
                objRepeaterControl.initialvisibilty = true;
                objRepeaterControl.isLoaded = true;

                $rootScope.PushItem(objRepeaterControl, $scope.model.Elements);

                if ($scope.selectControl) {
                    $scope.selectControl(objRepeaterControl);
                }
            }
        }
    }
    //#endregion


    $scope.okClick = function () {

        if ($scope.selectedControl) {
            if ($scope.selectedControl.Index == "New Control") {
                if ($scope.selectedControl.Controltype == "sfwGridView") {

                    $scope.addGridControl();
                }
                else if ($scope.selectedControl.Controltype == "UserControl") {
                    $scope.addUserControl();
                }

                else if ($scope.selectedControl.Controltype == "sfwChart") {
                    $scope.addChartControl();
                }
                else if ($scope.selectedControl.Controltype == "sfwCalendar") {
                    $scope.addCalendarControl(false);
                }
                else if ($scope.selectedControl.Controltype == "sfwScheduler") {
                    $scope.addCalendarControl(true);
                }
                else if ($scope.selectedControl.Controltype == "sfwListView") {
                    $scope.addRepeaterControl();
                    $scope.closeClick();
                }
                else if ($scope.selectedControl.Controltype == "sfwListView") {
                    $scope.addRepeaterControl();
                    $scope.closeClick();
                }
                else {
                    $scope.currentControl.Name = $scope.selectedControl.Controltype;
                    $scope.currentControl.dictAttributes.ID = $scope.selectedControl.ID;
                    var dropControl = $scope.model;
                    if ($scope.model.Name == "TemplateField") {
                        dropControl = $scope.model.Elements.filter(function (x) { return x.Name == "ItemTemplate" })[0];
                    }
                    $rootScope.PushItem($scope.currentControl, dropControl.Elements);
                    SetFormSelectedControl($scope.formmodel, $scope.currentControl);
                    $scope.closeClick();
                }
            }
            else {
                if ($scope.currentControl.dictAttributes.sfwDataField) {
                    $rootScope.UndRedoBulkOp("Start");
                    $rootScope.EditPropertyValue($scope.model.Elements[$scope.selectedControl.Index].dictAttributes.sfwDataField, $scope.model.Elements[$scope.selectedControl.Index].dictAttributes, "sfwDataField", $scope.currentControl.dictAttributes.sfwDataField);

                    if ($scope.$parent.formmodel.IsLookupCriteriaEnabled) {
                        var formScope = getCurrentFileScope();
                        if (formScope && formScope.lookupTreeObject) {
                            var subqueryentityname = formScope.lookupTreeObject.EntityName;
                            if (subqueryentityname) {
                                $rootScope.EditPropertyValue($scope.model.Elements[$scope.selectedControl.Index].dictAttributes.sfwQueryID, $scope.model.Elements[$scope.selectedControl.Index].dictAttributes, "sfwQueryID", subqueryentityname);
                            }
                        }
                    }
                    $rootScope.UndRedoBulkOp("End");
                }
                else {
                    $rootScope.EditPropertyValue($scope.model.Elements[$scope.selectedControl.Index].dictAttributes.sfwEntityField, $scope.model.Elements[$scope.selectedControl.Index].dictAttributes, "sfwEntityField", $scope.currentControl.dictAttributes.sfwEntityField);
                }
                $scope.closeClick();
            }
        }
        else {
            $SgMessagesService.Message('Message', "Select a control from the list.");
        }

    };

    $scope.closeClick = function () {
        //ngDialog.close($scope.objectTreeDragDropDialog.ID);
        $scope.objectTreeDragDropDialog.close();
    };

}]);
app.controller("CellFormatController", ["$scope", "$rootScope", "$filter", "$EntityIntellisenseFactory", "$GetEntityFieldObjectService", function ($scope, $rootScope, $filter, $EntityIntellisenseFactory, $GetEntityFieldObjectService) {
    $scope.lstColumnName = [];
    if ($scope.IsCellOrRow == "CellFormat") {
        PopulateGridDataField($scope.TemplateFieldModel.ParentVM, $scope.lstColumnName);
    }
    else {
        PopulateGridDataField($scope.TemplateFieldModel, $scope.lstColumnName);
    }

    if ($scope.lstColumnName && $scope.lstColumnName.length > 0) {
        $scope.lstColumnName.splice(0, 0, "");
    }

    $scope.Itemtemplate = {};
    $scope.isDropDown = false;
    $scope.checkAndGetCodeValues = function (sfwEntityField) {
        var columnName = "";
        var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
        if ($scope.isLookup) {
            var lst = $filter('filter')(entityIntellisenseList, { ID: $scope.formEntity }, true);
            if (lst && lst.length > 0) {
                if (lst[0].Attributes.length > 0) {
                    var lstAttribute = $filter('filter')(lst[0].Attributes, { ID: sfwEntityField }, true);
                    if (lstAttribute.length > 0)
                        columnName = lstAttribute[0].Value;
                }
            }
            if (columnName.lastIndexOf('_value') == columnName.length - '_value'.length) {
                $scope.isDropDown = true;
                $scope.CurrentCodeID = GetCodeID($scope.formEntity, sfwEntityField, entityIntellisenseList);
            } else {
                $scope.isDropDown = false;
            }
        }
        else {

            var lstFormEntity = $filter('filter')(entityIntellisenseList, { ID: $scope.formEntity }, true);
            if (lstFormEntity) {
                var gridObject = GetVM("sfwGridView", $scope.TemplateFieldModel);
                var EntityField;
                if (gridObject) {
                    EntityField = gridObject.dictAttributes.sfwEntityField;
                } else {
                    var listObject = GetVM("sfwListView", $scope.TemplateFieldModel);
                    EntityField = listObject.dictAttributes.sfwEntityField;
                }

                if (EntityField && $scope.formEntity) {
                    // Getting Grid EntityName
                    var object = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.formEntity, EntityField);
                    var entityname = "";
                    if (object) {
                        entityname = object.Entity;
                    }
                    if (entityname) {
                        //Getting Grid Entity Object
                        var objectField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(entityname, sfwEntityField);
                        var columnName = "";
                        if (objectField) {
                            columnName = objectField.Value;
                        }
                        if (columnName && columnName.lastIndexOf('_value') == columnName.length - '_value'.length) {
                            $scope.isDropDown = true;
                            $scope.CurrentCodeID = GetCodeID(entityname, sfwEntityField, entityIntellisenseList);
                        } else {
                            $scope.isDropDown = false;
                        }
                    }
                }
            }
        }
    };

    if ($scope.IsCellOrRow == "CellFormat") {
        for (var i = 0; i < $scope.TemplateFieldModel.Elements.length; i++) {
            if ($scope.TemplateFieldModel.Elements[i].Name == "ItemTemplate") {
                angular.copy($scope.TemplateFieldModel.Elements[i], $scope.Itemtemplate);
                break;
            }
        }

        for (var i = 0; i < $scope.Itemtemplate.Elements.length; i++) {
            if ($scope.Itemtemplate.Elements[i].Name == "cellformat") {
                $scope.cellFormat = $scope.Itemtemplate.Elements[i];
                if ($scope.cellFormat.dictAttributes.sfwEntityField) {
                    $scope.checkAndGetCodeValues($scope.cellFormat.dictAttributes.sfwEntityField);
                }
                break;
            }
        }
    }
    else {
        for (var i = 0; i < $scope.TemplateFieldModel.Elements.length; i++) {
            if ($scope.TemplateFieldModel.Elements[i].Name == "rowformat") {
                // $scope.cellFormat = $scope.TemplateFieldModel.Elements[i];
                $scope.cellFormat = {};
                angular.copy($scope.TemplateFieldModel.Elements[i], $scope.cellFormat);
                $scope.tempRowFormat = {};
                angular.copy($scope.TemplateFieldModel.Elements[i], $scope.tempRowFormat);
                if ($scope.cellFormat.dictAttributes.sfwEntityField) {
                    $scope.checkAndGetCodeValues($scope.cellFormat.dictAttributes.sfwEntityField);
                }
                break;
            }
        }
    }

    $scope.setRowSelection = function (condition) {
        $scope.selectedCssClassCondition = condition;
    };
    $scope.AddNewCssCondition = function (columnName) {
        if ($scope.cellFormat && $scope.cellFormat.Elements != undefined) {
            var obj = { dictAttributes: { value: "", cssclass: "" }, Elements: [], Children: [], Name: "condition", Value: "", };
            $rootScope.PushItem(obj, $scope.cellFormat.Elements[0].Elements, null);
        }
        $scope.checkAndGetCodeValues(columnName);
    };

    $scope.onCondtionSaveClick = function (conditions) {
        if (conditions != undefined && conditions != "" && conditions.Elements && conditions.Elements.length > 0) {
            if (conditions.Elements[0].Elements && conditions.Elements[0].Elements.length == 0) {
                conditions.dictAttributes.sfwEntityField = "";
            }
            var flag = false;
            if ($scope.IsCellOrRow == "CellFormat") {
                for (var i = 0; i < $scope.Itemtemplate.Elements.length; i++) {
                    if ($scope.Itemtemplate.Elements[i].Name == "cellformat") {
                        if ($scope.cellFormat && $scope.cellFormat.dictAttributes.sfwEntityField) {
                            $scope.Itemtemplate.Elements[i] = $scope.cellFormat;
                        }
                        else {
                            $scope.Itemtemplate.Elements.splice(i, 1);
                        }
                        flag = true;
                        break;
                    }
                }
            }
            else {
                for (var i = 0; i < $scope.TemplateFieldModel.Elements.length; i++) {
                    if ($scope.TemplateFieldModel.Elements[i].Name == "rowformat") {
                        if ($scope.cellFormat && $scope.cellFormat.dictAttributes.sfwEntityField) {
                            $scope.TemplateFieldModel.Elements[i] = $scope.cellFormat;
                        }
                        else {
                            $scope.TemplateFieldModel.Elements.splice(i, 1);
                        }
                        flag = true;
                        break;
                    }
                }
            }
            if ($scope.IsCellOrRow == "CellFormat") {
                if (flag == false) {
                    $scope.Itemtemplate.Elements.push(conditions);
                }
                //$scope.TemplateFieldModel.Elements = [];
                //$scope.TemplateFieldModel.Elements.push($scope.Itemtemplate);
                for (var i = 0; i < $scope.TemplateFieldModel.Elements.length; i++) {
                    if ($scope.TemplateFieldModel.Elements[i].Name == "ItemTemplate") {
                        $scope.TemplateFieldModel.Elements.splice(i, 1);
                        $scope.TemplateFieldModel.Elements.splice(i, 0, $scope.Itemtemplate);
                        break;
                    }
                }
            }
            else if (flag == false) {
                $scope.TemplateFieldModel.Elements.push($scope.cellFormat);
            }
        }
        else {
            if ($scope.TemplateFieldModel && $scope.TemplateFieldModel.Elements) {
                var index = -1;
                for (var i = 0; i < $scope.TemplateFieldModel.Elements.length; i++) {
                    if ($scope.TemplateFieldModel.Elements[i].Name == $scope.IsCellOrRow.toLowerCase()) {
                        index = i;
                    }
                }
                if (index > -1) {
                    $scope.TemplateFieldModel.Elements.splice(index, 1);
                }
            }
        }
        $scope.CellFormatDialog.close();
    };
    $scope.onCancelClick = function () {
        if ($scope.IsCellOrRow != "CellFormat") {
            for (var i = 0; i < $scope.TemplateFieldModel.Elements.length; i++) {
                if ($scope.TemplateFieldModel.Elements[i].Name == "rowformat") {
                    if ($scope.cellFormat && $scope.cellFormat.dictAttributes.sfwEntityField && $scope.tempRowFormat) {
                        $scope.TemplateFieldModel.Elements[i] = $scope.tempRowFormat;
                    }
                    else {
                        $scope.TemplateFieldModel.Elements.splice(i, 1);
                    }
                    flag = true;
                    break;
                }
            }
        }
        $scope.CellFormatDialog.close();
    };
    $scope.deleteCssCondition = function () {
        if ($scope.cellFormat.Elements[0].Elements.length > 0) {
            if ($scope.selectedCssClassCondition != undefined) {
                var index = $scope.cellFormat.Elements[0].Elements.indexOf($scope.selectedCssClassCondition);
                //$scope.cellFormat.Elements[0].Elements.splice(index, 1);
                if (index > -1) {
                    $rootScope.DeleteItem($scope.selectedCssClassCondition, $scope.cellFormat.Elements[0].Elements);
                }
            }
            $scope.selectedCssClassCondition = undefined;
        }
        else {
            //$scope.cellFormat.Elements[0].Elements = [];
            $scope.selectedCssClassCondition = undefined;
        }
    };
    $scope.clearCellFormat = function () {
        if ($scope.cellFormat != undefined && $scope.cellFormat.Elements && $scope.cellFormat.Elements.length > 0) {
            $scope.cellFormat.Elements[0].Elements = [];
        }
        else {
            $scope.cellFormat = undefined;
        }
    };

    $scope.clearRoworCellFormat = function () {
        var obj = {
            dictAttributes: { sfwEntityField: $scope.cellFormat.dictAttributes.sfwEntityField },
            Elements: [{ dictAttributes: {}, Elements: [], Children: [], Name: "Conditions", Value: "" }], Children: [], Name: "rowformat", Value: ""
        };

        if ($scope.IsCellOrRow == "CellFormat") {
            obj.Name = "cellformat";
        }

        if ($scope.cellFormat && $scope.cellFormat.Elements) {
            if ($scope.IsCellOrRow == "CellFormat") {
                for (var i = 0; i < $scope.Itemtemplate.Elements.length; i++) {
                    if ($scope.Itemtemplate.Elements[i].Name == "cellformat") {
                        $rootScope.UndRedoBulkOp("Start");
                        $rootScope.DeleteItem($scope.cellFormat, $scope.Itemtemplate.Elements);
                        $scope.cellFormat = obj;
                        $rootScope.PushItem($scope.cellFormat, $scope.Itemtemplate.Elements, null);
                        $rootScope.UndRedoBulkOp("End");
                        break;
                    }
                }
            }
            else {
                for (var i = 0; i < $scope.TemplateFieldModel.Elements.length; i++) {
                    if ($scope.TemplateFieldModel.Elements[i].Name == "rowformat") {
                        $rootScope.UndRedoBulkOp("Start");
                        $rootScope.DeleteItem($scope.cellFormat, $scope.TemplateFieldModel.Elements);
                        $scope.cellFormat = obj;
                        $rootScope.PushItem($scope.cellFormat, $scope.TemplateFieldModel.Elements, null);
                        $rootScope.UndRedoBulkOp("End");
                        break;
                    }
                }
            }
        } else {
            $scope.cellFormat = obj;
            if ($scope.IsCellOrRow == "CellFormat") {
                $rootScope.PushItem($scope.cellFormat, $scope.Itemtemplate.Elements, null);
            } else {
                $rootScope.PushItem($scope.cellFormat, $scope.TemplateFieldModel.Elements, null);
            }
        }
        $scope.checkAndGetCodeValues($scope.cellFormat.dictAttributes.sfwEntityField);
        //$scope.cellFormat = obj;
    };
}]);
app.controller("DataKeysController", ["$scope", "ngDialog", "$rootScope", function ($scope, ngDialog, $rootScope) {
    $scope.lstColumnName = [];
    $scope.lstGridColumns = [];
    $scope.lstDefualtOrder = ["", "asc", "desc"];
    $scope.lstSortExpression = [];
    $scope.lstSortExpression.push("");
    PopulateGridDataField($scope.model, $scope.lstColumnName);
    for (var i = 0; i < $scope.lstColumnName.length; i++) {
        $scope.lstSortExpression.push(i + 1);
    }
    for (var i = 0; i < $scope.lstColumnName.length; i++) {
        $scope.lstGridColumns.push({ FieldName: $scope.lstColumnName[i] });
    }
    if ($scope.model.dictAttributes.sfwSortExpression) {
        var SortExpression = $scope.model.dictAttributes.sfwSortExpression.split(',');
        for (i = 0; i < SortExpression.length; i++) {
            var filedNameAndOrder = SortExpression[i].split(" ");
            for (var j = 0; j < $scope.lstGridColumns.length ; j++) {
                if ($scope.lstGridColumns[j].FieldName == filedNameAndOrder[0]) {
                    if (filedNameAndOrder.length > 1) {
                        $scope.lstGridColumns[j].DefaultOrder = filedNameAndOrder[1];
                    }
                    $scope.lstGridColumns[j].SortExpression = i + 1;
                }
            }
        }
    }
    if ($scope.model.dictAttributes.sfwDataKeyNames) {
        var dataKeys = $scope.model.dictAttributes.sfwDataKeyNames.split(",");
        for (i = 0; i < dataKeys.length; i++) {
            for (var j = 0; j < $scope.lstGridColumns.length ; j++) {
                if ($scope.lstGridColumns[j].FieldName == dataKeys[i]) {
                    $scope.lstGridColumns[j].DataKey = true;
                }
            }
        }
    }
    $scope.okClick = function () {
        var sortExpression = "";
        var dataKeys = "";
        for (var i = 0; i < $scope.lstGridColumns.length; i++) {
            if ($scope.lstGridColumns[i].DataKey) {
                if (dataKeys == "") {
                    dataKeys = $scope.lstGridColumns[i].FieldName;
                }
                else {
                    dataKeys += "," + $scope.lstGridColumns[i].FieldName;
                }
            }
            if ($scope.lstGridColumns[i].SortExpression) {


                var strSortSeq = $scope.lstGridColumns[i].SortExpression;
                var iSortSeq = strSortSeq;
                if (iSortSeq > 0) {
                    if (!sortExpression) {
                        sortExpression += strSortSeq + ";" + $scope.lstGridColumns[i].FieldName;
                    }
                    else {
                        sortExpression += "," + strSortSeq + ";" + $scope.lstGridColumns[i].FieldName;
                    }
                    if ($scope.lstGridColumns[i].DefaultOrder) {
                        sortExpression += " " + $scope.lstGridColumns[i].DefaultOrder;
                    }
                }
            }
        }

        var slFieldSeq = [];
        var lstSortExpression = sortExpression.split(',');
        for (var i = 0; i < lstSortExpression.length; i++) {
            var strIndex = lstSortExpression[i].substring(0, lstSortExpression[i].indexOf(';')).trim();
            var strSortField = lstSortExpression[i].substring(lstSortExpression[i].indexOf(';') + 1).trim();
            slFieldSeq.splice(strIndex - 1, 0, strSortField);
        }
        sortExpression = "";

        angular.forEach(slFieldSeq, function (itm) {
            if (sortExpression.length === 0)
                sortExpression = itm;
            else
                sortExpression += "," + itm;
        });

        $rootScope.UndRedoBulkOp("Start");
        $rootScope.EditPropertyValue($scope.model.dictAttributes.sfwSortExpression, $scope.model.dictAttributes, "sfwSortExpression", sortExpression);
        $rootScope.EditPropertyValue($scope.model.dictAttributes.sfwDataKeyNames, $scope.model.dictAttributes, "sfwDataKeyNames", dataKeys);
        $rootScope.UndRedoBulkOp("End");

        $scope.closeClick();
    };
    $scope.closeClick = function () {
        $scope.DataKeyAndSortExpressionDialog.close();
    };

    $scope.ChangeSortExpression = function (selectedcolumn) {
        if (selectedcolumn && !selectedcolumn.SortExpression) {
            selectedcolumn.DefaultOrder = "";
        }
    };
}]);
app.controller("ImageConditionController", ["$scope", "$rootScope", "ngDialog", "$SgMessagesService", function ($scope, $rootScope, ngDialog, $SgMessagesService) {
    //var tempconditions = JSON.stringify($scope.oldConditions.Elements);
    //$scope.conditions = JSON.parse(tempconditions);
    $scope.conditions = [];
    angular.copy($scope.oldConditions.Elements, $scope.conditions);
    $scope.onImageCondtionSaveClick = function (conditions) {
        $scope.model.Elements = [];
        if (conditions.length > 0) {
            $scope.model.Elements.push(conditions[0]);
        }
        $scope.onCancelClick();
    };
    $scope.AddNewImageCondtion = function () {
        if ($scope.conditions && $scope.conditions.length > 0) {
            var obj = { dictAttributes: { value: "", ImageUrl: "" }, Elements: [], Children: [], Name: "condition", Value: "" };
            $scope.conditions[0].Elements.push(obj);
            $scope.selectedImageCondition = obj;
        }
        else {
            var obj = [{ dictAttributes: {}, Elements: [{ dictAttributes: { value: "", ImageUrl: "" }, Elements: [], Children: [], Name: "condition", Value: "" }], Children: [], Name: "Conditions", Value: "" }];
            $scope.conditions = obj;
            if ($scope.conditions.length > 0 && $scope.conditions[0].Elements && $scope.conditions[0].Elements.length > 0) {
                $scope.selectedImageCondition = $scope.conditions[0].Elements[$scope.conditions[0].Elements.length - 1];
            }
        }
    };
    $scope.deleteImageCondition = function () {
        if ($scope.conditions[0].Elements.length > 1) {
            var index = $scope.conditions[0].Elements.indexOf($scope.selectedImageCondition);
            $scope.conditions[0].Elements.splice(index, 1);
            if (index < $scope.conditions[0].Elements.length) {
                $scope.selectedImageCondition = $scope.conditions[0].Elements[index];
            }
            else if ($scope.conditions[0].Elements.length > 0) {
                $scope.selectedImageCondition = $scope.conditions[0].Elements[index - 1];
            }
        }
        else {
            $scope.conditions = [];
            $scope.selectedImageCondition = undefined;
        }
    };
    $scope.setRowSelection = function (Imagecondition) {
        $scope.selectedImageCondition = Imagecondition;
    };

    $scope.onCancelClick = function () {
        $scope.ImageConditionDialog.close();
    };

    $scope.OpenImageUrl = function (openFrom, index) {
        if ($scope.formobject.dictAttributes.WebSite) {

            $.connection.hubForm.server.openImageUrlClick($scope.formobject.dictAttributes.WebSite, openFrom).done(function (data) {
                if (data && data.length == 2) {
                    $scope.receiveImageFileName(data[0], data[1], index);
                }
            });

        }
        else {
            $SgMessagesService.Message('Message', "Please select the appropriate 'Website' from the form details page.");

        }
    };

    $scope.receiveImageFileName = function (fileName, errorMessage, index) {
        if (fileName != "") {
            $scope.$apply(function () {
                $scope.conditions[0].Elements[index].dictAttributes.ImageUrl = fileName;
            });
        }
        if (errorMessage != "" && errorMessage != undefined) {
            $SgMessagesService.Message('Message', errorMessage);
        }
    };
}]);
app.controller("SetFooterController", ["$scope", "$rootScope", "ngDialog", function ($scope, $rootScope, ngDialog) {
    $scope.IsMVVM = false;
    $scope.lstOperations = [{ isSelect: false, operation: "Count", caption: "" },
        { isSelect: false, operation: "Sum", caption: "" },
        { isSelect: false, operation: "Min", caption: "" },
        { isSelect: false, operation: "Max", caption: "" },
        { isSelect: false, operation: "Avg", caption: "" },
        { isSelect: false, operation: "StaticText", caption: "" }];
    $scope.Footertemplate = {};
    for (var i = 0; i < $scope.TemplateFieldModel.Elements.length; i++) {
        if ($scope.TemplateFieldModel.Elements[i].Name == "FooterTemplate") {
            angular.copy($scope.TemplateFieldModel.Elements[i], $scope.Footertemplate);
            break;
        }
    }
    if ($scope.Footertemplate.Elements && $scope.Footertemplate.Elements.length > 0) {
        if (!$scope.Footertemplate.Elements[0].dictAttributes.sfwEntityField) {
            $scope.footerTemplateLabel = $scope.Footertemplate.Elements[0];
        }
        else {
            $scope.footerTemplateLabelIsNotMVVM = $scope.Footertemplate.Elements[0];
        }

    }
    if ($scope.Footertemplate.Elements && $scope.Footertemplate.Elements.length > 0 && !$scope.Footertemplate.Elements[0].dictAttributes.sfwEntityField) {
        $scope.IsMVVM = true;
        var operations = [];
        if ($scope.footerTemplateLabel.dictAttributes.sfwFooterType) {
            operations = $scope.footerTemplateLabel.dictAttributes.sfwFooterType.split(',');
        }
        var captions = [];
        if ($scope.footerTemplateLabel.dictAttributes.sfwText) {
            captions = $scope.footerTemplateLabel.dictAttributes.sfwText.split(';');
        }
        if (operations.length == captions.length) {
            for (var i = 0; i < operations.length; i++) {
                var caption = "";
                if (captions[i].contains(":")) {
                    caption = captions[i].split(':')[0];
                }
                for (var j = 0; j < $scope.lstOperations.length; j++) {
                    if ($scope.lstOperations[j].operation == operations[i]) {
                        $scope.lstOperations[j].isSelect = true;
                        $scope.lstOperations[j].caption = caption;
                        break;
                    }
                }
            }

        }
    }
    $scope.FooterDetailsChange = function () {
        var isSelectedArray = [];
        var isNotSelectedArray = [];
        for (var i = 0; i < $scope.lstOperations.length; i++) {
            if ($scope.lstOperations[i].isSelect == true) {
                isSelectedArray.push($scope.lstOperations[i]);
            }
            else {
                $scope.lstOperations[i].caption = "";
                isNotSelectedArray.push($scope.lstOperations[i]);
            }
        }
        $scope.lstOperations = [];
        if (isSelectedArray.length > 0 && $scope.footerTemplateLabel == undefined) {
            var objFooter = { dictAttributes: {}, Elements: [{ dictAttributes: { sfwText: "", sfwFooterType: "" }, Elements: [], Children: [], Name: "sfwLabel", Value: "", prefix: "swc" }], Children: [], Name: "FooterTemplate", Value: "", prefix: "asp" };
            $scope.Footertemplate = objFooter;
            $scope.footerTemplateLabel = $scope.Footertemplate.Elements[0];
        }

        if ($scope.footerTemplateLabel) {
            $scope.footerTemplateLabel.dictAttributes.sfwFooterType = "";
            $scope.footerTemplateLabel.dictAttributes.sfwText = "";
        }

        for (var i = 0; i < isSelectedArray.length; i++) {
            if ($scope.footerTemplateLabel != undefined) {
                $scope.footerTemplateLabel.dictAttributes.sfwFooterType += isSelectedArray[i].operation;

                if (isSelectedArray[i].caption != "") {
                    $scope.footerTemplateLabel.dictAttributes.sfwText += isSelectedArray[i].caption + ":{" + i + "}";
                }
                else {
                    $scope.footerTemplateLabel.dictAttributes.sfwText += "{" + i + "}";
                }
                if (i < isSelectedArray.length - 1) {
                    $scope.footerTemplateLabel.dictAttributes.sfwFooterType += ",";
                    $scope.footerTemplateLabel.dictAttributes.sfwText += ";";
                }
            }
            $scope.lstOperations.push(isSelectedArray[i]);
        }
        for (var i = 0; i < isNotSelectedArray.length; i++) {
            $scope.lstOperations.push(isNotSelectedArray[i]);
        }
    };
    $scope.clearFooterText = function (entField) {
        if (!entField && $scope.footerTemplateLabelIsNotMVVM) {
            $scope.footerTemplateLabelIsNotMVVM.dictAttributes.sfwText = "";
        }
    };
    $scope.onSetFooterSaveClick = function () {
        if ($scope.IsMVVM) {
            $scope.footerTemplateLabelIsNotMVVM = undefined;
            if ($scope.footerTemplateLabel != undefined) {
                var flag = false;
                for (var i = 0; i < $scope.TemplateFieldModel.Elements.length; i++) {
                    if ($scope.TemplateFieldModel.Elements[i].Name == "FooterTemplate") {

                        if (($scope.footerTemplateLabel.dictAttributes.sfwFooterType || $scope.footerTemplateLabel.dictAttributes.sfwText) && $scope.TemplateFieldModel.Elements[i].Elements.length > 0) {
                            $rootScope.UndRedoBulkOp("Start");
                            $rootScope.EditPropertyValue($scope.TemplateFieldModel.Elements[i].Elements[0].dictAttributes.sfwEntityField, $scope.TemplateFieldModel.Elements[i].Elements[0].dictAttributes, "sfwEntityField", "");

                            $rootScope.EditPropertyValue($scope.TemplateFieldModel.Elements[i].Elements[0].dictAttributes.sfwFooterType, $scope.TemplateFieldModel.Elements[i].Elements[0].dictAttributes, "sfwFooterType", $scope.footerTemplateLabel.dictAttributes.sfwFooterType);
                            $rootScope.EditPropertyValue($scope.TemplateFieldModel.Elements[i].Elements[0].dictAttributes.sfwText, $scope.TemplateFieldModel.Elements[i].Elements[0].dictAttributes, "sfwText", $scope.footerTemplateLabel.dictAttributes.sfwText);

                            $rootScope.UndRedoBulkOp("End");
                        } else {
                            $rootScope.DeleteItem($scope.TemplateFieldModel.Elements[i], $scope.TemplateFieldModel.Elements);
                        }
                        flag = true;
                        break;
                    }
                }
                if (flag == false) {
                    $rootScope.PushItem($scope.Footertemplate, $scope.TemplateFieldModel.Elements);
                }
            }
            else {
                for (var i = 0; i < $scope.TemplateFieldModel.Elements.length; i++) {
                    if ($scope.TemplateFieldModel.Elements[i].Name == "FooterTemplate") {
                        $rootScope.DeleteItem($scope.TemplateFieldModel.Elements[i], $scope.TemplateFieldModel.Elements);
                    }
                }
            }
        }
        else {
            $scope.footerTemplateLabel = undefined;
            if ($scope.footerTemplateLabelIsNotMVVM != undefined) {
                var flag = false;
                for (var i = 0; i < $scope.TemplateFieldModel.Elements.length; i++) {
                    if ($scope.TemplateFieldModel.Elements[i].Name == "FooterTemplate") {
                     
                        if ($scope.footerTemplateLabelIsNotMVVM.dictAttributes.sfwEntityField && $scope.TemplateFieldModel.Elements[i].Elements.length > 0) {
                            $rootScope.UndRedoBulkOp("Start");
                            $rootScope.EditPropertyValue($scope.TemplateFieldModel.Elements[i].Elements[0].dictAttributes.sfwEntityField, $scope.TemplateFieldModel.Elements[i].Elements[0].dictAttributes, "sfwEntityField",$scope.footerTemplateLabelIsNotMVVM.dictAttributes.sfwEntityField);
                            $rootScope.EditPropertyValue($scope.TemplateFieldModel.Elements[i].Elements[0].dictAttributes.sfwText, $scope.TemplateFieldModel.Elements[i].Elements[0].dictAttributes, "sfwText", $scope.footerTemplateLabelIsNotMVVM.dictAttributes.sfwText);
                            $rootScope.EditPropertyValue($scope.TemplateFieldModel.Elements[i].Elements[0].dictAttributes.sfwFooterType, $scope.TemplateFieldModel.Elements[i].Elements[0].dictAttributes, "sfwFooterType", "");
                            $rootScope.UndRedoBulkOp("End");
                        } else {
                            $rootScope.DeleteItem($scope.TemplateFieldModel.Elements[i], $scope.TemplateFieldModel.Elements);
                        }

                        flag = true;
                        break;
                    }
                }
                if (flag == false) {
                    var objFooter = { dictAttributes: {}, Elements: [{ dictAttributes: { sfwText: "", sfwEntityField: "" }, Elements: [], Children: [], Name: "sfwLabel", Value: "", prefix: "swc" }], Children: [], Name: "FooterTemplate", Value: "", prefix: "asp" };
                    $scope.Footertemplate = objFooter;
                    $scope.Footertemplate.Elements[0].dictAttributes = $scope.footerTemplateLabelIsNotMVVM.dictAttributes;
                    $rootScope.PushItem($scope.Footertemplate, $scope.TemplateFieldModel.Elements);
                }
            }
            else {
                for (var i = 0; i < $scope.TemplateFieldModel.Elements.length; i++) {
                    if ($scope.TemplateFieldModel.Elements[i].Name == "FooterTemplate") {
                        $rootScope.DeleteItem($scope.TemplateFieldModel.Elements[i], $scope.TemplateFieldModel.Elements);
                    }
                }
            }


        }
        $scope.onCancelClick();
    };
    $scope.onCancelClick = function () {
        $scope.SetFoterDialog.close();
    };
    $scope.setRowSelection = function (condition) {
        $scope.selectedOperation = condition;
    };
    $scope.isMoveUp = function () {
        if ($scope.selectedOperation == undefined) {
            return true;
        }
        else {
            var index = $scope.lstOperations.indexOf($scope.selectedOperation);
            if (index > 0) {
                return false;
            }
            else {
                return true;
            }
        }
    };
    $scope.isMoveDown = function () {
        if ($scope.selectedOperation == undefined) {
            return true;
        }
        else {
            var index = $scope.lstOperations.indexOf($scope.selectedOperation);
            if (index != $scope.lstOperations.length - 1 && index != -1 && $scope.lstOperations[index + 1].isSelect == true) {
                return false;
            }
            else {
                return true;
            }
        }
    };
    $scope.MoveUp = function () {
        var index = $scope.lstOperations.indexOf($scope.selectedOperation);
        var tempObj = $scope.lstOperations[index - 1];
        $scope.lstOperations[index - 1] = $scope.lstOperations[index];
        $scope.lstOperations[index] = tempObj;
        $scope.FooterDetailsChange();
    };
    $scope.MoveDown = function () {
        var index = $scope.lstOperations.indexOf($scope.selectedOperation);
        var tempObj = $scope.lstOperations[index + 1];
        $scope.lstOperations[index + 1] = $scope.lstOperations[index];
        $scope.lstOperations[index] = tempObj;
        $scope.FooterDetailsChange();
    };
}]);
app.controller("CreateGridViewController", ["$scope", "$rootScope", "$EntityIntellisenseFactory", "$GetEntityFieldObjectService", "$timeout", "$getModelList", function ($scope, $rootScope, $EntityIntellisenseFactory, $GetEntityFieldObjectService, $timeout, $getModelList) {

    $scope.ObjgridBoundedQuery = undefined;
    $scope.FieldCollection = [];
    $scope.GridFirstStepTitle = "Select the collection fields to be displayed in the grid";
    if (!$scope.IsAddColumnSelected) {
        $scope.objGridView.isNewSelected = false;
        $scope.objGridView.NewbuttonID = "";
        $scope.objGridView.NewformID = "";

        $scope.objGridView.isOpenSelected = false;
        $scope.objGridView.OpenbuttonID = "";
        $scope.objGridView.OpenformID = "";

        $scope.objGridView.isOpenLookupSelected = false;
        $scope.objGridView.OpenLookupbuttonID = "";
        $scope.objGridView.OpenLookupformID = "";

        $scope.objGridView.isOpenMaintenanceSelected = false;
        $scope.objGridView.OpenMaintenancebuttonID = "";
        $scope.objGridView.OpenMaintenanceformID = "";

        $scope.objGridView.isDeleteSelected = false;
        $scope.objGridView.DeletebuttonID = "";

        $scope.objGridView.isExportToExcelSelected = false;
        $scope.objGridView.ExportbuttonID = "";
    }

    $scope.ExpandCollapsedCustomAttrField = function (field, event) {
        field.IsExpanded = !field.IsExpanded;
    };


    $scope.SetFieldClass = function (obj) {
        if (obj == $scope.SelectedField) {
            return "selected";
        }
    };

    $scope.SelectFieldClick = function (obj, event) {
        $scope.SelectedField = obj;
        if (event) {
            event.stopPropagation();
        }
    };



    $scope.objGridView.lstselectedobjecttreefields = [];
    $scope.objGridView.preselectedfields = [];
    $scope.objGridView.lstPreDisabledField = [];

    var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
    var lst = entityIntellisenseList.filter(function (x) {
        return x.ID == $scope.ParentEntityName;
    });

    function iteratorColumnElements(itm) {
        function iteratTemplate(ctrl) {
            if ("sfwEntityField" in ctrl.dictAttributes) {
                if (lst && lst.length > 0 && lst[0].Attributes.length > 0) {
                    var objAttr = "";
                    if ($scope.ParentEntityName && ctrl.dictAttributes.sfwEntityField) {
                        objAttr = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.ParentEntityName, ctrl.dictAttributes.sfwEntityField);
                    }
                    if (objAttr) {
                        var attr = { Key: ctrl.dictAttributes.sfwEntityField, Value: objAttr };
                        $scope.objGridView.lstPreDisabledField.push(attr);
                    }
                }
                else if ($scope.ObjgridBoundedQuery && $scope.ObjgridBoundedQuery.SortedColumns) {
                    var lstField = $scope.ObjgridBoundedQuery.SortedColumns.filter(function (x) { return x.ID == ctrl.dictAttributes.sfwEntityField; });
                    if (lstField && lstField.length > 0) {
                        lstField[0].IsCheckboxDisabled = true;
                    }
                }
            }
        }
        if (itm.Name == "TemplateField") {
            var lstItem = itm.Elements.filter(function (itm) { return itm.Name == "ItemTemplate"; });
            if (lstItem && lstItem.length > 0) {
                var ItemTemplate = lstItem[0];

                angular.forEach(ItemTemplate.Elements, iteratTemplate);
            }
        }
    }

    $scope.getModelForBoundedQueryList = function (lstfields) {
        var lst = [];
        lst = $getModelList.getModelListFromQueryFieldlist(lstfields);
        return lst;
    };

    if ($scope.selectedEntityField) {
        if (lst && lst.length > 0) {
            if (lst[0].Attributes.length > 0) {
                var primarykeyattribute = lst[0].Attributes.filter(function (x) {
                    return x.Type == "Column" && x.KeyNo == '1';
                });
                if (primarykeyattribute.length > 0) {
                    $scope.objGridView.preselectedfields.push(primarykeyattribute[0]);
                }
            }
        }

        //var entitycollname = GetItemPathForEntityObject($scope.selectedEntityField);       
        var DisplayedEntity = getDisplayedEntity($scope.LstDisplayedEntities);
        var DisplayName = "";
        if (DisplayedEntity && DisplayedEntity.strDisplayName != "") {
            DisplayName = DisplayedEntity.strDisplayName + "." + $scope.selectedEntityField.ID;
        } else {
            DisplayName = $scope.selectedEntityField.ID;
        }

        var entitycollname = DisplayName;
        if ($scope.IsAddGridWithPanel) {
            entitycollname = $scope.GridEntityField;
        }
        //entitycollname = $scope.selectedEntityField.Entity;
        $scope.objGridView.ParentVM = $scope.cellVM;
        $scope.objGridView.dictAttributes.ID = "dgrResult";
        $scope.objGridView.dictAttributes.AllowPaging = "True";
        $scope.objGridView.dictAttributes.AllowSorting = "True";
        $scope.objGridView.dictAttributes.sfwSelection = "Many";
        $scope.objGridView.dictAttributes.sfwEntityField = entitycollname;

        if ($scope.selectedEntityField.ID) {
            var strControlID = $scope.selectedEntityField.ID;
            strControlID = CreateControlID($scope.FormModel, $scope.selectedEntityField.ID, 'sfwGridView');
            $scope.objGridView.dictAttributes.ID = strControlID;
        }
        var blnIsLookup = $scope.FormModel.dictAttributes.sfwType == "Lookup";

        var strGridViewID = $scope.objGridView.dictAttributes.ID;
        if (startsWith(strGridViewID, "grv", 0))
            strGridViewID = strGridViewID.substring(3);

        if (blnIsLookup) {
            if ($scope.objGridView.NewbuttonID == "")
                $scope.objGridView.NewbuttonID = "btnNew";
            if ($scope.objGridView.OpenbuttonID == "")
                $scope.objGridView.OpenbuttonID = "btnOpen";
            if ($scope.objGridView.OpenLookupbuttonID == "")
                $scope.objGridView.OpenLookupbuttonID = "btnOpenLookup";
            if ($scope.objGridView.OpenMaintenancebuttonID == "")
                $scope.objGridView.OpenMaintenancebuttonID = "btnOpenMaintenance";
            if ($scope.objGridView.DeletebuttonID == "")
                $scope.objGridView.DeletebuttonID = "btnDelete";
            if ($scope.objGridView.ExportbuttonID == "")
                $scope.objGridView.ExportbuttonID = "btnExportExcel";
        }
        else {

            if (!$scope.objGridView.NewbuttonID)
                $scope.objGridView.NewbuttonID = "btnNew" + strGridViewID;
            if (!$scope.objGridView.OpenbuttonID)
                $scope.objGridView.OpenbuttonID = "btnOpen" + strGridViewID;
            if (!$scope.objGridView.OpenLookupbuttonID)
                $scope.objGridView.OpenLookupbuttonID = "btnOpen" + strGridViewID + "Lookup";
            if (!$scope.objGridView.OpenMaintenancebuttonID)
                $scope.objGridView.OpenMaintenancebuttonID = "btnOpen" + strGridViewID + "Maintenance";
            if (!$scope.objGridView.DeletebuttonID)
                $scope.objGridView.DeletebuttonID = "btnDelete" + strGridViewID;
            if (!$scope.objGridView.ExportbuttonID)
                $scope.objGridView.ExportbuttonID = "btnExportExcel" + strGridViewID;
        }
    }
    else if (!$scope.IsAddColumnSelected && ($scope.IsAddFromToolBox || $scope.objGridView.dictAttributes.sfwBaseQuery)) {
        $scope.objGridView.ParentVM = $scope.cellVM;
        $scope.objGridView.dictAttributes.ID = "dgrResult";
        $scope.objGridView.dictAttributes.AllowPaging = "True";
        $scope.objGridView.dictAttributes.AllowSorting = "True";
        $scope.objGridView.dictAttributes.sfwSelection = "Many";
        if ($scope.objGridView.dictAttributes.sfwEntityField) {
            var strControlID = CreateControlID($scope.FormModel, $scope.objGridView.dictAttributes.sfwEntityField, 'sfwGridView');
            $scope.objGridView.dictAttributes.ID = strControlID;
        }
        else {
            var strControlID = CreateControlID($scope.FormModel, "GridView", 'sfwGridView');
            $scope.objGridView.dictAttributes.ID = strControlID;
        }

        var strGridViewID = $scope.objGridView.dictAttributes.ID;
        if (startsWith(strGridViewID, "grv", 0))
            strGridViewID = strGridViewID.substring(3);

        if (blnIsLookup) {
            if ($scope.objGridView.NewbuttonID == "")
                $scope.objGridView.NewbuttonID = "btnNew";
            if ($scope.objGridView.OpenbuttonID == "")
                $scope.objGridView.OpenbuttonID = "btnOpen";
            if ($scope.objGridView.OpenLookupbuttonID == "")
                $scope.objGridView.OpenLookupbuttonID = "btnOpenLookup";
            if ($scope.objGridView.OpenMaintenancebuttonID == "")
                $scope.objGridView.OpenMaintenancebuttonID = "btnOpenMaintenance";
            if ($scope.objGridView.DeletebuttonID == "")
                $scope.objGridView.DeletebuttonID = "btnDelete";
            if ($scope.objGridView.ExportbuttonID == "")
                $scope.objGridView.ExportbuttonID = "btnExportExcel";
        }
        else {

            if (!$scope.objGridView.NewbuttonID)
                $scope.objGridView.NewbuttonID = "btnNew" + strGridViewID;
            if (!$scope.objGridView.OpenbuttonID)
                $scope.objGridView.OpenbuttonID = "btnOpen" + strGridViewID;
            if (!$scope.objGridView.OpenLookupbuttonID)
                $scope.objGridView.OpenLookupbuttonID = "btnOpen" + strGridViewID + "Lookup";
            if (!$scope.objGridView.OpenMaintenancebuttonID)
                $scope.objGridView.OpenMaintenancebuttonID = "btnOpen" + strGridViewID + "Maintenance";
            if (!$scope.objGridView.DeletebuttonID)
                $scope.objGridView.DeletebuttonID = "btnDelete" + strGridViewID;
            if (!$scope.objGridView.ExportbuttonID)
                $scope.objGridView.ExportbuttonID = "btnExportExcel" + strGridViewID;
        }

        if ($scope.objGridView.dictAttributes.sfwBaseQuery && $scope.objGridView.dictAttributes.sfwBoundToQuery == "True") {
            $scope.ObjgridBoundedQuery = {};
            $scope.GridFirstStepTitle = "Select the query fields to be displayed in the grid";
            var QueryID = $scope.objGridView.dictAttributes.sfwBaseQuery;
            //dummy dialog id is given as second parameter in below call, so that it gets the column alias name from query instead of actual columns.
            $.connection.hubForm.server.getEntityQueryColumns(QueryID, "dummy").done(function (data) {
                //$scope.receiveQueryFields(data, query.dictAttributes.sfwQueryRef);
                $scope.$evalAsync(function () {
                    if (data && data.length > 0) {
                        var lstDataFields = data;
                        sortListBasedOnproperty(lstDataFields, "", "CodeID");
                        $scope.ObjgridBoundedQuery.lstselectedobjecttreefields = [];
                        $scope.ObjgridBoundedQuery.SortedColumns = [];
                        $scope.ObjgridBoundedQuery.lstselectedobjecttreefields = $scope.getModelForBoundedQueryList(lstDataFields);
                        $scope.ObjgridBoundedQuery.SortedColumns = $scope.ObjgridBoundedQuery.lstselectedobjecttreefields;
                    }
                });
            });
        }
    }
    else {
        if ($scope.objGridView) {
            var lstColumns = $scope.objGridView.Elements.filter(function (itm) { return itm.Name == "Columns"; });
            if (!lstColumns || (lstColumns && lstColumns.length == 0)) {
                var columnvm = { Name: 'Columns', Value: '', dictAttributes: {}, Elements: [] };
                $rootScope.PushItem(columnvm, $scope.objGridView.Elements);
                lstColumns = $scope.objGridView.Elements.filter(function (itm) { return itm.Name == "Columns"; });
            }
            if ($scope.objGridView.dictAttributes.sfwBaseQuery && $scope.objGridView.dictAttributes.sfwBoundToQuery == "True") {
                $scope.ObjgridBoundedQuery = {};
                $scope.GridFirstStepTitle = "Select the query fields to be displayed in the grid";
                var QueryID = $scope.objGridView.dictAttributes.sfwBaseQuery;
                //dummy dialog id is given as second parameter in below call, so that it gets the column alias name from query instead of actual columns.
                $.connection.hubForm.server.getEntityQueryColumns(QueryID, "dummy").done(function (data) {
                    //$scope.receiveQueryFields(data, query.dictAttributes.sfwQueryRef);
                    $scope.$evalAsync(function () {
                        if (data && data.length > 0) {
                            var lstDataFields = data;
                            sortListBasedOnproperty(lstDataFields, "", "CodeID");
                            $scope.ObjgridBoundedQuery.lstselectedobjecttreefields = [];
                            $scope.ObjgridBoundedQuery.SortedColumns = [];
                            $scope.ObjgridBoundedQuery.lstselectedobjecttreefields = $scope.getModelForBoundedQueryList(lstDataFields);
                            $scope.ObjgridBoundedQuery.SortedColumns = $scope.ObjgridBoundedQuery.lstselectedobjecttreefields;

                            if (lstColumns && lstColumns.length > 0) {

                                angular.forEach(lstColumns[0].Elements, iteratorColumnElements);
                            }
                        }
                    });
                });
            }
            else {
                if (lstColumns && lstColumns.length > 0) {

                    angular.forEach(lstColumns[0].Elements, iteratorColumnElements);
                }
            }

        }
    }


    $scope.populateParamtersForform = function (formname, formtype) {
        if (formname) {
            var filename = formname;
            if (formtype == "New") {
                $scope.ShowNewParameters = false;
            }
            else if (formtype == "Open") {
                $scope.ShowOpenParameters = false;
            }
            else if (formtype == "OpenLookup") {
                $scope.ShowOpenLookupParameters = false;
            }
            else if (formtype == "OpenMaintenance") {
                $scope.ShowOpenMaintenanceParameters = false;
            }
            $.connection.hubForm.server.getFormParameters(filename, formtype).done(function (lstparams) {
                $scope.receiveFormParameters(lstparams, formtype);
            });
        }
    };

    $scope.receiveFormParameters = function (lstparams, formtype) {
        if (lstparams) {
            if (formtype == "New") {
                $scope.FormNewParameters = lstparams;
            }
            else if (formtype == "Open") {
                $scope.FormOpenParameters = lstparams;
            }
            else if (formtype == "OpenLookup") {
                $scope.FormOpenLookupParameters = lstparams;
            }
            else if (formtype == "OpenMaintenance") {
                $scope.FormOpenMaintenanceParameters = lstparams;
            }
        }

    };

    $scope.onSfxGridCancelClick = function () {

        if ($scope.objGridDialog) {
            $scope.objGridDialog.close();
        }
        if ($scope.onCancelClick) {
            $scope.onCancelClick();
        }
    };

    //#region  Validate Next Button
    $scope.isNextDisableForGrid = function () {
        var IsValid = true;
        $scope.objGridView.ErrorMessageForDisplay = "";
        if (!$scope.objGridView.ValidateData()) {
            IsValid = false;
        }

        return IsValid;
    };

    $scope.objGridView.ValidateData = function () {
        var lstselectedfields = [];
        var retValue = false;
        if ($scope.ObjgridBoundedQuery) {
            if ($scope.ObjgridBoundedQuery.SortedColumns)
                lstselectedfields = $scope.ObjgridBoundedQuery.SortedColumns.filter(function (itm) { return itm.IsSelected });
        }
        else {
            lstselectedfields = $scope.objGridView.lstselectedmultiplelevelfield;//GetSelectedFieldList($scope.objGridView.lstselectedobjecttreefields, lstselectedfields);
        }
        if (lstselectedfields.length == 0) {
            $scope.objGridView.ErrorMessageForDisplay = "Error: Please select atleast one value from the list.";
            retValue = true;
        }
        return retValue;
    };

    $scope.isNextDisableForGridButton = function () {
        var IsValid = false;
        $scope.objGridView.ErrorMessageForGridButton = "";
        if ($scope.objGridView.ValidateGridButtonData()) {
            IsValid = true;
        }

        return IsValid;
    };

    $scope.objGridView.ValidateGridButtonData = function () {
        var retValue = false;

        if ($scope.objGridView.isOpenMaintenanceSelected == "True") {
            if ($scope.objGridView.OpenMaintenanceformID == undefined || $scope.objGridView.OpenMaintenanceformID == "") {
                $scope.objGridView.ErrorMessageForGridButton = "Error: Please Select Maintenance Form.";
                retValue = true;
            }
        }

        if ($scope.objGridView.isOpenLookupSelected == "True") {
            if ($scope.objGridView.OpenLookupformID == undefined || $scope.objGridView.OpenLookupformID == "") {
                $scope.objGridView.ErrorMessageForGridButton = "Error: Please Select Lookup Form.";
                retValue = true;
            }
        }

        if ($scope.objGridView.isOpenSelected == "True") {
            if ($scope.objGridView.OpenformID == undefined || $scope.objGridView.OpenformID == "") {
                $scope.objGridView.ErrorMessageForGridButton = "Error: Please Select Maintenance Form.";
                retValue = true;
            }
        }

        if ($scope.objGridView.isNewSelected == "True") {
            if ($scope.objGridView.NewformID == undefined || $scope.objGridView.NewformID == "") {
                $scope.objGridView.ErrorMessageForGridButton = "Error: Please Select Maintenance Form.";
                retValue = true;
            }
        }




        return retValue;
    };

    //#endregion

    $scope.onCollectionStepNext = function () {
        if ($scope.IsAddColumnSelected || $scope.skipSecondStep) {
            $scope.LoadControlTypes();
            $scope.LoadDataFormat();
            $scope.LoadDataKey();
            $scope.LoadOrder();
            $scope.LoadControls();
            $scope.LoadSort();
            $scope.LoadRelativeControl();
        }
    };

    var ialGridButtons = [];

    $scope.onAddButtonsNextClick = function () {
        var prefix = "swc";
        ialGridButtons = [];
        if ($scope.objGridView.isNewSelected && $scope.objGridView.isNewSelected == 'True') {
            var newControl = {
                Name: 'sfwButton', prefix: prefix, Value: '', dictAttributes: {}, Elements: [], Children: []
            };
            newControl.dictAttributes.ID = $scope.objGridView.NewbuttonID;
            newControl.dictAttributes.sfwMethodName = "btnNew_Click";
            newControl.dictAttributes.sfwActiveForm = $scope.objGridView.NewformID;
            newControl.dictAttributes.Text = "New";

            newControl.dictAttributes.sfwNavigationParameter = GetNavigationParameters($scope.FormNewParameters);
            ialGridButtons.push(newControl);
        }
        if ($scope.objGridView.isOpenSelected && $scope.objGridView.isOpenSelected == 'True') {
            var newControl = {
                Name: 'sfwButton', prefix: prefix, Value: '', dictAttributes: {}, Elements: [], Children: []
            };
            newControl.dictAttributes.ID = $scope.objGridView.OpenbuttonID;
            newControl.dictAttributes.sfwMethodName = "btnOpen_Click";
            newControl.dictAttributes.sfwActiveForm = $scope.objGridView.OpenformID;
            newControl.dictAttributes.sfwRelatedControl = $scope.objGridView.dictAttributes.ID;
            newControl.dictAttributes.Text = "Open";
            newControl.dictAttributes.sfwNavigationParameter = GetNavigationParameters($scope.FormOpenParameters);

            ialGridButtons.push(newControl);
        }
        if ($scope.objGridView.isOpenLookupSelected && $scope.objGridView.isOpenLookupSelected == 'True') {

            var newControl = {
                Name: 'sfwButton', prefix: prefix, Value: '', dictAttributes: {}, Elements: [], Children: []
            };
            newControl.dictAttributes.ID = $scope.objGridView.OpenLookupbuttonID;
            newControl.dictAttributes.Visible = "False";
            newControl.dictAttributes.sfwMethodName = "btnOpenLookup_Click";
            newControl.dictAttributes.sfwActiveForm = $scope.objGridView.OpenLookupformID;
            newControl.dictAttributes.Text = "Open Lookup";
            newControl.dictAttributes.sfwNavigationParameter = GetNavigationParameters($scope.FormOpenLookupParameters);

            ialGridButtons.push(newControl);
        }
        if ($scope.objGridView.isOpenMaintenanceSelected && $scope.objGridView.isOpenMaintenanceSelected == 'True') {
            var newControl = {
                Name: 'sfwButton', prefix: prefix, Value: '', dictAttributes: {}, Elements: [], Children: []
            };
            newControl.dictAttributes.ID = $scope.objGridView.OpenMaintenancebuttonID;
            newControl.dictAttributes.sfwMethodName = "btnOpen_Click";
            newControl.dictAttributes.sfwActiveForm = $scope.objGridView.OpenMaintenanceformID;
            newControl.dictAttributes.sfwRelatedControl = $scope.objGridView.dictAttributes.ID;
            newControl.dictAttributes.Text = "Open Maintenance";
            newControl.dictAttributes.sfwNavigationParameter = GetNavigationParameters($scope.FormOpenMaintenanceParameters);

            ialGridButtons.push(newControl);
        }
        if ($scope.objGridView.isDeleteSelected && $scope.objGridView.isDeleteSelected == 'True') {
            var newControl = {
                Name: 'sfwButton', prefix: prefix, Value: '', dictAttributes: {}, Elements: [], Children: []
            };
            newControl.dictAttributes.ID = $scope.objGridView.DeletebuttonID;
            newControl.dictAttributes.sfwMethodName = "btnDelete_Click";
            newControl.dictAttributes.Text = "Delete";

            ialGridButtons.push(newControl);
        }
        if ($scope.objGridView.isExportToExcelSelected && $scope.objGridView.isExportToExcelSelected == 'True') {
            var newControl = {
                Name: 'sfwButton', prefix: prefix, Value: '', dictAttributes: {}, Elements: [], Children: []
            };
            newControl.dictAttributes.ID = $scope.objGridView.ExportbuttonID;
            newControl.dictAttributes.sfwMethodName = "btnColumnsToExport_Click";
            newControl.dictAttributes.sfwRelatedControl = $scope.objGridView.dictAttributes.ID;
            newControl.dictAttributes.Text = "Export To Excel";

            ialGridButtons.push(newControl);
        }
        $scope.LoadControlTypes();
        $scope.LoadDataFormat();
        $scope.LoadDataKey();
        $scope.LoadOrder();
        $scope.LoadControls();
        $scope.LoadSort();
        $scope.LoadRelativeControl();

        $scope.ShowNewParameters = false;
        $scope.ShowOpenParameters = false;
        $scope.ShowOpenLookupParameters = false;
        $scope.ShowOpenMaintenanceParameters = false;
    };


    $scope.ArrControlTypes = [];
    $scope.ArrDataFormat = [];
    $scope.ArrDataKey = [];
    $scope.ArrSort = [];
    $scope.ArrOrder = [];
    $scope.LoadControlTypes = function () {
        $scope.ArrControlTypes = [];
        $scope.ArrControlTypes.push("");
        $scope.ArrControlTypes.push("Label");
        if ($scope.FormModel.dictAttributes.sfwType != "Lookup" && !$scope.ObjgridBoundedQuery) {
            $scope.ArrControlTypes.push("HyperLink");
            $scope.ArrControlTypes.push("Checkbox");
            $scope.ArrControlTypes.push("JSONData");
        }
        if (!$scope.IsPrototype && $scope.FormModel.dictAttributes.sfwType != "Lookup" && !$scope.ObjgridBoundedQuery) {
            $scope.ArrControlTypes.push("TextBox");
            $scope.ArrControlTypes.push("DropDownList");
        }
    };

    $scope.ChangeSortExpression = function (selectedcolumn) {
        if (selectedcolumn && !selectedcolumn.istrSort) {
            selectedcolumn.istrOrder = "";
        }
    };

    $scope.SelectQueryField = function (obj, event) {
        $scope.SelectedQueryField = obj;
    }

    $scope.LoadDataFormat = function () {
        $scope.ArrDataFormat = [];
        $scope.ArrDataFormat.push("");
        $scope.ArrDataFormat.push("{0:d}");              // Date
        $scope.ArrDataFormat.push("{0:C}");              // Currency
        $scope.ArrDataFormat.push("{0:000-##-####}");    // SSN
        $scope.ArrDataFormat.push("{0:(###)###-####}");  // Phone/Fax
    };

    $scope.LoadDataKey = function () {
        $scope.ArrDataKey = [];
        $scope.ArrDataKey.push("");
        $scope.ArrDataKey.push("1");
        $scope.ArrDataKey.push("2");
        $scope.ArrDataKey.push("3");
        $scope.ArrDataKey.push("4");
        $scope.ArrDataKey.push("5");
    };

    $scope.LoadSort = function () {
        $scope.ArrSort = [];
        $scope.ArrSort.push("");
        if ($scope.FieldCollection && $scope.FieldCollection.length > 0) {
            for (i = 1; i < $scope.FieldCollection.length + 1; i++) {
                $scope.ArrSort.push(i);
            }
        }
    };

    $scope.LoadOrder = function () {
        $scope.ArrOrder = [];
        $scope.ArrOrder.push("");
        $scope.ArrOrder.push("asc");
        $scope.ArrOrder.push("desc");
    };

    $scope.LoadControls = function () {
        var lstList = [];
        if ($scope.ObjgridBoundedQuery) {
            if ($scope.ObjgridBoundedQuery && $scope.ObjgridBoundedQuery.SortedColumns) {
                lstList = $scope.ObjgridBoundedQuery.SortedColumns.filter(function (itm) { return itm.IsSelected });
            }
        }
        else {
            lstList = $scope.objGridView.lstselectedmultiplelevelfield;//GetSelectedFieldList($scope.objGridView.lstselectedobjecttreefields, lstList);
        }
        var dummyList = angular.copy($scope.FieldCollection);
        $scope.FieldCollection = [];

        function AddInFieldCollection(obj) {
            var lstField = [];
            if ($scope.ObjgridBoundedQuery) {
                lstField = dummyList.filter(function (itm) { return itm.istrFieldName === obj.ID });
            }
            else {
                lstField = dummyList.filter(function (itm) { return itm.istrFieldName === obj.FieldObject.ID });
            }
            var sfxField = {};
            if (lstField && lstField.length > 0) {
                sfxField = lstField[0];
            }
            else {
                if ($scope.ObjgridBoundedQuery) {
                    objModel = obj;
                }
                else {
                    objModel = obj.FieldObject;
                }
                if (objModel) {

                    sfxField.istrFieldName = objModel.ID;
                    sfxField.istrObjectID = objModel.Value;
                    sfxField.istrDataType = objModel.DataType;
                    var entityname = obj.Entity;
                    sfxField.istrEntityName = entityname;
                    sfxField.istrControlType = "Label";

                    //var strHeaderText = sfxField.istrFieldName.substring(sfxField.istrFieldName.lastIndexOf('.') + 1);
                    var strHeaderText = GetCaptionFromField(objModel);
                    sfxField.istrHeader = strHeaderText;
                    if ($scope.ObjgridBoundedQuery) {
                        sfxField.istrItemPath = obj.ID;

                        sfxField.istrPropertyName = obj.ID;
                    }
                    else {
                        sfxField.istrItemPath = obj.EntityField; //GetItemPathForEntityObject(objModel);
                        sfxField.istrPropertyName = obj.EntityField;//GetItemPathForEntityObject(objModel);
                    }

                    sfxField.istrVisible = "True";
                }
            }
            if (sfxField) {
                $scope.FieldCollection.push(sfxField);
            }
        }

        if (lstList.length > 0) {
            var primaryKeyFileds = [];
            //if (!string.IsNullOrEmpty(this.objGridView.BusObjKeyFields))
            //{
            //    primaryKeyFileds = this.objGridView.BusObjKeyFields.Split(',');
            //}
            var intCountPrimary = 0;


            angular.forEach(lstList, AddInFieldCollection);

        }
    };

    $scope.LoadRelativeControl = function () {
        function AddInArrRelativeControl(theButton) {
            if (theButton.dictAttributes.sfwRelatedControl == $scope.objGridView.dictAttributes.ID) {
                var strButtonID = theButton.dictAttributes.ID;
                if (strButtonID) {
                    $scope.ArrRelativeControl.push(strButtonID);
                }
            }
        }
        if ($scope.IsAddColumnSelected) {
            $scope.ArrRelativeControl = [];
            $scope.ArrRelativeControl.push("");
            if ($scope.objGridView) {
                var panel = FindParent($scope.objGridView, "sfwPanel");
                if (panel) {
                    var lstButtons = [];
                    FindControlListByName(panel, "sfwButton", lstButtons);
                    if (lstButtons && lstButtons.length > 0) {

                        angular.forEach(lstButtons, AddInArrRelativeControl);
                    }
                }
            }
        }
        else {
            $scope.ArrRelativeControl = [];
            $scope.ArrRelativeControl.push("");
            function item(theButton) {
                var strButtonID = theButton.dictAttributes.ID;
                if (strButtonID) {
                    $scope.ArrRelativeControl.push(strButtonID);
                }
            }
            angular.forEach(ialGridButtons, item);
        }
    };

    $scope.UpdateGridProperties = function () {
        var strKeySeq;
        var strKeyNames = "";

        var strSortSeq;
        var strSortExpression = "";
        function getSortExpression(objSfxField) {
            strKeySeq = objSfxField.istrKey;
            if (strKeySeq) {
                if (strKeyNames.length == 0) {
                    strKeyNames = strKeySeq + ";" + objSfxField.istrPropertyName;
                }
                else {
                    strKeyNames += "," + strKeySeq + ";" + objSfxField.istrPropertyName;
                }
            }

            strSortSeq = objSfxField.istrSort;
            if (strSortSeq) {
                if (strSortExpression.length == 0) {
                    if (objSfxField.istrOrder) {
                        strSortExpression = strSortSeq + ";" + objSfxField.istrPropertyName + " " + objSfxField.istrOrder;
                    }
                    else {
                        strSortExpression = strSortSeq + ";" + objSfxField.istrPropertyName;
                    }
                }
                else {
                    if (objSfxField.istrOrder) {
                        strSortExpression += "," + strSortSeq + ";" + objSfxField.istrPropertyName + " " + objSfxField.istrOrder;
                    }
                    else {
                        strSortExpression += "," + strSortSeq + ";" + objSfxField.istrPropertyName;
                    }
                }
            }
        }

        if ($scope.FieldCollection.length > 0) {


            angular.forEach($scope.FieldCollection, getSortExpression);
        }
        var slFieldSeq = [];
        var strDataKeyNames = strKeyNames.split(',');
        //slFieldSeq.Capacity = strDataKeyNames.length;
        function getFieldSequence(strKeyName) {
            var strKeyField = strKeyName.substring(strKeyName.indexOf(';') + 1);
            var obj = {};
            obj.key = strKeyName;
            obj.Value = strKeyField;
            slFieldSeq.push(obj);
        }
        angular.forEach(strDataKeyNames, getFieldSequence);


        strKeyNames = "";

        // IDictionaryEnumerator ide = slFieldSeq.GetEnumerator();
        function getKeyName(key) {
            if (strKeyNames.length == 0) {
                strKeyNames = key.Value;
            }
            else {
                strKeyNames += "," + key.Value;
            }
        }
        angular.forEach(slFieldSeq, getKeyName);

        $scope.objGridView.dictAttributes.sfwDataKeyNames = strKeyNames;

        slFieldSeq = [];
        var strSortExpFields = strSortExpression.split(',');
        // slFieldSeq.Capacity = strSortExpFields.length;

        function iteratorSort(strSortExp) {
            var strSortField = strSortExp.substring(strSortExp.indexOf(';') + 1);
            var obj = {};
            obj.key = strSortExp;
            obj.Value = strSortField;
            slFieldSeq.push(obj);
        }

        angular.forEach(strSortExpFields, iteratorSort);


        strSortExpression = "";

        //ide = slFieldSeq.GetEnumerator();
        function iterator(key) {
            if (strSortExpression.length == 0)
                strSortExpression = key.Value;
            else
                strSortExpression += "," + key.Value;
        }
        angular.forEach(slFieldSeq, iterator);

        $scope.objGridView.dictAttributes.sfwSortExpression = strSortExpression;
    };

    $scope.UpdateGridFields = function () {
        $scope.objGridView.Elements = [];

        if ($scope.FieldCollection.length > 0) {

            var objColumn = {
                Name: 'Columns', Value: '', dictAttributes: {}, Elements: [], Children: []
            };
            objColumn.ParentVM = $scope.objGridView;
            $scope.AddGridTemplateColumn(objColumn);

            $scope.objGridView.Elements.push(objColumn);
        }
    };

    $scope.AddGridTemplateColumn = function (objColumn) {
        var prefix = "asp";
        var sfxControl;

        function iterator(objSfxField) {
            var strDataType = objSfxField.istrDataType;
            var strHAlign = "";
            if (strDataType == "Decimal")
                strHAlign = "Right";

            var objTemp = {
                Name: 'TemplateField', prefix: prefix, Value: '', dictAttributes: {}, Elements: [], Children: []
            };
            objTemp.ParentVM = objColumn;


            objTemp.dictAttributes.Visible = objSfxField.istrVisible;
            objTemp.dictAttributes.HeaderText = objSfxField.istrHeader;
            objTemp.dictAttributes["ItemStyle.HorizontalAlign"] = strHAlign;

            var objItmTemp = {
                Name: 'ItemTemplate', prefix: prefix, Value: '', dictAttributes: {}, Elements: [], Children: []
            };
            objItmTemp.ParentVM = objTemp;


            switch (objSfxField.istrControlType) {
                case "HyperLink":
                    sfxControl = {
                        Name: 'sfwLabel', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
                    };
                    sfxControl.ParentVM = objItmTemp;
                    sfxControl.dictAttributes.sfwLinkable = "True";
                    sfxControl.dictAttributes.sfwRelatedControl = "btnOpen";
                    break;
                case "TextBox":
                    sfxControl = {
                        Name: 'sfwTextBox', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
                    };
                    sfxControl.ParentVM = objItmTemp;


                    if (strDataType == "DateTime")
                        sfxControl.dictAttributes.sfwDataType = strDataType;
                    break;
                case "DropDownList":
                    sfxControl = {
                        Name: 'sfwDropDownList', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
                    };
                    sfxControl.ParentVM = objItmTemp;
                    var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                    var strCodeGroup = GetCodeID(objSfxField.istrEntityName, objSfxField.istrFieldName, entityIntellisenseList);
                    if (!strCodeGroup) {
                        strCodeGroup = "0";
                    }
                    sfxControl.dictAttributes.sfwLoadType = "CodeGroup";

                    break;
                case "Checkbox":
                    sfxControl = {
                        Name: 'sfwCheckBox', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
                    };
                    sfxControl.ParentVM = objItmTemp;

                    break;
                case "JSONData":
                    sfxControl = {
                        Name: 'sfwJSONData', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
                    };
                    sfxControl.ParentVM = objItmTemp;

                    break;
                default:
                    sfxControl = {
                        Name: 'sfwLabel', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
                    };
                    sfxControl.ParentVM = objItmTemp;
                    break;
            }

            if ($scope.FormModel && $scope.FormModel.dictAttributes.sfwType != "Lookup") {
                if (sfxControl.Name != "sfwLabel" && sfxControl.Name != "sfwButton" && sfxControl.Name != "sfwLinkButton" && sfxControl.Name != "sfwImageButton" && sfxControl.Name !== "sfwButtonGroup") {
                    $scope.objGridView.dictAttributes.AllowEditing = "True";
                    $scope.objGridView.dictAttributes.sfwTwoWayBinding = "True";
                    $scope.objGridView.dictAttributes.sfwCommonFilterBox = "False";
                    $scope.objGridView.dictAttributes.sfwFilterOnKeyPress = "False";
                }
            }


            sfxControl.dictAttributes.sfwEntityField = objSfxField.istrItemPath;

            //  sfxControl.dictAttributes.sfwDataFormat = objSfxField.istrFormat;
            sfxControl.dictAttributes.sfwRelatedControl = objSfxField.istrRelatedControl;
            $rootScope.PushItem(sfxControl, objItmTemp.Elements);
            $rootScope.PushItem(objItmTemp, objTemp.Elements);
            $rootScope.PushItem(objTemp, objColumn.Elements);
        }
        angular.forEach($scope.FieldCollection, iterator);
    };

    $scope.onSfxGridFinishClick = function () {
        if (!$scope.IsAddGridWithPanel) {
            $rootScope.UndRedoBulkOp("Start");
        }

        if (!$scope.IsAddColumnSelected) {
            $scope.UpdateGridProperties();
            $scope.UpdateGridFields();
            // var tableVM = GetVM("sfwTable", $scope.cellVM);
            var tableVM = null;
            if ($scope.cellVM.Name == "sfwButtonGroup") {
                tableVM = $scope.cellVM;
            } else {
                tableVM = GetVM('sfwTable', $scope.cellVM);
            }
            if (tableVM && tableVM.Name != "sfwButtonGroup") {

                var ColCount = GetMaxColCount(tableVM.Elements[0], tableVM);

                if (ialGridButtons.length > 0) {
                    var sfxRowModel = {
                        Name: 'sfwRow', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
                    };
                    sfxRowModel.ParentVM = tableVM;

                    for (ind = 0; ind < ColCount; ind++) {
                        var sfxCellModel = {
                            Name: 'sfwColumn', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
                        };
                        sfxCellModel.ParentVM = sfxRowModel;

                        sfxRowModel.Elements.push(sfxCellModel);

                    }

                    var index = 0;
                    if ($scope.IsAddToExistingCell) {
                        var parent = $scope.cellVM.ParentVM;
                        index = $scope.cellVM.ParentVM.Elements.indexOf($scope.cellVM);
                    }

                    var sfxCellModel = sfxRowModel.Elements[index];
                    var AddInsfxCellModel = function(btn) {
                        btn.ParentVM = sfxCellModel;
                        sfxCellModel.Elements.push(btn);
                    }
                    angular.forEach(ialGridButtons, AddInsfxCellModel);

                    if ($scope.IsAddToExistingCell) {
                        index = tableVM.Elements.indexOf($scope.cellVM.ParentVM);
                        $rootScope.InsertItem(sfxRowModel, tableVM.Elements, index);
                    }
                    else {
                        $rootScope.PushItem(sfxRowModel, tableVM.Elements);
                    }

                }

                if ($scope.IsAddToExistingCell) {
                    if ($scope.cellVM) {

                        $rootScope.PushItem($scope.objGridView, $scope.cellVM.Elements);
                    }
                }
                else {

                    var newRowModel = {
                        Name: 'sfwRow', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
                    };
                    newRowModel.ParentVM = tableVM;

                    var newcellModel = {
                        Name: 'sfwColumn', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
                    };
                    newcellModel.ParentVM = newRowModel;

                    $scope.objGridView.ParentVM = newcellModel;
                    newcellModel.Elements.push($scope.objGridView);

                    newRowModel.Elements.push(newcellModel);

                    for (ind = 1; ind < ColCount; ind++) {
                        newcellModel = {
                            Name: 'sfwColumn', prefix: "swc", Value: '', dictAttributes: {}, Elements: [], Children: []
                        };
                        newcellModel.ParentVM = newRowModel;


                        newRowModel.Elements.push(newcellModel);
                    }

                    $rootScope.PushItem(newRowModel, tableVM.Elements);
                }
            }
            if (tableVM.Name == "sfwButtonGroup") {
                if ($scope.objGridView && $scope.objGridView.dictAttributes) {
                    if (ialGridButtons.length > 0) {
                        var AddBtnInCell = function (btn) {
                            $rootScope.PushItem(btn, tableVM.Elements);
                        }
                        angular.forEach(ialGridButtons, AddBtnInCell);
                    }
                    $rootScope.PushItem($scope.objGridView, tableVM.Elements);
                }
            }
            if ($scope.selectControl) {
                $scope.selectControl($scope.objGridView);
            }

        }
        else {
            $scope.UpdateGridProperties();

            $scope.AddGridColumns();
        }


        if ($scope.onAfterOkGridClick) {
            $scope.onAfterOkGridClick();
        }

        $scope.onSfxGridCancelClick();
        if ($scope.closeClick) {
            $scope.closeClick();
        }

        if (!$scope.IsAddGridWithPanel) {
            $rootScope.UndRedoBulkOp("End");
        }
    };

    $scope.AddGridColumns = function () {
        if ($scope.objGridView) {
            var lstColumns = $scope.objGridView.Elements.filter(function (itm) { return itm.Name == "Columns"; });
            if (lstColumns && lstColumns.length > 0) {
                var objColumn = lstColumns[0];
                $scope.AddGridTemplateColumn(objColumn);
            }
        }
    };


    //#region for Expand and Collapse
    $scope.ShowNewParameters = false;
    $scope.ShowOpenParameters = false;
    $scope.ShowOpenLookupParameters = false;
    $scope.ShowOpenMaintenanceParameters = false;

    $scope.showParametersForGrid = function (obj) {
        if (obj == 'New') {
            $scope.ShowOpenParameters = false;
            $scope.ShowOpenLookupParameters = false;
            $scope.ShowOpenMaintenanceParameters = false;
            if ($scope.ShowNewParameters) {
                $scope.ShowNewParameters = false;
            }
            else {
                $scope.ShowNewParameters = true;
            }
        }
        else if (obj == 'Open') {
            if ($scope.ShowNewParameters) {
                $scope.ShowNewParameters = false;
            }
            $scope.ShowOpenLookupParameters = false;
            $scope.ShowOpenMaintenanceParameters = false;
            if ($scope.ShowOpenParameters) {
                $scope.ShowOpenParameters = false;
            }
            else {
                $scope.ShowOpenParameters = true;
            }
        }
        else if (obj == 'Lookup') {
            if ($scope.ShowNewParameters) {
                $scope.ShowNewParameters = false;
            }
            $scope.ShowOpenParameters = false;
            $scope.ShowOpenMaintenanceParameters = false;
            if ($scope.ShowOpenLookupParameters) {
                $scope.ShowOpenLookupParameters = false;
            }
            else {
                $scope.ShowOpenLookupParameters = true;
            }
        }
        else if (obj == 'Maintenance') {
            if ($scope.ShowNewParameters) {
                $scope.ShowNewParameters = false;
            }
            $scope.ShowOpenParameters = false;
            $scope.ShowOpenLookupParameters = false;
            if ($scope.ShowOpenMaintenanceParameters) {
                $scope.ShowOpenMaintenanceParameters = false;
            }
            else {
                $scope.ShowOpenMaintenanceParameters = true;
            }
        }
        $scope.FieldControlCollection = [];
        PopulateAvailableControl($scope.FieldControlCollection, $scope.SfxMainTable, $scope.ShowNewParameters, $scope.IsAddColumnSelected);
        if (obj != 'Lookup') {
            $.connection.hubForm.server.getGlobleParameters().done(function (data) {
                $scope.$apply(function () {
                    $scope.objGlobleParameters = data;
                    PopulateGlobalParameters($scope.objGlobleParameters, $scope.FieldControlCollection);
                });
            });
        }

    };
    //#endregion

    $scope.SelectField = function (objfield) {
        $scope.SelectedField = objfield;
    };

    $scope.onChangeGridCheckBox = function (formtype) {
        if (formtype == "New") {
            $scope.FormNewParameters = [];
            $scope.objGridView.NewformID = "";
            $scope.ShowNewParameters = false;
        }
        else if (formtype == "Open") {
            $scope.FormOpenParameters = [];
            $scope.objGridView.OpenformID = "";
            $scope.ShowOpenParameters = false;
        }
        else if (formtype == "OpenLookup") {
            $scope.FormOpenLookupParameters = [];
            $scope.objGridView.OpenLookupformID = "";
            $scope.ShowOpenLookupParameters = false;
        }
        else if (formtype == "OpenMaintenance") {
            $scope.FormOpenMaintenanceParameters = [];
            $scope.objGridView.OpenMaintenanceformID = "";
            $scope.ShowOpenMaintenanceParameters = false;
        }

    };

    //#region Move Up /Down Functionality
    $scope.isMoveUp = function () {
        if ($scope.SelectedField == undefined) {
            return true;
        }
        else {
            var index = $scope.FieldCollection.indexOf($scope.SelectedField);
            if (index > 0) {
                return false;
            }
            else {
                return true;
            }
        }
    };
    $scope.isMoveDown = function () {
        if ($scope.SelectedField == undefined) {
            return true;
        }
        else {
            var index = $scope.FieldCollection.indexOf($scope.SelectedField);
            if (index != $scope.FieldCollection.length - 1 && index != -1) {
                return false;
            }
            else {
                return true;
            }
        }
    };
    $scope.MoveUpField = function () {
        var index = $scope.FieldCollection.indexOf($scope.SelectedField);
        var tempObj = $scope.FieldCollection[index - 1];
        $scope.FieldCollection[index - 1] = $scope.FieldCollection[index];
        $scope.FieldCollection[index] = tempObj;
        $scope.scrollBySelectedField("#create-result-grid", ".selected");
    };
    $scope.MoveDownField = function () {
        var index = $scope.FieldCollection.indexOf($scope.SelectedField);
        var tempObj = $scope.FieldCollection[index + 1];
        $scope.FieldCollection[index + 1] = $scope.FieldCollection[index];
        $scope.FieldCollection[index] = tempObj;
        $scope.scrollBySelectedField("#create-result-grid", ".selected");
    };

    $scope.scrollBySelectedField = function (parentDiv, selectedElement) {
        $timeout(function () {
            var $divDom = $(parentDiv);
            if ($divDom && $divDom.hasScrollBar()) {
                $divDom.scrollTo($divDom.find(selectedElement), { offsetTop: 300, offsetLeft: 0 }, null);
                return false;
            }

        });
    }
    //#endregion
}]);
app.controller("NavigationParameterOpenWordController", ["$scope", "$rootScope", function ($scope, $rootScope) {

    $scope.Init = function () {
        if ($scope.model && $scope.model.dictAttributes.sfwNavigationParameter) {
            if ($scope.model.dictAttributes.sfwNavigationParameter.contains(';')) {
                var alParams = $scope.model.dictAttributes.sfwNavigationParameter.split(';');
                for (var i = 0; i < alParams.length; i++) {
                    if (alParams[i].contains("=")) {
                        var strParamField = '';
                        strParamField = alParams[i].substring(0, alParams[i].indexOf('='));
                        if (strParamField == "TemplateName") {
                            $scope.TemplateName = alParams[i].substring(alParams[i].indexOf('=') + 1);
                        }
                        else if (strParamField == "TrackingID") {
                            $scope.TrackingID = alParams[i].substring(alParams[i].indexOf('=') + 1);
                        }
                    }
                }
            }
            else if ($scope.model.dictAttributes.sfwNavigationParameter.contains('=')) {
                var strParamField = '';
                strParamField = $scope.model.dictAttributes.sfwNavigationParameter.substring(0, $scope.model.dictAttributes.sfwNavigationParameter.indexOf('='));
                if (strParamField == "TemplateName") {
                    $scope.TemplateName = $scope.model.dictAttributes.sfwNavigationParameter.substring($scope.model.dictAttributes.sfwNavigationParameter.indexOf('=') + 1);
                }
                else if (strParamField == "TrackingID") {
                    $scope.TrackingID = $scope.model.dictAttributes.sfwNavigationParameter.substring($scope.model.dictAttributes.sfwNavigationParameter.indexOf('=') + 1);
                }
            }
        }
        $scope.PopulateCorrespondenceTemplate();
    };

    //#region When dialog close on Ok and Cancel button
    $scope.onOkClick = function () {
        var strCustomAttribute = "";

        var objTemplateName = { ParameterField: "TemplateName", ParameterValue: $scope.TemplateName };
        var objTrackingID = { ParameterField: "TrackingID", ParameterValue: $scope.TrackingID };
        var collection = [];
        collection.push(objTemplateName);
        collection.push(objTrackingID);

        if (collection.length > 0) {
            strCustomAttribute = $scope.GetSavedString(collection);
        }
        if (strCustomAttribute != undefined) {
            $rootScope.EditPropertyValue($scope.model.dictAttributes.sfwNavigationParameter, $scope.model.dictAttributes, "sfwNavigationParameter", strCustomAttribute);
        }

        $scope.onCancelClick();
    };

    $scope.onCancelClick = function () {
        $scope.NavigationParameterOpenWordDialog.close();
    };

    $scope.GetSavedString = function (ParameterCollection) {
        var strReturn = "";
        angular.forEach(ParameterCollection, function (objParams) {
            var strParamField = objParams.ParameterField;
            var strParamValue = objParams.ParameterValue;
            if (strParamValue != "" && strParamField != undefined) {
                if ((strParamValue != undefined && strParamValue != "") && (strParamField != undefined && strParamField != "")) {
                    var blnConstatnt = objParams.Constants;

                    if (blnConstatnt) {
                        strParamValue = "#" + strParamValue;
                    }

                    var strParam = strParamValue;

                    if (strParamValue.toLowerCase() != strParamField.toLowerCase()) {
                        strParam = strParamField + '=' + strParamValue;
                    }

                    if (strReturn == "") {
                        strReturn = strParam;
                    }
                    else {
                        strReturn += ';' + strParam;
                    }
                }
            }
        });
        return strReturn;
    };
    //#endregion

    $scope.PopulateCorrespondenceTemplate = function () {
        $.connection.hubCreateNewObject.server.loadCorrespondenceTemplate(false).done(function (data) {
            $scope.receiveCorrespondenceTemplateForForm(data);
        });
    };
    $scope.receiveCorrespondenceTemplateForForm = function (data) {
        $scope.$apply(function () {
            $scope.lstCorrTemplates = data;
        });
    };


    $scope.Init();
}]);
app.controller("ParameterNavigationOpenReportController", ["$scope", "$rootScope", function ($scope, $rootScope) {
    
    $scope.iobjReportName = { istrReportName: "", iblnConstant: false };
    $scope.iobjReportTemplate = { istrReportTemplate: "", iblnConstant: false };
   
    $scope.Init = function () {
        if ($scope.model.dictAttributes.sfwNavigationParameter) {
            var lstParam = $scope.model.dictAttributes.sfwNavigationParameter.split(";");
            for (var i = 0, len = lstParam.length; i < len; i++) {
                if (lstParam[i]) {
                    var lst = lstParam[i].split("=");
                    if (lst[0] == "ReportName") {
                        if (lst[1].indexOf("#") > -1) {
                            $scope.iobjReportName.iblnConstant = true;
                            $scope.iobjReportName.istrReportName = lst[1].substring(1, lst[1].length);
                        }
                        else {
                            $scope.iobjReportName.istrReportName = lst[1];
                        }
                    }
                    else {
                        if (lst[1].indexOf("#") > -1) {
                            $scope.iobjReportTemplate.iblnConstant = true;
                            $scope.iobjReportTemplate.istrReportTemplate = lst[1].substring(1, lst[1].length);
                        }
                        else {
                            $scope.iobjReportTemplate.istrReportTemplate = lst[1];
                        }
                    }
                }
            }
        }
        $.connection.hubCreateNewObject.server.loadReportData().done(function (data) {
            $scope.$apply(function () {
                $scope.lstReportData = data;
            });
        });
    };
    
    $scope.onOkClick = function () {
        var lstrNavigationParameter = "";
        if ($scope.iobjReportName.istrReportName) {
            lstrNavigationParameter = "ReportName=";
            if ($scope.iobjReportName.iblnConstant) {
                lstrNavigationParameter += "#" + $scope.iobjReportName.istrReportName;
            }
            else {
                lstrNavigationParameter += $scope.iobjReportName.istrReportName;
            }
        }
        if ($scope.iobjReportTemplate.istrReportTemplate) {
            lstrNavigationParameter += lstrNavigationParameter == "" ? "ReportTemplate=" : ";ReportTemplate=";
            if ($scope.iobjReportTemplate.iblnConstant) {
                lstrNavigationParameter += "#" + $scope.iobjReportTemplate.istrReportTemplate;
            }
            else {
                lstrNavigationParameter += $scope.iobjReportTemplate.istrReportTemplate;
            }
        }
        if ($scope.model.dictAttributes.sfwNavigationParameter != lstrNavigationParameter) {
            $rootScope.EditPropertyValue($scope.model.dictAttributes.sfwNavigationParameter, $scope.model.dictAttributes, "sfwNavigationParameter", lstrNavigationParameter);
        }
        $scope.onCancelClick();

    };
    $scope.onCancelClick = function () {
        $scope.ParameterNavigationOpenReportDialog.close();
    };

    $scope.Init();
}]);
app.controller("GroupExpressionController", ["$scope", "ngDialog","$rootScope", function ($scope, ngDialog, $rootScope) {
    $scope.lstColumnName = [];
    $scope.lstGridColumns = [];
    $scope.lstDefualtOrder = ["", "asc", "desc"];
    $scope.lstGroupExpression = [];
    $scope.lstGroupExpression.push("");
    $scope.Init = function () {
        PopulateGridDataField($scope.model, $scope.lstColumnName);
        for (var i = 0; i < $scope.lstColumnName.length; i++) {
            $scope.lstGroupExpression.push(i + 1);
        }
        for (var i = 0; i < $scope.lstColumnName.length; i++) {
            $scope.lstGridColumns.push({ FieldName: $scope.lstColumnName[i] });
        }
        if ($scope.model.dictAttributes.sfwGroupExpression) {
            var GroupExpression = $scope.model.dictAttributes.sfwGroupExpression.split(',');
            for (i = 0; i < GroupExpression.length; i++) {
                var filedNameAndOrder = GroupExpression[i].split(" ");
                for (var j = 0; j < $scope.lstGridColumns.length ; j++) {
                    if ($scope.lstGridColumns[j].FieldName === filedNameAndOrder[0]) {
                        $scope.lstGridColumns[j].GroupExpression = i + 1;
                    }
                }
            }
        }
    };
    
    $scope.okClick = function () {
        var groupExpression = "";
        var dataKeys = "";
        for (var i = 0; i < $scope.lstGridColumns.length; i++) {
           
            if ($scope.lstGridColumns[i].GroupExpression) {


                var strGroupSeq = $scope.lstGridColumns[i].GroupExpression;
                var iGroupSeq = strGroupSeq;
                if (iGroupSeq > 0) {
                    if (!groupExpression) {
                        groupExpression += strGroupSeq + ";" + $scope.lstGridColumns[i].FieldName;
                    }
                    else {
                        groupExpression += "," + strGroupSeq + ";" + $scope.lstGridColumns[i].FieldName;
                    }
                   
                }
            }
        }

        var slFieldSeq = [];
        var lstGroupExpression = groupExpression.split(',');
        for (var i = 0; i < lstGroupExpression.length; i++) {
            var strIndex = lstGroupExpression[i].substring(0, lstGroupExpression[i].indexOf(';')).trim();
            var strGroupField = lstGroupExpression[i].substring(lstGroupExpression[i].indexOf(';') + 1).trim();
            slFieldSeq.splice(strIndex - 1, 0, strGroupField);
        }
        groupExpression = "";

        angular.forEach(slFieldSeq, function (itm) {
            if (groupExpression.length === 0)
                groupExpression = itm;
            else
                groupExpression += "," + itm;
        });

        $rootScope.EditPropertyValue($scope.model.dictAttributes.sfwGroupExpression, $scope.model.dictAttributes, "sfwGroupExpression", groupExpression);

        $scope.closeClick();
    };
    $scope.closeClick = function () {
        $scope.GroupExpressionDialog.close();
    };

    $scope.Init();

}]);
app.controller("CenterLeftController", ["$scope", "$filter", "$rootScope", "$ValidationService", "$SgMessagesService", function ($scope, $filter, $rootScope, $ValidationService, $SgMessagesService) {


    $scope.Init = function () {
        if ($scope.CenterLeft) {
            for (var i = 0; i < $scope.CenterLeft.Elements.length; i++) {
                if ($scope.CenterLeft.Elements[i].Name == "sfwTreeView") {
                    $scope.objTreeView = $scope.CenterLeft.Elements[i];
                    $scope.objTreeView.objNodes = $scope.CheckAndCreateModel("Nodes", $scope.objTreeView);
                }
            }
        }
        if ($scope.objTreeView) {
            $scope.objTreeView.IsExpanded = false;
        }
        if ($scope.objTreeView && $scope.objTreeView.objNodes && $scope.objTreeView.objNodes.Elements.length > 0) {
            $scope.objTreeView.IsExpanded = true;
            $scope.SelectNodeClick($scope.objTreeView.objNodes.Elements[0]);
        }
        $scope.IsExpanded = true;
    };
    //#region Context Menu
    var copyItem = {};
    $scope.menuOptionsForCenterLeft = [
        ['Add Control', [
            ['sfwTreeNode', function ($itemScope) {
                $scope.AddControlCommand("TreeNode");

            }, function ($itemScope) {

                return true;
            }],
            ['sfwXmlPanelNode', function ($itemScope) {
                $scope.AddControlCommand("XmlPanelNode");
            }, function ($itemScope) {

                return true;
            }],
        ]], null,
        ['Delete', function ($itemScope) {

            if ($itemScope.nodes && $itemScope.nodes.Name === "sfwTreeNode") {
                $SgMessagesService.Message('Delete', 'Do you want to delete?', true, function (result) {
                    if (result) {
                        var index = $scope.objTreeView.objNodes.Elements.indexOf($itemScope.nodes);
                        if (index > -1) {
                            $scope.objTreeView.objNodes.Elements.splice(index, 1);


                            if (index < $scope.objTreeView.objNodes.Elements.length) {

                                $scope.SelectNodeClick($scope.objTreeView.objNodes.Elements[index], null);
                            }
                            else if ($scope.objTreeView.objNodes.Elements.length > 0) {

                                $scope.SelectNodeClick($scope.objTreeView.objNodes.Elements[index - 1], null);
                            }
                            else {
                                $scope.SelectNodeClick($scope.objTreeView, null);
                            }
                        }
                    }
                });
            }
            else if ($itemScope.itm && $itemScope.itm.Name === "sfwXMLPanel") {
                $SgMessagesService.Message('Delete', 'Do you want to delete?', true, function (result) {
                    if (result) {
                        var index = $scope.CenterLeft.Elements.indexOf($itemScope.itm);
                        if (index > -1) {
                            $scope.CenterLeft.Elements.splice(index, 1);
                            $scope.SelectNodeClick($scope.CenterLeft.Elements[0], null);
                        }
                    }
                });
            }


        },
            function ($itemScope) {
                if ($itemScope.nodes) {
                    $scope.SelectedNode = $itemScope.nodes;

                } else if ($itemScope.itm) {
                    $scope.SelectedNode = $itemScope.itm;
                }
                if (($itemScope.nodes && $itemScope.nodes.Name === "sfwTreeNode") || ($itemScope.itm && $itemScope.itm.Name === "sfwXMLPanel")) {
                    return true;
                }
                else {
                    return false;
                }
            }], null,

        ['Copy', function ($itemScope) {
            copyItem = angular.copy($itemScope.nodes, copyItem);
        },
            function ($itemScope) {
                if ($itemScope.nodes && $itemScope.nodes.Name === "sfwTreeNode") {
                    return true;
                }
                else {
                    return false;
                }
            }], null,
        ['Paste', function ($itemScope) {
            $scope.objTreeView.objNodes.Elements.push(copyItem);
            copyItem = null;
        },
            function ($itemScope) {
                if (copyItem && copyItem.dictAttributes) {
                    return true;
                }

            }], null,
        ['Rename', function ($itemScope) {
            var newScope = $scope.$new();
            if ($itemScope.itm) {
                newScope.newRuleID = $itemScope.itm.dictAttributes.ID;
                var dialog = $rootScope.showDialog(newScope, "Edit ID", "Entity/views/AddRule.html", {
                    width: 500, height: 180
                });

                newScope.addNewRule = function () {
                    $scope.SelectedNode.dictAttributes.ID = newScope.newRuleID;
                    newScope.closeNewRule();
                }
                newScope.closeNewRule = function () {

                    dialog.close();
                }

                newScope.validateNewGroup = function ($itemScope) {
                    newScope.groupErrorMessageForDisplay = "";
                    if (!newScope.newRuleID) {
                        newScope.groupErrorMessageForDisplay = "Error: ID cannot be empty.";
                        return true;
                    }
                    else {
                        var flag = $ValidationService.findDuplicateId($scope.CenterLeft, newScope.newRuleID, ["sfwTreeView", "sfwXMLPanel"], "", null, "dictAttributes.ID");
                        if (flag) {
                            newScope.groupErrorMessageForDisplay = "Error:Duplicate ID present. Please enter another ID.";
                            return true;
                        }
                    }
                }
            }
        },
            function ($itemScope) {
                if ($itemScope.nodes && $itemScope.nodes.Name === "sfwTreeNode") {
                    return false;
                }
                else if (!$itemScope.nodes && !$itemScope.itm) {
                    return false;
                }
                else {
                    return true;
                }
            }], null,
    ];
    //#endregion

    //#region Add Control

    $scope.AddControlCommand = function (cntrlType) {
        if (cntrlType) {
            if (cntrlType == "TreeNode") {
                $scope.AddTreeNode();
            }
            else if (cntrlType == "XmlPanelNode") {
                $scope.AddXmlPanelNode();
            }
        }
    };
    //#endregion

    //#region Add Tree Node
    $scope.AddTreeNode = function () {

        if ($scope.CenterLeft) {
            if ($scope.objTreeView && $scope.objTreeView.objNodes) {
                var objNodechild = { Name: 'sfwTreeNode', Value: '', dictAttributes: {}, Elements: [] };
                $scope.objTreeView.objNodes.Elements.push(objNodechild);
            }
            else {
                $scope.objTreeView = { Name: 'sfwTreeView', Value: '', dictAttributes: {}, Elements: [] };
                $scope.objTreeView.dictAttributes.ID = "trvCenterLeft";
                $scope.objTreeView.IsExpanded = true;
                $scope.objTreeView.objNodes = { Name: 'Nodes', Value: '', dictAttributes: {}, Elements: [] };
                $scope.objTreeView.Elements.push($scope.objTreeView.objNodes);

                var objNodechild = { Name: 'sfwTreeNode', Value: '', dictAttributes: {}, Elements: [] };
                $scope.objTreeView.objNodes.Elements.push(objNodechild);
                $scope.CenterLeft.Elements.push($scope.objTreeView);

            }

            $scope.SelectNodeClick(objNodechild, null);
        }
    };

    $scope.CheckAndCreateModel = function (modelName, Parent) {
        var objModel = undefined;
        var lstModel = Parent.Elements.filter(function (x) { return x.Name === modelName });
        if (lstModel && lstModel.length > 0) {
            objModel = lstModel[0];
        }
        else {
            objModel = { Name: modelName, Value: '', dictAttributes: {}, Elements: [] };
            Parent.Elements.push(objModel);
        }
        return objModel;
    };
    //#endregion


    //#region Add Xml Panel Node
    $scope.AddXmlPanelNode = function () {
        var xmlPanelNodeModel = null;
        xmlPanelNodeModel = { Name: 'sfwXMLPanel', Value: '', dictAttributes: {}, Elements: [] };
        xmlPanelNodeModel.dictAttributes.ID = GetNewStepName("XmlPanelNode", $scope.CenterLeft, 1);
        $scope.CenterLeft.Elements.push(xmlPanelNodeModel);
        $scope.SelectNodeClick(xmlPanelNodeModel, null);

    };
    //#endregion

    $scope.togglebuttonForTreeView = function (item) {
        item.IsExpanded = !item.IsExpanded;
    };

    $scope.toggleRootNode = function () {
        $scope.togglebuttonForTreeView($scope);
    }

    $scope.SelectNodeClick = function (obj, event) {

        $scope.SelectedNode = obj;
        if (event != null) {
            event.stopPropagation();
        }
    };

    $scope.onNavigationParamsClick = function () {
        var newScope = $scope.$new();
        if ($scope.SelectedNode) {
            newScope.SelectedObject = $scope.SelectedNode;
            newScope.IsForm = true;
            newScope.IsMultiActiveForm = false;
            newScope.formobject = $scope.formmodel;
            newScope.NavigationParameterDialog = $rootScope.showDialog(newScope, "Navigation Parameters", "Form/views/ParameterNavigation.html", { width: 1000, height: 520 });
        }
    };
    $scope.Init();
}]);
app.controller("BindToQueryController", ["$scope", "$rootScope", "ngDialog", "$GetEntityFieldObjectService", "$Entityintellisenseservice", "$getModelList", "$EntityIntellisenseFactory", function ($scope, $rootScope, ngDialog, $GetEntityFieldObjectService, $Entityintellisenseservice, $getModelList, $EntityIntellisenseFactory) {
    $scope.lstQueryLoadType = ["Solution", "New and Update", "New", "Update"];
    $scope.IsGridChildOfListView = false;
    $scope.entityName = $scope.formobject.dictAttributes.sfwEntity;

    $scope.getParentEntityName = function (model) {
        if ($scope.formobject && model) {
            if (model.dictAttributes.sfwParentGrid) {
                var parentGrid = FindControlByID($scope.formobject, model.dictAttributes.sfwParentGrid);
                var objParentField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.formobject.dictAttributes.sfwEntity, parentGrid.dictAttributes.sfwEntityField);
                if (objParentField) {
                    $scope.entityName = objParentField.Entity;
                }
            }
            else if (model.IsGridChildOfListView) {
                $scope.IsGridChildOfListView = true;
                if (model.Name == "sfwGridView") {
                    var listViewparent = FindParent(model, "sfwListView");
                    if (listViewparent) {
                        var object = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.formobject.dictAttributes.sfwEntity, listViewparent.dictAttributes.sfwEntityField);
                        if (object) {
                            $scope.entityName = object.Entity;
                        }
                    }
                }
                else if (model.Name == "sfwColumn") {
                    var listViewparent = FindParent(model, "sfwListView");
                    if (listViewparent) {
                        var object = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.formobject.dictAttributes.sfwEntity, listViewparent.dictAttributes.sfwEntityField);
                        if (object) {
                            $scope.entityName = object.Entity;
                        }
                    }
                }
                else if (model.Name == "sfwListView") {

                    var object = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.formobject.dictAttributes.sfwEntity, model.dictAttributes.sfwEntityField);
                    if (object) {
                        $scope.entityName = object.Entity;
                    }
                }
            }
        }
    }

    if ($scope.model) {
        $scope.blnBoundToQuery = $scope.model.dictAttributes.sfwBoundToQuery;
        $scope.strQueryLoadType = $scope.model.dictAttributes.sfwQueryLoadType;
        $scope.strBaseQuery = $scope.model.dictAttributes.sfwBaseQuery;
        $scope.strEntityField = $scope.model.dictAttributes.sfwEntityField;
        $scope.getParentEntityName($scope.model);

    }

    else if ($scope.dropdata) {
        $scope.getParentEntityName($scope.dropdata);
    }
    $scope.lstMappedFields = [];
    $scope.objTempGrid = {};
    $scope.lstQueryFields = [];
    $scope.GridEntityName;

    $scope.onBindToQuerySaveClick = function (conditions) {
        if ($scope.IsAddNewGrid) {
            var controlVM = $scope.dropdata;
            if (controlVM) {
                var cellVM = GetVM('sfwColumn', controlVM);
                if (cellVM) {

                    var newScope = $scope.$new();
                    newScope.objGridView = {
                        Name: 'sfwGridView',
                        prefix: 'swc',
                        Value: '',
                        dictAttributes: {
                            sfwEntityField: $scope.strEntityField,
                            sfwBoundToQuery: $scope.blnBoundToQuery,
                            sfwQueryLoadType: $scope.strQueryLoadType,
                            sfwBaseQuery: $scope.strBaseQuery,
                        },
                        Elements: [],
                        Children: []
                    };
                    var lstTable = $scope.formobject.Elements.filter(function (itm) { return itm.Name === "sfwTable" });
                    newScope.objGridView.LstDisplayedEntities = [];
                    newScope.objGridView.lstselectedmultiplelevelfield = [];
                    newScope.objGridView.selectedentityobjecttreefields = [];
                    newScope.cellVM = cellVM;
                    newScope.IsAddToExistingCell = true;
                    newScope.IsAddFromToolBox = true;
                    newScope.IsAddGridWithPanel = $scope.IsAddGridWithPanel;
                    newScope.selectedEntityField = $scope.SelectedField;
                    newScope.FormModel = $scope.formobject;
                    var objField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.entityName, $scope.strEntityField)
                    if (objField) {
                        newScope.ParentEntityName = objField.Entity;
                    }
                    if (lstTable && lstTable.length > 0) {
                        newScope.SfxMainTable = lstTable[0];
                    }
                    //newScope.GridEntityField = gridEntityField;
                    newScope.title = "Create New Grid";
                    //newScope.LstDisplayedEntities = $scope.LstDisplayedEntities;
                    if ($scope.formobject.dictAttributes.sfwType == "Tooltip") {
                        newScope.skipSecondStep = true;
                    }
                    if (newScope.FormModel && newScope.FormModel.dictAttributes.ID.startsWith("wfp")) {
                        newScope.IsPrototype = true;
                    }
                    else {
                        newScope.IsPrototype = false;
                    }
                    newScope.objGridDialog = $rootScope.showDialog(newScope, newScope.title, "Form/views/CreateGridViewControl.html", {
                        width: 1000, height: 700
                    });
                    newScope.setTitle = function (title) {
                        if (newScope.title) {
                            newScope.title = title;
                            newScope.objGridDialog.updateTitle(newScope.title);
                        }
                    };
                }
            }
        }
        else {
            $rootScope.UndRedoBulkOp("Start");

            $rootScope.EditPropertyValue($scope.model.dictAttributes.sfwEntityField, $scope.model.dictAttributes, "sfwEntityField", $scope.strEntityField);
            $rootScope.EditPropertyValue($scope.model.dictAttributes.sfwBoundToQuery, $scope.model.dictAttributes, "sfwBoundToQuery", $scope.blnBoundToQuery);
            $rootScope.EditPropertyValue($scope.model.dictAttributes.sfwQueryLoadType, $scope.model.dictAttributes, "sfwQueryLoadType", $scope.strQueryLoadType);
            $rootScope.EditPropertyValue($scope.model.dictAttributes.sfwBaseQuery, $scope.model.dictAttributes, "sfwBaseQuery", $scope.strBaseQuery);
            if ($scope.model.dictAttributes.sfwBoundToQuery === "True" && !$scope.model.dictAttributes.sfwBaseQuery && $scope.objgridboundedquery) {
                $scope.$evalAsync(function () { $scope.objgridboundedquery.IsQuery = false; });

            }
            var lsttemplatefields = $scope.model.Elements.length > 0 ? $scope.model.Elements[0].Elements : null;
            if (lsttemplatefields) {
                angular.forEach(lsttemplatefields, function (objtemplatefield) {
                    if (objtemplatefield.Elements.length > 0) {
                        var itemtemplate = objtemplatefield.Elements[0];
                        angular.forEach(itemtemplate.Elements, function (itemtemplatecontrol) {
                            if (itemtemplatecontrol.dictAttributes.sfwEntityField) {
                                for (i = 0; i < $scope.lstMappedFields.length; i++) {
                                    if ($scope.lstMappedFields[i].GridControl == itemtemplatecontrol.dictAttributes.sfwEntityField) {
                                        $rootScope.EditPropertyValue(itemtemplatecontrol.dictAttributes.sfwEntityField, itemtemplatecontrol.dictAttributes, "sfwEntityField", $scope.lstMappedFields[i].MappedControl);

                                        break;
                                    }
                                }
                            }
                        });
                    }
                });
            }


            var filescope = getCurrentFileScope();
            if (filescope) {
                if (filescope.selectControl) {
                    filescope.selectControl($scope.model, event);
                }
                if (filescope.LoadDetails) {
                    filescope.LoadDetails(true);
                }
            }
            $rootScope.UndRedoBulkOp("End");
            $scope.onCancelClick();
        }
    };

    $scope.onAfterOkGridClick = function () {
        if ($scope.onAfterOkClick) {
            $scope.onAfterOkClick();
        }
    }

    $scope.onCancelClick = function () {
        $scope.BindToQueryDialog.close();
    };

    $scope.ValidateGridView = function () {
        var retVal = false;
        $scope.ErrorMessage = "";
        if ($scope.blnBoundToQuery && $scope.blnBoundToQuery.toLowerCase() == "true") {
            if (!$scope.strBaseQuery) {
                retVal = true;
                $scope.ErrorMessage = "Error: Select Base Query For a Grid";
            }
            else {
                if (!$scope.strBaseQuery.contains(".")) {
                    retVal = true;
                    $scope.ErrorMessage = "Error: Invalid Query";
                }
                else {
                    var lst = $scope.strBaseQuery.split('.');
                    if (lst && lst.length == 2) {
                        var entityName = lst[0];
                        var strQueryID = lst[1];
                        var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                        var lstEntity = entityIntellisenseList.filter(function (x) { return x.ID == entityName; });
                        if (lstEntity && lstEntity.length > 0) {
                            var objEntity = lstEntity[0];
                            if (!objEntity.Queries.some(function (x) { return x.ID == strQueryID; })) {
                                $scope.ErrorMessage = "Error: Invalid Query";
                                retValue = true;
                            }
                        }
                        else {
                            $scope.ErrorMessage = "Error: Invalid Query";
                            retValue = true;
                        }
                    }
                }
            }
        }
        else {
            if ($scope.formobject && $scope.formobject.dictAttributes.sfwType !== "Lookup" && $scope.formobject.dictAttributes.sfwType !== "FormLinkLookup") {
                if (!$scope.strEntityField) {
                    retVal = true;
                    $scope.ErrorMessage = "Error: Select Collection For a Grid";
                }
                else {
                    //if ($scope.formobject && $scope.formobject.SelectedControl && $scope.formobject.SelectedControl.IsGridChildOfListView) {

                    //    if ($scope.model && $scope.model.Name == "sfwGridView") {
                    //        var listViewparent = FindParent($scope.model, "sfwListView");
                    //        if (listViewparent) {
                    //            var object = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.formobject.dictAttributes.sfwEntity, listViewparent.dictAttributes.sfwEntityField);
                    //            if (object && object.DataType !== "Collection" && object.DataType !== "List") {
                    //                $scope.ErrorMessage = "Error: Select valid collection for a grid.";
                    //                retVal = true;
                    //            }
                    //            else {
                    //                $scope.ErrorMessage = "Error: Select valid collection for a grid.";
                    //                retVal = true;
                    //            }
                    //        }
                    //    }
                    //}
                    //else {
                    var objField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.entityName, $scope.strEntityField)
                    if (!objField) {
                        $scope.ErrorMessage = "Error: Select valid collection for a grid.";
                        retVal = true;
                    }
                    else if (objField && objField.DataType !== "Collection" && objField.DataType !== "List") {
                        $scope.ErrorMessage = "Error: Select valid collection for a grid.";
                        retVal = true;
                    }
                    //}
                }
            }
        }
        return retVal;
    }

    $scope.BoundToQueryChange = function () {
        $scope.lstMappedFields = [];
        if ($scope.blnBoundToQuery && $scope.blnBoundToQuery.toLowerCase() == "true") {
            $scope.strEntityField = "";
        }
        else {
            $scope.strQueryLoadType = "";
            $scope.strBaseQuery = "";
        }
    };

    $scope.ExecuteQueryClick = function () {
        $scope.lstMappedFields = [];
        $scope.objTempGrid = GetBaseModel($scope.model);
        if ($scope.strEntityField || (!$scope.blnBoundToQuery && ($scope.formobject.dictAttributes.sfwType === "Lookup" || $scope.formobject.dictAttributes.sfwType === "FormLinkLookup"))) {
            var strgridentityname;
            var objgridentityfield = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.formobject.dictAttributes.sfwEntity, $scope.strEntityField);
            if (objgridentityfield) {
                strgridentityname = objgridentityfield.Entity;
            }
            else if ($scope.formobject.dictAttributes.sfwType === "Lookup" || $scope.formobject.dictAttributes.sfwType === "FormLinkLookup") {
                strgridentityname = $scope.formobject.dictAttributes.sfwEntity;
            }
            $scope.GridEntityName = strgridentityname;
            if ($scope.objTempGrid.Elements.length > 0) {
                var lsttemplatefields = $scope.objTempGrid.Elements[0].Elements;
                if (lsttemplatefields) {
                    angular.forEach(lsttemplatefields, function (objtemplatefield) {
                        if (objtemplatefield.Elements.length > 0) {
                            var itemtemplate = objtemplatefield.Elements[0];
                            angular.forEach(itemtemplate.Elements, function (itemtemplatecontrol) {
                                if (itemtemplatecontrol.dictAttributes.sfwEntityField && itemtemplatecontrol.Name !== "cellformat") {
                                    var blnMatchfound = false;
                                    if ($scope.blnBoundToQuery == "False") {
                                        var lstData = $Entityintellisenseservice.GetIntellisenseData(strgridentityname, "", "", true, true, false, false, false, false);
                                        if (lstData) {
                                            for (i = 0; i < lstData.length; i++) {
                                                if (lstData[i].Value == itemtemplatecontrol.dictAttributes.sfwEntityField) {
                                                    blnMatchfound = true;

                                                    $scope.lstMappedFields.push({ GridControl: itemtemplatecontrol.dictAttributes.sfwEntityField, MappedControl: lstData[i].ID });
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        var objField;
                                        if (strgridentityname) {
                                            objField = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(strgridentityname, itemtemplatecontrol.dictAttributes.sfwEntityField);
                                        }
                                        if (objField) {
                                            blnMatchfound = true;

                                            $scope.lstMappedFields.push({ GridControl: itemtemplatecontrol.dictAttributes.sfwEntityField, MappedControl: itemtemplatecontrol.dictAttributes.sfwEntityField });
                                        }
                                    }


                                    if (!blnMatchfound) {
                                        $scope.lstMappedFields.push({ GridControl: itemtemplatecontrol.dictAttributes.sfwEntityField, MappedControl: "" });

                                        itemtemplatecontrol.dictAttributes.sfwEntityField = "";
                                    }

                                }
                            });
                        }

                    });
                }
            }
        }
        else if ($scope.strBaseQuery && $scope.objTempGrid) {
            var strgridentityname;
            var objgridentityfield = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField($scope.formobject.dictAttributes.sfwEntity, $scope.objTempGrid.dictAttributes.sfwEntityField);
            if (objgridentityfield) {
                strgridentityname = objgridentityfield.Entity;
            }

            //dummy dialog id is given as second parameter in below call, so that it gets the column alias name from query instead of actual columns.
            $.connection.hubForm.server.getEntityQueryColumns($scope.strBaseQuery, 'dummy').done(function (data) {
                $scope.$evalAsync(function () {
                    if (data && $scope.objTempGrid.Elements.length > 0) {
                        $scope.lstQueryFields = $getModelList.getModelListFromQueryFieldlist(data);
                        var lsttemplatefields = $scope.objTempGrid.Elements[0].Elements;
                        if (lsttemplatefields) {
                            angular.forEach(lsttemplatefields, function (objtemplatefield) {
                                if (objtemplatefield.Elements.length > 0) {
                                    var itemtemplate = objtemplatefield.Elements[0];
                                    angular.forEach(itemtemplate.Elements, function (itemtemplatecontrol) {
                                        if (itemtemplatecontrol.dictAttributes.sfwEntityField && itemtemplatecontrol.Name !== "cellformat") {
                                            if (strgridentityname) {

                                                var object = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(strgridentityname, itemtemplatecontrol.dictAttributes.sfwEntityField);
                                                if (object) {
                                                    var blnMatchfound = false;
                                                    for (i = 0; i < data.length; i++) {

                                                        if (data[i].CodeID == object.Value) {
                                                            blnMatchfound = true;

                                                            $scope.lstMappedFields.push({ GridControl: itemtemplatecontrol.dictAttributes.sfwEntityField, MappedControl: data[i].CodeID })
                                                            break;
                                                        }

                                                    }
                                                    if (!blnMatchfound) {
                                                        $scope.lstMappedFields.push({ GridControl: itemtemplatecontrol.dictAttributes.sfwEntityField, MappedControl: "" })
                                                    }
                                                } else {
                                                    $scope.lstMappedFields.push({ GridControl: itemtemplatecontrol.dictAttributes.sfwEntityField, MappedControl: "" })
                                                }
                                            }
                                            else {
                                                var blnMatchfound = false;
                                                for (i = 0; i < data.length; i++) {

                                                    if (data[i].CodeID == itemtemplatecontrol.dictAttributes.sfwEntityField) {
                                                        blnMatchfound = true;

                                                        $scope.lstMappedFields.push({ GridControl: itemtemplatecontrol.dictAttributes.sfwEntityField, MappedControl: data[i].CodeID })
                                                        break;
                                                    }

                                                }
                                                if (!blnMatchfound) {
                                                    $scope.lstMappedFields.push({ GridControl: itemtemplatecontrol.dictAttributes.sfwEntityField, MappedControl: "" })
                                                }
                                            }
                                        }
                                    });
                                }

                            });
                        }
                    }
                });
            });
        }
    };

    $scope.setRowSelection = function (value) {
        $scope.selectedfield = value;
    };

}]);
app.directive("baseControlView", ["$compile", "CONSTANTS", "$rootScope", "$EntityIntellisenseFactory", "$GetEntityFieldObjectService", "$ValidationService", "$SgMessagesService", function ($compile, CONST, $rootScope, $EntityIntellisenseFactory, $GetEntityFieldObjectService, $ValidationService, $SgMessagesService) {
    return {
        restrict: "E",
        replace: true,
        scope: {
            model: '=',
            formodel: '=',
            objparent: '=',
            lstloadedentitytrees: '=',
            lstloadedentitycolumnstree: '=',
            lstdisplayentities: '=',
            entitytreename: '=',
            buttonsCollection: '='
        },
        // templateUrl: 'Form/views/Controls/BaseControlView.html',
        template: "<div context-menu='controlmenuOptions' class='form-control-wrapper' ng-class='{\"form-invisible-control\" : model.dictAttributes.Visible === \"False\"}'>  <span show-errors model='model'></span> </div>",

        link:
        {
            pre: function (scope, element, attributes) {

                if (scope.model.Name == 'sfwTextBox' || scope.model.Name == 'sfwLabel' || scope.model.Name == 'sfwDropDownList' || scope.model.Name == 'sfwMultiSelectDropDownList'
                    || scope.model.Name == 'sfwCascadingDropDownList') {
                    element.append("<editable-control-directive model='model' formodel='formodel' lstloadedentitycolumnstree='lstloadedentitycolumnstree' />");
                }
                else if (scope.model.Name == 'sfwGridView') {
                    element.append("<grid-control-directive model='model' formodel='formodel' objparent='objparent' lstloadedentitytrees='lstloadedentitytrees' lstloadedentitycolumnstree='lstloadedentitycolumnstree' lstdisplayentities='lstdisplayentities' entitytreename='entitytreename'  buttons-collection='buttonsCollection'/>");
                }
                else if (scope.model.Name == 'sfwTable') {
                    element.append("<table-control-directive model='model' formodel='formodel' objparent='objparent' lstloadedentitytrees='lstloadedentitytrees' lstloadedentitycolumnstree='lstloadedentitycolumnstree' lstdisplayentities='lstdisplayentities' entitytreename='entitytreename'  buttons-collection='buttonsCollection'/>");
                }
                else if (scope.model.Name == 'sfwTabContainer') {
                    element.append("<tabcontainer-control-directive model='model' formodel='formodel' objparent='objparent' lstloadedentitytrees='lstloadedentitytrees' lstloadedentitycolumnstree='lstloadedentitycolumnstree' lstdisplayentities='lstdisplayentities' entitytreename='entitytreename'  buttons-collection='buttonsCollection'/>");
                }
                else if (scope.model.Name == 'udc') {
                    element.append("<usercontrol-control-directive model='model' formodel='formodel' objparent='objparent' lstloadedentitytrees='lstloadedentitytrees' lstloadedentitycolumnstree='lstloadedentitycolumnstree' lstdisplayentities='lstdisplayentities' entitytreename='entitytreename' buttons-collection='buttonsCollection'/>");
                }
                else if (scope.model.Name == 'sfwPanel' || scope.model.Name == 'sfwDialogPanel' || scope.model.Name == 'sfwListView') {
                    element.append("<childpanel-control-directive model='model' formodel='formodel' objparent='objparent' lstloadedentitytrees='lstloadedentitytrees' lstloadedentitycolumnstree='lstloadedentitycolumnstree' lstdisplayentities='lstdisplayentities' entitytreename='entitytreename'  buttons-collection='buttonsCollection'/>");
                }
                else if (scope.model.Name == 'sfwButtonGroup') {
                    element.append("<emptyparent-control-directive></emptyparent-control-directive>");
                }
                else {
                    element.append("<common-control-directive model='model' formodel='formodel'/>");
                }
                //     if (scope.model.Name == 'sfwCheckBoxList' || scope.model.Name == 'sfwRadioButtonList' || scope.model.Name == 'sfwChart' || scope.model.Name == 'sfwCalendar' || scope.model.Name == 'sfwScheduler' |
                //     scope.model.Name=='sfwCheckBox' || scope.model.Name=='CompareValidator' || scope.model.Name=='sfwFileLayout' || scope.model.Name=='sfwSourceList' || scope.model.Name=='sfwRadioButton' || scope.model.Name=='sfwSlider'
                //|| scope.model.Name=='sfwImage' || scope.model.Name=='sfwCRViewer' || scope.model.Name=='sfwFileUpload' || scope.model.Name=='sfwMultiCorrespondence' || scope.model.Name=='sfwOpenDetail' || scope.model.Name=='sfwQuestionnairePanel'
                //|| scope.model.Name=='RequiredFieldValidator' || scope.model.Name=='sfwSoftErrors' || scope.model.Name=='sfwListPicker' || scope.model.Name=='sfwTargetList' || scope.model.Name=='sfwRuleViewer' || scope.model.Name=='sfwListBox'
                //|| scope.model.Name == 'sfwJSONData' || scope.model.Name == 'br' || scope.model.Name == 'hr' || scope.model.Name == 'sfwKnob' || scope.model.Name == 'sfwDateTimePicker' || scope.model.Name == 'sfwLiteral'
                //   || scope.model.Name == 'sfwButton' || scope.model.Name == 'sfwLinkButton' || scope.model.Name == 'sfwImageButton' || scope.model.Name == 'sfwHyperLink')

                $compile(element.contents())(scope);
            },
            post: function (scope, element, attributes) {
                if (scope.objparent) {
                    scope.model.ParentVM = scope.objparent;
                }

                scope.controlmenuOptions = [
                    ['Create Compatible Caption', function ($itemScope) {
                        if (scope.model) {
                            scope.OnCreateCompatibleLabelClick(scope.model, scope.formodel, $EntityIntellisenseFactory, $rootScope);
                        }
                    }, function ($itemScope, event) {
                        if (scope.model.Name == 'sfwTable') {
                            return false;
                        }
                        if ($itemScope.tabs) {
                            scope.selectControl($itemScope.tabs, event, scope.formodel);
                        }
                        else {
                            selectControl(scope.model, event, scope.formodel);
                        }
                        if ((scope.model && scope.model.dictAttributes.sfwIsCaption) || scope.IsDataView) {
                            return false;
                        }
                        else if (scope.model && (scope.model.Name == "sfwGridView" || scope.model.Name == "sfwChart" || scope.model.Name == "sfwPanel" ||
                            scope.model.Name == "sfwDialogPanel" || scope.model.Name == "sfwButton" || scope.model.Name == "sfwLinkButton" || scope.model.Name == "sfwImageButton" || scope.model.Name == "sfwTabContainer" || scope.model.Name == "sfwTabSheet"
                            || scope.model.Name == "udc" || scope.model.Name == "sfwListViewer" || scope.model.Name == "sfwButtonGroup")) {
                            return false;
                        }
                        else {
                            if (FindParent(scope.model, "sfwGridView") || FindParent(scope.model, "sfwButtonGroup")) {
                                return false;
                            }
                            else if (hasCaption(scope.model)) {
                                return false;
                            }
                            return true;
                        }
                    }],

                    ['Cut Control', function ($itemScope) {
                        if (scope.model) {
                            scope.OnCutControlClick(scope.model);
                        }
                    }, function ($itemScope) {
                        if (scope.model.Name == 'sfwTable') {
                            return false;
                        }
                        if ((scope.formodel && scope.formodel.dictAttributes.sfwType == "Lookup" && scope.model && (scope.model.Name == "sfwTabContainer" || scope.model.Name == "sfwGridView")) || scope.IsDataView || scope.model.Name == "sfwToolTipButton") {
                            return false;
                        }
                        return true;

                    }, null, "Ctrl+X"],
                    ['Copy Control', function ($itemScope) {
                        if (scope.model) {
                            scope.OnCopyControlClick(scope.model);
                        }
                    }, function ($itemScope) {
                        if (scope.model.Name == 'sfwTable') {
                            return false;
                        }
                        if ((scope.formodel && scope.formodel.dictAttributes.sfwType == "Lookup" && scope.model && (scope.model.Name == "sfwTabContainer" || scope.model.Name == "sfwGridView")) || scope.IsDataView || scope.model.Name == "sfwToolTipButton") {
                            return false;
                        }
                        return true;
                    }, null, "Ctrl+C"],
                    ['Delete Control', function ($itemScope) {
                        if (scope.model) {
                            scope.OnDeleteControlClick(scope.model);
                        }
                    }, function ($itemScope) {
                        if (scope.model.Name == 'sfwTable') {
                            return false;
                        }
                        if ((scope.formodel && scope.formodel.dictAttributes.sfwType == "Lookup" && scope.model.Name == "sfwTabContainer") || scope.IsDataView) {
                            return false;
                        }
                        if (scope.formodel && scope.formodel.dictAttributes.sfwType == "Lookup" && scope.model.Name == "sfwGridView" && !scope.formodel.IsLookupCriteriaEnabled) {
                            return false;
                        }
                        return true;

                    }],
                    ['Add Control', function ($itemScope) {
                        if ($itemScope.model) {
                            scope.openChangeControlDialog("addcontrol", $itemScope.model);
                        }
                    }, function ($itemScope) {
                        if (scope.model.Name == 'sfwButtonGroup') {
                            return true;
                        } else {
                            return false;
                        }
                    }],

                    ['Change Control', function () {
                        if (scope.model) {
                            scope.openChangeControlDialog("changecontrol", null);
                        }
                    }, function ($itemScope) {
                        if (scope.model.Name == 'sfwTable') {
                            return false;
                        }
                        if (scope.model && (scope.model.Name == "sfwTabContainer" || scope.model.Name == "sfwCheckBoxList" || scope.model.Name == "sfwChart" ||
                            scope.model.Name == "sfwGridView" || scope.model.Name == "sfwPanel" || scope.model.Name == "sfwDialogPanel" ||
                            scope.model.Name == "sfwListView" || scope.model.Name == "sfwScheduler" || scope.model.Name == "sfwCalendar"
                            || scope.model.Name == "sfwSoftErrors") || scope.IsDataView) {
                            return false;
                        }
                        else {
                            return true;
                        }
                    }],
                    ['Add Columns', function () {
                        if (scope.model) {
                            scope.OnAddGridColumns();
                        }
                    }, function ($itemScope) {
                        if (scope.model.Name == 'sfwTable') {
                            return false;
                        }
                        if (scope.model && scope.model.Name == "sfwGridView" && !scope.IsDataView) {
                            return true;
                        }
                        return false;
                    }],
                    ['Paste Control', function ($itemScope) {
                        if (scope.model) {
                            scope.OnPasteControl(scope.model);
                        }
                    }, function ($itemScope) {
                        if (FindParent(scope.model, "sfwGridView") || scope.model.Name == "sfwButtonGroup") {
                            return true;
                        }
                        else {
                            return false;
                        }
                    }, null, "Ctrl+V"],
                    ['Clear Cell', function ($itemScope) {
                        var cellVM = $itemScope.model;
                        while (cellVM.Name != "sfwColumn") {
                            if (cellVM.ParentVM == null) {
                                break;
                            }
                            cellVM = cellVM.ParentVM;
                        }
                        if (cellVM.Name == "sfwColumn") {
                            ClearCell(cellVM, $rootScope, true);

                        }
                    }, function ($itemScope) {
                        if (scope.model.Name == 'sfwTable') {
                            return false;
                        }
                        if (scope.formodel && scope.formodel.dictAttributes.sfwType == "Lookup" && scope.model.Name == "sfwGridView" && !scope.formodel.IsLookupCriteriaEnabled) {
                            return false;
                        }
                        return scope.CanShowContextMenu($itemScope.model, $itemScope.formodel);
                    }],
                    ['Clear Panel', function ($itemScope) {
                        if ($itemScope.model) {
                            var cellVM = FindParent($itemScope.model, "sfwColumn", true);
                            var tableVM = cellVM.ParentVM.ParentVM;
                            scope.OnClearGridClick(tableVM);
                        }
                    }, function ($itemScope) {
                        if (scope.model.Name == 'sfwTable') {
                            return false;
                        }
                        if (scope.formodel && scope.formodel.dictAttributes.sfwType == "Lookup" && !scope.formodel.IsLookupCriteriaEnabled) {
                            return false;
                        }
                        return scope.CanShowContextMenu($itemScope.model, $itemScope.formodel);
                    }, null, "Shift+Del"],
                    ['Delete Row', function ($itemScope) {
                        if ($itemScope.model) {
                            var cellVM = $itemScope.model;
                            while (cellVM.Name != "sfwColumn") {
                                if (cellVM.ParentVM == null) {
                                    break;
                                }
                                cellVM = cellVM.ParentVM;
                            }
                            if (cellVM.Name == "sfwColumn") {
                                var tableVM = cellVM.ParentVM.ParentVM;
                                var rowVM = cellVM.ParentVM;
                                scope.OnDeleteRowClick(rowVM, tableVM);
                            }
                        }
                    }, function ($itemScope) {
                        if (scope.model.Name == 'sfwTable') {
                            return false;
                        }
                        if (scope.formodel && scope.formodel.dictAttributes.sfwType == "Lookup" && scope.model.Name == "sfwGridView" && !scope.formodel.IsLookupCriteriaEnabled) {
                            return false;
                        }
                        return scope.CanShowContextMenu($itemScope.model, $itemScope.formodel);
                    }, null, null, "Ctrl+Del"],
                    ['Delete Column', function ($itemScope) {
                        if ($itemScope.model) {
                            var cellVM = $itemScope.model;
                            while (cellVM.Name != "sfwColumn") {
                                if (cellVM.ParentVM == null) {
                                    break;
                                }
                                cellVM = cellVM.ParentVM;
                            }
                            if (cellVM.Name == "sfwColumn") {
                                var tableVM = cellVM.ParentVM.ParentVM;
                                scope.OnDeleteColumnClick(cellVM, tableVM);
                            }
                        }
                    }, function ($itemScope) {
                        if (scope.model.Name == 'sfwTable') {
                            return false;
                        }
                        if (scope.formodel && scope.formodel.dictAttributes.sfwType == "Lookup" && scope.model.Name == "sfwGridView" && !scope.formodel.IsLookupCriteriaEnabled) {
                            return false;
                        }
                        return scope.CanShowContextMenu($itemScope.model, $itemScope.formodel);
                    }, null, null, "Ctrl+Shift+Del"],
                    ['Insert', [
                        ['Row Above ', function ($itemScope) {
                            if ($itemScope.model) {
                                var cellVM = $itemScope.model;
                                while (cellVM.Name != "sfwColumn") {
                                    if (cellVM.ParentVM == null) {
                                        break;
                                    }
                                    cellVM = cellVM.ParentVM;
                                }
                                if (cellVM.Name == "sfwColumn") {
                                    var tableVM = cellVM.ParentVM.ParentVM;
                                    scope.OnInsertRowAboveClick(cellVM, tableVM);
                                }
                            }
                        }, null, null, "Ctrl+Shift+A"],
                        ['Row Below', function ($itemScope) {
                            if ($itemScope.model) {
                                var cellVM = $itemScope.model;
                                while (cellVM.Name != "sfwColumn") {
                                    if (cellVM.ParentVM == null) {
                                        break;
                                    }
                                    cellVM = cellVM.ParentVM;
                                }
                                if (cellVM.Name == "sfwColumn") {
                                    var tableVM = cellVM.ParentVM.ParentVM;
                                    scope.OnInsertRowBelowClick(cellVM, tableVM);
                                }
                            }
                        }, null, null, "Ctrl+Shift+B"],
                        ['Column Left', function ($itemScope) {
                            if ($itemScope.model) {
                                var cellVM = $itemScope.model;
                                while (cellVM.Name != "sfwColumn") {
                                    if (cellVM.ParentVM == null) {
                                        break;
                                    }
                                    cellVM = cellVM.ParentVM;
                                }
                                if (cellVM.Name == "sfwColumn") {
                                    var tableVM = cellVM.ParentVM.ParentVM;
                                    scope.OnInsertColumnLeftClick(cellVM, tableVM);
                                }
                            }
                        }, null, null, "Ctrl+Shift+L"],
                        ['Column Right', function ($itemScope) {
                            if ($itemScope.model) {
                                var cellVM = $itemScope.model;
                                while (cellVM.Name != "sfwColumn") {
                                    if (cellVM.ParentVM == null) {
                                        break;
                                    }
                                    cellVM = cellVM.ParentVM;
                                }
                                if (cellVM.Name == "sfwColumn") {
                                    var tableVM = cellVM.ParentVM.ParentVM;
                                    scope.OnInsertColumnRightClick(cellVM, tableVM);
                                }
                            }
                        }, null, null, "Ctrl+Shift+R"],
                    ], function ($itemScope) {
                        if (scope.model.Name == 'sfwTable') {
                            return false;
                        }
                        return scope.CanShowContextMenu($itemScope.model, $itemScope.formodel);
                    }],
                    ['Move', [
                        ['Row Up', function ($itemScope) {
                            if ($itemScope.model) {
                                var cellVM = $itemScope.model;
                                while (cellVM.Name != "sfwColumn") {
                                    if (cellVM.ParentVM == null) {
                                        break;
                                    }
                                    cellVM = cellVM.ParentVM;
                                }
                                if (cellVM.Name == "sfwColumn") {
                                    var tableVM = cellVM.ParentVM.ParentVM;
                                    scope.OnMoveRowUpClick(cellVM, tableVM);
                                }
                            }
                        }, null, null, "Ctrl+U"],
                        ['Row Down', function ($itemScope) {
                            if ($itemScope.model) {
                                var cellVM = $itemScope.model;
                                while (cellVM.Name != "sfwColumn") {
                                    if (cellVM.ParentVM == null) {
                                        break;
                                    }
                                    cellVM = cellVM.ParentVM;
                                }
                                if (cellVM.Name == "sfwColumn") {
                                    var tableVM = cellVM.ParentVM.ParentVM;
                                    scope.OnMoveRowDownClick(cellVM, tableVM);
                                }
                            }
                        }, null, null, "Ctrl+D"],
                        ['Column Left', function ($itemScope) {
                            if ($itemScope.model) {
                                var cellVM = $itemScope.model;
                                while (cellVM.Name != "sfwColumn") {
                                    if (cellVM.ParentVM == null) {
                                        break;
                                    }
                                    cellVM = cellVM.ParentVM;
                                }
                                if (cellVM.Name == "sfwColumn") {
                                    var tableVM = cellVM.ParentVM.ParentVM;
                                    scope.OnMoveColumnLeftClick(cellVM, tableVM);
                                }
                            }
                        }, null, null, "Ctrl+L"],
                        ['Column Right', function ($itemScope) {
                            if ($itemScope.model) {
                                var cellVM = $itemScope.model;
                                while (cellVM.Name != "sfwColumn") {
                                    if (cellVM.ParentVM == null) {
                                        break;
                                    }
                                    cellVM = cellVM.ParentVM;
                                }
                                if (cellVM.Name == "sfwColumn") {
                                    var tableVM = cellVM.ParentVM.ParentVM;
                                    scope.OnMoveColumnRightClick(cellVM, tableVM);
                                }
                            }
                        }, null, null, "Ctrl+R"],
                    ], function ($itemScope) {
                        if (scope.model.Name == 'sfwTable') {
                            return false;
                        }
                        return scope.CanShowContextMenu($itemScope.model, $itemScope.formodel);
                    }],
                    ['Constraint', function ($itemScope) {
                        //Check if entity is set.
                        if (scope.entitytreename) {
                            var entityName = scope.entitytreename;

                            var object = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(entityName, scope.model.dictAttributes.sfwEntityField);
                            if (object) {
                                if (object.DeclaringEntity) {
                                    entityName = object.DeclaringEntity;
                                }
                            }

                            //Check if entity file is already open, then show a message that first close file 'entity name'
                            var entityAlreadyOpened = $rootScope.lstopenedfiles.some(function (file) {
                                if (file.file.FileName == entityName) {
                                    return true;
                                }
                            });

                            if (entityAlreadyOpened) {
                                $SgMessagesService.Message('Close Entity', 'Entity file is currently open. Please close the entity file and try again.');
                            }
                            else {
                                //Check if entity is valid.
                                var entity = $EntityIntellisenseFactory.getEntityIntellisense().filter(function (x) { return x.ID === entityName })[0];
                                if (entity) {
                                    var entityFieldsSplit = scope.model.dictAttributes.sfwEntityField.split(".");
                                    //Check if attribute is belongs to the entity.
                                    var attribute = entity.Attributes.filter(function (x) { return x.ID === entityFieldsSplit[entityFieldsSplit.length - 1]; })[0];
                                    if (attribute) {
                                        if (["column", "property"].indexOf(attribute.Type.toLowerCase()) === -1) {
                                            $SgMessagesService.Message('Invalid Attribute', 'Constraint can be added only for properties and columns.');
                                        }
                                        else {
                                            addEditAttributeConstraint(scope, attribute.ID, null, entityName, true);
                                        }
                                    }
                                    else {
                                        $SgMessagesService.Message('Invalid Attribute', 'Please set the valid attribute for the control.');
                                    }

                                }
                                else {
                                    $SgMessagesService.Message('Invalid Entity', 'Please set the valid entity.');
                                }
                            }
                        }
                        else {
                            $SgMessagesService.Message('Entity Not Set', 'Please set the entity for form.');
                        }
                    }, function ($itemScope) {
                        var retValue = false;
                        if (scope.model.dictAttributes.sfwEntityField && ["sfwGridView", "sfwChart", "sfwCalendar", "sfwScheduler", "sfwListView","sfwCheckBoxList"].indexOf(scope.model.Name) === -1) {
                            retValue = true;
                        }
                        return retValue;
                    }],
                ];

                //#region create compatible label
                scope.OnCreateCompatibleLabelClick = function (obj) {
                    if (obj) {
                        var objCtrl = obj;
                        CreateCompatibleLabel(objCtrl, scope.formodel, $EntityIntellisenseFactory, $rootScope);
                    }
                };

                //#endregion

                scope.OnAddControlToCellClick = function (cellVM, aParam, blnIsGrid) {
                    if (aParam) {
                        var strControlName = aParam;
                        if (strControlName == "sfwButton") {
                            var newScope = scope.$new(true);
                            newScope.item = cellVM;
                            newScope.formodel = scope.formodel;

                            newScope.CreateButtonDialog = $rootScope.showDialog(newScope, "Button Details", "Form/views/CreateButtonWizard/CreateButtonControl.html", { width: 660, height: 550 });

                        }
                        else if (strControlName == "sfwListView") {
                            scope.ErrorMessageForDisplay = "";
                            var strID = CreateControlID(scope.formodel, "RepeaterViewPanel", "sfwListView");
                            var prefix = "swc";
                            scope.objRepeaterControl = { Name: "sfwListView", value: '', prefix: prefix, dictAttributes: { ID: strID }, Elements: [], Children: [] };
                            scope.ParentEntityName = formodel.dictAttributes.sfwEntity;
                            scope.objRepeaterControl.selectedobjecttreefield;
                            scope.objRepeaterControl.lstselectedobjecttreefields = [];

                            var dialogScope = scope.$new(true);
                            dialogScope.objRepeaterControl = scope.objRepeaterControl;
                            dialogScope.objRepeaterControl.LstDisplayedEntities = [];
                            dialogScope.ParentEntityName = scope.ParentEntityName;
                            dialogScope.RepeaterControldialog = $rootScope.showDialog(dialogScope, "Repeater Control", "Form/views/RepeaterControlTemplate.html", { width: 500, height: 600 });
                        }
                        else {
                            var newScope = scope.$new();
                            AddControlToCell(cellVM, strControlName, undefined, blnIsGrid, scope.formodel, scope.model, $rootScope, newScope, $ValidationService, $GetEntityFieldObjectService);
                        }
                    }
                };
                //#region Change Control
                scope.openChangeControlDialog = function (actionType, cellVM, isGrid) {
                    var dialogScope = scope.$new(true);
                    var model = scope.model;
                    if (cellVM) {
                        model = cellVM;
                    }
                    dialogScope.errorMessage = "";
                    dialogScope.formType = scope.formodel.dictAttributes.sfwType;
                    dialogScope.controlName = "";
                    dialogScope.config = { formModel: scope.formodel, actionType: actionType };
                    dialogScope.lstControls = CONST.FORM.CONTROL_TYPES;
                    dialogScope.lstButtons = angular.copy(scope.buttonsCollection);
                    var dialogTitle = "Add Control";
                    if (actionType == "changecontrol") {
                        var list = dialogScope.lstControls.filter(function (control) {
                            if (control && scope.model && control.method != scope.model.Name) {
                                return control;
                            }
                        });
                        dialogScope.lstControls = list;
                        dialogTitle = "Change Control";
                    }

                    if ((model.IsChildOfGrid || isGrid) && dialogScope.lstControls && dialogScope.lstControls.length > 0) { // alllow controls inside grid
                        var list = dialogScope.lstControls.filter(function (ctrl) { if (ctrl && (ctrl.allowInParent.indexOf("sfwGrid") > -1)) { return ctrl; } });
                        dialogScope.lstControls = list;
                        var objGrid = undefined;
                        if (scope.model && scope.model.Name == "sfwGridView") {
                            objGrid = scope.model;
                        }
                        else {
                            objGrid = FindParent(model, "sfwGridView");
                        }


                        if (dialogScope.formType.toLowerCase() == "lookup" || (objGrid && objGrid.dictAttributes.sfwBoundToQuery && objGrid.dictAttributes.sfwBoundToQuery.toLowerCase() == "true")) {

                            /* control which are excluding from Lookup Grid/Bind to Query in maintenance .only Non-editable controls are allowed.*/
                            var excludeControlFromLookupGrid = ["sfwCascadingDropDownList", "sfwTextBox", "sfwSwitchCheckBox", "sfwRadioButtonList", "sfwRadioButton", "sfwMultiSelectDropDownList", "sfwDropDownList", "sfwCheckBoxList", "sfwCheckBox", "sfwDateTimePicker"];
                            var list = dialogScope.lstControls.filter(function (ctrl) { if (ctrl && (excludeControlFromLookupGrid.indexOf(ctrl.method) <= -1)) { return ctrl; } });
                            dialogScope.lstControls = list;
                        }
                    } else if (!model.IsChildOfGrid && dialogScope.lstControls && dialogScope.lstControls.length > 0) { // allowed all controls
                        var list = dialogScope.lstControls.filter(function (ctrl) { if (ctrl && (ctrl.allowInParent.indexOf("all") > -1)) { return ctrl; } });
                        dialogScope.lstControls = list;
                    }

                    if (scope.formodel.IsLookupCriteriaEnabled) {
                        if (dialogScope.lstControls && dialogScope.lstControls.length > 0) {
                            var list = dialogScope.lstControls.filter(function (ctrl) { if (ctrl && (ctrl.method != "sfwLabel" && ctrl.method != "sfwToolTipButton")) { return ctrl; } });
                            dialogScope.lstControls = list;
                        }
                    }
                    dialogScope.selectedControl = {};
                    dialogScope.selectedControl.control = null;
                    dialogScope.controltype = "basic";


                    dialogScope.customButton = {};
                    dialogScope.customButton.methodName = "";
                    dialogScope.disableOkBtn = function () {
                        dialogScope.errorMessage = "";
                        if (!dialogScope.selectedControl.control && dialogScope.controltype != "customButton") {
                            return true;
                        } else if (!dialogScope.customButton.methodName && dialogScope.controltype == "customButton") {
                            dialogScope.errorMessage = "Enter method name";
                            return true;
                        } else if (!isValidIdentifier(dialogScope.customButton.methodName, false, false) && dialogScope.controltype == "customButton") {
                            dialogScope.errorMessage = "Invalid method name";
                            return true;
                        }
                        return false;
                    };

                    var getButtonList = function () {
                        dialogScope.lstButtons = angular.copy(scope.buttonsCollection);
                        var btnList = [];
                        if (scope.model.Name == "sfwButton") {
                            btnList = dialogScope.lstButtons.filter(function (btn) {
                                if (btn && scope.model && scope.model.Name == "sfwButton" && btn.Method != scope.model.dictAttributes.sfwMethodName) {
                                    return btn;
                                }
                            });
                        } else {
                            btnList = dialogScope.lstButtons;
                        }
                        return btnList;
                    };
                    dialogScope.$watch('controltype', function (newValue, oldValue) {
                        dialogScope.customButton.methodName = '';
                        dialogScope.selectedControl.control = null;
                        if (newValue != oldValue && newValue == "sfwButton" || newValue == "sfwLinkButton") {
                            dialogScope.lstButtons = getButtonList();
                        } else if (newValue == "sfwImageButton") {
                            dialogScope.lstButtons = getButtonList();
                            var lstRetrieveBtn = dialogScope.lstButtons.filter(function (x) {
                                return x.Method == "btnRetrieve_Click";
                            });
                            if (lstRetrieveBtn && lstRetrieveBtn.length == 0) {
                                dialogScope.lstButtons.push({ "Description": "Retrieve Button", "Method": "btnRetrieve_Click" });
                            }

                        }
                    });
                    dialogScope.selectControlClick = function (objCtrl) {
                        dialogScope.selectedControl.control = objCtrl;
                    };

                    dialogScope.onOkButton = function (control) {
                        if (dialogScope.controltype == "basic") {
                            if (actionType == "addcontrol") {
                                scope.OnAddControlToCellClick(cellVM, control.method, isGrid);
                            } else if (actionType == "changecontrol") {
                                scope.OnChangeControlClick(control.method);
                            }
                        } else if (dialogScope.controltype == "customButton") {
                            if (actionType == "addcontrol") {
                                scope.OnAddControlToCellClick(cellVM, "sfwButton." + dialogScope.customButton.methodName, isGrid);
                            } else if (actionType == "changecontrol") {
                                scope.OnChangeControlClick("sfwButton." + dialogScope.customButton.methodName);
                            }
                        } else if (dialogScope.controltype == "sfwButton" || dialogScope.controltype == "sfwLinkButton" || dialogScope.controltype == "sfwImageButton") {
                            if (actionType == "addcontrol") {
                                scope.OnAddControlToCellClick(cellVM, dialogScope.controltype + "." + control.Method, isGrid);
                            } else if (actionType == "changecontrol") {
                                scope.OnChangeControlClick(dialogScope.controltype + "." + control.Method);
                            }

                        }
                        dialogScope.changeControlDialog.close();
                    };

                    dialogScope.closeDialog = function () {
                        dialogScope.changeControlDialog.close();
                    };

                    dialogScope.changeControlDialog = $rootScope.showDialog(dialogScope, dialogTitle, "Form/views/change_control.html", { width: 500, height: 600 });
                };

                scope.OnChangeControlClick = function (aParam) {
                    if (aParam) {
                        var strOldId = scope.model.dictAttributes.ID;

                        var newCntrl = CreateControl(scope.formodel, scope.model, aParam);

                        persistAttributes(scope.model, newCntrl);

                        if (scope.formodel && scope.formodel.dictAttributes.sfwType === "Lookup") {
                            if (scope.model.Name === "sfwLabel" && scope.model.IsChildOfGrid) {
                                if (scope.model.dictAttributes.sfwRelatedControl) {
                                    scope.model.dictAttributes.sfwRelatedControl = "";
                                }
                            }
                        }

                        if ($rootScope.lstWebControls && $rootScope.lstWebControls.length > 0 && newCntrl.Name && scope.model.dictAttributes && (scope.model.Name != "sfwButton" && scope.model.Name != "sfwLinkButton" && scope.model.Name != "sfwImageButton" && newCntrl.Name != "sfwButton" && newCntrl.Name != "sfwLinkButton" && newCntrl.Name != "sfwImageButton")) {
                            var lstAllPropety = $rootScope.lstWebControls.filter(function (x) {
                                return x.ControlName == newCntrl.Name;
                            });

                            lstAllPropety = JSON.parse(JSON.stringify(lstAllPropety));

                            if (lstAllPropety && lstAllPropety.length > 0 && lstAllPropety[0].lstCustom) {
                                angular.forEach(scope.model.dictAttributes, function (val, key) {

                                    //If an existing checkbox is converted to other control, don't need
                                    //to persist value of sfwIsSwitch attribute.
                                    if (key == "sfwIsSwitch") {
                                        return;
                                    }
                                    var lstCustomPropertyPresent = lstAllPropety[0].lstCustom.filter(function (x) {
                                        return x.PropertyName == key;
                                    });
                                    if (lstCustomPropertyPresent && lstCustomPropertyPresent.length > 0) {
                                        newCntrl.dictAttributes[key] = val;
                                    }
                                    else if (lstAllPropety[0].lstExtra) {
                                        var lstExtraPropertyPresent = lstAllPropety[0].lstExtra.filter(function (x) {
                                            return x.PropertyName == key;
                                        });
                                        if (lstExtraPropertyPresent && lstExtraPropertyPresent.length > 0) {
                                            newCntrl.dictAttributes[key] = val;
                                        }
                                    }
                                });
                                if (newCntrl && (newCntrl.Name == "sfwDropDownList" || newCntrl.Name == "sfwCascadingDropDownList" || newCntrl.Name == "sfwMultiSelectDropDownList" || newCntrl.Name == "sfwListPicker" || newCntrl.Name == "sfwListBox" || newCntrl.Name == "sfwRadioButtonList" || newCntrl.Name == "sfwCheckBoxList" || newCntrl.Name == "sfwSourceList")) {

                                    if (scope.model.Elements && scope.model.Elements.length > 0) {
                                        var lstListItem = scope.model.Elements.filter(function (x) { return x.Name && x.Name == "ListItem"; });
                                        if (lstListItem && lstListItem.length > 0) {
                                            angular.forEach(lstListItem, function (aObjListItem) {
                                                newCntrl.Elements.push(aObjListItem);
                                            });
                                        }
                                    }
                                }
                                if (newCntrl && newCntrl.Name == "sfwCascadingDropDownList") {
                                    if (scope.model.dictAttributes && scope.model.dictAttributes.sfwNavigationParameter) {
                                        newCntrl.dictAttributes.sfwParameters = scope.model.dictAttributes.sfwNavigationParameter;
                                    }
                                    else {
                                        newCntrl.dictAttributes.sfwParameters = "";
                                    }
                                    if (scope.model.dictAttributes && scope.model.dictAttributes.sfwParameters) {
                                        newCntrl.dictAttributes.sfwCascadingRetrievalParameters = scope.model.dictAttributes.sfwParameters;
                                    }
                                    else {
                                        newCntrl.dictAttributes.sfwCascadingRetrievalParameters = "";
                                    }
                                }
                                else if (newCntrl && scope.model.Name == "sfwCascadingDropDownList") {
                                    if (scope.model.dictAttributes) {
                                        var issfwNavigationParameterPresent = lstAllPropety[0].lstCustom.filter(function (x) {
                                            return x.PropertyName == "sfwNavigationParameter";
                                        });
                                        if (issfwNavigationParameterPresent && issfwNavigationParameterPresent.length > 0 && scope.model.dictAttributes.sfwParameters) {
                                            newCntrl.dictAttributes.sfwNavigationParameter = scope.model.dictAttributes.sfwParameters;
                                        }
                                        else {
                                            newCntrl.dictAttributes.sfwNavigationParameter = "";
                                        }
                                    }
                                    if (scope.model.dictAttributes) {
                                        var issfwParametersPresent = lstAllPropety[0].lstCustom.filter(function (x) {
                                            return x.PropertyName == "sfwParameters";
                                        });
                                        if (issfwParametersPresent && issfwParametersPresent.length > 0 && scope.model.dictAttributes.sfwCascadingRetrievalParameters) {
                                            newCntrl.dictAttributes.sfwParameters = scope.model.dictAttributes.sfwCascadingRetrievalParameters;
                                        }
                                        else {
                                            newCntrl.dictAttributes.sfwParameters = "";
                                        }

                                    }
                                }
                                else if (newCntrl && newCntrl.Name == "sfwSoftErrors") {
                                    newCntrl.dictAttributes.sfwEntityField = "InternalErrors";
                                }
                                else if (newCntrl && newCntrl.Name == "sfwEmployerSoftErrors") {
                                    newCntrl.dictAttributes.sfwEntityField = "ExternalErrors";
                                }
                            }

                        }
                        if (!newCntrl) {
                            return;
                        }

                        $rootScope.UndRedoBulkOp("Start");
                        $rootScope.DeleteItem(scope.model, scope.model.ParentVM.Elements);
                        scope.ChangeControl(newCntrl);


                        if (scope.model.ParentVM != null) {
                            var objParentVM = scope.model.ParentVM;
                            while (objParentVM.Name != "sfwTable") {
                                if (objParentVM.ParentVM == null) {
                                    break;
                                }
                                objParentVM = objParentVM.ParentVM;
                            }

                            if (objParentVM != null && objParentVM.Name == "sfwTable") {
                                var objAssociatedControl = scope.GetControl(objParentVM, strOldId);
                                if (objAssociatedControl != null) {
                                    objAssociatedControl.dictAttributes.AssociatedControlID = newCntrl.dictAttributes.ID;
                                }
                            }
                        }

                        var objGridView = FindParent(scope.model, "sfwGridView");
                        if (objGridView) {
                            if (scope.formodel && scope.formodel.dictAttributes.sfwType != "Lookup") {

                                if (newCntrl.Name != "sfwLabel" && newCntrl.Name != "sfwButton" && newCntrl.Name != "sfwLinkButton" && newCntrl.Name != "sfwImageButton" && newCntrl.Name !== "sfwButtonGroup") {
                                    $rootScope.EditPropertyValue(objGridView.dictAttributes.sfwTwoWayBinding, objGridView.dictAttributes, "sfwTwoWayBinding", "True");
                                    $rootScope.EditPropertyValue(objGridView.dictAttributes.AllowEditing, objGridView.dictAttributes, "AllowEditing", "True");
                                    $rootScope.EditPropertyValue(objGridView.dictAttributes.sfwCommonFilterBox, objGridView.dictAttributes, "sfwCommonFilterBox", "False");
                                    $rootScope.EditPropertyValue(objGridView.dictAttributes.sfwFilterOnKeyPress, objGridView.dictAttributes, "sfwFilterOnKeyPress", "False");


                                }
                            }
                        }

                        SetFormSelectedControl(scope.formodel, newCntrl);
                        $rootScope.UndRedoBulkOp("End");
                    }
                };

                scope.OnCustomBtnChangeControlClick = function () {
                    var dialogScope = scope.$new(true);
                    dialogScope.button = {};
                    dialogScope.button.methodName = "";
                    dialogScope.errorMessage = "";
                    dialogScope.onBtnOkClick = function () {
                        scope.OnChangeControlClick("sfwButton" + "." + dialogScope.button.methodName);
                        dialogScope.addBtnDialog.close();
                    };
                    dialogScope.validateBtnMethod = function () {
                        dialogScope.errorMessage = "";
                        if (!dialogScope.button.methodName) {
                            dialogScope.errorMessage = "Enter method name";
                            return true;
                        } else if (!isValidIdentifier(dialogScope.button.methodName, false, false)) {
                            dialogScope.errorMessage = "Invalid method name";
                            return true;
                        }
                        return false;
                    };
                    dialogScope.addBtnDialog = $rootScope.showDialog(dialogScope, "Custom Button", "Form/views/AddCustomMethod.html", { width: 300, height: 250 });
                };
                scope.GetControl = function (objTable, aStrId) {
                    var retSfxControl = null;
                    angular.forEach(objTable.Elements, function (objRows) {

                        angular.forEach(objRows.Elements, function (objCell) {

                            angular.forEach(objCell.Elements, function (objsfxControl) {


                                if (objsfxControl.Name == "sfwTable") {
                                    scope.GetControl(objsfxControl, aStrId);
                                }
                                else if (objsfxControl.Name == "sfwPanel") {
                                    angular.forEach(objsfxControl.Elements, function (objPanelTable) {
                                        if (objPanelTable.Name == "sfwTable") {
                                            scope.GetControl(objPanelTable, aStrId);
                                        }
                                    });
                                }
                                else if (objsfxControl.dictAttributes.AssociatedControlID && aStrId &&
                                    objsfxControl.dictAttributes.AssociatedControlID.toLowerCase() == aStrId.toLowerCase()) {
                                    retSfxControl = objsfxControl;
                                }
                            });
                        });
                    });
                    return retSfxControl;
                };


                scope.ChangeControl = function (newCntrl) {

                    if (newCntrl.Name == "sfwDialogPanel" || newCntrl.Name == "sfwPanel" || newCntrl.Name == "sfwListView") {
                        newCntrl.initialvisibilty = true;
                        newCntrl.isLoaded = true;
                    }

                    $rootScope.PushItem(newCntrl, scope.model.ParentVM.Elements);

                };

                //#endregion



                //#region Cut/Copy/Delete/Change Control

                scope.OnPasteControl = function (currmodel) {
                    var filescope = getCurrentFileScope();
                    if (filescope && filescope.OnPasteControl) {
                        filescope.OnPasteControl(currmodel);
                    }

                };
                scope.OnDeleteControlClick = function (aParam) {
                    var filescope = getCurrentFileScope();
                    if (filescope && filescope.OnDeleteControlClick) {
                        filescope.OnDeleteControlClick(aParam);
                    }

                };

                scope.OnCutControlClick = function (currmodel) {
                    var filescope = getCurrentFileScope();
                    if (filescope && filescope.OnCutControlClick) {
                        filescope.OnCutControlClick(currmodel);
                    }

                };

                scope.OnCopyControlClick = function (currmodel) {
                    var filescope = getCurrentFileScope();
                    if (filescope && filescope.OnCopyControlClick) {
                        filescope.OnCopyControlClick(currmodel);
                    }

                };
                //#endregion



                //#region Clear Cell / Grid



                scope.OnClearGridClick = function (tableVM) {
                    OnClearGridClick(tableVM, $rootScope);
                };

                // #endregion

                //#region Insert  Row/Column
                scope.OnInsertRowAboveClick = function (cellVM, tableVM) {
                    OnInsertRowAboveClick(cellVM, tableVM, $rootScope)
                };

                scope.OnInsertRowBelowClick = function (cellVM, tableVM) {
                    OnInsertRowBelowClick(cellVM, tableVM, $rootScope);
                };

                scope.OnInsertColumnLeftClick = function (cellVM, tableVM) {
                    OnInsertColumnLeftClick(cellVM, tableVM);
                };

                scope.OnInsertColumnRightClick = function (cellVM, tableVM) {
                    OnInsertColumnRightClick(cellVM, tableVM);
                };

                //#endregion

                //#region Move Row/Column

                scope.OnMoveRowUpClick = function (aParm, tableVM) {
                    if (null != tableVM) {
                        var filescope = getCurrentFileScope();
                        if (filescope && filescope.MoveRowUp) {
                            filescope.MoveRowUp(aParm, tableVM);
                        }
                    }
                };

                scope.OnMoveRowDownClick = function (aParm, tableVM) {
                    if (tableVM) {
                        var filescope = getCurrentFileScope();
                        if (filescope && filescope.MoveRowDown) {
                            filescope.MoveRowDown(aParm, tableVM);
                        }
                    }
                };


                scope.OnMoveColumnLeftClick = function (aParm, tableVM) {
                    if (tableVM) {
                        var filescope = getCurrentFileScope();
                        if (filescope && filescope.MoveColumnLeft) {
                            filescope.MoveColumnLeft(aParm, tableVM);
                        }
                    }
                };

                scope.OnMoveColumnRightClick = function (aParm, tableVM) {
                    if (tableVM) {
                        var filescope = getCurrentFileScope();
                        if (filescope && filescope.MoveColumnRight) {
                            filescope.MoveColumnRight(aParm, tableVM);
                        }
                    }

                };

                //#endregion

                //#region Delecte Row/Column

                scope.OnDeleteRowClick = function (rowVM, tableVM) {
                    OnDeleteRowClick(rowVM, tableVM, $rootScope, $SgMessagesService);
                };

                scope.OnDeleteColumnClick = function (aParam, tableVM) {
                    OnDeleteColumnClick(aParam, tableVM, $rootScope, scope.formodel, $SgMessagesService);
                };


                //#endregion

                //#region Add Grid Columns
                scope.OnAddGridColumns = function () {
                    var newScope = scope.$new();
                    newScope.objGridView = scope.model;
                    newScope.FormModel = scope.formodel;
                    newScope.IsAddColumnSelected = true;
                    var objAttr;
                    if (newScope.FormModel.dictAttributes.sfwType == "Lookup") {
                        newScope.ParentEntityName = newScope.FormModel.dictAttributes.sfwEntity;
                    }
                    //commented below code, because we don't need to check all these conditions as scope.entitytreename is always updated to GridView collection entity.
                    //So only checking if GridView sfwEntityField is set or not and scope.entitytreename is set or not.
                    else if (scope.model.dictAttributes.sfwEntityField && scope.entitytreename) {
                        newScope.ParentEntityName = scope.entitytreename;

                        //if (scope.model.Name == "sfwGridView" && scope.model.dictAttributes.sfwParentGrid && scope.entitytreename) {
                        //    objAttr = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(scope.entitytreename, scope.model.dictAttributes.sfwEntityField);
                        //}
                        //else {
                        //    var parentListView = FindParent(scope.model, "sfwListView");
                        //    if (parentListView) {
                        //        objAttr = scope.entitytreename;
                        //    }
                        //    else if (scope.model.dictAttributes.sfwEntityField && scope.formodel.dictAttributes.sfwEntity) {
                        //        objAttr = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(scope.formodel.dictAttributes.sfwEntity, scope.model.dictAttributes.sfwEntityField);
                        //    }
                        //}
                    }
                    //if (objAttr) {
                    //    if (typeof objAttr === "string") {
                    //        newScope.ParentEntityName = objAttr;
                    //    }
                    //    else if (typeof objAttr === "object" && objAttr.hasOwnProperty("Entity")) {
                    //        newScope.ParentEntityName = objAttr.Entity;
                    //    }
                    //}
                    newScope.objGridView.LstDisplayedEntities = [];
                    newScope.objGridView.lstselectedmultiplelevelfield = [];
                    newScope.objGridView.selectedentityobjecttreefields = [];
                    newScope.title = "Create New Grid";
                    newScope.LstDisplayedEntities = scope.lstdisplayentities;
                    if (newScope.FormModel && newScope.FormModel.dictAttributes.ID.startsWith("wfp")) {
                        newScope.IsPrototype = true;
                    }
                    else {
                        newScope.IsPrototype = false;
                    }
                    newScope.objGridDialog = $rootScope.showDialog(newScope, newScope.title, "Form/views/CreateGridViewControl.html", { width: 1000, height: 700 });
                    newScope.setTitle = function (title) {
                        if (newScope.title) {
                            newScope.title = title;
                            newScope.objGridDialog.updateTitle(newScope.title);
                        }
                    };
                };
                //#endregion

                scope.CanShowContextMenu = function (model, formodel) {
                    return CanShowContextMenu(model, formodel);
                }

            }
        }
    }
}]);

app.directive("tableControlDirective", ["$compile", "$rootScope", "$EntityIntellisenseFactory", "$ValidationService", "$GetEntityFieldObjectService", "$SgMessagesService", function ($compile, $rootScope, $EntityIntellisenseFactory, $ValidationService, $GetEntityFieldObjectService, $SgMessagesService) {
    return {
        restrict: "E",
        replace: true,
        scope: {
            model: '=',
            formodel: '=',

            objparent: '=',
            lstloadedentitytrees: '=',
            lstloadedentitycolumnstree: '=',
            lstdisplayentities: '=',
            entitytreename: '=',
            buttonsCollection: '='
        },
        template: function () {
            var strTemplate = getHtmlFromServer('Form/views/Controls/TableControlView.html');
            return strTemplate;
        },
        link: function (scope, element, attributes) {

            scope.blnIsTableSelected = false;
            if (scope.formodel && !scope.formodel.SelectedControl) {
                for (var i = 0; i < scope.formodel.Elements.length; i++) {
                    if (scope.formodel.Elements[i].Name == "sfwTable") {
                        for (var j = 0; j < scope.formodel.Elements[i].Elements.length; j++) {
                            if (scope.formodel.Elements[i].Elements[j].Name == "sfwRow") {
                                if (scope.formodel.Elements[i].Elements[j].Elements.length > 0) {
                                    selectControl(scope.formodel.Elements[i].Elements[j].Elements[0], null, scope.formodel);
                                }
                                break;
                            }
                        }
                        break;
                    }
                }
            }

            scope.SetParentVM = function (parent, model) {
                model.ParentVM = parent;

            };

            scope.selectControlOnDoubleClick = function (objChild, event) {
                selectControlOnDoubleClick(objChild, event);
            };

            scope.selectControl = function (objChild, event) {
                if (objChild && objChild.Name != "sfwColumn" && objChild.Name != "sfwButtonGroup") {
                    scope.blnIsTableSelected = !scope.blnIsTableSelected;
                }
                selectControl(objChild, event, scope.formodel);
            };

            scope.AddRowsAndColumns = function (objchild, event) {
                scope.blnIsTableSelected = true;
                event.stopPropagation();
                var filescope = getCurrentFileScope();
                if (filescope && filescope.AddRowsAndColumns) {
                    filescope.AddRowsAndColumns(objchild, event);
                }
            }

            scope.tdMouseEnterEvent = function (e) {
                scope.startEvent = e;
                $(".row-col").remove();
                var tdScope = angular.element(scope.startEvent.currentTarget).scope();
                var colHeight = scope.startEvent.currentTarget[0] && scope.startEvent.currentTarget[0].offsetHeight;
                var divs = "";
                var position = $(scope.startEvent.currentTarget).attr('cellposition');
                if (position == "top") {
                    divs = $compile("<div class='row-col left-top-col-div' ng-mouseover='addColLeft()'></div><div class='row-col right-top-col-div' ng-mouseover='addColRight()'></div>")(scope);
                }
                if (position == "left") {
                    divs = $compile("<div class='row-col left-top-row-div' ng-mouseover='addRowTop()'></div><div class='row-col left-bottom-row-div' ng-mouseover='addRowBottom()'></div>")(scope);
                }

                $(scope.startEvent.currentTarget).append(divs);
                scope.cellObj = null;
                if (position == "left") {
                    if (scope.startEvent.target.nodeName.toLowerCase() != "td") {
                        scope.cellObj = $(scope.startEvent.target).parents('td').first().siblings().first();
                    } else {
                        scope.cellObj = $(scope.startEvent.target).siblings().first();
                    }
                } else {
                    if (scope.startEvent.target.nodeName.toLowerCase() != "td") {
                        var td = $(scope.startEvent.target).closest('td');
                        var index = $(td).index();
                        scope.cellObj = $(td).closest('tr').siblings().first().children().eq(index);
                    } else {
                        var td = $(scope.startEvent.target);
                        var index = $(td).index();
                        scope.cellObj = $(td).closest('tr').siblings().first().children().eq(index);
                    }
                }
            };

            //#region add row and column 

            scope.addRowTop = function () {
                addCell("addRowTop");
            };
            scope.addRowBottom = function () {
                addCell("addRowBottom");
            };
            scope.addColLeft = function () {
                addCell("addColumnLeft");
            };
            scope.addColRight = function () {
                addCell("addColumnRight");
            };

            // #region add row or column on td hovering 
            var addCell = function (action) {
                if (scope.startEvent) {
                    clearTimeout($rootScope.userIdleTimeout);


                    if ($('.sgt-wrapper').length > 0) {
                        $('#temprow').remove();
                        $('.sgt-wrapper').remove();
                    }

                    var parentNode = $(scope.startEvent.target).closest('tr')[0];

                    var rowCount = 0, columnCount = 0;
                    if (parentNode && (parentNode.nodeName == 'TR' || parentNode.nodeName == 'tr')) {
                        rowCount = parentNode.cells.length;
                    }

                    var row_index = $(scope.startEvent.currentTarget).parent().index();
                    var col_index = $(scope.startEvent.currentTarget).index();


                    var tbody = $(parentNode).closest('tbody');

                    if (tbody && tbody[0]) {
                        columnCount = tbody[0].rows.length;
                    }

                    var newRow = '<tr id="temprow">';
                    for (var i = 0; i < rowCount; i++) {
                        if (i == 0) {
                            newRow += '<td class="sgt-wrapper row-wrap" style="padding:0px;text-align: center;height:20px!important;border:0!important;" title=" Click here to add row "><span style="position:relative;mouse:pointer;height:100%;width:100%" class="sgt-wrapper glyphicon glyphicon-plus-sign"></span>  </td>';
                        } else {
                            newRow += '<td class="sgt-wrapper row-wrap" style="padding:0px;text-align: center;height:20px!important;" title=" Click here to add row "> </td>';
                        }
                    }
                    newRow += '</tr>';

                    var newCol = "";

                    var newCol1 = "<td class='sgt-wrapper col-wrap'  style='width:20px;border:0!important;padding:0' title=' Click here to add Column '><span style='position:relative;mouse:pointer;height:100%;width:100%;margin-left:2px;padding:0' class='sgt-wrapper glyphicon glyphicon-plus-sign'></span>   </td>";
                    newCol += "<td class='sgt-wrapper col-wrap'  style='width:20px;' title=' Click here to add Column '>  </td>";


                    if (action == "addRowTop") {
                        $(parentNode).closest('table > tbody > tr:nth-child(' + (row_index + 1) + ')').before(newRow);
                        $('.sgt-wrapper').addClass("td-fade-in");

                        $(".row-wrap").on("click", function () {
                            $('.sgt-wrapper.row-wrap').parent("tr").remove();
                            $('.sgt-wrapper').remove();
                            if (scope.cellObj) var currScope = angular.element(scope.cellObj).scope();

                            var cellVM = currScope && currScope.col ? currScope.col : null;
                            var tableVM = cellVM && cellVM.ParentVM ? cellVM.ParentVM.ParentVM : null;

                            if (cellVM && tableVM) {
                                scope.OnInsertRowAboveClick(cellVM, tableVM);
                            }

                        });
                    }
                    if (action == "addRowBottom") {
                        $(parentNode).closest('table > tbody > tr:nth-child(' + (row_index + 1) + ')').after(newRow);
                        $('.sgt-wrapper').addClass("td-fade-in");

                        $(".row-wrap").on("click", function () {
                            $('.sgt-wrapper.row-wrap').parent("tr").remove();
                            $('.sgt-wrapper').remove();
                            if (scope.cellObj) var currScope = angular.element(scope.cellObj).scope();

                            var cellVM = currScope && currScope.col ? currScope.col : null;
                            var tableVM = cellVM && cellVM.ParentVM ? cellVM.ParentVM.ParentVM : null;

                            if (cellVM && tableVM) {
                                scope.OnInsertRowBelowClick(cellVM, tableVM);
                            }

                        });
                    }
                    if (action == "addColumnRight") {
                        $(parentNode).children('td:eq(' + (col_index) + ')').after(newCol1);
                        $(parentNode).siblings('tr').each(function () {
                            $(this).children('td:eq(' + (col_index) + ')').after(newCol);

                        });
                        $('.sgt-wrapper').addClass("td-fade-in");
                        $(".col-wrap").on("click", function () {
                            $('.sgt-wrapper.row-wrap').parent("tr").remove();
                            $('.sgt-wrapper').remove();

                            if (scope.cellObj) var currScope = angular.element(scope.cellObj).scope();

                            var cellVM = currScope && currScope.col ? currScope.col : null;
                            var tableVM = cellVM && cellVM.ParentVM ? cellVM.ParentVM.ParentVM : null;


                            if (cellVM && tableVM) {
                                scope.OnInsertColumnRightClick(cellVM, tableVM);
                            }

                        });
                    }

                    if (action == "addColumnLeft") {


                        $(parentNode).children('td:eq(' + (col_index) + ')').before(newCol1);
                        $(parentNode).siblings('tr').each(function () {
                            $(this).children('td:eq(' + (col_index) + ')').before(newCol);
                        });
                        $('.sgt-wrapper').addClass("td-fade-in");
                        $(".col-wrap").on("click", function () {
                            $('.sgt-wrapper.row-wrap').parent("tr").remove();
                            $('.sgt-wrapper').remove();


                            if (scope.cellObj) var currScope = angular.element(scope.cellObj).scope();

                            var cellVM = currScope && currScope.col ? currScope.col : null;
                            var tableVM = cellVM && cellVM.ParentVM ? cellVM.ParentVM.ParentVM : null;

                            if (cellVM && tableVM) {
                                scope.OnInsertColumnLeftClick(cellVM, tableVM);
                            }
                        });
                    }


                }
                // clearTimeout($rootScope.userIdleTimeout);
            };

            scope.$on('$destroy', function () {
                clearTimeout($rootScope.userIdleTimeout);
            });

            //#endregion

            scope.tdKeyDown = function (aobjSelectedCell, event) {
                if (aobjSelectedCell && !event.ctrlKey && !event.shiftKey && !event.altKey && event.which == $.ui.keyCode.DELETE && scope.formodel.SelectedControl && scope.formodel.SelectedControl.Name == "sfwColumn" && scope.formodel.SelectedControl.Elements.length > 0) {
                    $rootScope.UndRedoBulkOp("Start");
                    for (i = (scope.formodel.SelectedControl.Elements.length - 1); i > -1; i--) {
                        $rootScope.DeleteItem(scope.formodel.SelectedControl.Elements[i], scope.formodel.SelectedControl.Elements);
                    }
                    $rootScope.UndRedoBulkOp("End");
                }
            }

            scope.SetColSpan = function (aobjcol) {
                return aobjcol.dictAttributes.ColumnSpan;
            };

            scope.SetRowSpan = function (aobjcol) {
                return aobjcol.dictAttributes.RowSpan;
            };

            //#region Insert  Row/Column
            scope.OnInsertRowAboveClick = function (cellVM, tableVM) {
                OnInsertRowAboveClick(cellVM, tableVM, $rootScope)
            };

            scope.OnInsertRowBelowClick = function (cellVM, tableVM) {
                OnInsertRowBelowClick(cellVM, tableVM, $rootScope);
            };

            scope.OnInsertColumnLeftClick = function (cellVM, tableVM) {
                OnInsertColumnLeftClick(cellVM, tableVM);
            };

            scope.OnInsertColumnRightClick = function (cellVM, tableVM) {
                OnInsertColumnRightClick(cellVM, tableVM);
            };

            //#endregion

            //#region Move Row/Column

            scope.OnMoveRowUpClick = function (aParm, tableVM) {
                if (null != tableVM) {
                    var filescope = getCurrentFileScope();
                    if (filescope && filescope.MoveRowUp) {
                        filescope.MoveRowUp(aParm, tableVM);
                    }
                }
            };

            scope.OnMoveRowDownClick = function (aParm, tableVM) {
                if (tableVM) {
                    var filescope = getCurrentFileScope();
                    if (filescope && filescope.MoveRowDown) {
                        filescope.MoveRowDown(aParm, tableVM);
                    }
                }
            };

            scope.OnMoveColumnLeftClick = function (aParm, tableVM) {
                if (tableVM) {
                    var filescope = getCurrentFileScope();
                    if (filescope && filescope.MoveColumnLeft) {
                        filescope.MoveColumnLeft(aParm, tableVM);
                    }
                }
            };

            scope.OnMoveColumnRightClick = function (aParm, tableVM) {
                if (tableVM) {
                    var filescope = getCurrentFileScope();
                    if (filescope && filescope.MoveColumnRight) {
                        filescope.MoveColumnRight(aParm, tableVM);
                    }
                }

            };

            //#endregion

            //#region Cut/Copy/Paste Cell

            scope.OnCutCell = function (cellVM) {
                var filescope = getCurrentFileScope();
                if (filescope && filescope.OnCutCell) {
                    filescope.OnCutCell(cellVM);
                }
            };

            scope.OnCopyCell = function (cellVM) {
                var filescope = getCurrentFileScope();
                if (filescope && filescope.OnCopyCell) {
                    filescope.OnCopyCell(cellVM);
                }
            };

            scope.OnPasteControl = function (cellVM) {
                var filescope = getCurrentFileScope();
                if (filescope && filescope.OnPasteControl) {
                    filescope.OnPasteControl(cellVM);
                }

            };

            scope.OnPasteCell = function (cellVM) {
                var filescope = getCurrentFileScope();
                if (filescope && filescope.OnPasteCell) {
                    filescope.OnPasteCell(cellVM);
                }

            };

            //#endregion

            //#region Add New Control
            var RepeaterControldialog;
            scope.objRepeaterControl;
            scope.ErrorMessageForDisplay = "";
            scope.onRepeaterControlOkClick = function () {
                if (scope.objRepeaterControl) {
                    scope.objRepeaterControl.dictAttributes.sfwSelection = "Many";
                    scope.objRepeaterControl.dictAttributes.sfwCaption = "List View";
                    scope.objRepeaterControl.dictAttributes.AllowPaging = "True";
                    scope.objRepeaterControl.dictAttributes.PageSize = "1";

                    var selectedField = scope.objRepeaterControl.selectedobjecttreefield;

                    if (selectedField) {
                        var displayEntity = getDisplayedEntity(scope.objRepeaterControl.LstDisplayedEntities);
                        var displayName = displayEntity.strDisplayName;
                        fieldName = selectedField.ID;
                        if (displayName != "") {
                            fieldName = displayName + "." + selectedField.ID;
                        }
                        var entitycollname = fieldName; //GetItemPathForEntityObject(selectedField);
                        scope.objRepeaterControl.dictAttributes.sfwEntityField = entitycollname;
                        var parentenetityname = selectedField.Entity;
                        var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                        scope.objRepeaterControl.dictAttributes.sfwDataKeyNames = GetTableKeyFields(parentenetityname, entityIntellisenseList);
                    }

                    var prefix = "swc";

                    var objListTableModel = { Name: "sfwTable", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                    objListTableModel.ParentVM = scope.objRepeaterControl;
                    var strCtrlId = CreateControlID(scope.formodel, "NewPage", "sfwTable");
                    objListTableModel.dictAttributes.ID = strCtrlId;

                    var sfxRowModel = { Name: "sfwRow", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                    sfxRowModel.ParentVM = objListTableModel;

                    var newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                    newSfxCellModel.ParentVM = sfxRowModel;
                    sfxRowModel.Elements.push(newSfxCellModel);

                    newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                    newSfxCellModel.ParentVM = sfxRowModel;
                    sfxRowModel.Elements.push(newSfxCellModel);

                    newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                    newSfxCellModel.ParentVM = sfxRowModel;
                    sfxRowModel.Elements.push(newSfxCellModel);

                    newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                    newSfxCellModel.ParentVM = sfxRowModel;
                    sfxRowModel.Elements.push(newSfxCellModel);

                    objListTableModel.Elements.push(sfxRowModel);
                    scope.objRepeaterControl.Elements.push(objListTableModel);
                    scope.objRepeaterControl.initialvisibilty = true;
                    scope.objRepeaterControl.isLoaded = true;
                    $rootScope.PushItem(scope.objRepeaterControl, scope.dropdata.Elements);
                }
                scope.onRepeaterControlCancelClick();
            };
            scope.onRepeaterControlCancelClick = function () {
                RepeaterControldialog.close();
            };

            //#endregion

            //#region Delecte Row/Column

            scope.OnDeleteRowClick = function (rowVM, tableVM) {
                OnDeleteRowClick(rowVM, tableVM, $rootScope, $SgMessagesService);
            };

            scope.OnDeleteColumnClick = function (aParam, tableVM) {
                OnDeleteColumnClick(aParam, tableVM, $rootScope, scope.formodel, $SgMessagesService);
            };

            //#endregion

            //#region Clear Cell / Grid

            scope.OnClearGridClick = function (tableVM) {
                OnClearGridClick(tableVM, $rootScope);
            };
            //#endregion

            scope.CanShowContextMenu = function (model, formodel) {
                return CanShowContextMenu(model, formodel);
            }
            scope.menuOptions = [
                ['Insert', [
                    ['Row Above', function ($itemScope) {
                        if ($itemScope.col) {
                            var cellVM = $itemScope.col;
                            var tableVM = cellVM.ParentVM.ParentVM;
                            scope.OnInsertRowAboveClick(cellVM, tableVM);
                        }
                    }, null, null, "Ctrl+Shift+A"],
                    ['Row Below', function ($itemScope) {
                        if ($itemScope.col) {
                            var cellVM = $itemScope.col;
                            var tableVM = cellVM.ParentVM.ParentVM;
                            scope.OnInsertRowBelowClick(cellVM, tableVM);
                        }
                    }, null, null, "Ctrl+Shift+B"],
                    ['Column Left', function ($itemScope) {
                        if ($itemScope.col) {
                            var cellVM = $itemScope.col;
                            var tableVM = cellVM.ParentVM.ParentVM;
                            scope.OnInsertColumnLeftClick(cellVM, tableVM);
                        }
                    }, null, null, "Ctrl+Shift+L"],
                    ['Column Right', function ($itemScope) {
                        if ($itemScope.col) {
                            var cellVM = $itemScope.col;
                            var tableVM = cellVM.ParentVM.ParentVM;
                            scope.OnInsertColumnRightClick(cellVM, tableVM);
                        }
                    }, null, null, "Ctrl+Shift+R"],
                    ['Cell Right', function ($itemScope) {
                        if ($itemScope.col) {
                            var rowVM = $itemScope.col.ParentVM;
                            var filescope = getCurrentFileScope();
                            if (filescope && filescope.InsertCell) {
                                filescope.InsertCell(rowVM, $itemScope.col, true);
                            }
                        }
                    }, null, null, "Ctrl+Alt+R"],
                    ['Cell Left', function ($itemScope) {
                        if ($itemScope.col) {

                            var rowVM = $itemScope.col.ParentVM;
                            var filescope = getCurrentFileScope();
                            if (filescope && filescope.InsertCell) {
                                filescope.InsertCell(rowVM, $itemScope.col, false);
                            }


                        }
                    }, null, null, "Ctrl+Alt+L"],
                ], function ($itemScope) {
                    if ($itemScope.col && $itemScope.formodel && scope.selectControl) {
                        scope.selectControl($itemScope.col, event, $itemScope.formodel);
                    }
                    return scope.CanShowContextMenu($itemScope.col, $itemScope.formodel);
                }], null,
                ['Move', [
                    ['Row Up', function ($itemScope) {
                        if ($itemScope.col) {
                            var cellVM = $itemScope.col;
                            var tableVM = cellVM.ParentVM.ParentVM;
                            scope.OnMoveRowUpClick(cellVM, tableVM);
                        }

                    }, null, null, "Ctrl+U"],
                    ['Row Down', function ($itemScope) {
                        if ($itemScope.col) {
                            var cellVM = $itemScope.col;
                            var tableVM = cellVM.ParentVM.ParentVM;
                            scope.OnMoveRowDownClick(cellVM, tableVM);
                        }
                    }, null, null, "Ctrl+D"],
                    ['Column Left', function ($itemScope) {
                        if ($itemScope.col) {
                            var cellVM = $itemScope.col;
                            var tableVM = cellVM.ParentVM.ParentVM;
                            scope.OnMoveColumnLeftClick(cellVM, tableVM);
                        }
                    }, null, null, "Ctrl+L"],
                    ['Column Right', function ($itemScope) {
                        if ($itemScope.col) {
                            var cellVM = $itemScope.col;
                            var tableVM = cellVM.ParentVM.ParentVM;
                            scope.OnMoveColumnRightClick(cellVM, tableVM);
                        }

                    }, null, null, "Ctrl+R"],
                ], function ($itemScope) {
                    return scope.CanShowContextMenu($itemScope.col, $itemScope.formodel);
                }], null,

                ['Add Control', function ($itemScope) {
                    if ($itemScope.col) {
                        var cellVM = $itemScope.col;
                        scope.$parent.openChangeControlDialog("addcontrol", cellVM);
                    }

                    scope.selectControl($itemScope.col, event, $itemScope.formodel);
                    return scope.CanShowContextMenu($itemScope.col, $itemScope.formodel);
                }], null,
                ['Cut Cell', function ($itemScope) {
                    if ($itemScope.col) {
                        var cellVM = $itemScope.col;
                        scope.OnCutCell(cellVM);
                    }
                }, function ($itemScope) {
                    return scope.CanShowContextMenu($itemScope.col, $itemScope.formodel);
                }, null, "Ctrl+X"], null,
                ['Copy Cell', function ($itemScope) {
                    if ($itemScope.col) {
                        var cellVM = $itemScope.col;
                        scope.OnCopyCell(cellVM);
                    }
                }, function ($itemScope) {
                    return scope.CanShowContextMenu($itemScope.col, $itemScope.formodel);
                }, null, "Ctrl+C"], null,
                ['Paste Cell', function ($itemScope) {
                    if ($itemScope.col) {
                        var cellVM = $itemScope.col;
                        scope.OnPasteCell(cellVM);
                    }
                }, function ($itemScope) {
                    var filescope = getCurrentFileScope();
                    if (filescope && filescope.ClipboardData && filescope.ClipboardDataOpeType == 'Cell') {
                        return true;
                    }
                }, null, "Ctrl+V"], null,
                ['Delete Cell', function ($itemScope) {
                    if ($itemScope.col) {
                        var filescope = getCurrentFileScope();
                        if (filescope && filescope.MoveRowUp) {
                            filescope.deleteCell($itemScope.col);
                        }
                    }
                }, function ($itemScope) {
                    return scope.CanShowContextMenu($itemScope.col, $itemScope.formodel);
                }, null, null, "Alt+Del"], null,
                ['Paste Control', function ($itemScope) {
                    if ($itemScope.col) {
                        var cellVM = $itemScope.col;
                        scope.OnPasteControl(cellVM);
                    }
                }, function ($itemScope) {
                    var filescope = getCurrentFileScope();
                    if (filescope && filescope.ClipboardData && filescope.ClipboardDataOpeType == "Control") {
                        return true;
                    }
                }, null, "Ctrl+V"], null,
                ['Clear Cell', function ($itemScope) {
                    if ($itemScope.col) {
                        var cellVM = $itemScope.col;
                        ClearCell(cellVM, $rootScope, true);

                    }
                }, function ($itemScope) {
                    return scope.CanShowContextMenu($itemScope.col, $itemScope.formodel);
                }], null,
                ['Clear Panel', function ($itemScope) {
                    if ($itemScope.col) {
                        var cellVM = $itemScope.col;
                        var tableVM = cellVM.ParentVM.ParentVM;
                        scope.OnClearGridClick(tableVM);
                    }
                }, function ($itemScope) {
                    if ($itemScope.formodel && $itemScope.formodel.dictAttributes.sfwType == "Lookup" && !$itemScope.formodel.IsLookupCriteriaEnabled) {
                        return false;
                    }
                    return scope.CanShowContextMenu($itemScope.col, $itemScope.formodel);
                }, null, "Shift+Del"], null,
                ['Delete Row', function ($itemScope) {
                    if ($itemScope.col) {
                        var cellVM = $itemScope.col;
                        var tableVM = cellVM.ParentVM.ParentVM;
                        var rowVM = cellVM.ParentVM;
                        scope.OnDeleteRowClick(rowVM, tableVM);
                    }
                }, function ($itemScope) {
                    return scope.CanShowContextMenu($itemScope.col, $itemScope.formodel);
                }, null, "Ctrl+Del"], null,
                ['Delete Column', function ($itemScope) {
                    if ($itemScope.col) {
                        var cellVM = $itemScope.col;
                        var tableVM = cellVM.ParentVM.ParentVM;
                        scope.OnDeleteColumnClick(cellVM, tableVM);
                    }
                }, function ($itemScope) {
                    return scope.CanShowContextMenu($itemScope.col, $itemScope.formodel);
                }, null, "Ctrl+Shift+Del"], null

            ];

        }
    }
}]);

app.directive("tabcontainerControlDirective", ["$compile", "$rootScope", "$SgMessagesService", function ($compile, $rootScope, $SgMessagesService) {
    return {
        restrict: "E",
        replace: true,
        scope: {
            model: '=',
            formodel: '=',

            objparent: '=',
            lstloadedentitytrees: '=',
            lstloadedentitycolumnstree: '=',
            lstdisplayentities: '=',
            entitytreename: '=',
            buttonsCollection: '='
        },
        template: function () {
            var strTemplate = getHtmlFromServer('Form/views/Controls/TabcontainerControlView.html');
            return strTemplate;
        },
        link: function (scope, element, attributes) {
            if (scope.model.Name == "sfwTabContainer") {
                if (scope.model.Elements[0] && scope.model.Elements[0].Elements.length > 0 && !$rootScope.isFromSource) {
                    scope.model.Elements[0].ParentVM = scope.model;
                    if (!scope.model.Elements[0].SelectedTabSheet) {
                        scope.model.Elements[0].SelectedTabSheet = scope.model.Elements[0].Elements[0];
                        scope.model.Elements[0].SelectedTabSheet.IsSelected = true;
                        scope.model.Elements[0].Elements.every(function (item) {
                            item.isLoaded = false;
                        });
                        scope.model.Elements[0].Elements[0].isLoaded = true;
                    }
                }
            }

            scope.SetParentVM = function (parent, model) {
                model.ParentVM = parent;
            };

            scope.selectControlOnDoubleClick = function (objChild, event) {
                selectControlOnDoubleClick(objChild, event);
            };

            scope.selectControl = function (objChild, event) {
                selectControl(objChild, event, scope.formodel);
            };

            //#region Methods for Add/Remove Tabs From Tab Container 
            scope.AddNewTabClick = function (objTabs) {

                if (objTabs) {
                    $rootScope.UndRedoBulkOp("Start");
                    var tabsheetId = CreateControlID(scope.formodel, "NewPage", "sfwTabSheet");
                    var newTabSheetModel = { Name: 'sfwTabSheet', Value: '', prefix: 'swc', dictAttributes: { ID: tabsheetId, HeaderText: "New Page" }, Elements: [], Children: [] };
                    newTabSheetModel.ParentVM = objTabs;
                    newTabSheetModel.isLoaded = true;
                    var newSfxTableModel = { Name: 'sfwTable', Value: '', prefix: 'swc', dictAttributes: { ID: '' }, Elements: [], Children: [] };
                    newSfxTableModel.dictAttributes.ID = CreateControlID(scope.formodel, "Table", "sfwTable", false);
                    newSfxTableModel.ParentVM = newTabSheetModel;

                    $rootScope.PushItem(newSfxTableModel, newTabSheetModel.Elements);

                    var newSfxRowModel = { Name: 'sfwRow', Value: '', prefix: 'swc', dictAttributes: {}, Elements: [], Children: [] };
                    newSfxRowModel.ParentVM = newSfxTableModel;

                    var newSfxCellModel = { Name: 'sfwColumn', Value: '', prefix: 'swc', dictAttributes: {}, Elements: [], Children: [] };
                    newSfxCellModel.ParentVM = newSfxRowModel;
                    $rootScope.PushItem(newSfxCellModel, newSfxRowModel.Elements);

                    newSfxCellModel = { Name: 'sfwColumn', Value: '', prefix: 'swc', dictAttributes: {}, Elements: [], Children: [] };
                    newSfxCellModel.ParentVM = newSfxRowModel;
                    $rootScope.PushItem(newSfxCellModel, newSfxRowModel.Elements);


                    newSfxCellModel = { Name: 'sfwColumn', Value: '', prefix: 'swc', dictAttributes: {}, Elements: [], Children: [] };
                    newSfxCellModel.ParentVM = newSfxRowModel;
                    $rootScope.PushItem(newSfxCellModel, newSfxRowModel.Elements);

                    newSfxCellModel = { Name: 'sfwColumn', Value: '', prefix: 'swc', dictAttributes: {}, Elements: [], Children: [] };
                    newSfxCellModel.ParentVM = newSfxRowModel;
                    $rootScope.PushItem(newSfxCellModel, newSfxRowModel.Elements);

                    $rootScope.PushItem(newSfxRowModel, newSfxTableModel.Elements);

                    $rootScope.PushItem(newTabSheetModel, objTabs.Elements);
                    $rootScope.UndRedoBulkOp("End");
                    SetFormSelectedControl(scope.formodel, newTabSheetModel);
                    objTabs.SelectedTabSheet = newTabSheetModel;
                    objTabs.SelectedTabSheet.IsSelected = true;
                    //tabobj = newTabSheetModel;
                }
            };

            scope.DeleteNewTabClick = function (objTabs, objTabSheet) {
                if (objTabSheet) {
                    if (objTabs) {
                        $SgMessagesService.Message('Delete Tab Sheet', 'Do you want to Delete Selected Tab Sheet ?', true, function (action) {
                            if (action) {
                                $rootScope.UndRedoBulkOp("Start");
                                var index = objTabs.Elements.indexOf(objTabSheet);
                                $rootScope.DeleteItem(objTabSheet, objTabs.Elements);
                                if (objTabs.Elements.length > 0) {
                                    index--;
                                    if (index < 0) {
                                        index = 0;
                                    }

                                    SetFormSelectedControl(scope.formodel, objTabs.Elements[index]);
                                    objTabs.SelectedTabSheet = objTabs.Elements[index];
                                    objTabs.SelectedTabSheet.IsSelected = true;
                                    //tabobj = objTabs.Elements[index];
                                }
                                else {
                                    var objTabContainer = FindParent(scope.formodel.SelectedControl, "sfwTabContainer", true);
                                    if (objTabContainer && objTabContainer.ParentVM) {
                                        $rootScope.DeleteItem(objTabContainer, objTabContainer.ParentVM.Elements);
                                    }
                                }
                                $rootScope.UndRedoBulkOp("End");
                            }
                        });

                    }
                }
            };

            //#endregion

            scope.getTabID = function (item, ishash) {
                if (ishash) {
                    return "#" + item.dictAttributes.ID;
                }
                return item.dictAttributes.ID;
            };

            //#region tabsheet menu Option

            scope.tabsheetmenuOptions = [
                ['Move', [

                    ['Move Tabsheet Left', function ($itemScope) {

                        if ($itemScope.tabs && $itemScope.tabs.Name == "sfwTabSheet" && $itemScope.tabs.ParentVM.Elements.length > 0) {
                            var ColIndex = $itemScope.tabs.ParentVM.Elements.indexOf($itemScope.tabs);
                            if (ColIndex > 0) {
                                var model = $itemScope.tabs.ParentVM.Elements[ColIndex];
                                if (model) {
                                    $rootScope.UndRedoBulkOp("Start");
                                    //Removing
                                    $rootScope.DeleteItem($itemScope.tabs.ParentVM.Elements[ColIndex], $itemScope.tabs.ParentVM.Elements);
                                    //Adding
                                    $rootScope.InsertItem(model, $itemScope.tabs.ParentVM.Elements, ColIndex - 1);
                                    $rootScope.UndRedoBulkOp("End");
                                }
                            }
                        }

                    }, function ($itemScope) {
                        return true;
                    }, null],
                    ['Move Tabsheet Right', function ($itemScope) {
                        if ($itemScope.tabs && $itemScope.tabs.Name == "sfwTabSheet" && $itemScope.tabs.Elements.length > 0) {
                            var ColCount = $itemScope.tabs.ParentVM.Elements.length;
                            var ColIndex = $itemScope.tabs.ParentVM.Elements.indexOf($itemScope.tabs);
                            if (ColIndex < ColCount - 1) {

                                var model = $itemScope.tabs.ParentVM.Elements[ColIndex];
                                if (model) {
                                    $rootScope.UndRedoBulkOp("Start");
                                    //Removing
                                    $rootScope.DeleteItem($itemScope.tabs.ParentVM.Elements[ColIndex], $itemScope.tabs.ParentVM.Elements);
                                    //Adding
                                    $rootScope.InsertItem(model, $itemScope.tabs.ParentVM.Elements, ColIndex + 1);
                                    $rootScope.UndRedoBulkOp("End");
                                }
                            }
                        }

                    }, function ($itemScope) {
                        scope.selectControl($itemScope.tabs, event, scope.formodel);
                        return true;
                    }, null],
                ], function ($itemScope) {
                    return true;
                }],
            ];
            //#endregion

        }
    }
}]);

app.directive("gridControlDirective", ["$compile", "$rootScope", "$ValidationService", "$GetEntityFieldObjectService", "$SgMessagesService", function ($compile, $rootScope, $ValidationService, $GetEntityFieldObjectService, $SgMessagesService) {
    return {
        restrict: "E",
        replace: true,
        scope: {
            model: '=',
            formodel: '=',

            objparent: '=',
            lstloadedentitytrees: '=',
            lstloadedentitycolumnstree: '=',
            lstdisplayentities: '=',
            entitytreename: '=',
            buttonsCollection: '='
        },
        template: function () {
            var strTemplate = getHtmlFromServer('Form/views/Controls/GridControlView.html');
            return strTemplate;
        },
        link: function (scope, element, attributes) {

            scope.selectControlOnDoubleClick = function (objChild, event) {
                selectControlOnDoubleClick(objChild, event);
            };

            scope.selectControl = function (objChild, event) {
                selectControl(objChild, event, scope.formodel);
            };

            scope.getHeaderColspan = function (item) {
                if (item.Elements.length > 0) {
                    var columns = item.Elements[0];
                    return columns.Elements.length;
                }
                else {
                    return 1;
                }
            };

            scope.getValue = function (item) {
                return getDisplayValue(item);
            };

            //#region Add New Control
            var RepeaterControldialog;
            scope.objRepeaterControl;
            scope.ErrorMessageForDisplay = "";

            scope.OnAddControlToCellClick = function (cellVM, aParam, blnIsGrid) {
                if (aParam) {
                    var strControlName = aParam;
                    if (strControlName == "sfwButton") {
                        var newScope = scope.$new(true);
                        newScope.item = cellVM;
                        newScope.formodel = scope.formodel;

                        newScope.CreateButtonDialog = $rootScope.showDialog(newScope, "Button Details", "Form/views/CreateButtonWizard/CreateButtonControl.html", { width: 660, height: 550 });

                    }
                    else if (strControlName == "sfwListView") {
                        scope.ErrorMessageForDisplay = "";
                        var strID = CreateControlID(scope.formodel, "RepeaterViewPanel", "sfwListView");
                        var prefix = "swc";
                        scope.objRepeaterControl = { Name: "sfwListView", value: '', prefix: prefix, dictAttributes: { ID: strID }, Elements: [], Children: [] };
                        scope.ParentEntityName = formodel.dictAttributes.sfwEntity;
                        scope.objRepeaterControl.selectedobjecttreefield;
                        scope.objRepeaterControl.lstselectedobjecttreefields = [];

                        var dialogScope = scope.$new(true);
                        dialogScope.objRepeaterControl = scope.objRepeaterControl;
                        dialogScope.objRepeaterControl.LstDisplayedEntities = [];
                        dialogScope.ParentEntityName = scope.ParentEntityName;
                        dialogScope.RepeaterControldialog = $rootScope.showDialog(dialogScope, "Repeater Control", "Form/views/RepeaterControlTemplate.html", { width: 500, height: 600 });
                    }
                    else {
                        var newScope = scope.$new();
                        AddControlToCell(cellVM, strControlName, undefined, blnIsGrid, scope.formodel, scope.model, $rootScope, newScope, $ValidationService, $GetEntityFieldObjectService);
                    }
                }
            };

            scope.onRepeaterControlOkClick = function () {
                if (scope.objRepeaterControl) {
                    scope.objRepeaterControl.dictAttributes.sfwSelection = "Many";
                    scope.objRepeaterControl.dictAttributes.sfwCaption = "List View";
                    scope.objRepeaterControl.dictAttributes.AllowPaging = "True";
                    scope.objRepeaterControl.dictAttributes.PageSize = "1";

                    var selectedField = scope.objRepeaterControl.selectedobjecttreefield;

                    if (selectedField) {
                        var displayEntity = getDisplayedEntity(scope.objRepeaterControl.LstDisplayedEntities);
                        var displayName = displayEntity.strDisplayName;
                        fieldName = selectedField.ID;
                        if (displayName != "") {
                            fieldName = displayName + "." + selectedField.ID;
                        }
                        var entitycollname = fieldName; //GetItemPathForEntityObject(selectedField);
                        scope.objRepeaterControl.dictAttributes.sfwEntityField = entitycollname;
                        var parentenetityname = selectedField.Entity;
                        var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                        scope.objRepeaterControl.dictAttributes.sfwDataKeyNames = GetTableKeyFields(parentenetityname, entityIntellisenseList);
                    }

                    var prefix = "swc";

                    var objListTableModel = { Name: "sfwTable", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                    objListTableModel.ParentVM = scope.objRepeaterControl;
                    var strCtrlId = CreateControlID(scope.formodel, "NewPage", "sfwTable");
                    objListTableModel.dictAttributes.ID = strCtrlId;

                    var sfxRowModel = { Name: "sfwRow", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                    sfxRowModel.ParentVM = objListTableModel;

                    var newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                    newSfxCellModel.ParentVM = sfxRowModel;
                    sfxRowModel.Elements.push(newSfxCellModel);

                    newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                    newSfxCellModel.ParentVM = sfxRowModel;
                    sfxRowModel.Elements.push(newSfxCellModel);

                    newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                    newSfxCellModel.ParentVM = sfxRowModel;
                    sfxRowModel.Elements.push(newSfxCellModel);

                    newSfxCellModel = { Name: "sfwColumn", value: '', prefix: prefix, dictAttributes: {}, Elements: [], Children: [] };
                    newSfxCellModel.ParentVM = sfxRowModel;
                    sfxRowModel.Elements.push(newSfxCellModel);

                    objListTableModel.Elements.push(sfxRowModel);
                    scope.objRepeaterControl.Elements.push(objListTableModel);
                    scope.objRepeaterControl.initialvisibilty = true;
                    scope.objRepeaterControl.isLoaded = true;
                    $rootScope.PushItem(scope.objRepeaterControl, scope.dropdata.Elements);
                }
                scope.onRepeaterControlCancelClick();
            };

            scope.onRepeaterControlCancelClick = function () {
                RepeaterControldialog.close();
            };


            //#endregion

            scope.templatefieldmenuOptions = [
                ['Delete Column', function ($itemScope) {
                    var col = $itemScope.ele;
                    if (col) {
                        if (col.ParentVM.Elements.length <= 1) {
                            $SgMessagesService.Message('Message', 'The column cannot be deleted. Atleast one column should be present in the grid.');
                        }
                        else {
                            var iColumnIndex = col.ParentVM.Elements.indexOf(col);
                            $rootScope.DeleteItem(col, col.ParentVM.Elements);
                            if (iColumnIndex >= col.ParentVM.Elements.length - 1) {
                                iColumnIndex -= 1;
                            }
                            if (iColumnIndex > -1 && iColumnIndex < col.ParentVM.Elements.length && col.ParentVM.Elements[iColumnIndex]) {
                                SetFormSelectedControl(scope.formodel, col.ParentVM.Elements[iColumnIndex], null);
                            }
                            if (scope.formodel.dictAttributes.ID.startsWith("wfp") && col && col.ParentVM.ParentVM && col.ParentVM.ParentVM.Name == "sfwGridView") {
                                scope.AddShowDataRow(col.ParentVM.ParentVM, false, "");
                            }
                        }
                    }
                }, function ($itemScope, event) {
                    scope.selectControl($itemScope.ele, event, scope.formodel);
                    if (scope.IsDataView) {
                        return false;
                    }
                    return true;

                }], null,
                ['Remove Header', function ($itemScope) {
                    var col = $itemScope.ele;
                    if (col && col.Elements.length > 0) {
                        var obj = col.Elements.filter(function (x) { return x.Name == "HeaderTemplate"; });
                        if (obj && obj.length > 0) {
                            var index = col.Elements.indexOf(obj[0]);
                            if (index > -1) {
                                $rootScope.UndRedoBulkOp("Start");
                                $rootScope.DeleteItem(obj[0], col.Elements);
                                if (col.HeaderTemplateLabel) {
                                    $rootScope.EditPropertyValue(col.HeaderTemplateLabel.dictAttributes.sfwEntityField, col.HeaderTemplateLabel.dictAttributes, "sfwEntityField", "");
                                }
                                $rootScope.UndRedoBulkOp("End");
                            }
                        }
                    }
                }, function ($itemScope) {
                    if ($itemScope.formodel && $itemScope.formodel.dictAttributes.sfwType == "Lookup") {
                        return false;
                    }
                    else {

                        if (scope.showHeaderTemplate($itemScope.ele)) {
                            return true;
                        }
                        else {
                            return false;
                        }
                    }

                }], null,
                ['Remove Footer', function ($itemScope) {
                    var col = $itemScope.ele;
                    var col = $itemScope.ele;
                    if (col && col.Elements.length > 0) {
                        var obj = col.Elements.filter(function (x) { return x.Name == "FooterTemplate"; });
                        if (obj && obj.length > 0) {
                            var index = col.Elements.indexOf(obj[0]);
                            if (index > -1) {
                                //  col.Elements.splice(index, 1);
                                $rootScope.DeleteItem(obj[0], col.Elements);

                            }
                        }
                    }
                }, function ($itemScope) {
                    if ($itemScope.formodel && $itemScope.formodel.dictAttributes.sfwType == "Lookup") {
                        return false;
                    }
                    else {

                        if (scope.showFooterTemplate($itemScope.ele)) {
                            return true;
                        }
                        else {
                            return false;
                        }
                    }

                }], null,
                ['Move Column Left', function ($itemScope) {
                    var col = $itemScope.ele;
                    if (col) {
                        var ColIndex = col.ParentVM.Elements.indexOf(col);
                        if (ColIndex > 0) {
                            var model = col.ParentVM.Elements[ColIndex];
                            if (model) {
                                $rootScope.UndRedoBulkOp("Start");

                                //Removing
                                $rootScope.DeleteItem(col.ParentVM.Elements[ColIndex], col.ParentVM.Elements);

                                //Adding
                                $rootScope.InsertItem(model, col.ParentVM.Elements, ColIndex - 1);

                                $rootScope.UndRedoBulkOp("End");
                            }

                            // this.SelectControlAfterMoveOpe(selectedControlVM, curRowVM.RowIndex, cellVM.ColIndex - 1);
                        }
                    }
                }, function ($itemScope) {
                    if (scope.IsDataView) {
                        return false;
                    }
                    return true;

                }, null, "Ctrl+L"], null,
                ['Move Column Right', function ($itemScope) {
                    var col = $itemScope.ele;
                    if (col) {
                        var ColCount = col.ParentVM.Elements.length;
                        var ColIndex = col.ParentVM.Elements.indexOf(col);
                        if (ColIndex < ColCount - 1) {

                            var model = col.ParentVM.Elements[ColIndex];
                            if (model) {
                                $rootScope.UndRedoBulkOp("Start");
                                //Removing
                                $rootScope.DeleteItem(col.ParentVM.Elements[ColIndex], col.ParentVM.Elements);

                                //Adding
                                $rootScope.InsertItem(model, col.ParentVM.Elements, ColIndex + 1);

                                $rootScope.UndRedoBulkOp("End");
                            }

                        }
                    }
                }, function ($itemScope) {
                    if (scope.IsDataView) {
                        return false;
                    }
                    return true;

                }, null, "Ctrl+R"], null,
                ['Add Control', function ($itemScope) {
                    var itmtemplate = $itemScope.ele.Elements[0];
                    if (itmtemplate) {
                        scope.$parent.openChangeControlDialog("addcontrol", itmtemplate, true);

                    }
                }, function ($itemScope) {
                    if (scope.IsDataView) {
                        return false;
                    }
                    return true;
                }], null
            ];

            scope.itemtemplatemenuOptions = [
                ['Add Control', function ($itemScope) {
                    var itmtemplate = $itemScope.ele.Elements[0];
                    if (itmtemplate) {
                        scope.$parent.openChangeControlDialog("addcontrol", itmtemplate, true);
                    }
                }, null],
                ['Paste Control', function ($itemScope) {
                    if ($itemScope.ele.Elements[0]) {
                        scope.OnPasteControl($itemScope.ele.Elements[0]);
                    }
                }, null, "Ctrl+V"]
            ];

            scope.OnPasteControl = function (currmodel) {
                var filescope = getCurrentFileScope();
                if (filescope && filescope.OnPasteControl) {
                    filescope.OnPasteControl(currmodel);
                }

            };

            scope.setValueToEntityField = function (dataColumn, dataRowModel) {
                angular.forEach(dataRowModel.Elements, function (item) {
                    if (item.dictAttributes.sfwEntityField === dataColumn.dictAttributes.sfwEntityField) {
                        item.dictAttributes.Value = dataColumn.dictAttributes.Value;
                    }
                    else {
                        scope.setValueToEntityField(dataColumn, item);
                    }
                });
            };

            scope.AddShowDataRow = function (model, flagAddNewRow, event) {
                if (model) {
                    var objGridColumnModel;
                    var objDataRowsModel;
                    for (var i = 0; i < model.Elements.length; i++) {
                        if (model.Elements[i].Name === "Columns") {
                            objGridColumnModel = model.Elements[i].Elements;
                        }
                        else if (model.Elements[i].Name === "Data") {
                            objDataRowsModel = model.Elements[i].Elements;
                        }
                    }

                    if ((objDataRowsModel && objDataRowsModel.length > 0) || (scope.model.prototypemodel && scope.model.prototypemodel.Elements && scope.model.prototypemodel.Elements.length > 0)) {
                        var objDataRow = { dictAttributes: { sfwEntityField: "", Value: "" }, Elements: [], Name: "DataRow", Value: "", prefix: "" };
                        for (var i = 0; i < objGridColumnModel.length; i++) {
                            var templateField = objGridColumnModel[i];
                            var objDataItemRow = { dictAttributes: {}, Elements: [], Name: "DataItem", Value: "", prefix: "" };
                            for (var j = 0; j < templateField.Elements[0].Elements.length; j++) {
                                if (templateField.Elements[0].Elements[j].Name != "cellformat") {
                                    var objDataColumn = { dictAttributes: { sfwEntityField: "", Value: "" }, Elements: [], Name: "DataColumn", Value: "", prefix: "" };
                                    if (templateField.Elements[0].Elements[j].dictAttributes.sfwEntityField) {
                                        objDataColumn.dictAttributes.sfwEntityField = templateField.Elements[0].Elements[j].dictAttributes.sfwEntityField;
                                    }
                                    objDataItemRow.Elements.push(objDataColumn);
                                }
                            }
                            objDataRow.Elements.push(objDataItemRow);
                        }

                        var objData = { dictAttributes: {}, Elements: [], Name: "Data", Value: "", prefix: "" };
                        //objData.Elements.push(objDataRow);
                        //model.Elements.push(objData);
                        //scope.prototypemodel = objData;
                        if (flagAddNewRow) {
                            objDataRow.isEditable = true;
                            scope.selectedDataRow = objDataRow;
                            scope.model.prototypemodel.Elements.push(objDataRow);
                        }
                        else if (objDataRowsModel) {
                            for (var i = 0; i < objDataRowsModel.length; i++) {
                                var objNewDataRow = {};
                                angular.copy(objDataRow, objNewDataRow);
                                for (var j = 0; j < objDataRowsModel[i].Elements.length; j++) {
                                    scope.setValueToEntityField(objDataRowsModel[i].Elements[j], objNewDataRow);
                                }
                                objData.Elements.push(objNewDataRow);
                            }
                            scope.model.prototypemodel = objData;
                        }
                    }
                    else if (flagAddNewRow) {
                        var objDataRow = { dictAttributes: { sfwEntityField: "", Value: "" }, Elements: [], Name: "DataRow", Value: "", prefix: "" };
                        for (var i = 0; i < objGridColumnModel.length; i++) {
                            var templateField = objGridColumnModel[i];
                            var objDataItemRow = { dictAttributes: {}, Elements: [], Name: "DataItem", Value: "", prefix: "" };
                            for (var j = 0; j < templateField.Elements[0].Elements.length; j++) {
                                if (templateField.Elements[0].Elements[j].Name != "cellformat") {
                                    var objDataColumn = { dictAttributes: { sfwEntityField: "", Value: "" }, Elements: [], Name: "DataColumn", Value: "", prefix: "" };
                                    if (templateField.Elements[0].Elements[j].dictAttributes.sfwEntityField) {
                                        objDataColumn.dictAttributes.sfwEntityField = templateField.Elements[0].Elements[j].dictAttributes.sfwEntityField;
                                    }
                                    objDataItemRow.Elements.push(objDataColumn);
                                }
                            }
                            objDataRow.Elements.push(objDataItemRow);
                        }

                        var objData = { dictAttributes: {}, Elements: [], Name: "Data", Value: "", prefix: "" };
                        objData.Elements.push(objDataRow);
                        objDataRow.isEditable = true;
                        scope.selectedDataRow = objDataRow;
                        scope.model.prototypemodel = objData;
                    }

                }
                if (event) {
                    event.stopPropagation();
                }
            };

            scope.ShowGridDesingView = function (model) {
                scope.IsDataView = false;
                var IsDataElement = false;
                if (model && model.prototypemodel) {
                    var objDataModel = GetPrototypeDataModel(model.prototypemodel);
                    if (model.Elements.length > 1) {
                        for (var i = 0; i < model.Elements.length; i++) {
                            if (model.Elements[i].Name == "Data") {
                                IsDataElement = true;
                                model.Elements[i].Elements = objDataModel;
                                break;
                            }
                        }
                    }
                    if (!IsDataElement) {
                        model.Elements.push({ dictAttributes: {}, Elements: objDataModel, Name: "Data", Value: "", prefix: "" });
                    }
                }
            };

            scope.DeleteDataRow = function (model) {
                if (model.prototypemodel && scope.selectedDataRow) {
                    for (var i = 0; i < model.prototypemodel.Elements.length; i++) {
                        if (model.prototypemodel.Elements[i] == scope.selectedDataRow) {
                            model.prototypemodel.Elements.splice(i, 1);
                            if (model.prototypemodel.Elements.length > i) {
                                scope.selectedDataRow = model.prototypemodel.Elements[i];
                            }
                            else if (model.prototypemodel.Elements.length > 0) {
                                scope.selectedDataRow = model.prototypemodel.Elements[model.prototypemodel.Elements.length - 1];
                            }
                            break;
                        }
                    }
                }
            };

            scope.moveDown = function () {
                if (scope.selectedDataRow && scope.model.prototypemodel && scope.model.prototypemodel.Elements && scope.model.prototypemodel.Elements.length > 1) {
                    var index = scope.model.prototypemodel.Elements.indexOf(scope.selectedDataRow);
                    if (index < scope.model.prototypemodel.Elements.length - 1) {
                        scope.model.prototypemodel.Elements.splice(index, 1);
                        scope.model.prototypemodel.Elements.splice(index + 1, 0, scope.selectedDataRow);
                    }
                }
            };

            scope.moveUp = function () {
                if (scope.selectedDataRow && scope.model.prototypemodel && scope.model.prototypemodel.Elements && scope.model.prototypemodel.Elements.length > 1) {
                    var index = scope.model.prototypemodel.Elements.indexOf(scope.selectedDataRow);
                    if (index > 0) {
                        scope.model.prototypemodel.Elements.splice(index, 1);
                        scope.model.prototypemodel.Elements.splice(index - 1, 0, scope.selectedDataRow);
                    }
                }
            };

            scope.SetParentVM = function (parent, model) {
                model.ParentVM = parent;

            };

            //#region Grid Header, Footer Template Methods
            scope.showHeaderTemplate = function (templateField) {
                var isHeaderTemplatePresent = false;
                if (templateField) {
                    var lst = templateField.Elements.filter(function (ele) { return ele.Name == "HeaderTemplate"; });
                    if (lst && lst.length > 0) {
                        if (lst[0].Elements && lst[0].Elements.some(function (ele) { if (ele.dictAttributes.sfwEntityField) return ele.Name == "sfwLabel"; })) {
                            isHeaderTemplatePresent = true;
                        }
                    }
                }
                return isHeaderTemplatePresent;
            };

            scope.openHeaderLabelProperty = function (templateField, event) {
                if (templateField) {
                    var lst = templateField.Elements.filter(function (ele) { return ele.Name == "HeaderTemplate"; });
                    if (lst && lst.length > 0) {
                        if (lst[0].Elements) {
                            lst[0].ParentVM = templateField;
                            var elements = lst[0].Elements.filter(function (ele) { return ele.Name == "sfwLabel"; });
                            if (elements && elements.length > 0) {
                                elements[0].ParentVM = lst[0];
                                scope.selectControl(elements[0], event, scope.formodel);
                            }
                        }
                    }
                }
            };

            scope.showFooterTemplate = function (templateField) {
                var isFooterTemplatePresent = false;
                if (templateField) {
                    var lst = templateField.Elements.filter(function (ele) { return ele.Name == "FooterTemplate"; });
                    if (lst && lst.length > 0) {
                        if (lst[0].Elements && lst[0].Elements.some(function (ele) { return ele.Name == "sfwLabel"; })) {
                            isFooterTemplatePresent = true;
                        }
                    }
                }
                return isFooterTemplatePresent;
            };

            scope.openFooterLabelProperty = function (templateField, event) {
                if (templateField) {
                    var lst = templateField.Elements.filter(function (ele) { return ele.Name == "FooterTemplate"; });
                    if (lst && lst.length > 0) {
                        if (lst[0].Elements) {
                            lst[0].ParentVM = templateField;
                            var elements = lst[0].Elements.filter(function (ele) { return ele.Name == "sfwLabel"; });
                            if (elements && elements.length > 0) {
                                elements[0].ParentVM = lst[0];
                                scope.selectControl(elements[0], event, scope.formodel);
                            }
                        }
                    }
                }
            };

            //#endregion

            scope.selectDataRowInPrototypeGrid = function (ele, event) {
                scope.selectedDataRow = ele;
                event.stopPropagation();
            };

        }
    }
}]);

app.directive("usercontrolControlDirective", ["$compile", "$rootScope", function ($compile, $rootScope) {
    return {
        restrict: "E",
        replace: true,
        scope: {
            model: '=',
            formodel: '=',

            objparent: '=',
            lstloadedentitytrees: '=',
            lstloadedentitycolumnstree: '=',
            lstdisplayentities: '=',
            entitytreename: '=',
            buttonsCollection: '='
        },
        template: function () {
            var strTemplate = getHtmlFromServer('Form/views/Controls/UsercontrolControlView.html');
            return strTemplate;
        },
        link: function (scope, element, attributes) {

            scope.getValue = function (item) {
                return getDisplayValue(item);
            };

            scope.selectControlOnDoubleClick = function (objChild, event) {
                selectControlOnDoubleClick(objChild, event);
            };

            scope.selectControl = function (objChild, event) {
                selectControl(objChild, event, scope.formodel);
            };


        }
    }
}]);

app.directive("commonControlDirective", ["$compile", "$rootScope", function ($compile, $rootScope) {
    var SetImage = function (item, IsSelected) {
        switch (item.Name) {
            case 'sfwRadioButton':
                if (IsSelected) {
                    return "images/Form/icon-Radio-Button-Selected.svg";
                }
                else {
                    return "images/Form/icon-radio.svg";
                }
                break;
            case 'sfwCheckBox':
                if (item.dictAttributes.sfwIsSwitch && item.dictAttributes.sfwIsSwitch == "True") {
                    if (IsSelected) {
                        return "images/Form/icon-switch-CheckBox-Selected.svg";
                    }
                    else {
                        return "images/Form/icon-switch-CheckBox.svg";
                    }
                }
                else {
                    if (IsSelected) {
                        return "images/Form/icon-Checkbox-Selected.svg";
                    }
                    else {
                        return "images/Form/icon-checkbox.svg";
                    }
                }
                break;
            case 'sfwImage':
                if (IsSelected) {
                    return "images/Form/icon-Image-Selected.svg";
                }
                else {
                    return "images/Form/icon-image.svg";
                }
                break;
            case 'hr':
                if (IsSelected) {
                    return "images/Form/horizontal_rule - selected.svg";
                }
                else {
                    return "images/Form/horizontal_rule.svg";
                }
                break;
            case 'br':
                if (IsSelected) {
                    return "images/Form/break - selected.svg";
                }
                else {
                    return "images/Form/break.svg";
                }
                break;
            case 'RequiredFieldValidator':
                if (IsSelected) {
                    return "images/Form/icon-Required-Field-Validator-Selected.svg";
                }
                else {
                    return "images/Form/icon-required-field-validator.svg";
                }
                break;
            case 'CompareValidator':
                if (IsSelected) {
                    return "images/Form/icon-Compare-Validator-Selected.svg";
                }
                else {
                    return "images/Form/icon-compare-validator.svg";
                }
                break;
            case 'sfwCRViewer':
                if (IsSelected) {
                    return "images/Form/icon-CR-Viewer-Selected.svg";
                }
                else {
                    return "images/Form/CR_Viewer.svg";
                }
                break;
            case 'sfwSoftErrors':
                if (IsSelected) {
                    return "images/Form/icon-Soft-Errors-Selected.svg";
                }
                else {
                    return "images/Form/Soft_Errors.svg";
                }
                break;
            case 'sfwFileLayout':
                if (IsSelected) {
                    return "images/Form/icon-File-Layout-Selected.svg";
                }
                else {
                    return "images/Form/File_Layout.svg";
                }
                break;
            case 'sfwFileUpload':
                if (IsSelected) {
                    return "images/Form/icon-File-Upload-Selected.svg";
                }
                else {
                    return "images/Form/File_Upload.svg";
                }
                break;
            case 'sfwListPicker':
                if (IsSelected) {
                    return "images/Form/icon-Listpicker-Selected.svg";
                }
                else {
                    return "images/Form/icon-mant4.svg";
                }
                break;
            case 'sfwSourceList':
                if (IsSelected) {
                    return "images/Form/icon-Sourcelist-Selected.svg";
                }
                else {
                    return "images/Form/icon-mant5.svg";
                }
                break;
            case 'sfwMultiCorrespondence':
                if (IsSelected) {
                    return "images/Form/icon-Required-Field-Validator-Selected.svg";
                }
                else {
                    return "images/Form/icon-required-field-validator.svg";
                }
                break;
            case 'sfwTargetList':
                if (IsSelected) {
                    return "images/Form/icon-TargetList-Selected.svg";
                }
                else {
                    return "images/Form/icon-mant6.svg";
                }
                break;

            case 'sfwOpenDetail':
                if (IsSelected) {
                    return "images/Form/icon-Open-Detail-Selected.svg";
                }
                else {
                    return "images/Form/icon-open-detail.svg";
                }
                break;

            case 'sfwRuleViewer':
                if (IsSelected) {
                    return "images/Form/icon-Rule-Viewer-Selected.svg";
                }
                else {
                    return "images/Form/icon-Rule-Viewer.svg";
                }
                break;
            case 'sfwSlider':
                if (IsSelected) {
                    return "images/Form/icon-slider-Selected.svg";
                }
                else {
                    return "images/Form/icon-slider.svg";
                }
                break;
            case 'sfwQuestionnairePanel':
                if (IsSelected) {
                    return "images/Form/icon-QuestionnairePanel-selected.svg";
                }
                else {
                    return "images/Form/icon-QuestionnairePanel.svg";
                }
                break;
            case 'sfwDateTimePicker':
                if (IsSelected) {
                    return "images/Form/icon-DateTimePicker-selected.png";
                }
                else {
                    return "images/Form/icon-DateTimepicker.png";
                }
                break;
            case 'sfwKnob':
                if (IsSelected) {
                    return "images/Form/icon-knob-selected.svg";
                }
                else {
                    return "images/Form/icon-knob.svg";
                }
                break;
            case 'sfwCheckBoxList':
                if (IsSelected) {
                    return "images/Form/icon-checkboxlist.svg";
                }
                else {
                    return "images/Form/icon-checkboxlist.svg";
                }
                break;
            case 'sfwRadioButtonList':
                if (IsSelected) {
                    return "images/Form/icon-radiobuttonlist.svg";
                }
                else {
                    return "images/Form/icon-radiobuttonlist.svg";
                }
                break;
            case 'sfwChart':
                if (IsSelected) {
                    return "images/Form/icon-chart.svg";
                }
                else {
                    return "images/Form/icon-chart.svg";
                }
                break;
            case 'sfwCalendar':
                if (IsSelected) {
                    return "images/Form/icon-calendar-selected.png";
                }
                else {
                    return "images/Form/icon-calendar.png";
                }
                break;
            case 'sfwScheduler':
                if (IsSelected) {
                    return "images/Form/icon-scheduler-selected.svg";
                }
                else {
                    return "images/Form/icon-scheduler.svg";
                }
                break;
            case 'sfwListBox':
                if (IsSelected) {
                    return "images/Form/icon-ListBox-Selected.svg";
                }
                else {
                    return "images/Form/icon-ListBox.svg";
                }
                break;
            case 'sfwJSONData':
                if (IsSelected) {
                    return "images/Form/JSON_Data_selected.svg";
                }
                else {
                    return "images/Form/JSON_Data.svg";
                }
                break;
            case 'sfwCaptcha':
                if (IsSelected) {
                    return "images/Form/captcha_control_blue.svg";
                }
                else {
                    return "images/Form/captcha_control_normal.svg";
                }
                break;

        }

    };

    return {
        restrict: "E",
        replace: true,
        scope: {
            model: '=',
            formodel: '=',
        },
        template: function () {
            var strTemplate = getHtmlFromServer('Form/views/Controls/CommonControlView.html');
            return strTemplate;
        },
        link: function (scope, element, attributes) {
            scope.getDisplayClass = function (item) {
                return getDisplayClass(item);
            };

            scope.strImageSource = SetImage(scope.model, false);

            scope.getValue = function (item) {
                return getDisplayValue(item);
            };

            scope.getCodeValue = function (model, event) {

                selectControl(model, event, scope.formodel);
                if (model.Name == "sfwListPicker" || model.Name == "sfwSourceList" || model.Name == "sfwRadioButtonList" || model.Name == "sfwCascadingDropDownList" || model.Name == "sfwDropDownList" || model.Name == "sfwCheckBoxList" || model.Name == "sfwMultiSelectDropDownList" || model.Name == "sfwListBox") {
                    if ((!model.dictAttributes.sfwLoadType || model.dictAttributes.sfwLoadType == "" || model.dictAttributes.sfwLoadType == "CodeGroup" || (model.dictAttributes.sfwLoadType == "Items" && model.Elements.length == 0)) && (model.dictAttributes.sfwLoadSource || model.placeHolder)) {
                        $rootScope.IsLoading = true;

                        //#region Code Value receive
                        // clear selection if the dialog opens for code value 
                        if (event) {
                            $(event.target).blur();
                            window.getSelection().removeAllRanges();
                        }
                        var codeID = "";
                        if (model.dictAttributes.sfwLoadSource && model.dictAttributes.sfwLoadType == "CodeGroup") {
                            codeID = model.dictAttributes.sfwLoadSource;
                        }
                        else {
                            codeID = model.placeHolder;
                        }
                        $.connection.hubMain.server.getCodeValuesForDropDown(codeID).done(function (data) {
                            scope.$evalAsync(function () {
                                $rootScope.IsLoading = false;

                                var DialogScope = scope.$new(true);
                                DialogScope.ErrorMessage = "";
                                if (data && data.length > 0) {
                                    DialogScope.lstCodeValues = data;
                                }
                                else {
                                    DialogScope.ErrorMessage = "No code value exist.";
                                }
                                dialog = $rootScope.showDialog(DialogScope, "Code Values", "Form/views/CodeValueListDialog.html");
                                DialogScope.closeDialog = function () {
                                    dialog.close();
                                };

                            });
                        });
                    }
                    //#endregion
                }
            };

            scope.selectControlOnDoubleClick = function (objChild, event) {
                selectControlOnDoubleClick(objChild, event);
                scope.strImageSource = SetImage(scope.model, true);
            };

            scope.selectControl = function (objChild, event) {
                selectControl(objChild, event, scope.formodel);
                scope.strImageSource = SetImage(scope.model, true);
            };

        }
    }
}]);

app.directive("childpanelControlDirective", ["$compile", "$rootScope", function ($compile, $rootScope) {
    return {
        restrict: "E",
        replace: true,
        scope: {
            model: '=',
            formodel: '=',

            objparent: '=',
            lstloadedentitytrees: '=',
            lstloadedentitycolumnstree: '=',
            lstdisplayentities: '=',
            entitytreename: '=',
            buttonsCollection: '='
        },
        template: function () {
            var strTemplate = getHtmlFromServer('Form/views/Controls/ChildPanelControlView.html');
            return strTemplate;
        },
        link: function (scope, element, attributes) {
            scope.initialvisibilty = true;
            scope.panelId = "";
            if (scope.model.dictAttributes.ID) {
                scope.panelId = "Panel" + scope.model.dictAttributes.ID;
            }
            scope.setInitialVisibility = function () {
                scope.initialvisibilty = !scope.initialvisibilty;
            };
            scope.setVisibility = function (model) {
                if (model.ParentControlName == 'udc' && (model.Name == "sfwPanel" || model.Name == "sfwDialogPanel" || model.Name == "sfwListView")) {
                    scope.initialvisibilty = !scope.initialvisibilty;
                    scope.model.isLoaded = true;
                }
            };

            scope.selectControlOnDoubleClick = function (objChild, event) {
                selectControlOnDoubleClick(objChild, event);
            };

            scope.selectControl = function (objChild, event) {
                selectControl(objChild, event, scope.formodel);
            };

            scope.panelMenuOption = [
                ['Create Compatible Caption', function ($itemScope) {
                    var filescope = getCurrentFileScope();
                    if (scope.model) {
                        if (filescope && filescope.OnCreateCompatibleLabelClickForPanel) {
                            filescope.OnCreateCompatibleLabelClickForPanel(scope.model);
                        }
                    }
                }],
                ['Delete Control', function ($itemScope) {
                    var filescope = getCurrentFileScope();
                    if (scope.model) {
                        if (filescope && filescope.OnDeleteControlClick) {
                            filescope.OnDeleteControlClick(scope.model);
                        }
                    }
                }, function ($itemScope) {
                    if (scope.model) {
                        var objPanel = FindParent(scope.model, "sfwPanel");
                        if (!objPanel) {
                            objPanel = FindParent(scope.model, "sfwWizardStep");
                            if (!objPanel) {
                                objPanel = FindParent(scope.model, "sfwDialogPanel", true);
                                if (!objPanel) {
                                    return false;
                                }
                            }
                        }
                    }
                    return true;
                }],
                ['Cut Control (Ctrl+X)', function ($itemScope) {
                    if (scope.model) {
                        var filescope = getCurrentFileScope();
                        if (filescope && filescope.OnCutControlClick) {
                            filescope.OnCutControlClick(scope.model);
                        }
                    }
                }, function ($itemScope) {
                    if (scope.model) {
                        var objPanel = FindParent(scope.model, "sfwPanel");
                        if (!objPanel) {
                            objPanel = FindParent(scope.model, "sfwWizardStep");
                            if (!objPanel) {
                                objPanel = FindParent(scope.model, "sfwDialogPanel", true);
                                if (!objPanel) {
                                    return false;
                                }
                            }
                        }
                    }
                    return true;
                }],
                ['Copy Control (Ctrl+C)', function ($itemScope) {
                    if (scope.model) {
                        var filescope = getCurrentFileScope();
                        if (filescope && filescope.OnCopyControlClick) {
                            filescope.OnCopyControlClick(scope.model);
                        }
                    }
                }, function ($itemScope) {
                    if (scope.model) {
                        var objPanel = FindParent(scope.model, "sfwPanel");
                        if (!objPanel) {
                            objPanel = FindParent(scope.model, "sfwWizardStep");
                            if (!objPanel) {
                                objPanel = FindParent(scope.model, "sfwDialogPanel", true);
                                if (!objPanel) {
                                    return false;
                                }
                            }
                        }
                    }
                    return true;
                }],
            ];

        }
    }
}]);

app.directive("emptyparentControlDirective", ["$compile", "$rootScope", function ($compile, $rootScope) {
    return {
        restrict: "E",
        replace: true,
        template: function () {
            var strTemplate = getHtmlFromServer('Form/views/Controls/EmptyParentControlView.html');
            return strTemplate;
        },
        link: function (scope, element, attributes) {

        },
        controller: ['$scope', function ($scope) {
            $scope.selectControl = function (objChild, event, formModel) {
                selectControl(objChild, event, formModel);
            };
            $scope.selectControlOnDoubleClick = function (objChild, event) {
                selectControlOnDoubleClick(objChild, event);
            };
        }]
    }
}]);


app.directive("editableControlDirective", ["$compile", "$rootScope", "$EntityIntellisenseFactory", "$ValidationService", "CONSTANTS", function ($compile, $rootScope, $EntityIntellisenseFactory, $ValidationService, CONST) {
    return {
        restrict: "E",
        replace: true,
        scope: {
            model: '=',
            formodel: '=',
            lstloadedentitycolumnstree: '='
        },
        template: function () {
            var strTemplate = getHtmlFromServer('Form/views/Controls/EditableControlView.html');
            return strTemplate;
        },
        link: function (scope, element, attributes) {
            scope.getCodeValue = function (model, event) {

                selectControl(model, event, scope.formodel);
                if (model.Name == "sfwListPicker" || model.Name == "sfwSourceList" || model.Name == "sfwRadioButtonList" || model.Name == "sfwCascadingDropDownList" || model.Name == "sfwDropDownList" || model.Name == "sfwCheckBoxList" || model.Name == "sfwMultiSelectDropDownList" || model.Name == "sfwListBox") {
                    if ((!model.dictAttributes.sfwLoadType || model.dictAttributes.sfwLoadType == "" || model.dictAttributes.sfwLoadType == "CodeGroup" || (model.dictAttributes.sfwLoadType == "Items" && model.Elements.length == 0)) && (model.dictAttributes.sfwLoadSource || model.placeHolder)) {
                        $rootScope.IsLoading = true;

                        //#region Code Value receive
                        // clear selection if the dialog opens for code value 
                        if (event) {
                            $(event.target).blur();
                            window.getSelection().removeAllRanges();
                        }
                        var codeID = "";
                        if (model.dictAttributes.sfwLoadSource && model.dictAttributes.sfwLoadType == "CodeGroup") {
                            codeID = model.dictAttributes.sfwLoadSource;
                        }
                        else {
                            codeID = model.placeHolder;
                        }
                        $.connection.hubMain.server.getCodeValuesForDropDown(codeID).done(function (data) {
                            $rootScope.IsLoading = false;

                            scope.$evalAsync(function () {
                                var DialogScope = scope.$new(true);
                                DialogScope.ErrorMessage = "";
                                if (data && data.length > 0) {
                                    DialogScope.lstCodeValues = data;
                                }
                                else {
                                    DialogScope.ErrorMessage = "No code value exist.";
                                }
                                dialog = $rootScope.showDialog(DialogScope, "Code Values", "Form/views/CodeValueListDialog.html");
                                DialogScope.closeDialog = function () {
                                    dialog.close();
                                };

                            });
                        });
                    }
                    //#endregion
                }
            };

            scope.getDisplayClass = function (item) {
                return getDisplayClass(item);
            };

            scope.selectControlOnDoubleClick = function (objChild, event) {
                selectControlOnDoubleClick(objChild, event);
            };

            scope.selectControl = function (objChild, event) {
                selectControl(objChild, event, scope.formodel);
            };

            scope.onActionKeyDown = function (eargs) {
                controllerScope = getCurrentFileScope();
                if (controllerScope && controllerScope.onActionKeyDown) {
                    //controllerScope.SelectedNode = SelectedNode;

                    controllerScope.onActionKeyDown(eargs);
                }
            };

            scope.checkEntityField = function (obj) {
                if (scope.fileScope.lstLoadedEntityTrees) {
                    var entitytree = scope.fileScope.lstLoadedEntityTrees.filter(function (x) { return x.IsVisible; });
                    var entityName;
                    if (entitytree && entitytree.length > 0) {
                        entityName = entitytree[0].EntityName;
                    } else {
                        entityName = scope.formodel.dictAttributes.sfwEntity;
                    }
                    if (obj.dictAttributes.sfwRelatedGrid) {
                        entityName = scope.fileScope.FindEntityName(obj, scope.formodel.dictAttributes.sfwEntity);
                    }
                    if (obj.IsChildOfGrid) {
                        var objGrid = FindParent(obj, "sfwGridView");
                        if (objGrid && objGrid.dictAttributes.sfwParentGrid && objGrid.dictAttributes.sfwEntityField) {
                            entityName = scope.fileScope.FindEntityName(objGrid, scope.formodel.dictAttributes.sfwEntity, true);
                        }
                    }
                    $ValidationService.checkValidListValueForMultilevel([], obj, obj.dictAttributes.sfwEntityField, entityName, "sfwEntityField", "sfwEntityField", CONST.VALIDATION.ENTITY_FIELD_INCORRECT, undefined, false, '');
                }
            }
            scope.validateEntityField = function (obj) {
                var listOfColumns = [];
                if (!scope.fileScope) scope.fileScope = getCurrentFileScope();
                if (obj.IsChildOfGrid) {
                    var objGrid = FindParent(obj, "sfwGridView");
                    if (objGrid.Name == "sfwGridView" && objGrid.dictAttributes.sfwBoundToQuery && objGrid.dictAttributes.sfwBoundToQuery.toLowerCase() == "true") {
                        var baseQuery = objGrid.dictAttributes.sfwBaseQuery;
                        if (angular.isArray(scope.columnList) && scope.columnList.length == 0) {
                            $.connection.hubForm.server.getEntityQueryColumns(baseQuery, '').done(function (data) {
                                scope.$evalAsync(function () {
                                    scope.columnList = $ValidationService.getListByPropertyName(data, "CodeID", false);
                                    $ValidationService.checkValidListValue(scope.columnList, obj, obj.dictAttributes.sfwEntityField, "sfwEntityField", "sfwEntityField", CONST.VALIDATION.ENTITY_FIELD_INCORRECT, null);
                                });
                            });
                        } else {
                            $ValidationService.checkValidListValue(scope.columnList, obj, obj.dictAttributes.sfwEntityField, "sfwEntityField", "sfwEntityField", CONST.VALIDATION.ENTITY_FIELD_INCORRECT, null);
                        }
                    } else {
                        scope.checkEntityField(obj);
                    }
                } else {
                    scope.checkEntityField(obj);
                }
                if (scope.model && (scope.model.Name == "sfwDropDownList" || scope.model.Name == "sfwCascadingDropDownList" || scope.model.Name == "sfwMultiSelectDropDownList")) {
                    var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                    var entityName = "";
                    if (scope.lstloadedentitytrees) {
                        var entitytree = scope.lstloadedentitytrees.filter(function (x) { return x.IsVisible; });
                    }
                    if (entitytree && entitytree.length > 0) {
                        entityName = entitytree[0].EntityName;
                    } else {
                        if (scope.formodel) {
                            entityName = scope.formodel.dictAttributes.sfwEntity;
                        }
                    }
                    var strCodeGroup = "";
                    if (entityName) {
                        if (scope.IsSearchCriteriaSelected && scope.model.dictAttributes.sfwDataField) {
                            strCodeGroup = GetCodeIDForLookup(entityName, scope.model.dictAttributes.sfwDataField, entityIntellisenseList);
                        }
                        else if (scope.model.dictAttributes.sfwEntityField) {
                            strCodeGroup = GetCodeID(entityName, scope.model.dictAttributes.sfwEntityField, entityIntellisenseList);
                        }
                        if (strCodeGroup) {
                            scope.model.placeHolder = strCodeGroup;
                        }
                        else {
                            scope.model.placeHolder = "";
                        }
                    }
                }
            };

            scope.onDataFieldKeyDown = function (event) {
                var input = $(event.target);
                var blnFound = false;
                var data;
                scope.dataFieldList = undefined;
                scope.attributeName = "ID";
                if (scope.model.IsShowDataField) {
                    var lst = [];
                    FindControlListByName(scope.formodel, 'sfwButton', lst);
                    if (lst && lst.length > 0) {
                        lst = lst.filter(function (itm) { return itm.dictAttributes.sfwMethodName == "btnGridSearch_Click"; });
                        if (lst && lst.length > 0) {
                            for (var i = 0; i < lst.length; i++) {
                                if (lst[i].dictAttributes.sfwNavigationParameter) {
                                    var lstParam = lst[i].dictAttributes.sfwNavigationParameter.split(';');
                                    if (lstParam && lstParam.length > 0) {
                                        if (lstParam.some(function (param) { return param == scope.model.dictAttributes.ID; })) {
                                            objFilterGridButton = lst[i];
                                            break;
                                        }
                                    }
                                }
                            }

                            if (objFilterGridButton) {
                                if (objFilterGridButton.dictAttributes.sfwRelatedControl) {
                                    var objGrid = FindControlByID(scope.formodel, objFilterGridButton.dictAttributes.sfwRelatedControl);
                                    if (objGrid && objGrid.dictAttributes.sfwBaseQuery) {

                                        $.connection.hubForm.server.getEntityQueryColumns(objGrid.dictAttributes.sfwBaseQuery, "ScopeId_" + scope.$id).done(function (data1) {
                                            if (data1) {
                                                scope.lstColumns = data1;
                                                scope.attributeName = "CodeID";
                                                setSingleLevelAutoComplete(input, scope.lstColumns, scope, scope.attributeName);
                                            }
                                        });
                                    }
                                }
                            }
                        }
                    }
                } else {
                    if (scope.model.dictAttributes.sfwQueryID) {
                        data = PopulateQueryColumnFromList(scope.model.dictAttributes.sfwQueryID, scope.lstloadedentitycolumnstree, scope.formodel);
                    }
                    else {
                        var entityIntellisenseList = $EntityIntellisenseFactory.getEntityIntellisense();
                        var MainQuery = GetMainQueryFromFormObject(scope.formodel, entityIntellisenseList);
                        if (MainQuery) {
                            data = PopulateQueryColumnFromList(MainQuery.dictAttributes.ID, scope.lstloadedentitycolumnstree, scope.formodel);
                        }
                        else {
                            scope.attributeName = "Value";
                            if (scope.formodel && scope.formodel.dictAttributes.sfwEntity) {
                                data = getEntityAttributeByType(entityIntellisenseList, scope.formodel.dictAttributes.sfwEntity, "Column");

                            }
                        }
                    }
                }
                if (data) {
                    if (event.ctrlKey && event.keyCode == $.ui.keyCode.SPACE && $(input).data('ui-autocomplete')) {
                        $(input).autocomplete("search", "");
                        event.preventDefault();
                    }
                    else {
                        var item = [];

                        var arrText = [input[0].innerText];
                        if (arrText.length > 0) {
                            for (var index = 0; index < arrText.length; index++) {
                                item = data.filter(function (x) { if (x.ID) { return x.ID.toLowerCase().contains(arrText[index].toLowerCase()); } });
                            }
                            data = item;
                        }
                        scope.dataFieldList = data;
                        setSingleLevelAutoComplete(input, data, scope, scope.attributeName);

                    }
                }
            };


            scope.checkDataFieldValueAndClearList = function (model) {
                scope.dataFieldList = undefined;
            };

            //#region Correspondence Query Id
            scope.onQueryIDKeyDown = function (event) {
                setSingleLevelAutoComplete($(event.target), getQueryBookMarksID(scope.formodel));


            };
            //#endregion
        }
    }
}]);



function CanShowContextMenu(model, formodel) {
    if (model && formodel && formodel.dictAttributes.sfwType === "Lookup") {
        var cellVM = FindParent(model, "sfwColumn", true);
        if (cellVM && cellVM.Elements && cellVM.Elements.length > 0 && cellVM.Elements[0].Name === "sfwTabContainer") {
            return false;
        }
        return true;
    }
    return true;
}

function getDisplayClass(item) {
    var classname = "";

    if (item.Name == 'sfwTextBox') {
        if (item.IsSelected) {
            classname = "select-textbox-control";
        }
        else {
            classname = "form-control-textbox";
        }
    }
    else if (item.Name == 'sfwLabel') {
        if (item.IsSelected) {
            classname = "select-label-control";
        }
        else {
            classname = "form-fixed-width";
        }
    }
    else if (item.Name == 'sfwDropDownList' || item.Name == "sfwMultiSelectDropDownList") {
        if (item.IsSelected) {
            classname = "select-dropdown-control";
        }
        else {
            classname = "form-control-dropdown";
        }
    }
    else if (item.Name == 'sfwCascadingDropDownList') {
        if (item.IsSelected) {
            classname = "select-cascading-dropdown-control";
        }
        else {
            classname = "form-control-cascading-dropdown";
        }
    }
    else if (item.Name == 'sfwButton') {
        if (item.IsSelected) {
            classname = "select-button-control";
        }
        else {
            classname = "form-control-button";
        }
    }
    else if (item.Name == 'sfwToolTipButton') {
        if (item.IsSelected) {
            classname = "select-tooltip-button-control";
        }
        else {
            classname = "form-control-tooltip-button";
        }
    }
    else if (item.Name == 'sfwLinkButton') {
        if (item.IsSelected) {
            classname = "select-link-control-button";
        }
        else {
            classname = "link-control-button";
        }
    }
    else if (item.Name == 'sfwImageButton') {
        if (item.IsSelected) {
            classname = "select-image-control-button";
        }
        else {
            classname = "image-control-button";
        }
    }
    else if (item.Name == 'sfwHyperLink') {
        if (item.IsSelected) {
            classname = "select-hyperlink-control";
        }
        else {
            classname = "form-control-hyperlink";
        }
    }
    else {
        if (item.IsSelected) {
            classname = "select-label-control";
        }
        else {
            classname = "form-fixed-width";
        }
    }

    if (item.dictAttributes && item.dictAttributes.Text) {
        classname += ' ';
    }
    else if (item.dictAttributes && item.dictAttributes.sfwCaption) {
        classname += ' ';
    }
    else if (item.dictAttributes && item.dictAttributes.sfwEntityField) {
        classname += ' font-entityfield';
    }
    else if (item.dictAttributes && item.dictAttributes.sfwObjectField) {
        classname += ' font-entityfield';
    }
    else if (item.dictAttributes && item.dictAttributes.ID) {
        classname += ' font-controlid';
    }
    else {
        classname += ' font-controlid';
    }
    if (item.isAdvanceSearched) {
        classname += ' bckgGrey';
    }
    if (item.IsSelected && item.isAdvanceSearched) {
        classname += ' bckgGreen';
    }
    return classname;
};

//#region Select Control
function selectControlOnDoubleClick(objChild, event) {
    var filescope = getCurrentFileScope();
    if (filescope && filescope.selectControlOnDoubleClick) {
        filescope.selectControlOnDoubleClick(objChild, event);
    }
};

function selectControl(objChild, event, formodel) {
    //scope.columnList = [];
    var filescope = getCurrentFileScope();
    if (filescope && filescope.selectControl) {
        filescope.selectControl(objChild, event, formodel);
        // for triggering the drag handler on selection
        $("#" + filescope.currentfile.FileName).find("[drag-handler-btn]").remove();
    }

    if (objChild.Name != 'sfwColumn' && objChild.Name != 'TemplateField' && objChild.Name != 'sfwToolTipButton') {
        if (event) {
            funcontrolDragEnter($(event.currentTarget)[0], objChild, formodel);
        }
        // for selecting the element when its dropped - no event is there - access the current element of the directive and the current model
        else if (objChild.IsSelected) {
            funcontrolDragEnter($(element).find("[control-head]")[0], objChild, formodel);
        }
    }
};
//#endregion

//#region Insert  Row/Column
function OnInsertRowAboveClick(cellVM, tableVM, $rootScope) {
    var iRowIndex = tableVM.Elements.indexOf(cellVM.ParentVM);

    var sfxRowModel = InsertRow(cellVM, iRowIndex, tableVM);
    var index = GetIndexToInsert(false, iRowIndex);
    $rootScope.InsertItem(sfxRowModel, tableVM.Elements, index);
};

function OnInsertRowBelowClick(cellVM, tableVM, $rootScope) {
    var iRowIndex = tableVM.Elements.indexOf(cellVM.ParentVM);

    var sfxRowModel = InsertRow(cellVM, iRowIndex, tableVM);
    var index = GetIndexToInsert(true, iRowIndex);
    $rootScope.InsertItem(sfxRowModel, tableVM.Elements, index);


};

function OnInsertColumnLeftClick(cellVM, tableVM) {
    var iColumnIndex = cellVM.ParentVM.Elements.indexOf(cellVM);
    var filescope = getCurrentFileScope();
    if (filescope && filescope.InsertColumn) {
        filescope.InsertColumn(cellVM, false, iColumnIndex, tableVM);
    }

};

function OnInsertColumnRightClick(cellVM, tableVM) {
    var iColumnIndex = cellVM.ParentVM.Elements.indexOf(cellVM);
    var filescope = getCurrentFileScope();
    if (filescope && filescope.InsertColumn) {
        filescope.InsertColumn(cellVM, true, iColumnIndex, tableVM);
    }
};
//#endregion

//#region Clear Cell / Grid
function ClearCell(cellVM, $rootScope, blnAddUndoblock) {
    if (blnAddUndoblock) {
        $rootScope.UndRedoBulkOp("Start");
    }
    while (cellVM.Elements.length > 0) {
        $rootScope.DeleteItem(cellVM.Elements[0], cellVM.Elements);

    }
    if (blnAddUndoblock) {
        $rootScope.UndRedoBulkOp("End");
    }
};

function OnClearGridClick(tableVM, $rootScope) {
    $rootScope.UndRedoBulkOp("Start");
    function iteratorTableRows(rowVM) {
        angular.forEach(rowVM.Elements, iteratorColumns);
    }
    function iteratorColumns(cellVM) {
        ClearCell(cellVM, $rootScope, false);
    }

    if (tableVM) {

        angular.forEach(tableVM.Elements, iteratorTableRows);
    }
    $rootScope.UndRedoBulkOp("End");

};
//#endregion

//#region Delecte Row/Column

function OnDeleteRowClick(rowVM, tableVM, $rootScope, $SgMessagesService) {
    var iRowIndex = tableVM.Elements.indexOf(rowVM);


    if (null != tableVM) {
        if (rowVM) {
            if (tableVM.Elements.length > 1) {

                $rootScope.DeleteItem(rowVM, tableVM.Elements);

            }
            else {
                $SgMessagesService.Message('Message', 'Atleast one row should be present.');
            }
        }
        iRowIndex = iRowIndex - 1;
    }


};

function OnDeleteColumnClick(aParam, tableVM, $rootScope, formodel, $SgMessagesService) {

    var iColumnIndex = aParam.ParentVM.Elements.indexOf(aParam);

    function iDeleteRows(rowVM) {

        for (var i = 0; i < rowVM.Elements.length; i++) {
            var cellVM = rowVM.Elements[i];
            if (i == colIndex) {
                $rootScope.DeleteItem(cellVM, rowVM.Elements);

                break;
            }

        }


    }
    if (aParam) {
        var ColCount = GetMaxColCount(aParam.ParentVM, tableVM);
        if (ColCount > 1) {


            var colIndex = aParam.ParentVM.Elements.indexOf(aParam);
            $rootScope.UndRedoBulkOp("Start");

            angular.forEach(tableVM.Elements, iDeleteRows);

            $rootScope.UndRedoBulkOp("End");


        }
        else {
            $SgMessagesService.Message('Message', 'Atleast one column should be present');

        }
    }
    if (iColumnIndex > 0) {
        iColumnIndex = iColumnIndex - 1;
    }
    if (iColumnIndex > -1 && iColumnIndex < aParam.ParentVM.Elements.length && aParam.ParentVM.Elements[iColumnIndex]) {
        SetFormSelectedControl(formodel, aParam.ParentVM.Elements[iColumnIndex], null);
    }

};


//#endregion

function AddControlToCell(cellVM, cntrlName, sfxControlModel, blnIsGrid, formodel, model, $rootScope, newScope, $ValidationService, $GetEntityFieldObjectService) {
    if (!sfxControlModel) {
        sfxControlModel = CreateControl(formodel, cellVM, cntrlName, blnIsGrid);
    }

    if (sfxControlModel != null && cellVM && sfxControlModel.Name != "udc") {
        if (sfxControlModel.Name == "sfwDialogPanel" || sfxControlModel.Name == "sfwPanel") {
            sfxControlModel.initialvisibilty = true;
            sfxControlModel.isLoaded = true;
        }
        $rootScope.UndRedoBulkOp("Start");
        $rootScope.PushItem(sfxControlModel, cellVM.Elements);

        if (blnIsGrid) {
            if (formodel && formodel.dictAttributes.sfwType != "Lookup") {

                if (sfxControlModel.Name != "sfwLabel" && sfxControlModel.Name != "sfwButton" && sfxControlModel.Name != "sfwLinkButton" && sfxControlModel.Name != "sfwImageButton" && sfxControlModel.Name !== "sfwButtonGroup") {
                    if (model.Name == "sfwGridView") {
                        $rootScope.EditPropertyValue(model.dictAttributes.sfwTwoWayBinding, model.dictAttributes, "sfwTwoWayBinding", "True");
                        $rootScope.EditPropertyValue(model.dictAttributes.AllowEditing, model.dictAttributes, "AllowEditing", "True");
                        $rootScope.EditPropertyValue(model.dictAttributes.sfwCommonFilterBox, model.dictAttributes, "sfwCommonFilterBox", "False");
                        $rootScope.EditPropertyValue(model.dictAttributes.sfwFilterOnKeyPress, model.dictAttributes, "sfwFilterOnKeyPress", "False");


                    }
                }
            }
        }
        $rootScope.UndRedoBulkOp("End");
        SetFormSelectedControl(formodel, sfxControlModel);
    }



    //#region Add User Control
    if (sfxControlModel != undefined && sfxControlModel.Name == "udc") {


        newScope.objSetUCProp = { StrId: sfxControlModel.dictAttributes.ID, StrName: sfxControlModel.dictAttributes.Name, StrEntityField: sfxControlModel.dictAttributes.sfwEntityField, StrResource: sfxControlModel.dictAttributes.sfwResource, formObject: formodel };
        newScope.objSetUCProp.IsAddedFromObjectTree = false;
        newScope.onUserControlOkClick = function () {


            sfxControlModel.dictAttributes.ID = newScope.objSetUCProp.StrId;
            sfxControlModel.dictAttributes.Name = newScope.objSetUCProp.StrName;
            if ((formodel.dictAttributes.sfwEntity != undefined && formodel.dictAttributes.sfwEntity != "") && (newScope.objSetUCProp.StrEntityField != undefined && newScope.objSetUCProp.StrEntityField != "")) {
                if (newScope.objSetUCProp.StrEntityField.match("^" + formodel.dictAttributes.sfwEntity)) {
                    sfxControlModel.dictAttributes.sfwEntityField = formodel.dictAttributes.sfwEntity + "." + newScope.objSetUCProp.StrEntityField;
                }
                else {
                    sfxControlModel.dictAttributes.sfwEntityField = newScope.objSetUCProp.StrEntityField;
                }
            }
            else {
                sfxControlModel.dictAttributes.sfwEntityField = newScope.objSetUCProp.StrEntityField;
            }
            sfxControlModel.dictAttributes.sfwResource = newScope.objSetUCProp.StrResource;

            if (sfxControlModel.dictAttributes.Name != undefined && sfxControlModel.dictAttributes.Name != "") {
                var fileList = [];
                var obj = { FileName: sfxControlModel.dictAttributes.Name, ID: sfxControlModel.dictAttributes.ID };
                fileList.push(obj);
                $.connection.hubForm.server.getUserControlModel(fileList, "").done(function (udcFileList) {
                    var formScope = getCurrentFileScope();
                    formScope.receiveUcMainTable(udcFileList);
                });
            }
            $rootScope.PushItem(sfxControlModel, cellVM.Elements);
            newScope.onUserControlCancelClick();
        };

        newScope.onUserControlCancelClick = function () {
            var formScope = getCurrentFileScope();
            if (formScope && formScope.validationErrorList) {
                $ValidationService.removeObjInToArray(formScope.validationErrorList, newScope.objSetUCProp);
            }
            if (ucPropDialog) {
                ucPropDialog.close();
            }
        };

        newScope.ValidateUserProp = function () {
            var retVal = false;
            newScope.ErrorMessageForDisplay = "";
            if (newScope.objSetUCProp.StrId == undefined || newScope.objSetUCProp.StrId == "") {
                newScope.ErrorMessageForDisplay = "Error: Enter the ID.";
                retVal = true;
            }
            else {
                var lstIds = [];
                CheckforDuplicateID(formodel, newScope.objSetUCProp.StrId, lstIds);
                if (lstIds.length > 0) {
                    newScope.ErrorMessageForDisplay = "Error: Duplicate ID.";
                    retVal = true;
                } else if (!isValidIdentifier(newScope.objSetUCProp.StrId, false, false)) {
                    newScope.ErrorMessageForDisplay = "Error: Invalid ID.";
                    retVal = true;
                }
            }
            if (!newScope.objSetUCProp.StrName || newScope.objSetUCProp.StrName == '') {
                newScope.ErrorMessageForDisplay = "Please Enter Active Form.";
                retVal = true;
            }
            //else if (!newScope.objSetUCProp.StrEntityField || newScope.objSetUCProp.StrEntityField == "") {
            //    newScope.ErrorMessageForDisplay = "Please Enter Entity field.";
            //    retVal = true;
            //}
            else if (!newScope.objSetUCProp.StrResource || newScope.objSetUCProp.StrResource == '') {
                newScope.ErrorMessageForDisplay = "Please Enter Resource.";
                retVal = true;
            }

            if (newScope.ErrorMessageForDisplay == undefined || newScope.ErrorMessageForDisplay == "") {
                if (newScope.objSetUCProp.StrEntityField != undefined && newScope.objSetUCProp.StrEntityField != "") {
                    var object = $GetEntityFieldObjectService.GetEntityFieldObjectFromEntityField(newScope.formodel.dictAttributes.sfwEntity, newScope.objSetUCProp.StrEntityField);
                    if (!object || object.Type != "Object") {
                        newScope.ErrorMessageForDisplay = "Entity Field should be Object.";
                        retVal = true;
                    }
                }
            }
            if (newScope.objSetUCProp.errors && $ValidationService.isEmptyObj(newScope.objSetUCProp.errors)) {
                retVal = true;
            }
            return retVal;
        };

        var ucPropDialog = $rootScope.showDialog(newScope, "User Control", "Form/views/SetUserControlProperties.html");
    }

    //#endregion


};