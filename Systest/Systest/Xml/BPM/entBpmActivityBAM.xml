<entity ID="entBpmActivityBAM" Text="Activity BAM" sfwObjectID="busBpmActivityBAM" sfwObjectType="NeoSpin.BusinessObjects.busBpmActivityBAM, NeoSpinBusinessObjects, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" sfwView="False">
  <queries>
    <query ID="GetUserTaskActivities" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xD;&#xA;SA.NAME + ' (Ver.' + CONVERT(VARCHAR,SBC.VERSION) + ')'  AS NAME , SA.ACTIVITY_ID&#x9;&#xD;&#xA;FROM SGW_BPM_PROCESS SP WITH(NOLOCK) &#x9;&#xD;&#xA;&#x9;INNER JOIN SGW_BPM_ACTIVITY SA WITH(NOLOCK) ON SP.PROCESS_ID = SA.PROCESS_ID &#xD;&#xA;&#x9;INNER JOIN SGW_BPM_CASE SBC WITH(NOLOCK) ON SP.CASE_ID = SBC.CASE_ID&#xD;&#xA;&#x9;AND SA.ACTIVITY_TYPE_VALUE = 'USTK'&#xD;&#xA;GROUP BY SA.NAME, SP.NAME, SBC.VERSION, SA.ACTIVITY_ID &#xD;&#xA;ORDER BY NAME" sfwOracle="SELECT&#xD;&#xA;(SA.NAME || ' (Ver.' || Cast(SBC.VERSION as varchar(20)) || ')' ) NAME , &#xD;&#xA;SA.ACTIVITY_ID&#x9;&#xD;&#xA;FROM SGW_BPM_PROCESS SP  &#x9;&#xD;&#xA;&#x9;INNER JOIN SGW_BPM_ACTIVITY SA  ON SP.PROCESS_ID = SA.PROCESS_ID &#xD;&#xA;&#x9;INNER JOIN SGW_BPM_CASE SBC  ON SP.CASE_ID = SBC.CASE_ID&#xD;&#xA;&#x9;AND SA.ACTIVITY_TYPE_VALUE = 'USTK'&#xD;&#xA;GROUP BY SA.NAME, SP.NAME, SBC.VERSION, SA.ACTIVITY_ID &#xD;&#xA;ORDER BY NAME" sfwPostgre="SELECT sa.name || ' (Ver.' || CAST (sbc.version AS VARCHAR(30)) || ')' AS name, sa.activity_id &#xD;&#xA;FROM dbo.sgw_bpm_process AS sp &#xD;&#xA;INNER JOIN dbo.sgw_bpm_activity AS sa ON sp.process_id = sa.process_id &#xD;&#xA;INNER JOIN dbo.sgw_bpm_case AS sbc ON sp.case_id = sbc.case_id &#xD;&#xA;AND sa.activity_type_value = 'USTK' &#xD;&#xA;GROUP BY sa.name, sp.name, sbc.version, sa.activity_id &#xD;&#xA;ORDER BY name NULLS FIRST">
      <parameters />
    </query>
    <query ID="BAMActivityLoadAnalysis_old" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DECLARE @NOW AS DATETIME&#xD;&#xA;SET @NOW = GETDATE();&#xD;&#xA;WITH DATEVALUES AS&#xD;&#xA;(&#xD;&#xA;    SELECT SBA.ACTIVITY_ID, SBP.PROCESS_ID, SUM (CASE WHEN SBAI.DUE_DATE &gt; @NOW THEN &#xD;&#xA;&#x9;&#x9;CASE WHEN @NOW &lt; DATEADD(MI,DATEDIFF(MI, SBAI.CREATED_DATE, SBAI.DUE_DATE) * 0.75, SBAI.CREATED_DATE) THEN 1 ELSE 0 END ELSE 0 END) AS OnTime,&#xD;&#xA;&#x9;SUM (CASE WHEN SBPI.DUE_DATE &gt; @NOW then case when @NOW &gt; &#xD;&#xA;&#x9;&#x9;DATEADD(MI,datediff(MI,SBAI.CREATED_DATE,SBAI.DUE_DATE) * 0.75, SBAI.CREATED_DATE) THEN 1 ELSE 0 END ELSE 0 END) &#x9;AS AtRisk,&#xD;&#xA;&#x9;SUM (CASE WHEN SBAI.DUE_DATE &lt; @NOW THEN 1 ELSE 0 END ) &#x9;AS OverDue  &#xD;&#xA;&#x9;FROM&#xD;&#xA;    SGW_BPM_ACTIVITY_INSTANCE SBAI WITH(NOLOCK) &#xD;&#xA;&#x9; INNER JOIN SGW_BPM_ACTIVITY SBA WITH(NOLOCK)&#xD;&#xA;&#x9;&#x9;ON SBAI.ACTIVITY_ID = SBA.ACTIVITY_ID  AND SBAI.STATUS_VALUE IN ('INPC','UNPC')&#xD;&#xA;&#x9;INNER JOIN SGW_BPM_PROCESS_INSTANCE SBPI WITH(NOLOCK)&#xD;&#xA;&#x9;&#x9;ON SBAI.PROCESS_INSTANCE_ID = SBPI.PROCESS_INSTANCE_ID AND SBPI.STATUS_VALUE IN ('INPC','UNPC')&#xD;&#xA;&#x9;INNER JOIN SGW_BPM_PROCESS SBP WITH(NOLOCK)&#xD;&#xA;&#x9;&#x9;ON SBPI.PROCESS_ID = SBP.PROCESS_ID  AND SBAI.STATUS_VALUE = 'INPC' &#xD;&#xA;&#x9; INNER JOIN SGW_BPM_CASE SBC with(nolock) &#xD;&#xA;&#x9;&#x9;ON SBP.CASE_ID = SBC.CASE_ID&#xD;&#xA;&#x9;&#x9;where &#xD;&#xA;&#x9;&#x9;SBA.ACTIVITY_ID = @ACTIVITY_ID AND &#xD;&#xA;&#x9; SBAI.CREATED_DATE between @DATE_FROM AND @DATE_TO&#xD;&#xA;&#x9;  group by sbp.PROCESS_ID, SBA.ACTIVITY_ID&#x9;&#x9;  &#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;SELECT DISTINCT DATEVALUES.ACTIVITY_ID, SBP.PROCESS_ID, SBA.NAME as 'Activity Name', SBC.CASE_FILE as 'Case File', SBC.VERSION,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; DATEVALUES.ONTIME, DATEVALUES.ATRISK, DATEVALUES.OVERDUE&#x9;&#xD;&#xA;FROM&#xD;&#xA;&#x9;  SGW_BPM_ACTIVITY_INSTANCE SBAI WITH(NOLOCK) &#xD;&#xA;&#x9; INNER JOIN SGW_BPM_ACTIVITY SBA WITH(NOLOCK)&#xD;&#xA;&#x9;&#x9;ON SBAI.ACTIVITY_ID = SBA.ACTIVITY_ID  AND SBAI.STATUS_VALUE IN ('INPC','UNPC')&#xD;&#xA;&#x9;INNER JOIN SGW_BPM_PROCESS_INSTANCE SBPI WITH(NOLOCK)&#xD;&#xA;&#x9;&#x9;ON SBAI.PROCESS_INSTANCE_ID = SBPI.PROCESS_INSTANCE_ID AND SBPI.STATUS_VALUE IN ('INPC','UNPC')&#xD;&#xA;&#x9;INNER JOIN SGW_BPM_PROCESS SBP WITH(NOLOCK)&#xD;&#xA;&#x9;&#x9;ON SBPI.PROCESS_ID = SBP.PROCESS_ID   AND SBAI.STATUS_VALUE = 'INPC' &#xD;&#xA;&#x9; INNER JOIN SGW_BPM_CASE SBC with(nolock) &#xD;&#xA;&#x9;&#x9;ON SBP.CASE_ID = SBC.CASE_ID&#x9; &#x9;&#xD;&#xA;&#x9;INNER JOIN DATEVALUES ON SBP.PROCESS_ID = DATEVALUES.PROCESS_ID&#xD;&#xA;WHERE&#x9; &#xD;&#xA;&#x9;  SBAI.STATUS_VALUE = 'INPC' &#x9;and (ontime &gt; 0 or atRisk &gt; 0 or overdue &gt; 0)" sfwOracle="WITH DATEVALUES AS&#xD;&#xA;(&#xD;&#xA;    SELECT SBA.ACTIVITY_ID, SBP.PROCESS_ID&#xD;&#xA;&#x9;&#x9;, SUM &#xD;&#xA;&#x9;&#x9;&#x9;(CASE WHEN SBAI.DUE_DATE &gt; CUR_DATE THEN &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CASE WHEN CUR_DATE &lt; SBAI.CREATED_DATE +(1*((SBAI.CREATED_DATE - SBAI.DUE_DATE)*24*60*0.75)/1440) THEN 1 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE 0 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;END &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ELSE 0 &#xD;&#xA;&#x9;&#x9;&#x9;END&#xD;&#xA;&#x9;&#x9;&#x9;) AS OnTime&#xD;&#xA;&#x9;&#x9;, SUM (CASE WHEN SBPI.DUE_DATE &gt; CUR_DATE then &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case when CUR_DATE &gt; SBAI.CREATED_DATE +(1*((SBAI.CREATED_DATE - SBAI.DUE_DATE)*24*60*0.75)/1440) THEN 1 ELSE 0 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;END &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ELSE 0 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;END&#xD;&#xA;&#x9;&#x9;&#x9;) &#x9;AS AtRisk&#xD;&#xA;&#x9;&#x9;, SUM (CASE WHEN SBAI.DUE_DATE &lt; CUR_DATE THEN 1 ELSE 0 END ) &#x9;AS OverDue  &#xD;&#xA;&#x9;FROM SGW_BPM_ACTIVITY_INSTANCE SBAI  &#xD;&#xA;&#x9;&#x9;JOIN &#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9;&#x9;SELECT UDF_GET_SYSTEM_DATE('Y') CUR_DATE FROM DUAL&#xD;&#xA;&#x9;&#x9;) CR ON 1=1&#xD;&#xA;&#x9;&#x9;INNER JOIN SGW_BPM_ACTIVITY SBA  ON SBAI.ACTIVITY_ID = SBA.ACTIVITY_ID  AND SBAI.STATUS_VALUE IN ('INPC','UNPC')&#xD;&#xA;&#x9;&#x9;INNER JOIN SGW_BPM_PROCESS_INSTANCE SBPI  ON SBAI.PROCESS_INSTANCE_ID = SBPI.PROCESS_INSTANCE_ID AND SBPI.STATUS_VALUE IN ('INPC','UNPC')&#xD;&#xA;&#x9;&#x9;INNER JOIN SGW_BPM_PROCESS SBP  ON SBPI.PROCESS_ID = SBP.PROCESS_ID  AND SBAI.STATUS_VALUE = 'INPC' &#xD;&#xA;&#x9;&#x9;INNER JOIN SGW_BPM_CASE SBC  ON SBP.CASE_ID = SBC.CASE_ID &#xD;&#xA;&#x9;where SBA.ACTIVITY_ID = @ACTIVITY_ID AND SBAI.CREATED_DATE between @DATE_FROM AND @DATE_TO &#xD;&#xA;&#x9;group by sbp.PROCESS_ID, SBA.ACTIVITY_ID&#x9;&#x9;  &#xD;&#xA;)&#xD;&#xA;SELECT DISTINCT DATEVALUES.ACTIVITY_ID, SBP.PROCESS_ID, SBA.NAME as &quot;Activity Name&quot;, SBC.CASE_FILE as &quot;Case File&quot;, SBC.VERSION&#xD;&#xA;&#x9;, DATEVALUES.ONTIME, DATEVALUES.ATRISK, DATEVALUES.OVERDUE&#x9;&#xD;&#xA;FROM SGW_BPM_ACTIVITY_INSTANCE SBAI  &#xD;&#xA;&#x9;INNER JOIN SGW_BPM_ACTIVITY SBA  ON SBAI.ACTIVITY_ID = SBA.ACTIVITY_ID  AND SBAI.STATUS_VALUE IN ('INPC','UNPC')&#xD;&#xA;&#x9;INNER JOIN SGW_BPM_PROCESS_INSTANCE SBPI  ON SBAI.PROCESS_INSTANCE_ID = SBPI.PROCESS_INSTANCE_ID AND SBPI.STATUS_VALUE IN ('INPC','UNPC')&#xD;&#xA;&#x9;INNER JOIN SGW_BPM_PROCESS SBP  ON SBPI.PROCESS_ID = SBP.PROCESS_ID   AND SBAI.STATUS_VALUE = 'INPC' &#xD;&#xA;&#x9;INNER JOIN SGW_BPM_CASE SBC  ON SBP.CASE_ID = SBC.CASE_ID&#x9; &#x9;&#xD;&#xA;&#x9;INNER JOIN DATEVALUES ON SBP.PROCESS_ID = DATEVALUES.PROCESS_ID&#xD;&#xA;WHERE SBAI.STATUS_VALUE = 'INPC' and (ontime &gt; 0 or atRisk &gt; 0 or overdue &gt; 0)">
      <parameters>
        <parameter ID="@ACTIVITY_ID" sfwDataType="int" />
        <parameter ID="@DATE_FROM" sfwDataType="DateTime" />
        <parameter ID="@DATE_TO" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="ActivityTrendByActivityId" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xD;&#xA;&#x9; BA.NAME AS ACTIVITY_NAME,&#xD;&#xA;&#x9;BA.ACTIVITY_ID,&#xD;&#xA;&#x9;sum(case when BAI.STATUS_VALUE = 'PROC' then 1 else 0 end) &#x9;AS Completed,&#xD;&#xA;&#x9;sum(case when BAI.STATUS_VALUE = 'APPR' then 1 else 0 end) &#x9;AS Approved,&#xD;&#xA;&#x9;sum(case when BAI.STATUS_VALUE = 'REJT' then 1 else 0 end) &#x9;AS Rejected,&#xD;&#xA;&#x9;sum(case when BAI.STATUS_VALUE IN ('INPC' ,'UNPC') then 1 else 0 end) &#x9;AS Inprocess,&#xD;&#xA;&#x9;sum(case when BAI.STATUS_VALUE IN ('CANC','SUSP','FAIL') then 1 else 0 end) &#x9;AS Canc_Susp_Fail,&#xD;&#xA;&#x9;sum(case when BAI.STATUS_VALUE IN ('RESU') then 1 else 0 end) &#x9;AS Resumed&#x9;&#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE BAI WITH(NOLOCK)   INNER   &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS_INSTANCE BPI WITH(NOLOCK)  &#xD;&#xA;&#x9; ON BAI.PROCESS_INSTANCE_ID = BPI.PROCESS_INSTANCE_ID INNER   &#xD;&#xA;&#x9; JOIN SGW_BPM_ACTIVITY BA WITH(NOLOCK)  &#xD;&#xA;&#x9; ON BAI.ACTIVITY_ID = BA.ACTIVITY_ID AND&#xD;&#xA;&#x9; BA.ACTIVITY_TYPE_VALUE = 'USTK' WHERE CONVERT(DATETIME,CONVERT(CHAR,SBAI.CREATED_DATE,103),103) BETWEEN  @DATE_FROM AND @DATE_TO  AND BA.ACTIVITY_ID = @ACTIVITY_ID&#xD;&#xA;GROUP&#x9; BY    BA.NAME, BA.ACTIVITY_ID" sfwOracle="SELECT&#xA;&#x9; BA.NAME AS ACTIVITY_NAME,&#xA;&#x9;BA.ACTIVITY_ID,&#xA;&#x9;sum(case when BAI.STATUS_VALUE = 'PROC' then 1 else 0 end) AS Completed,&#xA;&#x9;sum(case when BAI.STATUS_VALUE = 'APPR' then 1 else 0 end) &#x9;AS Approved,&#xA;&#x9;sum(case when BAI.STATUS_VALUE = 'REJT' then 1 else 0 end) &#x9;AS Rejected,&#xA;&#x9;sum(case when BAI.STATUS_VALUE IN ('INPC' ,&#xA;&#x9;'UNPC') then 1 else 0 end) AS Inprocess,&#xA;&#x9;sum(case when BAI.STATUS_VALUE IN ('CANC',&#xA;&#x9;'SUSP',&#xA;&#x9;'FAIL') then 1 else 0 end) AS Canc_Susp_Fail,&#xA;&#x9;sum(case when BAI.STATUS_VALUE IN ('RESU') then 1 else 0 end) AS Resumed &#xA;FROM&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE BAI INNER  &#xA;&#x9; JOIN SGW_BPM_PROCESS_INSTANCE BPI&#xA;&#x9; ON BAI.PROCESS_INSTANCE_ID = BPI.PROCESS_INSTANCE_ID INNER  &#xA;&#x9; JOIN SGW_BPM_ACTIVITY BA&#xA;&#x9; ON BAI.ACTIVITY_ID = BA.ACTIVITY_ID AND&#xA;&#x9; BA.ACTIVITY_TYPE_VALUE = 'USTK' &#xA;WHERE&#xA;&#x9; TO_DATE(TO_CHAR(SBAI.CREATED_DATE,&#xA;&#x9;'MM-DD-YYYY'),&#xA;&#x9;'MM-DD-YYYY') BETWEEN  @DATE_FROM AND&#xA;&#x9; @DATE_TO  AND&#xA;&#x9; BA.ACTIVITY_ID = @ACTIVITY_ID &#xA;GROUP BY   BA.NAME,&#xA;&#x9;BA.ACTIVITY_ID">
      <parameters>
        <parameter ID="@DATE_FROM" sfwDataType="DateTime" />
        <parameter ID="@DATE_TO" sfwDataType="DateTime" />
        <parameter ID="@ACTIVITY_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="BAMActivityLoadAnalysis" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="WITH DATEVALUES AS&#xD;&#xA;(&#xD;&#xA;    SELECT SBA.NAME, SBA.ACTIVITY_ID,&#xD;&#xA;&#x9;SUM(CASE WHEN SBAI.STATUS_VALUE IN ('INPC' ,'UNPC') then 1 else 0 end) &#x9;AS IN_PROGRESS ,&#xD;&#xA;&#x9;SUM(CASE WHEN SBAI.STATUS_VALUE IN ('RESU') then 1 else 0 end) &#x9;AS RESUMED ,&#xD;&#xA;&#x9;&#x9;SUM(CASE WHEN SBAI.STATUS_VALUE IN ('PROC') then 1 else 0 end) &#x9;AS PROCESSED ,&#xD;&#xA;&#x9;&#x9;SUM(case when SBAI.STATUS_VALUE = 'APPR' then 1 else 0 end) &#x9;AS APPROVED,&#xD;&#xA;&#x9;SUM(case when SBAI.STATUS_VALUE = 'REJT' then 1 else 0 end) &#x9;AS REJECTED,&#xD;&#xA;&#x9;SUM(CASE WHEN SBAI.STATUS_VALUE IN ('CANC' ,'FAIL') then 1 else 0 end) &#x9;AS CANC_FAIL ,&#xD;&#xA;&#x9;SUM(CASE WHEN SBAI.STATUS_VALUE = 'RETR' then 1 else 0 end) &#x9;AS RESTRICTED ,&#xD;&#xA;&#x9;SUM (CASE WHEN SBAI.DUE_DATE &gt; GETDATE() THEN &#xD;&#xA;&#x9;&#x9;CASE WHEN GETDATE() &lt; DATEADD(MI,DATEDIFF(MI, SBAI.CREATED_DATE, SBAI.DUE_DATE) * 0.75, SBAI.CREATED_DATE) THEN 1 ELSE 0 END ELSE 0 END) AS ONTIME,&#xD;&#xA;&#x9;SUM (CASE WHEN SBPI.DUE_DATE &gt; GETDATE() then case when GETDATE() &gt; &#xD;&#xA;&#x9;&#x9;DATEADD(MI,datediff(MI,SBAI.CREATED_DATE,SBAI.DUE_DATE) * 0.75, SBAI.CREATED_DATE) THEN 1 ELSE 0 END ELSE 0 END) AS ATRISK,&#xD;&#xA;&#x9;SUM (CASE WHEN SBAI.DUE_DATE &lt; GETDATE() THEN 1 ELSE 0 END ) &#x9;AS OVERDUE  &#xD;&#xA;&#x9;FROM&#xD;&#xA;    SGW_BPM_ACTIVITY_INSTANCE SBAI WITH(NOLOCK) &#xD;&#xA;&#x9; INNER JOIN SGW_BPM_ACTIVITY SBA WITH(NOLOCK)&#xD;&#xA;&#x9;&#x9;ON SBAI.ACTIVITY_ID = SBA.ACTIVITY_ID  AND SBAI.STATUS_VALUE IN ('INPC','UNPC')&#xD;&#xA;&#x9;INNER JOIN SGW_BPM_PROCESS_INSTANCE SBPI WITH(NOLOCK)&#xD;&#xA;&#x9;&#x9;ON SBAI.PROCESS_INSTANCE_ID = SBPI.PROCESS_INSTANCE_ID AND SBPI.STATUS_VALUE IN ('INPC','UNPC')&#xD;&#xA;&#x9;INNER JOIN SGW_BPM_PROCESS SBP WITH(NOLOCK)&#xD;&#xA;&#x9;&#x9;ON SBPI.PROCESS_ID = SBP.PROCESS_ID  AND SBAI.STATUS_VALUE = 'INPC' &#xD;&#xA;&#x9; INNER JOIN SGW_BPM_CASE SBC with(nolock) &#xD;&#xA;&#x9;&#x9;ON SBP.CASE_ID = SBC.CASE_ID&#xD;&#xA;&#x9;&#x9;where &#xD;&#xA;&#x9;&#x9;SBA.ACTIVITY_ID = @ACTIVITY_ID AND &#xD;&#xA;&#x9; SBAI.CREATED_DATE between @DATE_FROM AND @DATE_TO&#xD;&#xA;&#x9;  group by sbp.PROCESS_ID, SBA.ACTIVITY_ID, SBA.NAME)&#xD;&#xA;&#xD;&#xA;SELECT  SBA.NAME AS ACTIVITY_NAME, SUM(DATEVALUES.IN_PROGRESS) AS IN_PROGRESS, SUM(DATEVALUES.PROCESSED) AS PROCESSED , &#xD;&#xA;SUM(DATEVALUES.APPROVED) AS APPROVED , SUM(DATEVALUES.REJECTED) AS REJECTED ,&#xD;&#xA;SUM(DATEVALUES.RESTRICTED) AS RESTRICTED, SUM(DATEVALUES.CANC_FAIL) AS CANC_FAIL, SUM(DATEVALUES.RESUMED) AS RESUMED,&#xD;&#xA;&#x9;&#x9;&#x9;&#x9; SUM(DATEVALUES.ONTIME) AS ONTIME, SUM(DATEVALUES.ATRISK) AS ATRISK, SUM(DATEVALUES.OVERDUE) AS OVERDUE&#xD;&#xA;FROM&#xD;&#xA;&#x9;  SGW_BPM_ACTIVITY_INSTANCE SBAI WITH(NOLOCK) &#xD;&#xA;&#x9; INNER JOIN SGW_BPM_ACTIVITY SBA WITH(NOLOCK)&#xD;&#xA;&#x9;&#x9;ON SBAI.ACTIVITY_ID = SBA.ACTIVITY_ID  AND SBAI.STATUS_VALUE IN ('INPC','UNPC')&#x9;&#x9;&#xD;&#xA;&#x9;INNER JOIN SGW_BPM_PROCESS_INSTANCE SBPI WITH(NOLOCK)&#xD;&#xA;&#x9;&#x9;ON SBAI.PROCESS_INSTANCE_ID = SBPI.PROCESS_INSTANCE_ID AND SBPI.STATUS_VALUE IN ('INPC','UNPC')&#xD;&#xA;&#x9;INNER JOIN SGW_BPM_PROCESS SBP WITH(NOLOCK)&#xD;&#xA;&#x9;&#x9;ON SBPI.PROCESS_ID = SBP.PROCESS_ID   AND SBAI.STATUS_VALUE = 'INPC' &#xD;&#xA;&#x9; INNER JOIN SGW_BPM_CASE SBC with(nolock) &#xD;&#xA;&#x9;&#x9;ON SBP.CASE_ID = SBC.CASE_ID&#x9; &#x9;&#xD;&#xA;&#x9;INNER JOIN DATEVALUES ON SBA.ACTIVITY_ID = DATEVALUES.ACTIVITY_ID&#xD;&#xA;WHERE&#x9; &#xD;&#xA;&#x9;  SBAI.STATUS_VALUE = 'INPC' &#x9;AND (ONTIME &gt; 0 OR ATRISK &gt; 0 OR OVERDUE &gt; 0) GROUP BY SBA.NAME" sfwOracle="WITH DATEVALUES AS&#xD;&#xA;(&#xD;&#xA;    SELECT SBA.NAME, SBA.ACTIVITY_ID, SUM(CASE WHEN SBAI.STATUS_VALUE IN ('INPC' ,'UNPC') then 1 else 0 end) &#x9;AS IN_PROGRESS &#xD;&#xA;&#x9;&#x9;, SUM(CASE WHEN SBAI.STATUS_VALUE IN ('RESU') then 1 else 0 end) &#x9;AS RESUMED &#xD;&#xA;&#x9;&#x9;, SUM(CASE WHEN SBAI.STATUS_VALUE IN ('PROC') then 1 else 0 end) &#x9;AS PROCESSED &#xD;&#xA;&#x9;&#x9;, SUM(CASE WHEN SBAI.STATUS_VALUE IN ('APPR') then 1 else 0 end) &#x9;AS APPROVED&#xD;&#xA;&#x9;&#x9;, SUM(CASE WHEN SBAI.STATUS_VALUE IN ('REJT') then 1 else 0 end) &#x9;AS REJECTED&#xD;&#xA;&#x9;&#x9;, SUM(CASE WHEN SBAI.STATUS_VALUE IN ('CANC' ,'FAIL') then 1 else 0 end) AS CANC_FAIL &#xD;&#xA;&#x9;&#x9;, SUM(CASE WHEN SBAI.STATUS_VALUE = 'RETR' then 1 else 0 end) &#x9;AS RESTRICTED &#xD;&#xA;&#x9;&#x9;, SUM (CASE WHEN SBAI.DUE_DATE &gt; CUR_DATE THEN &#xD;&#xA;            CASE WHEN CUR_DATE &lt; SBAI.CREATED_DATE +(1*((SBAI.CREATED_DATE - SBAI.DUE_DATE)*24*60*0.75)/1440) THEN 1 ELSE 0 END ELSE 0 END) AS ONTIME&#xD;&#xA;&#x9;&#x9;, SUM (CASE WHEN SBPI.DUE_DATE &gt; CUR_DATE then &#xD;&#xA;            case when CUR_DATE &gt; SBAI.CREATED_DATE +(1*((SBAI.CREATED_DATE - SBAI.DUE_DATE)*24*60*0.75)/1440) THEN 1 ELSE 0 END ELSE 0 END) AS ATRISK&#xD;&#xA;&#x9;&#x9;, SUM (CASE WHEN SBAI.DUE_DATE &lt; CUR_DATE THEN 1 ELSE 0 END ) &#x9;AS OVERDUE  &#xD;&#xA;&#x9;FROM SGW_BPM_ACTIVITY_INSTANCE SBAI  &#xD;&#xA;&#x9;&#x9;JOIN &#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9;&#x9;SELECT UDF_GET_SYSTEM_DATE('Y') CUR_DATE FROM DUAL&#xD;&#xA;&#x9;&#x9;) CR ON 1=1        &#xD;&#xA;&#x9;&#x9;INNER JOIN SGW_BPM_ACTIVITY SBA  ON SBAI.ACTIVITY_ID = SBA.ACTIVITY_ID  AND SBAI.STATUS_VALUE IN ('INPC','UNPC')&#xD;&#xA;&#x9;&#x9;INNER JOIN SGW_BPM_PROCESS_INSTANCE SBPI  ON SBAI.PROCESS_INSTANCE_ID = SBPI.PROCESS_INSTANCE_ID AND SBPI.STATUS_VALUE IN ('INPC','UNPC')&#xD;&#xA;&#x9;&#x9;INNER JOIN SGW_BPM_PROCESS SBP  ON SBPI.PROCESS_ID = SBP.PROCESS_ID  AND SBAI.STATUS_VALUE = 'INPC' &#xD;&#xA;&#x9;&#x9;INNER JOIN SGW_BPM_CASE SBC  ON SBP.CASE_ID = SBC.CASE_ID &#xD;&#xA;&#x9;Where SBA.ACTIVITY_ID = @ACTIVITY_ID AND SBAI.CREATED_DATE between @DATE_FROM AND @DATE_TO&#xD;&#xA;&#x9;  group by sbp.PROCESS_ID, SBA.ACTIVITY_ID, SBA.NAME&#xD;&#xA;)&#xD;&#xA;SELECT SBA.NAME AS ACTIVITY_NAME, SUM(DATEVALUES.IN_PROGRESS) AS IN_PROGRESS, SUM(DATEVALUES.PROCESSED) AS PROCESSED &#xD;&#xA;&#x9;, SUM(DATEVALUES.APPROVED) AS APPROVED, SUM(DATEVALUES.REJECTED) AS REJECTED,&#xD;&#xA;&#x9;, SUM(DATEVALUES.RESTRICTED) AS RESTRICTED, SUM(DATEVALUES.CANC_FAIL) AS CANC_FAIL, SUM(DATEVALUES.RESUMED) AS RESUMED&#xD;&#xA;&#x9;, SUM(DATEVALUES.ONTIME) AS ONTIME, SUM(DATEVALUES.ATRISK) AS ATRISK, SUM(DATEVALUES.OVERDUE) AS OVERDUE&#xD;&#xA;FROM SGW_BPM_ACTIVITY_INSTANCE SBAI  &#xD;&#xA;&#x9; INNER JOIN SGW_BPM_ACTIVITY SBA  ON SBAI.ACTIVITY_ID = SBA.ACTIVITY_ID  AND SBAI.STATUS_VALUE IN ('INPC','UNPC')&#x9;&#x9;&#xD;&#xA;&#x9;INNER JOIN SGW_BPM_PROCESS_INSTANCE SBPI  ON SBAI.PROCESS_INSTANCE_ID = SBPI.PROCESS_INSTANCE_ID AND SBPI.STATUS_VALUE IN ('INPC','UNPC')&#xD;&#xA;&#x9;INNER JOIN SGW_BPM_PROCESS SBP  ON SBPI.PROCESS_ID = SBP.PROCESS_ID   AND SBAI.STATUS_VALUE = 'INPC' &#xD;&#xA;&#x9; INNER JOIN SGW_BPM_CASE SBC  ON SBP.CASE_ID = SBC.CASE_ID&#x9; &#x9;&#xD;&#xA;&#x9;INNER JOIN DATEVALUES ON SBA.ACTIVITY_ID = DATEVALUES.ACTIVITY_ID&#xD;&#xA;WHERE SBAI.STATUS_VALUE = 'INPC' &#x9;AND (ONTIME &gt; 0 OR ATRISK &gt; 0 OR OVERDUE &gt; 0) &#xD;&#xA;GROUP BY SBA.NAME" sfwPostgre="WITH datevalues AS (SELECT&#xA;     sba.name,&#xA;    sba.activity_id,&#xA;    SUM(CASE WHEN sbai.status_value IN ('INPC',&#xA;    'UNPC') THEN 1 ELSE 0 END) AS in_progress,&#xA;    SUM(CASE WHEN sbai.status_value IN ('RESU') THEN 1 ELSE 0 END) AS resumed,&#xA;    SUM(CASE WHEN sbai.status_value IN ('PROC') THEN 1 ELSE 0 END) AS processed,&#xA;    SUM(CASE WHEN sbai.status_value = 'APPR' THEN 1 ELSE 0 END) AS approved,&#xA;    SUM(CASE WHEN sbai.status_value = 'REJT' THEN 1 ELSE 0 END) AS rejected,&#xA;    SUM(CASE WHEN sbai.status_value IN ('CANC',&#xA;    'FAIL') THEN 1 ELSE 0 END) AS canc_fail,&#xA;    SUM(CASE WHEN sbai.status_value = 'RETR' THEN 1 ELSE 0 END) AS restricted,&#xA;    SUM(CASE WHEN sbai.due_date &gt; clock_timestamp()::TIMESTAMP WITHOUT TIME ZONE THEN CASE WHEN clock_timestamp()::TIMESTAMP WITHOUT TIME ZONE &lt; sbai.created_date + (aws_sqlserver_ext.datediff('minute',&#xA;    sbai.created_date::TIMESTAMP,&#xA;    sbai.due_date::TIMESTAMP) * 0.75::NUMERIC || ' MINUTE')::INTERVAL THEN 1 ELSE 0 END ELSE 0 END) AS&#xA;     ONtime,&#xA;    SUM(CASE WHEN sbpi.due_date &gt; clock_timestamp()::TIMESTAMP WITHOUT TIME ZONE THEN CASE WHEN clock_timestamp()::TIMESTAMP WITHOUT TIME ZONE &gt; sbai.created_date + (aws_sqlserver_ext.datediff('minute',&#xA;    sbai.created_date::TIMESTAMP,&#xA;    sbai.due_date::TIMESTAMP) * 0.75::NUMERIC || ' MINUTE')::INTERVAL THEN 1 ELSE 0 END ELSE 0 END) AS atrisk,&#xA;    SUM(CASE WHEN sbai.due_date &lt; clock_timestamp()::TIMESTAMP WITHOUT TIME ZONE THEN 1 ELSE 0 END) AS overdue&#xA;FROM&#xA;     dbo.sgw_bpm_activity_instance AS sbai&#xA;    INNER&#xA;     JOIN dbo.sgw_bpm_activity AS sba&#xA;     ON sbai.activity_id = sba.activity_id AND&#xA;     sbai.status_value IN ('INPC',&#xA;    'UNPC')&#xA;    INNER&#xA;     JOIN dbo.sgw_bpm_process_instance AS sbpi&#xA;     ON sbai.process_instance_id = sbpi.process_instance_id AND&#xA;     sbpi.status_value IN ('INPC',&#xA;    'UNPC')&#xA;    INNER&#xA;     JOIN dbo.sgw_bpm_process AS sbp&#xA;     ON sbpi.process_id = sbp.process_id AND&#xA;     sbai.status_value = 'INPC'&#xA;    INNER&#xA;     JOIN dbo.sgw_bpm_case AS sbc&#xA;     ON sbp.case_id = sbc.case_id&#xA;WHERE&#xA;     sba.activity_id = @activity_id  AND&#xA;     sbai.created_date BETWEEN @DATE_FROM AND&#xA;      @DATE_TO&#xA;GROUP BY  sbp.process_id,&#xA;    sba.activity_id,&#xA;    sba.name) SELECT&#xA;     sba.name AS activity_name,&#xA;    SUM(datevalues.in_progress) AS in_progress,&#xA;    SUM(datevalues.processed) AS processed,&#xA;    SUM(datevalues.approved) AS approved,&#xA;    SUM(datevalues.rejected) AS rejected,&#xA;    SUM(datevalues.restricted) AS restricted,&#xA;    SUM(datevalues.canc_fail) AS canc_fail,&#xA;    SUM(datevalues.resumed) AS resumed,&#xA;    SUM(datevalues.ontime) AS&#xA;     ONtime,&#xA;    SUM(datevalues.atrisk) AS atrisk,&#xA;    SUM(datevalues.overdue) AS overdue&#xA;FROM&#xA;     dbo.sgw_bpm_activity_instance AS sbai&#xA;    INNER&#xA;     JOIN dbo.sgw_bpm_activity AS sba&#xA;     ON sbai.activity_id = sba.activity_id AND&#xA;     sbai.status_value IN ('INPC',&#xA;    'UNPC')&#xA;    INNER&#xA;     JOIN dbo.sgw_bpm_process_instance AS sbpi&#xA;     ON sbai.process_instance_id = sbpi.process_instance_id AND&#xA;     sbpi.status_value IN ('INPC',&#xA;    'UNPC')&#xA;    INNER&#xA;     JOIN dbo.sgw_bpm_process AS sbp&#xA;     ON sbpi.process_id = sbp.process_id AND&#xA;     sbai.status_value = 'INPC'&#xA;    INNER&#xA;     JOIN dbo.sgw_bpm_case AS sbc&#xA;     ON sbp.case_id = sbc.case_id&#xA;    INNER&#xA;     JOIN datevalues&#xA;     ON sba.activity_id = datevalues.activity_id&#xA;WHERE&#xA;     sbai.status_value = 'INPC' AND&#xA;      (&#xA;     ONtime &gt; 0 OR atrisk &gt; 0 OR overdue &gt; 0)&#xA;GROUP BY  sba.name">
      <parameters>
        <parameter ID="@ACTIVITY_ID" sfwDataType="int" />
        <parameter ID="@DATE_FROM" sfwDataType="DateTime" />
        <parameter ID="@DATE_TO" sfwDataType="DateTime" />
      </parameters>
    </query>
  </queries>
  <commonproperties />
  <checklist />
  <initialload />
  <delete />
  <validatedelete />
  <softerror />
  <groupslist />
  <harderror />
  <constraint>
    <item sfwObjectBased="True" sfwFieldName="IdtDateFrom" sfwDataType="datetime" sfwDisplayName="Date From is greater than Date To" sfwOperator="LessThanEqual" sfwRelatedField="IdtDateTo" />
  </constraint>
  <rules />
  <ExtraFields />
  <methods>
    <method sfwMethodType="Load" ID="Group1" sfwMode="All">
      <item sfwItemType="Method" ID="GetBPMActivityBAM" sfwParameter="aintActivityId" sfwDataType="ArrayList" />
      <parameter ID="aintActivityId" sfwDataType="Int32" />
    </method>
  </methods>
  <lifecycle />
  <attributes>
    <attribute ID="ActivityInstanceId" sfwType="Column" sfwValue="activity_instance_id" sfwIsNull="False" sfwKeyNo="1" sfwIsIdentity="True" sfwDataType="int" />
    <attribute sfwDataType="int32" sfwType="Property" ID="IintActivityId" sfwValue="iintActivityId" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtDateFrom" sfwValue="idtDateFrom" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtDateTo" sfwValue="idtDateTo" />
    <attribute sfwType="Collection" sfwEntity="entBpmBAMActivityLoadAnalysis" ID="lstActivityLoadAnalysis" sfwValue="iclbActivityLoadAnalysis" />
  </attributes>
  <objectmethods>
    <method ID="GetBPMActivityBAM" sfwReturnType="ArrayList">
      <parameters>
        <parameter ID="aintActivityId" sfwDataType="Int32" />
      </parameters>
    </method>
  </objectmethods>
</entity>