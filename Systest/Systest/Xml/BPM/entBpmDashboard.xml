<entity ID="entBpmDashboard" Text="Bpm Dashboard" sfwObjectID="busBpmDashboard" sfwObjectType="Sagitec.BusinessObjects.busBpmDashboard, SagitecBusinessObjects, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" sfwView="False">
  <queries>
    <query ID="UserAssignedActivitiesStatistics" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9;sum (case when DUE_DATE &gt; @NOW then case when @NOW &lt; DATEADD(mi,datediff(mi,CREATED_DATE,DUE_DATE)*0.75,CREATED_DATE) then 1 else 0 end else 0 end) &#x9;AS OnTime,&#xA;&#x9;sum (case when DUE_DATE &gt; @NOW then case when @NOW &gt; DATEADD(mi,datediff(mi,CREATED_DATE,DUE_DATE)*0.75,CREATED_DATE) then 1 else 0 end else 0 end) &#x9;AS AtRisk,&#xA;&#x9;sum (case when DUE_DATE &lt; @NOW then 1 else 0 end) &#x9;AS OverDue &#xA;FROM&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE WITH(NOLOCK) &#xA;WHERE&#xA;&#x9; CHECKED_OUT_USER = @USER_ID AND&#xA;&#x9; STATUS_VALUE = 'INPC';" sfwOracle="SELECT&#xD;&#xA;&#x9;sum (case when DUE_DATE &gt; @NOW then case when @NOW &lt; CREATED_DATE + (1 * ((CREATED_DATE - DUE_DATE) * 24 * 60 * 0.75) / 1440)  then 1 else 0 end else 0 end) AS OnTime,&#xD;&#xA;&#x9;sum (case when DUE_DATE &gt; @NOW then case when  @NOW &gt; CREATED_DATE + (1 * ((CREATED_DATE - DUE_DATE) * 24 *60 * 0.75) / 1440)  then 1 else 0 end else 0 end) AS AtRisk,&#xD;&#xA;&#x9;sum (case when DUE_DATE &lt; @NOW then 1 else 0 end) &#x9;AS OverDue &#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE &#xD;&#xA;WHERE&#xD;&#xA;&#x9; CHECKED_OUT_USER = @USER_ID AND&#xD;&#xA;&#x9; STATUS_VALUE = 'INPC';" sfwPostgre="SELECT&#xD;&#xA;&#x9;sum (case when DUE_DATE &gt; @NOW then case when @NOW &lt; CREATED_DATE + (1 * ((CREATED_DATE - DUE_DATE) * 24 * 60 * 0.75) / 1440)  then 1 else 0 end else 0 end) AS OnTime,&#xD;&#xA;&#x9;sum (case when DUE_DATE &gt; @NOW then case when  @NOW &gt; CREATED_DATE + (1 * ((CREATED_DATE - DUE_DATE) * 24 *60 * 0.75) / 1440)  then 1 else 0 end else 0 end) AS AtRisk,&#xD;&#xA;&#x9;sum (case when DUE_DATE &lt; @NOW then 1 else 0 end) &#x9;AS OverDue &#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE &#xD;&#xA;WHERE&#xD;&#xA;&#x9; CHECKED_OUT_USER = @USER_ID AND&#xD;&#xA;&#x9; STATUS_VALUE = 'INPC';">
      <parameters>
        <parameter ID="@USER_ID" sfwDataType="string" />
        <parameter ID="@NOW" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="UserAccessibleActivitiesWorkPoolStatistics" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9;sum (case when AI.DUE_DATE &gt; @NOW then case when @NOW &lt; DATEADD(mi,datediff(mi,AI.CREATED_DATE,AI.DUE_DATE)*0.75,AI.CREATED_DATE) then 1 else 0 end else 0 end) &#x9;AS OnTime,&#xA;&#x9;sum (case when AI.DUE_DATE &gt; @NOW then case when @NOW &gt; DATEADD(mi,datediff(mi,AI.CREATED_DATE,AI.DUE_DATE)*0.75,AI.CREATED_DATE) then 1 else 0 end else 0 end) &#x9;AS AtRisk,&#xA;&#x9;sum (case when AI.DUE_DATE &lt; @NOW then 1 else 0 end) &#x9;AS OverDue &#xA;FROM&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE AI WITH(NOLOCK) &#xA;&#x9;INNER &#xA;&#x9; JOIN SGW_BPM_ACTIVITY_INST_USERS AIU WITH(NOLOCK)&#xA;&#x9; ON AI.ACTIVITY_INSTANCE_ID = AIU.ACTIVITY_INSTANCE_ID &#xA;WHERE&#xA;&#x9; AIU.USER_ID = @USER_ID;" sfwOracle="SELECT&#xD;&#xA;&#x9;sum (case when DUE_DATE &gt; @NOW then case when @NOW &lt; AI.CREATED_DATE + (1 * ((AI.CREATED_DATE - DUE_DATE) * 24 * 60 * 0.75) / 1440)  then 1 else 0 end else 0 end) AS OnTime,&#xD;&#xA;&#x9;sum (case when DUE_DATE &gt; @NOW then case when  @NOW &gt; AI.CREATED_DATE + (1 * ((AI.CREATED_DATE - DUE_DATE) * 24 *60 * 0.75) / 1440)  then 1 else 0 end else 0 end) AS AtRisk,&#xD;&#xA;&#x9;sum (case when DUE_DATE &lt; @NOW then 1 else 0 end) &#x9;AS OverDue &#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE AI &#xD;&#xA;&#x9;INNER &#xD;&#xA;&#x9; JOIN SGW_BPM_ACTIVITY_INST_USERS AIU &#xD;&#xA;&#x9; ON AI.ACTIVITY_INSTANCE_ID = AIU.ACTIVITY_INSTANCE_ID &#xD;&#xA;WHERE&#xD;&#xA;&#x9; AIU.USER_ID = @USER_ID;" sfwPostgre="SELECT&#xD;&#xA;&#x9;sum (case when DUE_DATE &gt; @NOW then case when @NOW &lt; AI.CREATED_DATE + (1 * ((AI.CREATED_DATE - DUE_DATE) * 24 * 60 * 0.75) / 1440)  then 1 else 0 end else 0 end) AS OnTime,&#xD;&#xA;&#x9;sum (case when DUE_DATE &gt; @NOW then case when  @NOW &gt; AI.CREATED_DATE + (1 * ((AI.CREATED_DATE - DUE_DATE) * 24 *60 * 0.75) / 1440)  then 1 else 0 end else 0 end) AS AtRisk,&#xD;&#xA;&#x9;sum (case when DUE_DATE &lt; @NOW then 1 else 0 end) &#x9;AS OverDue &#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE AI &#xD;&#xA;&#x9;INNER &#xD;&#xA;&#x9; JOIN SGW_BPM_ACTIVITY_INST_USERS AIU &#xD;&#xA;&#x9; ON AI.ACTIVITY_INSTANCE_ID = AIU.ACTIVITY_INSTANCE_ID &#xD;&#xA;WHERE&#xD;&#xA;&#x9; AIU.USER_ID = @USER_ID;">
      <parameters>
        <parameter ID="@USER_ID;" sfwDataType="string" />
        <parameter ID="@NOW" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="ProcessLoadSummary" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; BP.NAME,&#xA;&#x9;BA.NAME,&#xA;&#x9;BP.CASE_ID,&#xA;&#x9;BP.PROCESS_ID,&#xA;&#x9;BA.ACTIVITY_ID,&#xA;&#x9;count(*) AS ASsigned,&#xA;&#x9;sum (case when BAI.STATUS_VALUE = 'UNPC' then 1 else 0 end) AS Workpool &#xA;FROM&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE BAI WITH(NOLOCK) INNER  &#xA;&#x9; JOIN SGW_BPM_PROCESS_INSTANCE BPI WITH(NOLOCK)&#xA;&#x9; ON BAI.PROCESS_INSTANCE_ID = BPI.PROCESS_INSTANCE_ID INNER  &#xA;&#x9; JOIN SGW_BPM_PROCESS BP WITH(NOLOCK)&#xA;&#x9; ON BPI.PROCESS_ID = BP.PROCESS_ID INNER  &#xA;&#x9; JOIN SGW_BPM_ACTIVITY BA WITH(NOLOCK)&#xA;&#x9; ON BAI.ACTIVITY_ID = BA.ACTIVITY_ID AND&#xA;&#x9; BA.ACTIVITY_TYPE_VALUE = 'USTK' LEFT  &#xA;&#x9; JOIN (SELECT&#xA;&#x9; DISTINCT ACTIVITY_INSTANCE_ID &#xA;FROM&#xA;&#x9; SGW_BPM_ACTIVITY_INST_USERS WITH(NOLOCK)) BAIU&#xA;&#x9; ON BAI.ACTIVITY_INSTANCE_ID = BAIU.ACTIVITY_INSTANCE_ID &#xA;WHERE&#xA;&#x9; BAI.STATUS_VALUE = 'INPC' OR BAI.STATUS_VALUE = 'UNPC' &#xA;GROUP BY  BP.NAME,&#xA;&#x9;BA.NAME,&#xA;&#x9;BP.CASE_ID,&#xA;&#x9;BP.PROCESS_ID,&#xA;&#x9;BA.ACTIVITY_ID;" sfwOracle="SELECT&#xD;&#xA;&#x9;BP.NAME,&#xD;&#xA;&#x9;BA.NAME,&#xD;&#xA;&#x9;BP.CASE_ID,&#xD;&#xA;&#x9;BP.PROCESS_ID,&#xD;&#xA;&#x9;BA.ACTIVITY_ID,&#xD;&#xA;&#x9;count(*) AS ASsigned,&#xD;&#xA;&#x9;sum (case when BAI.STATUS_VALUE = 'UNPC' then 1 else 0 end) AS Workpool &#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE BAI  INNER  &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS_INSTANCE BPI &#xD;&#xA;&#x9; ON BAI.PROCESS_INSTANCE_ID = BPI.PROCESS_INSTANCE_ID INNER  &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS BP &#xD;&#xA;&#x9; ON BPI.PROCESS_ID = BP.PROCESS_ID INNER  &#xD;&#xA;&#x9; JOIN SGW_BPM_ACTIVITY BA &#xD;&#xA;&#x9; ON BAI.ACTIVITY_ID = BA.ACTIVITY_ID AND&#xD;&#xA;&#x9; BA.ACTIVITY_TYPE_VALUE = 'USTK' LEFT  &#xD;&#xA;&#x9; JOIN (SELECT&#xD;&#xA;&#x9; DISTINCT ACTIVITY_INSTANCE_ID &#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_ACTIVITY_INST_USERS ) BAIU&#xD;&#xA;&#x9; ON BAI.ACTIVITY_INSTANCE_ID = BAIU.ACTIVITY_INSTANCE_ID &#xD;&#xA;WHERE&#xD;&#xA;&#x9; BAI.STATUS_VALUE = 'INPC' OR BAI.STATUS_VALUE = 'UNPC' &#xD;&#xA;GROUP BY  BP.NAME,BA.NAME,BP.CASE_ID,BP.PROCESS_ID,&#x9;BA.ACTIVITY_ID;" sfwPostgre="SELECT&#xD;&#xA;&#x9;BP.NAME,&#xD;&#xA;&#x9;BA.NAME,&#xD;&#xA;&#x9;BP.CASE_ID,&#xD;&#xA;&#x9;BP.PROCESS_ID,&#xD;&#xA;&#x9;BA.ACTIVITY_ID,&#xD;&#xA;&#x9;count(*) AS ASsigned,&#xD;&#xA;&#x9;sum (case when BAI.STATUS_VALUE = 'UNPC' then 1 else 0 end) AS Workpool &#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE BAI  INNER  &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS_INSTANCE BPI &#xD;&#xA;&#x9; ON BAI.PROCESS_INSTANCE_ID = BPI.PROCESS_INSTANCE_ID INNER  &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS BP &#xD;&#xA;&#x9; ON BPI.PROCESS_ID = BP.PROCESS_ID INNER  &#xD;&#xA;&#x9; JOIN SGW_BPM_ACTIVITY BA &#xD;&#xA;&#x9; ON BAI.ACTIVITY_ID = BA.ACTIVITY_ID AND&#xD;&#xA;&#x9; BA.ACTIVITY_TYPE_VALUE = 'USTK' LEFT  &#xD;&#xA;&#x9; JOIN (SELECT&#xD;&#xA;&#x9; DISTINCT ACTIVITY_INSTANCE_ID &#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_ACTIVITY_INST_USERS ) BAIU&#xD;&#xA;&#x9; ON BAI.ACTIVITY_INSTANCE_ID = BAIU.ACTIVITY_INSTANCE_ID &#xD;&#xA;WHERE&#xD;&#xA;&#x9; BAI.STATUS_VALUE = 'INPC' OR BAI.STATUS_VALUE = 'UNPC' &#xD;&#xA;GROUP BY  BP.NAME,BA.NAME,BP.CASE_ID,BP.PROCESS_ID,&#x9;BA.ACTIVITY_ID;">
      <parameters>
        <parameter ID="@DATE_FROM" sfwDataType="DateTime" />
        <parameter ID="@DATE_TO" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="ProcessTrend" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT &#xA;SBP.PROCESS_ID AS PROCESS_ID,&#xA;&#x9; SBP.NAME + ' (Ver.' + CONVERT(VARCHAR,SBC.VERSION) + ')'  AS PROCESS_NAME,&#xA;&#x9; LEFT(SBP.NAME, 20) + '...'  + ' (Ver.' + CONVERT(VARCHAR,SBC.VERSION) + ')'  AS SHORT_PROCESS_NAME,&#xA;&#x9;ISNULL(SUM(case when SBPI.STATUS_VALUE = 'PROC' then 1 else 0 end),0) &#x9;AS Completed,&#xA;&#x9;ISNULL(sum(case when SBPI.STATUS_VALUE IN ('INPC' ,'UNPC') then 1 else 0 end),0) &#x9;AS Inprocess,&#xA;&#x9;ISNULL(sum(case when SBPI.STATUS_VALUE IN ('TERM' ,'FAIL') then 1 else 0 end),0) &#x9;AS Term_Fail &#xA;FROM&#xA;&#x9; SGW_BPM_PROCESS_INSTANCE &#x9;AS SBPI WITH(NOLOCK)  INNER  &#xA;&#x9; JOIN SGW_BPM_PROCESS &#x9;AS SBP WITH(NOLOCK) ON SBPI.PROCESS_ID = SBP.PROCESS_ID &#xA;&#x9; INNER JOIN SGW_BPM_CASE SBC WITH(NOLOCK)&#xA;&#x9; ON SBP.CASE_ID = SBC.CASE_ID&#x9; &#xA;&#x9;WHERE CONVERT(DATETIME,CONVERT(CHAR,SBPI.CREATED_DATE,103),103) BETWEEN  @DATE_FROM AND @DATE_TO &#xA;&#x9; GROUP&#x9; BY   SBP.NAME,SBP.PROCESS_ID, SBC.VERSION ORDER BY Inprocess DESC" sfwOracle="SELECT&#xA;&#x9;SBP.PROCESS_ID AS PROCESS_ID,&#xA;&#x9;SBP.NAME || ' (Ver.' || CAST(SBC.VERSION AS VARCHAR2(30)) || ')' AS PROCESS_NAME,&#xA;&#x9;SUBSTR(SBP.NAME,&#xA;&#x9;1,&#xA;&#x9;20) || '...' || ' (Ver.' || CAST(SBC.VERSION AS VARCHAR2(30)) || ')' AS SHORT_PROCESS_NAME,&#xA;&#x9;COALESCE(SUM(case when SBPI.STATUS_VALUE = 'PROC' then 1 else 0 end),&#xA;&#x9;0) AS Completed,&#xA;&#x9;COALESCE(sum(case when SBPI.STATUS_VALUE IN ('INPC' ,&#xA;&#x9;'UNPC') then 1 else 0 end),&#xA;&#x9;0) AS Inprocess,&#xA;&#x9;COALESCE(sum(case when SBPI.STATUS_VALUE IN ('TERM' ,&#xA;&#x9;'FAIL') then 1 else 0 end),&#xA;&#x9;0) AS Term_Fail &#xA;FROM&#xA;&#x9; SGW_BPM_PROCESS_INSTANCE SBPI &#xA;&#x9;INNER &#xA;&#x9; JOIN SGW_BPM_PROCESS SBP&#xA;&#x9; ON SBPI.PROCESS_ID = SBP.PROCESS_ID &#xA;&#x9;INNER &#xA;&#x9; JOIN SGW_BPM_CASE SBC&#xA;&#x9; ON SBP.CASE_ID = SBC.CASE_ID  &#xA;WHERE&#xA;&#x9; (trunc(SBPI.CREATED_DATE) &gt; =  @DATE_FROM)AND&#xA;&#x9; ((trunc(SBPI.CREATED_DATE) IS NULL) OR (trunc(SBPI.CREATED_DATE) &lt; =  @DATE_TO)) &#xA;GROUP BY  SBP.NAME,&#x9;SBP.PROCESS_ID,&#x9;SBC.VERSION &#xA;ORDER BY  Inprocess DESC" sfwPostgre="SELECT&#xD;&#xA;&#x9;SBP.PROCESS_ID AS PROCESS_ID,&#xD;&#xA;&#x9;SBP.NAME || ' (Ver.' || CAST(SBC.VERSION AS VARCHAR(30)) || ')' AS PROCESS_NAME,&#xD;&#xA;&#x9;SUBSTR(SBP.NAME,&#xD;&#xA;&#x9;1,&#xD;&#xA;&#x9;20) || '...' || ' (Ver.' || CAST(SBC.VERSION AS VARCHAR(30)) || ')' AS SHORT_PROCESS_NAME,&#xD;&#xA;&#x9;COALESCE(SUM(case when SBPI.STATUS_VALUE = 'PROC' then 1 else 0 end),&#xD;&#xA;&#x9;0) AS Completed,&#xD;&#xA;&#x9;COALESCE(sum(case when SBPI.STATUS_VALUE IN ('INPC' ,&#xD;&#xA;&#x9;'UNPC') then 1 else 0 end),&#xD;&#xA;&#x9;0) AS Inprocess,&#xD;&#xA;&#x9;COALESCE(sum(case when SBPI.STATUS_VALUE IN ('TERM' ,&#xD;&#xA;&#x9;'FAIL') then 1 else 0 end),&#xD;&#xA;&#x9;0) AS Term_Fail &#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_PROCESS_INSTANCE SBPI &#xD;&#xA;&#x9;INNER &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS SBP&#xD;&#xA;&#x9; ON SBPI.PROCESS_ID = SBP.PROCESS_ID &#xD;&#xA;&#x9;INNER &#xD;&#xA;&#x9; JOIN SGW_BPM_CASE SBC&#xD;&#xA;&#x9; ON SBP.CASE_ID = SBC.CASE_ID  &#xD;&#xA;WHERE&#xD;&#xA;&#x9; (SBPI.CREATED_DATE) &gt;=  @DATE_FROM AND&#xD;&#xA;&#x9; ((SBPI.CREATED_DATE) IS NULL OR (SBPI.CREATED_DATE) &lt;=  @DATE_TO)&#xD;&#xA;GROUP BY  SBP.NAME,&#x9;SBP.PROCESS_ID,&#x9;SBC.VERSION &#xD;&#xA;ORDER BY  Inprocess DESC">
      <parameters>
        <parameter ID="@DATE_FROM" sfwDataType="DateTime" />
        <parameter ID="@DATE_TO" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="ProcessTrendByProcessId" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;BP.PROCESS_ID AS PROCESS_ID,&#xA;&#x9; BP.NAME as PROCESS_NAME,&#xA;&#x9;sum(case when BPI.STATUS_VALUE = 'PROC' then 1 else 0 end) &#x9;AS Completed,&#xA;&#x9;sum(case when BPI.STATUS_VALUE IN ('INPC' ,'UNPC') then 1 else 0 end) &#x9;AS Inprocess,&#xA;&#x9;sum(case when BPI.STATUS_VALUE IN ('TERM' ,'FAIL') then 1 else 0 end) &#x9;AS Term_Fail &#xA;FROM&#xA;&#x9; SGW_BPM_PROCESS_INSTANCE &#x9;AS BPI WITH(NOLOCK)  INNER  &#xA;&#x9; JOIN SGW_BPM_PROCESS &#x9;AS BP WITH(NOLOCK) &#xA;&#x9; ON BPI.PROCESS_ID = BP.PROCESS_ID &#xA;&#x9; WHERE CONVERT(DATETIME,CONVERT(CHAR,BPI.CREATED_DATE,103),103) BETWEEN  @DATE_FROM AND @DATE_TO and bpi.PROCESS_ID = @PROCESS_ID&#xA;&#x9; GROUP&#x9; BY   BP.NAME,BP.PROCESS_ID" sfwOracle="SELECT&#xD;&#xA;    BP.PROCESS_ID AS PROCESS_ID,&#xD;&#xA;&#x9;BP.NAME as PROCESS_NAME,&#xD;&#xA;&#x9;sum(case when BPI.STATUS_VALUE = 'PROC' then 1 else 0 end) &#x9;AS Completed,&#xD;&#xA;&#x9;sum(case when BPI.STATUS_VALUE IN ('INPC' ,'UNPC') then 1 else 0 end) &#x9;AS Inprocess,&#xD;&#xA;&#x9;sum(case when BPI.STATUS_VALUE IN ('TERM' ,'FAIL') then 1 else 0 end) &#x9;AS Term_Fail &#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_PROCESS_INSTANCE BPI  INNER  &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS  BP &#xD;&#xA;&#x9; ON BPI.PROCESS_ID = BP.PROCESS_ID &#xD;&#xA;&#x9; WHERE (BPI.CREATED_DATE &gt; =  @DATE_FROM )AND&#xD;&#xA;&#x9; ((BPI.CREATED_DATE IS NULL) OR (BPI.CREATED_DATE &lt; =  @DATE_TO))  and bpi.PROCESS_ID = @PROCESS_ID&#xD;&#xA;GROUP BY BP.NAME,BP.PROCESS_ID" sfwPostgre="SELECT&#xD;&#xA;    BP.PROCESS_ID AS PROCESS_ID,&#xD;&#xA;&#x9;BP.NAME as PROCESS_NAME,&#xD;&#xA;&#x9;sum(case when BPI.STATUS_VALUE = 'PROC' then 1 else 0 end) &#x9;AS Completed,&#xD;&#xA;&#x9;sum(case when BPI.STATUS_VALUE IN ('INPC' ,'UNPC') then 1 else 0 end) &#x9;AS Inprocess,&#xD;&#xA;&#x9;sum(case when BPI.STATUS_VALUE IN ('TERM' ,'FAIL') then 1 else 0 end) &#x9;AS Term_Fail &#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_PROCESS_INSTANCE BPI  INNER  &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS  BP &#xD;&#xA;&#x9; ON BPI.PROCESS_ID = BP.PROCESS_ID &#xD;&#xA;&#x9; WHERE (BPI.CREATED_DATE &gt;=  @DATE_FROM )AND&#xD;&#xA;&#x9; ((BPI.CREATED_DATE IS NULL) OR (BPI.CREATED_DATE &lt;=  @DATE_TO))  and bpi.PROCESS_ID = @PROCESS_ID&#xD;&#xA;GROUP BY BP.NAME,BP.PROCESS_ID">
      <parameters>
        <parameter ID="@PROCESS_ID" sfwDataType="int" />
        <parameter ID="@DATE_FROM" sfwDataType="DateTime" />
        <parameter ID="@DATE_TO" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="ProcessPerformamceSummary" sfwQueryType="SelectQuery" sfwDataType="EntityTable">
      <parameters />
    </query>
    <query ID="GetWorkflowDashboard" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9;BA.NAME + ' (Ver.' + CONVERT(VARCHAR,&#xA;&#x9;SBC.VERSION) + ')' AS ACTIVITY_NAME,&#xA;&#x9;LEFT(BA.NAME, 20) + '...'  + ' (Ver.' + CONVERT(VARCHAR,SBC.VERSION) + ')'  AS SHORT_ACTIVITY_NAME,&#xA;&#x9;BP.PROCESS_ID,&#x9;&#xA;&#x9;count(*) AS ASSIGNED,&#xA;&#x9;sum (case when BAI.STATUS_VALUE = 'UNPC' then 1 else 0 end) AS WORKPOOL &#xA;FROM&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE BAI WITH(NOLOCK)   INNER    &#xA;&#x9; JOIN SGW_BPM_PROCESS_INSTANCE BPI WITH(NOLOCK)  &#xA;&#x9; ON BAI.PROCESS_INSTANCE_ID = BPI.PROCESS_INSTANCE_ID INNER    &#xA;&#x9; JOIN SGW_BPM_PROCESS BP WITH(NOLOCK)  &#xA;&#x9; ON BPI.PROCESS_ID = BP.PROCESS_ID  &#xA;&#x9;INNER &#xA;&#x9; JOIN SGW_BPM_CASE SBC WITH(NOLOCK)&#xA;&#x9; ON BP.CASE_ID = SBC.CASE_ID  INNER    &#xA;&#x9; JOIN SGW_BPM_ACTIVITY BA WITH(NOLOCK)  &#xA;&#x9; ON BAI.ACTIVITY_ID = BA.ACTIVITY_ID AND&#xA;&#x9; BA.ACTIVITY_TYPE_VALUE = 'USTK' LEFT    &#xA;&#x9; JOIN (SELECT&#xA;&#x9; DISTINCT ACTIVITY_INSTANCE_ID &#xA;FROM&#xA;&#x9; SGW_BPM_ACTIVITY_INST_USERS WITH(NOLOCK)   &#xA;WHERE&#xA;&#x9; USER_ID = @USER_ID) AS BAIU&#xA;&#x9; ON BAI.ACTIVITY_INSTANCE_ID = BAIU.ACTIVITY_INSTANCE_ID &#xA;WHERE&#xA;&#x9; ((BAI.STATUS_VALUE = 'INPC' AND&#xA;&#x9; BAI.CHECKED_OUT_USER = @USER_ID) OR (BAI.STATUS_VALUE = 'UNPC')) &#xA;&#x9;AND CONVERT(DATETIME,CONVERT(CHAR,BPI.CREATED_DATE,103),103) BETWEEN  @DATE_FROM AND @DATE_TO &#xA;GROUP BY     BA.NAME,&#xA;&#x9;SBC.VERSION,&#xA;&#x9;BP.PROCESS_ID ORDER BY ASSIGNED DESC" sfwOracle="SELECT&#xD;&#xA;&#x9;BA.NAME || ' (Ver.' || TO_CHAR(SBC.VERSION) || ')' AS ACTIVITY_NAME,&#xD;&#xA;&#x9;SUBSTR(BA.NAME, 1, 20) || '...'  || ' (Ver.' || TO_CHAR(SBC.VERSION) || ')'  AS SHORT_ACTIVITY_NAME,&#xD;&#xA;&#x9;BP.PROCESS_ID,&#x9;&#xD;&#xA;&#x9;count(*) AS ASSIGNED,&#xD;&#xA;&#x9;sum (case when BAI.STATUS_VALUE = 'UNPC' then 1 else 0 end) AS WORKPOOL &#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE BAI     INNER    &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS_INSTANCE BPI    &#xD;&#xA;&#x9; ON BAI.PROCESS_INSTANCE_ID = BPI.PROCESS_INSTANCE_ID INNER    &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS BP    &#xD;&#xA;&#x9; ON BPI.PROCESS_ID = BP.PROCESS_ID  &#xD;&#xA;&#x9;INNER &#xD;&#xA;&#x9; JOIN SGW_BPM_CASE SBC  &#xD;&#xA;&#x9; ON BP.CASE_ID = SBC.CASE_ID  INNER    &#xD;&#xA;&#x9; JOIN SGW_BPM_ACTIVITY BA    &#xD;&#xA;&#x9; ON BAI.ACTIVITY_ID = BA.ACTIVITY_ID AND&#xD;&#xA;&#x9; BA.ACTIVITY_TYPE_VALUE = 'USTK' LEFT    &#xD;&#xA;&#x9; JOIN (SELECT&#xD;&#xA;&#x9; DISTINCT ACTIVITY_INSTANCE_ID &#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_ACTIVITY_INST_USERS     &#xD;&#xA;WHERE&#xD;&#xA;&#x9; USER_ID = @USER_ID)  BAIU&#xD;&#xA;&#x9; ON BAI.ACTIVITY_INSTANCE_ID = BAIU.ACTIVITY_INSTANCE_ID &#xD;&#xA;WHERE&#xD;&#xA;&#x9; ((BAI.STATUS_VALUE = 'INPC' AND&#xD;&#xA;&#x9; BAI.CHECKED_OUT_USER = @USER_ID) OR (BAI.STATUS_VALUE = 'UNPC')) &#xD;&#xA;&#x9; AND  (BPI.CREATED_DATE &gt; = @DATE_FROM )AND&#xD;&#xA;&#x9; ((BPI.CREATED_DATE IS NULL) OR (BPI.CREATED_DATE &lt; = @DATE_TO)) &#xD;&#xA;GROUP BY     BA.NAME,&#xD;&#xA;&#x9;SBC.VERSION,&#xD;&#xA;&#x9;BP.PROCESS_ID ORDER BY ASSIGNED DESC" sfwPostgre="SELECT&#xD;&#xA;ba.name || ' (Ver.' || CAST (sbc.version AS VARCHAR(30)) || ')' AS activity_name,&#xD;&#xA;LEFT(ba.name,&#xD;&#xA;20) || '...' || ' (Ver.' || CAST (sbc.version AS VARCHAR(30)) || ')' AS short_activity_name,&#xD;&#xA;bp.process_id,&#xD;&#xA;COUNT(*) AS ASsigned,&#xD;&#xA;SUM(CASE WHEN bai.status_value = 'UNPC' THEN 1 ELSE 0 END) AS workpool&#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE BAI     INNER    &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS_INSTANCE BPI    &#xD;&#xA;&#x9; ON BAI.PROCESS_INSTANCE_ID = BPI.PROCESS_INSTANCE_ID INNER    &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS BP    &#xD;&#xA;&#x9; ON BPI.PROCESS_ID = BP.PROCESS_ID  &#xD;&#xA;&#x9;INNER &#xD;&#xA;&#x9; JOIN SGW_BPM_CASE SBC  &#xD;&#xA;&#x9; ON BP.CASE_ID = SBC.CASE_ID  INNER    &#xD;&#xA;&#x9; JOIN SGW_BPM_ACTIVITY BA    &#xD;&#xA;&#x9; ON BAI.ACTIVITY_ID = BA.ACTIVITY_ID AND&#xD;&#xA;&#x9; BA.ACTIVITY_TYPE_VALUE = 'USTK' LEFT    &#xD;&#xA;&#x9; JOIN (SELECT&#xD;&#xA;&#x9; DISTINCT ACTIVITY_INSTANCE_ID &#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_ACTIVITY_INST_USERS     &#xD;&#xA;WHERE&#xD;&#xA;&#x9; USER_ID = @USER_ID)  BAIU&#xD;&#xA;&#x9; ON BAI.ACTIVITY_INSTANCE_ID = BAIU.ACTIVITY_INSTANCE_ID &#xD;&#xA;WHERE&#xD;&#xA;&#x9; ((BAI.STATUS_VALUE = 'INPC' AND&#xD;&#xA;&#x9; BAI.CHECKED_OUT_USER = @USER_ID) OR (BAI.STATUS_VALUE = 'UNPC')) &#xD;&#xA;&#x9; AND  (BPI.CREATED_DATE &gt;= @DATE_FROM )AND&#xD;&#xA;&#x9; ((BPI.CREATED_DATE IS NULL) OR (BPI.CREATED_DATE &lt;= @DATE_TO)) &#xD;&#xA;GROUP BY     BA.NAME,&#xD;&#xA;&#x9;SBC.VERSION,&#xD;&#xA;&#x9;BP.PROCESS_ID ORDER BY ASSIGNED DESC">
      <parameters>
        <parameter ID="@USER_ID" sfwDataType="string" />
        <parameter ID="@DATE_FROM" sfwDataType="DateTime" />
        <parameter ID="@DATE_TO" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="UserAssignedActivitiesStatisticsByProcessId" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; sum (case when BAI.DUE_DATE &gt; @NOW then case when @NOW &lt; DATEADD(mi,&#xA;&#x9;datediff(mi,&#xA;&#x9;BAI.CREATED_DATE,&#xA;&#x9;BAI.DUE_DATE)*0.75,&#xA;&#x9;BAI.CREATED_DATE) then 1 else 0 end else 0 end) &#x9;AS&#xA;&#x9; OnTime,&#xA;&#x9;sum (case when BAI.DUE_DATE &gt; @NOW then case when @NOW &gt; DATEADD(mi,&#xA;&#x9;datediff(mi,&#xA;&#x9;BAI.CREATED_DATE,&#xA;&#x9;BAI.DUE_DATE)*0.75,&#xA;&#x9;BAI.CREATED_DATE) then 1 else 0 end else 0 end) &#x9;AS AtRisk,&#xA;&#x9;sum (case when BAI.DUE_DATE &lt; @NOW then 1 else 0 end) &#x9;AS OverDue &#xA;FROM&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE BAI WITH(NOLOCK) &#xA;&#x9;INNER &#xA;&#x9; JOIN SGW_BPM_PROCESS_INSTANCE BPI WITH(NOLOCK)&#xA;&#x9; ON BAI.PROCESS_INSTANCE_ID = BPI.PROCESS_INSTANCE_ID &#xA;&#x9;INNER &#xA;&#x9; JOIN SGW_BPM_PROCESS BP WITH(NOLOCK)&#xA;&#x9; ON BPI.PROCESS_ID = BP.PROCESS_ID &#xA;WHERE&#xA;&#x9; BAI.CHECKED_OUT_USER = @USER_ID AND&#xA;&#x9; BP.PROCESS_ID = @PROCESS_ID AND&#xA;&#x9;  BAI.STATUS_VALUE = 'INPC';" sfwOracle="SELECT&#xD;&#xA;&#x9; SUM &#xD;&#xA;&#x9;&#x9;&#x9;(CASE WHEN BAI.DUE_DATE &gt; SYSDATE THEN &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CASE WHEN SYSDATE &lt; BAI.CREATED_DATE +(1*((BAI.CREATED_DATE - BAI.DUE_DATE)*24*60*0.75)/1440) THEN 1 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE 0 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;END &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ELSE 0 &#xD;&#xA;&#x9;&#x9;&#x9;END&#xD;&#xA;&#x9;&#x9;&#x9;) AS OnTime&#xD;&#xA;&#x9;&#x9;, SUM (CASE WHEN BAI.DUE_DATE &gt; SYSDATE then &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case when SYSDATE &gt; BAI.CREATED_DATE +(1*((BAI.CREATED_DATE - BAI.DUE_DATE)*24*60*0.75)/1440) THEN 1 ELSE 0 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;END &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ELSE 0 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;END&#xD;&#xA;&#x9;&#x9;&#x9;) &#x9;AS AtRisk&#xD;&#xA;&#x9;&#x9;, SUM (CASE WHEN BAI.DUE_DATE &lt; SYSDATE THEN 1 ELSE 0 END ) &#x9;AS OverDue &#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE BAI &#xD;&#xA;&#x9;INNER &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS_INSTANCE BPI&#xD;&#xA;&#x9; ON BAI.PROCESS_INSTANCE_ID = BPI.PROCESS_INSTANCE_ID &#xD;&#xA;&#x9;INNER &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS BP &#xD;&#xA;&#x9; ON BPI.PROCESS_ID = BP.PROCESS_ID &#xD;&#xA;WHERE&#xD;&#xA;&#x9; BAI.CHECKED_OUT_USER = @USER_ID AND&#xD;&#xA;&#x9; BP.PROCESS_ID = @PROCESS_ID AND&#xD;&#xA;&#x9;  BAI.STATUS_VALUE = 'INPC';" sfwPostgre="SELECT&#xD;&#xA;SUM(CASE WHEN bai.due_date &gt; @NOW THEN CASE WHEN @NOW &lt; bai.created_date + (aws_sqlserver_ext.datediff('minute',&#xD;&#xA;bai.created_date::TIMESTAMP,&#xD;&#xA;bai.due_date::TIMESTAMP) * 0.75::NUMERIC || ' MINUTE')::INTERVAL THEN 1 ELSE 0 END ELSE 0 END) AS&#xD;&#xA;ONtime,&#xD;&#xA;SUM(CASE WHEN bai.due_date &gt; @NOW THEN CASE WHEN @NOW &gt; bai.created_date + (aws_sqlserver_ext.datediff('minute',&#xD;&#xA;bai.created_date::TIMESTAMP,&#xD;&#xA;bai.due_date::TIMESTAMP) * 0.75::NUMERIC || ' MINUTE')::INTERVAL THEN 1 ELSE 0 END ELSE 0 END) AS atrisk,&#xD;&#xA;SUM(CASE WHEN bai.due_date &lt; @NOW THEN 1 ELSE 0 END) AS overdue&#xD;&#xA;FROM&#xD;&#xA;dbo.sgw_bpm_activity_instance AS bai&#xD;&#xA;INNER&#xD;&#xA;JOIN dbo.sgw_bpm_process_instance AS bpi&#xD;&#xA;ON bai.process_instance_id = bpi.process_instance_id&#xD;&#xA;INNER&#xD;&#xA;JOIN dbo.sgw_bpm_process AS bp&#xD;&#xA;ON bpi.process_id = bp.process_id">
      <parameters>
        <parameter ID="@USER_ID" sfwDataType="string" />
        <parameter ID="@PROCESS_ID" sfwDataType="int" />
        <parameter ID="@NOW" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="UserAccessibleActivitiesWorkPoolStatisticsByProcessId" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; sum (case when AI.DUE_DATE &gt; @NOW then case when @NOW &lt; DATEADD(mi,&#xA;&#x9;datediff(mi,&#xA;&#x9;AI.CREATED_DATE,&#xA;&#x9;AI.DUE_DATE)*0.75,&#xA;&#x9;AI.CREATED_DATE) then 1 else 0 end else 0 end) &#x9;AS&#xA;&#x9; ONTime,&#xA;&#x9;sum (case when AI.DUE_DATE &gt; @NOW then case when @NOW &gt; DATEADD(mi,&#xA;&#x9;datediff(mi,&#xA;&#x9;AI.CREATED_DATE,&#xA;&#x9;AI.DUE_DATE)*0.75,&#xA;&#x9;AI.CREATED_DATE) then 1 else 0 end else 0 end) &#x9;AS AtRisk,&#xA;&#x9;sum (case when AI.DUE_DATE &lt; @NOW then 1 else 0 end) &#x9;AS OverDue &#xA;FROM&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE AI WITH(NOLOCK)  INNER  &#xA;&#x9; JOIN SGW_BPM_ACTIVITY_INST_USERS AIU WITH(NOLOCK) &#xA;&#x9; ON AI.ACTIVITY_INSTANCE_ID = AIU.ACTIVITY_INSTANCE_ID &#xA;&#x9;INNER &#xA;&#x9; JOIN SGW_BPM_PROCESS_INSTANCE BPI WITH(NOLOCK)&#xA;&#x9; ON AI.PROCESS_INSTANCE_ID = BPI.PROCESS_INSTANCE_ID &#xA;&#x9;INNER &#xA;&#x9; JOIN SGW_BPM_PROCESS BP WITH(NOLOCK)&#xA;&#x9; ON BPI.PROCESS_ID = BP.PROCESS_ID &#xA;WHERE&#xA;&#x9; AIU.USER_ID = @USER_ID AND&#xA;&#x9; BP.PROCESS_ID = @PROCESS_ID;" sfwOracle="SELECT&#xD;&#xA;&#x9; SUM &#xD;&#xA;&#x9;&#x9;&#x9;(CASE WHEN AI.DUE_DATE &gt; SYSDATE THEN &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CASE WHEN SYSDATE &lt; AI.CREATED_DATE + (1*((AI.CREATED_DATE - AI.DUE_DATE)*24*60*0.75)/1440) THEN 1 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE 0 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;END &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ELSE 0 &#xD;&#xA;&#x9;&#x9;&#x9;END&#xD;&#xA;&#x9;&#x9;&#x9;) AS OnTime&#xD;&#xA;&#x9;&#x9;, SUM (CASE WHEN AI.DUE_DATE &gt; SYSDATE then &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case when SYSDATE &gt; AI.CREATED_DATE + (1*((AI.CREATED_DATE - AI.DUE_DATE)*24*60*0.75)/1440) THEN 1 ELSE 0 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;END &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ELSE 0 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;END&#xD;&#xA;&#x9;&#x9;&#x9;) &#x9;AS AtRisk&#xD;&#xA;&#x9;&#x9;, SUM (CASE WHEN AI.DUE_DATE &lt; SYSDATE THEN 1 ELSE 0 END ) &#x9;AS OverDue &#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE AI INNER  &#xD;&#xA;&#x9; JOIN SGW_BPM_ACTIVITY_INST_USERS AIU &#xD;&#xA;&#x9; ON AI.ACTIVITY_INSTANCE_ID = AIU.ACTIVITY_INSTANCE_ID &#xD;&#xA;&#x9;INNER &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS_INSTANCE BPI &#xD;&#xA;&#x9; ON AI.PROCESS_INSTANCE_ID = BPI.PROCESS_INSTANCE_ID &#xD;&#xA;&#x9;INNER &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS BP&#xD;&#xA;&#x9; ON BPI.PROCESS_ID = BP.PROCESS_ID &#xD;&#xA;WHERE&#xD;&#xA;&#x9; AIU.USER_ID = @USER_ID AND&#xD;&#xA;&#x9; BP.PROCESS_ID= @PROCESS_ID;" sfwPostgre="SELECT&#xD;&#xA;&#x9; SUM &#xD;&#xA;&#x9;&#x9;&#x9;(CASE WHEN AI.DUE_DATE &gt; @NOW THEN &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;CASE WHEN @NOW &lt; AI.CREATED_DATE + (1*((AI.CREATED_DATE - AI.DUE_DATE)*24*60*0.75)/1440) THEN 1 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ELSE 0 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;END &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ELSE 0 &#xD;&#xA;&#x9;&#x9;&#x9;END&#xD;&#xA;&#x9;&#x9;&#x9;) AS OnTime&#xD;&#xA;&#x9;&#x9;, SUM (CASE WHEN AI.DUE_DATE &gt; @NOW then &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;case when @NOW &gt; AI.CREATED_DATE + (1*((AI.CREATED_DATE - AI.DUE_DATE)*24*60*0.75)/1440) THEN 1 ELSE 0 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;END &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ELSE 0 &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;END&#xD;&#xA;&#x9;&#x9;&#x9;) &#x9;AS AtRisk&#xD;&#xA;&#x9;&#x9;, SUM (CASE WHEN AI.DUE_DATE &lt; @NOW THEN 1 ELSE 0 END ) &#x9;AS OverDue &#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE AI INNER  &#xD;&#xA;&#x9; JOIN SGW_BPM_ACTIVITY_INST_USERS AIU &#xD;&#xA;&#x9; ON AI.ACTIVITY_INSTANCE_ID = AIU.ACTIVITY_INSTANCE_ID &#xD;&#xA;&#x9;INNER &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS_INSTANCE BPI &#xD;&#xA;&#x9; ON AI.PROCESS_INSTANCE_ID = BPI.PROCESS_INSTANCE_ID &#xD;&#xA;&#x9;INNER &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS BP&#xD;&#xA;&#x9; ON BPI.PROCESS_ID = BP.PROCESS_ID &#xD;&#xA;WHERE&#xD;&#xA;&#x9; AIU.USER_ID = @USER_ID AND&#xD;&#xA;&#x9; BP.PROCESS_ID= @PROCESS_ID;">
      <parameters>
        <parameter ID="@USER_ID" sfwDataType="string" />
        <parameter ID="@PROCESS_ID;" sfwDataType="int" />
        <parameter ID="@NOW" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="ActivityTrend_OLD" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; BA.NAME AS ACTIVITY_NAME,&#xA;&#x9;BA.ACTIVITY_ID,&#xA;&#x9;count(*) AS ASsigned,&#xA;&#x9;sum (case when BAI.STATUS_VALUE = 'UNPC' then 1 else 0 end) AS Workpool &#xA;FROM&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE BAI WITH(NOLOCK) INNER    &#xA;&#x9; JOIN SGW_BPM_PROCESS_INSTANCE BPI WITH(NOLOCK) &#xA;&#x9; ON BAI.PROCESS_INSTANCE_ID = BPI.PROCESS_INSTANCE_ID INNER    &#xA;&#x9; JOIN SGW_BPM_PROCESS BP WITH(NOLOCK) &#xA;&#x9; ON BPI.PROCESS_ID = BP.PROCESS_ID INNER    &#xA;&#x9; JOIN SGW_BPM_ACTIVITY BA WITH(NOLOCK)&#xA;&#x9; ON BAI.ACTIVITY_ID = BA.ACTIVITY_ID AND&#xA;&#x9; BA.ACTIVITY_TYPE_VALUE = 'USTK' LEFT    &#xA;&#x9; JOIN (SELECT&#xA;&#x9; DISTINCT ACTIVITY_INSTANCE_ID &#xA;FROM&#xA;&#x9; SGW_BPM_ACTIVITY_INST_USERS WITH(NOLOCK)) BAIU&#xA;&#x9; ON BAI.ACTIVITY_INSTANCE_ID = BAIU.ACTIVITY_INSTANCE_ID &#xA;WHERE&#xA;&#x9; ((BAI.STATUS_VALUE = 'INPC') OR (BAI.STATUS_VALUE = 'UNPC')) &#xA;GROUP BY  BA.NAME,&#xA;&#x9;BA.ACTIVITY_ID" sfwOracle="SELECT&#xD;&#xA;&#x9; BA.NAME AS ACTIVITY_NAME,&#xD;&#xA;&#x9; BA.ACTIVITY_ID,&#xD;&#xA;&#x9; count(*) AS ASsigned,&#xD;&#xA;&#x9; sum (case when BAI.STATUS_VALUE = 'UNPC' then 1 else 0 end) AS Workpool &#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE BAI  INNER    &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS_INSTANCE BPI &#xD;&#xA;&#x9; ON BAI.PROCESS_INSTANCE_ID = BPI.PROCESS_INSTANCE_ID INNER    &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS BP  &#xD;&#xA;&#x9; ON BPI.PROCESS_ID = BP.PROCESS_ID INNER    &#xD;&#xA;&#x9; JOIN SGW_BPM_ACTIVITY BA&#xD;&#xA;&#x9; ON BAI.ACTIVITY_ID = BA.ACTIVITY_ID AND&#xD;&#xA;&#x9; BA.ACTIVITY_TYPE_VALUE = 'USTK' LEFT    &#xD;&#xA;&#x9; JOIN (SELECT&#xD;&#xA;&#x9; DISTINCT ACTIVITY_INSTANCE_ID &#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_ACTIVITY_INST_USERS) BAIU&#xD;&#xA;&#x9; ON BAI.ACTIVITY_INSTANCE_ID = BAIU.ACTIVITY_INSTANCE_ID &#xD;&#xA;WHERE&#xD;&#xA;&#x9; ((BAI.STATUS_VALUE = 'INPC') OR (BAI.STATUS_VALUE = 'UNPC')) &#xD;&#xA;GROUP BY  BA.NAME,&#xD;&#xA;&#x9;BA.ACTIVITY_ID" sfwPostgre="SELECT&#xD;&#xA;&#x9; BA.NAME AS ACTIVITY_NAME,&#xD;&#xA;&#x9; BA.ACTIVITY_ID,&#xD;&#xA;&#x9; count(*) AS ASsigned,&#xD;&#xA;&#x9; sum (case when BAI.STATUS_VALUE = 'UNPC' then 1 else 0 end) AS Workpool &#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE BAI  INNER    &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS_INSTANCE BPI &#xD;&#xA;&#x9; ON BAI.PROCESS_INSTANCE_ID = BPI.PROCESS_INSTANCE_ID INNER    &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS BP  &#xD;&#xA;&#x9; ON BPI.PROCESS_ID = BP.PROCESS_ID INNER    &#xD;&#xA;&#x9; JOIN SGW_BPM_ACTIVITY BA&#xD;&#xA;&#x9; ON BAI.ACTIVITY_ID = BA.ACTIVITY_ID AND&#xD;&#xA;&#x9; BA.ACTIVITY_TYPE_VALUE = 'USTK' LEFT    &#xD;&#xA;&#x9; JOIN (SELECT&#xD;&#xA;&#x9; DISTINCT ACTIVITY_INSTANCE_ID &#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_ACTIVITY_INST_USERS) BAIU&#xD;&#xA;&#x9; ON BAI.ACTIVITY_INSTANCE_ID = BAIU.ACTIVITY_INSTANCE_ID &#xD;&#xA;WHERE&#xD;&#xA;&#x9; ((BAI.STATUS_VALUE = 'INPC') OR (BAI.STATUS_VALUE = 'UNPC')) &#xD;&#xA;GROUP BY  BA.NAME,&#xD;&#xA;&#x9;BA.ACTIVITY_ID">
      <parameters />
    </query>
    <query ID="LoadAnalysisByProcess" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DECLARE @NOW AS DATETIME&#xD;&#xA;SET @NOW = GETDATE();&#xD;&#xA;&#xD;&#xA;WITH DATEVALUES AS&#xD;&#xA;(&#xD;&#xA;    SELECT SBP.PROCESS_ID, SUM (CASE WHEN SBPI.DUE_DATE &gt; @NOW THEN &#xD;&#xA;&#x9;&#x9;CASE WHEN @NOW &lt; DATEADD(MI,DATEDIFF(MI, SBPI.CREATED_DATE, SBPI.DUE_DATE) * 0.75, SBPI.CREATED_DATE) THEN 1 ELSE 0 END ELSE 0 END) AS OnTime,&#xD;&#xA;&#x9;SUM (CASE WHEN SBPI.DUE_DATE &gt; @NOW then case when @NOW &gt; &#xD;&#xA;&#x9;&#x9;DATEADD(mi,datediff(mi,SBPI.CREATED_DATE,SBPI.DUE_DATE) * 0.75, SBPI.CREATED_DATE) THEN 1 ELSE 0 END ELSE 0 END) &#x9;AS AtRisk,&#xD;&#xA;&#x9;SUM (CASE WHEN SBPI.DUE_DATE &lt; @NOW THEN 1 ELSE 0 END ) &#x9;AS OverDue &#xD;&#xA;&#x9;FROM&#xD;&#xA;    SGW_BPM_PROCESS SBP WITH(NOLOCK) &#xD;&#xA;&#x9;INNER JOIN SGW_BPM_CASE SBC with(nolock) &#xD;&#xA;&#x9;&#x9;ON SBP.CASE_ID = SBC.CASE_ID&#xD;&#xA;&#x9;INNER JOIN SGW_BPM_PROCESS_INSTANCE SBPI WITH(NOLOCK)&#xD;&#xA;&#x9;&#x9;ON SBP.PROCESS_ID = SBPI.PROCESS_ID AND SBPI.STATUS_VALUE  IN ('INPC', 'UNPC')&#x9;&#xD;&#xA;&#x9;&#x9;GROUP BY SBP.PROCESS_ID&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;SELECT DISTINCT SBP.PROCESS_ID, SBP.DESCRIPTION as 'Process Name',DATEVALUES.ONTIME, DATEVALUES.ATRISK, DATEVALUES.OVERDUE&#x9; &#xD;&#xA;FROM&#xD;&#xA;&#x9;SGW_BPM_PROCESS_INSTANCE SBPI WITH(NOLOCK)&#x9;&#x9;&#xD;&#xA;&#x9;INNER JOIN SGW_BPM_PROCESS SBP WITH(NOLOCK)&#xD;&#xA;&#x9;&#x9;ON SBPI.PROCESS_ID = SBP.PROCESS_ID &#xD;&#xA;&#x9;INNER JOIN DATEVALUES ON SBP.PROCESS_ID = DATEVALUES.PROCESS_ID &#x9;&#xD;&#xA;&#x9;where sbpi.CREATED_DATE between @DATE_FROM AND @DATE_TO and (OnTime &gt; 0 OR AtRisk &gt;0 OR OverDue &gt; 0)" sfwOracle="WITH DATEVALUES AS&#xD;&#xA;(&#xD;&#xA;    SELECT SBP.PROCESS_ID, SUM (CASE WHEN SBPI.DUE_DATE &gt; UDF_GET_SYSTEM_DATE('Y') THEN &#xD;&#xA;&#x9;&#x9;CASE WHEN UDF_GET_SYSTEM_DATE('Y') &lt; SBPI.CREATED_DATE + (1 * ((SBPI.CREATED_DATE - SBPI.DUE_DATE) * 24 * 60 * 0.75) / 1440)  then 1 else 0 end else 0 end) AS OnTime,&#xD;&#xA;&#x9;SUM (CASE WHEN SBPI.DUE_DATE &gt; UDF_GET_SYSTEM_DATE('Y') then case when UDF_GET_SYSTEM_DATE('Y') &gt; &#xD;&#xA;&#x9;&#x9;SBPI.CREATED_DATE + (1 * ((SBPI.CREATED_DATE - SBPI.DUE_DATE) * 24 * 60 * 0.75) / 1440)  then 1 else 0 end else 0 end) &#x9;AS AtRisk,&#xD;&#xA;&#x9;SUM (CASE WHEN SBPI.DUE_DATE &lt; UDF_GET_SYSTEM_DATE('Y') THEN 1 ELSE 0 END ) &#x9;AS OverDue &#xD;&#xA;&#x9;FROM&#xD;&#xA;    SGW_BPM_PROCESS SBP &#xD;&#xA;&#x9;INNER JOIN SGW_BPM_CASE SBC&#xD;&#xA;&#x9;&#x9;ON SBP.CASE_ID = SBC.CASE_ID&#xD;&#xA;&#x9;INNER JOIN SGW_BPM_PROCESS_INSTANCE SBPI &#xD;&#xA;&#x9;&#x9;ON SBP.PROCESS_ID = SBPI.PROCESS_ID AND SBPI.STATUS_VALUE  IN ('INPC', 'UNPC')&#x9;&#xD;&#xA;&#x9;&#x9;GROUP BY SBP.PROCESS_ID&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;SELECT DISTINCT SBP.PROCESS_ID, SBP.DESCRIPTION as Process_Name,DATEVALUES.ONTIME, DATEVALUES.ATRISK, DATEVALUES.OVERDUE&#x9; &#xD;&#xA;FROM&#xD;&#xA;&#x9;SGW_BPM_PROCESS_INSTANCE SBPI &#xD;&#xA;&#x9;INNER JOIN SGW_BPM_PROCESS SBP &#xD;&#xA;&#x9;&#x9;ON SBPI.PROCESS_ID = SBP.PROCESS_ID &#xD;&#xA;&#x9;INNER JOIN DATEVALUES ON SBP.PROCESS_ID = DATEVALUES.PROCESS_ID &#x9;&#xD;&#xA;&#x9;where sbpi.CREATED_DATE between @DATE_FROM AND @DATE_TO and (OnTime &gt; 0 OR AtRisk &gt;0 OR OverDue &gt; 0)" sfwPostgre="WITH DATEVALUES AS&#xD;&#xA;(&#xD;&#xA;    SELECT SBP.PROCESS_ID, SUM (CASE WHEN SBPI.DUE_DATE &gt; UDF_GET_SYSTEM_DATE('Y') THEN &#xD;&#xA;&#x9;&#x9;CASE WHEN UDF_GET_SYSTEM_DATE('Y') &lt; SBPI.CREATED_DATE + (1 * ((SBPI.CREATED_DATE - SBPI.DUE_DATE) * 24 * 60 * 0.75) / 1440)  then 1 else 0 end else 0 end) AS OnTime,&#xD;&#xA;&#x9;SUM (CASE WHEN SBPI.DUE_DATE &gt; UDF_GET_SYSTEM_DATE('Y') then case when UDF_GET_SYSTEM_DATE('Y') &gt; &#xD;&#xA;&#x9;&#x9;SBPI.CREATED_DATE + (1 * ((SBPI.CREATED_DATE - SBPI.DUE_DATE) * 24 * 60 * 0.75) / 1440)  then 1 else 0 end else 0 end) &#x9;AS AtRisk,&#xD;&#xA;&#x9;SUM (CASE WHEN SBPI.DUE_DATE &lt; UDF_GET_SYSTEM_DATE('Y') THEN 1 ELSE 0 END ) &#x9;AS OverDue &#xD;&#xA;&#x9;FROM&#xD;&#xA;    SGW_BPM_PROCESS SBP &#xD;&#xA;&#x9;INNER JOIN SGW_BPM_CASE SBC&#xD;&#xA;&#x9;&#x9;ON SBP.CASE_ID = SBC.CASE_ID&#xD;&#xA;&#x9;INNER JOIN SGW_BPM_PROCESS_INSTANCE SBPI &#xD;&#xA;&#x9;&#x9;ON SBP.PROCESS_ID = SBPI.PROCESS_ID AND SBPI.STATUS_VALUE  IN ('INPC', 'UNPC')&#x9;&#xD;&#xA;&#x9;&#x9;GROUP BY SBP.PROCESS_ID&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;SELECT DISTINCT SBP.PROCESS_ID, SBP.DESCRIPTION as Process_Name,DATEVALUES.ONTIME, DATEVALUES.ATRISK, DATEVALUES.OVERDUE&#x9; &#xD;&#xA;FROM&#xD;&#xA;&#x9;SGW_BPM_PROCESS_INSTANCE SBPI &#xD;&#xA;&#x9;INNER JOIN SGW_BPM_PROCESS SBP &#xD;&#xA;&#x9;&#x9;ON SBPI.PROCESS_ID = SBP.PROCESS_ID &#xD;&#xA;&#x9;INNER JOIN DATEVALUES ON SBP.PROCESS_ID = DATEVALUES.PROCESS_ID &#x9;&#xD;&#xA;&#x9;where sbpi.CREATED_DATE between @DATE_FROM AND @DATE_TO and (OnTime &gt; 0 OR AtRisk &gt;0 OR OverDue &gt; 0)">
      <parameters>
        <parameter ID="@DATE_FROM" sfwDataType="DateTime" />
        <parameter ID="@DATE_TO" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="ActivityTrend" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT &#xD;&#xA;&#x9; SBA.NAME + ' (Ver.' + CONVERT(VARCHAR,SBC.VERSION) + ')' AS ACTIVITY_NAME,&#xD;&#xA;&#x9; LEFT(SBA.NAME, 20) + '...'  + ' (Ver.' + CONVERT(VARCHAR,SBC.VERSION) + ')'  AS SHORT_ACTIVITY_NAME,&#xD;&#xA;&#x9;SBA.ACTIVITY_ID,&#xD;&#xA;&#x9;sum(case when SBAI.STATUS_VALUE = 'PROC' then 1 else 0 end) &#x9;AS Completed,&#xD;&#xA;&#x9;sum(case when SBAI.STATUS_VALUE = 'APPR' then 1 else 0 end) &#x9;AS Approved,&#xD;&#xA;&#x9;sum(case when SBAI.STATUS_VALUE = 'REJT' then 1 else 0 end) &#x9;AS Rejected,&#xD;&#xA;&#x9;sum(case when SBAI.STATUS_VALUE IN ('INPC' ,'UNPC') then 1 else 0 end) &#x9;AS Inprocess,&#xD;&#xA;&#x9;sum(case when SBAI.STATUS_VALUE IN ('CANC','SUSP','FAIL') then 1 else 0 end) &#x9;AS Canc_Susp_Fail,&#xD;&#xA;&#x9;sum(case when SBAI.STATUS_VALUE IN ('RESU') then 1 else 0 end) &#x9;AS Resumed&#x9;&#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE SBAI WITH(NOLOCK)   INNER   &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS_INSTANCE SBPI WITH(NOLOCK)  &#xD;&#xA;&#x9; ON SBAI.PROCESS_INSTANCE_ID = SBPI.PROCESS_INSTANCE_ID INNER   &#xD;&#xA;&#x9; JOIN SGW_BPM_ACTIVITY SBA WITH(NOLOCK)  &#xD;&#xA;&#x9; ON SBAI.ACTIVITY_ID = SBA.ACTIVITY_ID AND&#xD;&#xA;&#x9; SBA.ACTIVITY_TYPE_VALUE = 'USTK' &#xD;&#xA;&#x9; INNER JOIN SGW_BPM_PROCESS SBP WITH(NOLOCK)&#xD;&#xA;&#x9; ON SBP.PROCESS_ID = SBPI.PROCESS_ID&#xD;&#xA;&#x9; INNER JOIN SGW_BPM_CASE SBC WITH(NOLOCK)&#xD;&#xA;&#x9; ON SBC.CASE_ID = SBP.CASE_ID&#xD;&#xA;&#x9; WHERE CONVERT(DATETIME,CONVERT(CHAR,SBAI.CREATED_DATE,103),103) BETWEEN  @DATE_FROM AND @DATE_TO &#xD;&#xA;GROUP&#x9; BY    SBA.NAME, SBA.ACTIVITY_ID, SBC.VERSION ORDER BY Inprocess DESC" sfwOracle="SELECT &#xD;&#xA;&#x9; SBA.NAME || ' (Ver.' || CAST(SBC.VERSION AS VARCHAR2(30)) || ')' AS ACTIVITY_NAME,&#xD;&#xA;&#x9; SUBSTR(SBA.NAME,1,20) || '...'  || ' (Ver.' || CAST(SBC.VERSION AS VARCHAR2(30)) || ')'  AS SHORT_ACTIVITY_NAME,&#xD;&#xA;&#x9; SBA.ACTIVITY_ID,&#xD;&#xA;&#x9; sum(case when SBAI.STATUS_VALUE = 'PROC' then 1 else 0 end) &#x9;AS Completed,&#xD;&#xA;&#x9; sum(case when SBAI.STATUS_VALUE = 'APPR' then 1 else 0 end) &#x9;AS Approved,&#xD;&#xA;&#x9; sum(case when SBAI.STATUS_VALUE = 'REJT' then 1 else 0 end) &#x9;AS Rejected,&#xD;&#xA;&#x9; sum(case when SBAI.STATUS_VALUE IN ('INPC' ,'UNPC') then 1 else 0 end) &#x9;AS Inprocess,&#xD;&#xA;&#x9; sum(case when SBAI.STATUS_VALUE IN ('CANC','SUSP','FAIL') then 1 else 0 end) &#x9;AS Canc_Susp_Fail,&#xD;&#xA;&#x9; sum(case when SBAI.STATUS_VALUE IN ('RESU') then 1 else 0 end) &#x9;AS Resumed&#x9;&#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE SBAI INNER   &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS_INSTANCE SBPI &#xD;&#xA;&#x9; ON SBAI.PROCESS_INSTANCE_ID = SBPI.PROCESS_INSTANCE_ID INNER   &#xD;&#xA;&#x9; JOIN SGW_BPM_ACTIVITY SBA &#xD;&#xA;&#x9; ON SBAI.ACTIVITY_ID = SBA.ACTIVITY_ID AND&#xD;&#xA;&#x9; SBA.ACTIVITY_TYPE_VALUE = 'USTK' &#xD;&#xA;&#x9; INNER JOIN SGW_BPM_PROCESS SBP&#xD;&#xA;&#x9; ON SBP.PROCESS_ID = SBPI.PROCESS_ID&#xD;&#xA;&#x9; INNER JOIN SGW_BPM_CASE SBC&#xD;&#xA;&#x9; ON SBC.CASE_ID = SBP.CASE_ID&#xD;&#xA;&#x9; WHERE (trunc(SBAI.CREATED_DATE) &gt; =  @DATE_FROM)AND&#xD;&#xA;&#x9; ((trunc(SBAI.CREATED_DATE) IS NULL) OR (trunc(SBAI.CREATED_DATE) &lt; =  @DATE_TO)) &#xD;&#xA;GROUP&#x9; BY    SBA.NAME, SBA.ACTIVITY_ID, SBC.VERSION ORDER BY Inprocess DESC" sfwPostgre="SELECT &#xD;&#xA;&#x9; SBA.NAME || ' (Ver.' || CAST(SBC.VERSION AS VARCHAR(30)) || ')' AS ACTIVITY_NAME,&#xD;&#xA;&#x9; SUBSTR(SBA.NAME,1,20) || '...'  || ' (Ver.' || CAST(SBC.VERSION AS VARCHAR(30)) || ')'  AS SHORT_ACTIVITY_NAME,&#xD;&#xA;&#x9; SBA.ACTIVITY_ID,&#xD;&#xA;&#x9; sum(case when SBAI.STATUS_VALUE = 'PROC' then 1 else 0 end) &#x9;AS Completed,&#xD;&#xA;&#x9; sum(case when SBAI.STATUS_VALUE = 'APPR' then 1 else 0 end) &#x9;AS Approved,&#xD;&#xA;&#x9; sum(case when SBAI.STATUS_VALUE = 'REJT' then 1 else 0 end) &#x9;AS Rejected,&#xD;&#xA;&#x9; sum(case when SBAI.STATUS_VALUE IN ('INPC' ,'UNPC') then 1 else 0 end) &#x9;AS Inprocess,&#xD;&#xA;&#x9; sum(case when SBAI.STATUS_VALUE IN ('CANC','SUSP','FAIL') then 1 else 0 end) &#x9;AS Canc_Susp_Fail,&#xD;&#xA;&#x9; sum(case when SBAI.STATUS_VALUE IN ('RESU') then 1 else 0 end) &#x9;AS Resumed&#x9;&#xD;&#xA;FROM&#xD;&#xA;&#x9; SGW_BPM_ACTIVITY_INSTANCE SBAI INNER   &#xD;&#xA;&#x9; JOIN SGW_BPM_PROCESS_INSTANCE SBPI &#xD;&#xA;&#x9; ON SBAI.PROCESS_INSTANCE_ID = SBPI.PROCESS_INSTANCE_ID INNER   &#xD;&#xA;&#x9; JOIN SGW_BPM_ACTIVITY SBA &#xD;&#xA;&#x9; ON SBAI.ACTIVITY_ID = SBA.ACTIVITY_ID AND&#xD;&#xA;&#x9; SBA.ACTIVITY_TYPE_VALUE = 'USTK' &#xD;&#xA;&#x9; INNER JOIN SGW_BPM_PROCESS SBP&#xD;&#xA;&#x9; ON SBP.PROCESS_ID = SBPI.PROCESS_ID&#xD;&#xA;&#x9; INNER JOIN SGW_BPM_CASE SBC&#xD;&#xA;&#x9; ON SBC.CASE_ID = SBP.CASE_ID&#xD;&#xA;&#x9; WHERE SBAI.CREATED_DATE &gt;=  @DATE_FROM AND&#xD;&#xA;&#x9; SBAI.CREATED_DATE IS NULL OR SBAI.CREATED_DATE &lt;=  @DATE_TO&#xD;&#xA;GROUP&#x9; BY    SBA.NAME, SBA.ACTIVITY_ID, SBC.VERSION ORDER BY Inprocess DESC">
      <parameters>
        <parameter ID="@DATE_FROM" sfwDataType="DateTime" />
        <parameter ID="@DATE_TO" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="ProcessRankingAnalytics" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SBP.DESCRIPTION + ' (Ver.' + CONVERT(VARCHAR,SBC.VERSION) + ')' AS PROCESS_NAME, &#xD;&#xA;LEFT(SBP.DESCRIPTION, 20) + '...'  + ' (Ver.' + CONVERT(VARCHAR,SBC.VERSION) + ')'  AS SHORT_PROCESS_NAME,&#xD;&#xA;sbp.PROCESS_ID,&#xD;&#xA;ISNULL(T_ACTV_INST.ACTV_COUNT,0) AS ACTV_COUNT,&#xD;&#xA;ISNULL(T_PROC_INST.PROC_COUNT,0) AS PROC_COUNT,&#xD;&#xA;ISNULL(T_TERMSUSP_INST.TERMSUSP_COUNT,0) AS TERM_SUSP_COUNT&#xD;&#xA;FROM SGW_BPM_PROCESS SBP WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGW_BPM_CASE SBC WITH(NOLOCK)&#xD;&#xA;ON SBP.CASE_ID = SBC.CASE_ID&#xD;&#xA;LEFT JOIN &#xD;&#xA;(&#xD;&#xA;&#x9;SELECT COUNT(*) AS ACTV_COUNT ,SBPI.PROCESS_ID FROM SGW_BPM_PROCESS_INSTANCE SBPI WITH(NOLOCK)  &#x9;&#xD;&#xA;&#x9;WHERE CONVERT(DATETIME,CONVERT(CHAR,SBPI.CREATED_DATE,103),103) BETWEEN  @DATE_FROM AND @DATE_TO AND SBPI.STATUS_VALUE = 'INPC'&#xD;&#xA;&#x9;GROUP BY SBPI.PROCESS_ID ) T_ACTV_INST ON T_ACTV_INST.PROCESS_ID = SBP.PROCESS_ID&#xD;&#xA;LEFT JOIN &#xD;&#xA;(&#xD;&#xA;&#x9;SELECT COUNT(*) AS PROC_COUNT ,SBPI.PROCESS_ID FROM SGW_BPM_PROCESS_INSTANCE SBPI WITH(NOLOCK)  &#x9;&#xD;&#xA;&#x9;WHERE CONVERT(DATETIME,CONVERT(CHAR,SBPI.CREATED_DATE,103),103) BETWEEN  @DATE_FROM AND @DATE_TO AND SBPI.STATUS_VALUE = 'PROC'&#xD;&#xA;&#x9;GROUP BY SBPI.PROCESS_ID ) T_PROC_INST ON T_PROC_INST.PROCESS_ID = SBP.PROCESS_ID&#xD;&#xA;LEFT JOIN &#xD;&#xA;(&#xD;&#xA;&#x9;SELECT COUNT(*) AS TERMSUSP_COUNT ,SBPI.PROCESS_ID FROM SGW_BPM_PROCESS_INSTANCE SBPI WITH(NOLOCK) &#xD;&#xA;&#x9;&#xD;&#xA;&#x9;WHERE CONVERT(DATETIME,CONVERT(CHAR,SBPI.CREATED_DATE,103),103) BETWEEN  @DATE_FROM AND @DATE_TO AND SBPI.STATUS_VALUE IN ('TERM','FAIL')&#xD;&#xA;&#x9;GROUP BY SBPI.PROCESS_ID ) T_TERMSUSP_INST ON T_TERMSUSP_INST.PROCESS_ID = SBP.PROCESS_ID WHERE (ACTV_COUNT &gt; 0 or PROC_COUNT &gt; 0 or TERMSUSP_COUNT &gt; 0)&#xD;&#xA; ORDER BY ACTV_COUNT DESC " sfwOracle="SELECT &#xD;&#xA;    SBP.DESCRIPTION || ' (Ver.' || CAST(SBC.VERSION AS VARCHAR2(30)) || ')' AS PROCESS_NAME, &#xD;&#xA;    SUBSTR(SBP.DESCRIPTION,1,20) || '...'  || ' (Ver.' || CAST(SBC.VERSION AS VARCHAR2(30)) || ')'  AS SHORT_PROCESS_NAME,&#xD;&#xA;    sbp.PROCESS_ID,&#xD;&#xA;    coalesce(T_ACTV_INST.ACTV_COUNT,0) AS ACTV_COUNT,&#xD;&#xA;    coalesce(T_PROC_INST.PROC_COUNT,0) AS PROC_COUNT,&#xD;&#xA;    coalesce(T_TERMSUSP_INST.TERMSUSP_COUNT,0) AS TERM_SUSP_COUNT&#xD;&#xA;FROM SGW_BPM_PROCESS SBP &#xD;&#xA;INNER JOIN SGW_BPM_CASE SBC ON SBP.CASE_ID = SBC.CASE_ID&#xD;&#xA;LEFT JOIN &#xD;&#xA;(&#xD;&#xA;&#x9;SELECT COUNT(*) AS ACTV_COUNT ,SBPI.PROCESS_ID FROM SGW_BPM_PROCESS_INSTANCE SBPI &#xD;&#xA;&#x9;WHERE (trunc(SBPI.CREATED_DATE) &gt; = @DATE_FROM)AND&#xD;&#xA;&#x9; ((trunc(SBPI.CREATED_DATE) IS NULL) OR (trunc(SBPI.CREATED_DATE) &lt; = @DATE_TO))  AND SBPI.STATUS_VALUE = 'INPC'&#xD;&#xA;&#x9;GROUP BY SBPI.PROCESS_ID &#xD;&#xA;) T_ACTV_INST ON T_ACTV_INST.PROCESS_ID = SBP.PROCESS_ID&#xD;&#xA;LEFT JOIN &#xD;&#xA;(&#xD;&#xA;&#x9;SELECT COUNT(*) AS PROC_COUNT ,SBPI.PROCESS_ID FROM SGW_BPM_PROCESS_INSTANCE SBPI &#xD;&#xA;&#x9;WHERE (trunc(SBPI.CREATED_DATE) &gt; =  @DATE_FROM)AND&#xD;&#xA;&#x9; ((trunc(SBPI.CREATED_DATE) IS NULL) OR (trunc(SBPI.CREATED_DATE) &lt; =  @DATE_TO))  AND SBPI.STATUS_VALUE = 'PROC'&#xD;&#xA;&#x9;GROUP BY SBPI.PROCESS_ID &#xD;&#xA;) T_PROC_INST ON T_PROC_INST.PROCESS_ID = SBP.PROCESS_ID&#xD;&#xA;LEFT JOIN &#xD;&#xA;(&#xD;&#xA;&#x9;SELECT COUNT(*) AS TERMSUSP_COUNT ,SBPI.PROCESS_ID FROM SGW_BPM_PROCESS_INSTANCE SBPI&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;WHERE (trunc(SBPI.CREATED_DATE) &gt; =  @DATE_FROM )AND&#xD;&#xA;&#x9; ((trunc(SBPI.CREATED_DATE) IS NULL) OR (trunc(SBPI.CREATED_DATE) &lt; = @DATE_TO)) AND SBPI.STATUS_VALUE IN ('TERM','FAIL')&#xD;&#xA;&#x9;GROUP BY SBPI.PROCESS_ID &#xD;&#xA;)T_TERMSUSP_INST ON T_TERMSUSP_INST.PROCESS_ID = SBP.PROCESS_ID WHERE (ACTV_COUNT &gt; 0 or PROC_COUNT &gt; 0 or TERMSUSP_COUNT &gt; 0)&#xD;&#xA; ORDER BY ACTV_COUNT DESC" sfwPostgre="SELECT &#xD;&#xA;    SBP.DESCRIPTION || ' (Ver.' || CAST(SBC.VERSION AS VARCHAR(30)) || ')' AS PROCESS_NAME, &#xD;&#xA;    SUBSTR(SBP.DESCRIPTION,1,20) || '...'  || ' (Ver.' || CAST(SBC.VERSION AS VARCHAR(30)) || ')'  AS SHORT_PROCESS_NAME,&#xD;&#xA;    sbp.PROCESS_ID,&#xD;&#xA;    coalesce(T_ACTV_INST.ACTV_COUNT,0) AS ACTV_COUNT,&#xD;&#xA;    coalesce(T_PROC_INST.PROC_COUNT,0) AS PROC_COUNT,&#xD;&#xA;    coalesce(T_TERMSUSP_INST.TERMSUSP_COUNT,0) AS TERM_SUSP_COUNT&#xD;&#xA;FROM SGW_BPM_PROCESS SBP &#xD;&#xA;INNER JOIN SGW_BPM_CASE SBC ON SBP.CASE_ID = SBC.CASE_ID&#xD;&#xA;LEFT JOIN &#xD;&#xA;(&#xD;&#xA;&#x9;SELECT COUNT(*) AS ACTV_COUNT ,SBPI.PROCESS_ID FROM SGW_BPM_PROCESS_INSTANCE SBPI &#xD;&#xA;&#x9;WHERE (SBPI.CREATED_DATE) &gt;= @DATE_FROM AND&#xD;&#xA;&#x9; ((SBPI.CREATED_DATE) IS NULL OR (SBPI.CREATED_DATE) &lt;= @DATE_TO)  AND SBPI.STATUS_VALUE = 'INPC'&#xD;&#xA;&#x9;GROUP BY SBPI.PROCESS_ID &#xD;&#xA;) T_ACTV_INST ON T_ACTV_INST.PROCESS_ID = SBP.PROCESS_ID&#xD;&#xA;LEFT JOIN &#xD;&#xA;(&#xD;&#xA;&#x9;SELECT COUNT(*) AS PROC_COUNT ,SBPI.PROCESS_ID FROM SGW_BPM_PROCESS_INSTANCE SBPI &#xD;&#xA;&#x9;WHERE (SBPI.CREATED_DATE) &gt;=  @DATE_FROM AND&#xD;&#xA;&#x9; ((SBPI.CREATED_DATE) IS NULL OR (SBPI.CREATED_DATE) &lt;=  @DATE_TO)  AND SBPI.STATUS_VALUE = 'PROC'&#xD;&#xA;&#x9;GROUP BY SBPI.PROCESS_ID &#xD;&#xA;) T_PROC_INST ON T_PROC_INST.PROCESS_ID = SBP.PROCESS_ID&#xD;&#xA;LEFT JOIN &#xD;&#xA;(&#xD;&#xA;&#x9;SELECT COUNT(*) AS TERMSUSP_COUNT ,SBPI.PROCESS_ID FROM SGW_BPM_PROCESS_INSTANCE SBPI&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;WHERE (SBPI.CREATED_DATE) &gt;=  @DATE_FROM AND&#xD;&#xA;&#x9; ((SBPI.CREATED_DATE) IS NULL OR (SBPI.CREATED_DATE) &lt;= @DATE_TO) AND SBPI.STATUS_VALUE IN ('TERM','FAIL')&#xD;&#xA;&#x9;GROUP BY SBPI.PROCESS_ID &#xD;&#xA;)T_TERMSUSP_INST ON T_TERMSUSP_INST.PROCESS_ID = SBP.PROCESS_ID WHERE (ACTV_COUNT &gt; 0 or PROC_COUNT &gt; 0 or TERMSUSP_COUNT &gt; 0)&#xD;&#xA; ORDER BY ACTV_COUNT DESC">
      <parameters>
        <parameter ID="@DATE_FROM" sfwDataType="DateTime" />
        <parameter ID="@DATE_TO" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="ActivationRankingAnalytics" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT T_INST_CREATED.PROCESS_ID, &#xD;&#xA;SBP.DESCRIPTION + ' (Ver.' + CONVERT(VARCHAR,SBC.VERSION) + ')' AS PROCESS_NAME,&#xD;&#xA;LEFT(SBP.DESCRIPTION, 20) + '...'  + ' (Ver.' + CONVERT(VARCHAR,SBC.VERSION) + ')'  AS SHORT_PROCESS_NAME,&#xD;&#xA;T_INST_CREATED.INST_COUNT AS INSTANCE_COUNT&#xD;&#xA;FROM SGW_BPM_PROCESS SBP WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGW_BPM_CASE SBC WITH(NOLOCK)&#xD;&#xA;ON SBP.CASE_ID = SBC.CASE_ID&#xD;&#xA;INNER JOIN &#xD;&#xA;(&#xD;&#xA;&#x9;SELECT COUNT(*) AS INST_COUNT ,SBPI.PROCESS_ID FROM SGW_BPM_PROCESS_INSTANCE SBPI WITH(NOLOCK)  &#x9;&#xD;&#xA;&#x9;WHERE CONVERT(DATETIME,CONVERT(CHAR,SBPI.CREATED_DATE,103),103) BETWEEN  @DATE_FROM AND @DATE_TO&#xD;&#xA;&#x9;GROUP BY SBPI.PROCESS_ID ) T_INST_CREATED ON T_INST_CREATED.PROCESS_ID = SBP.PROCESS_ID&#xD;&#xA;ORDER BY INSTANCE_COUNT DESC" sfwOracle="SELECT &#xD;&#xA;    T_INST_CREATED.PROCESS_ID, &#xD;&#xA;    SBP.DESCRIPTION || ' (Ver.' || CAST(SBC.VERSION AS VARCHAR2(30)) || ')' AS PROCESS_NAME,&#xD;&#xA;    SUBSTR(SBP.DESCRIPTION,1,20) || '...'  || ' (Ver.' || CAST(SBC.VERSION AS VARCHAR2(30)) || ')'  AS SHORT_PROCESS_NAME,&#xD;&#xA;    T_INST_CREATED.INST_COUNT AS INSTANCE_COUNT&#xD;&#xA;FROM SGW_BPM_PROCESS SBP &#xD;&#xA;INNER JOIN SGW_BPM_CASE SBC &#xD;&#xA;ON SBP.CASE_ID = SBC.CASE_ID&#xD;&#xA;INNER JOIN &#xD;&#xA;(&#xD;&#xA;&#x9;SELECT COUNT(*) AS INST_COUNT ,SBPI.PROCESS_ID FROM SGW_BPM_PROCESS_INSTANCE SBPI &#xD;&#xA;&#x9;WHERE(trunc(SBPI.CREATED_DATE) &gt; =  @DATE_FROM )AND&#xD;&#xA;&#x9; ((trunc(SBPI.CREATED_DATE) IS NULL) OR (trunc(SBPI.CREATED_DATE) &lt; = @DATE_TO)) &#xD;&#xA;&#x9;GROUP BY SBPI.PROCESS_ID &#xD;&#xA;) &#xD;&#xA;T_INST_CREATED ON T_INST_CREATED.PROCESS_ID = SBP.PROCESS_ID&#xD;&#xA;ORDER BY INSTANCE_COUNT DESC" sfwPostgre="SELECT &#xD;&#xA;    T_INST_CREATED.PROCESS_ID, &#xD;&#xA;    SBP.DESCRIPTION || ' (Ver.' || CAST(SBC.VERSION AS VARCHAR(30)) || ')' AS PROCESS_NAME,&#xD;&#xA;    SUBSTR(SBP.DESCRIPTION,1,20) || '...'  || ' (Ver.' || CAST(SBC.VERSION AS VARCHAR(30)) || ')'  AS SHORT_PROCESS_NAME,&#xD;&#xA;    T_INST_CREATED.INST_COUNT AS INSTANCE_COUNT&#xD;&#xA;FROM SGW_BPM_PROCESS SBP &#xD;&#xA;INNER JOIN SGW_BPM_CASE SBC &#xD;&#xA;ON SBP.CASE_ID = SBC.CASE_ID&#xD;&#xA;INNER JOIN &#xD;&#xA;(&#xD;&#xA;&#x9;SELECT COUNT(*) AS INST_COUNT ,SBPI.PROCESS_ID FROM SGW_BPM_PROCESS_INSTANCE SBPI &#xD;&#xA;&#x9;WHERE(SBPI.CREATED_DATE) &gt;=  @DATE_FROM AND&#xD;&#xA;&#x9; ((SBPI.CREATED_DATE) IS NULL OR (SBPI.CREATED_DATE) &lt;= @DATE_TO) &#xD;&#xA;&#x9;GROUP BY SBPI.PROCESS_ID &#xD;&#xA;) &#xD;&#xA;T_INST_CREATED ON T_INST_CREATED.PROCESS_ID = SBP.PROCESS_ID&#xD;&#xA;ORDER BY INSTANCE_COUNT DESC">
      <parameters>
        <parameter ID="@DATE_FROM" sfwDataType="DateTime" />
        <parameter ID="@DATE_TO" sfwDataType="DateTime" />
      </parameters>
    </query>
  </queries>
  <commonproperties />
  <checklist />
  <initialload />
  <delete />
  <validatedelete />
  <softerror />
  <groupslist />
  <harderror />
  <constraint />
  <rules />
  <ExtraFields />
  <methods>
    <method sfwMethodType="Load" ID="Group1" sfwMode="All">
      <item ID="LoadDashboardData" sfwItemType="Method" />
    </method>
  </methods>
  <lifecycle />
  <attributes>
    <attribute ID="ActivityInstanceId" sfwType="Column" sfwValue="activity_instance_id" sfwIsNull="False" sfwKeyNo="1" sfwIsIdentity="True" sfwDataType="int" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtDateFrom" sfwValue="idtDateFrom" />
    <attribute sfwDataType="datetime" sfwType="Property" ID="IdtDateTo" sfwValue="idtDateTo" />
    <attribute sfwType="Collection" sfwEntity="entBpmBAMTaskTrend" ID="lstChartTaskTrend" sfwValue="iclbChartTaskTrend" />
    <attribute sfwType="Collection" sfwEntity="entBpmBAMTaskTrend" ID="lstViewTaskTrend" sfwValue="iclbViewTaskTrend" />
    <attribute sfwType="Collection" sfwEntity="entBpmBAMProcessTrend" ID="lstChartProcessTrend" sfwValue="iclbChartProcessTrend" />
    <attribute sfwType="Collection" sfwEntity="entBpmBAMProcessTrend" ID="lstViewProcessTrend" sfwValue="iclbViewProcessTrend" />
    <attribute sfwType="Collection" sfwEntity="entBpmProcessRankingAnalytics" ID="lstChartProcessRankingAnalytics" sfwValue="iclbChartProcessRankingAnalytics" />
    <attribute sfwType="Collection" sfwEntity="entBpmProcessRankingAnalytics" ID="lstViewProcessRankingAnalytics" sfwValue="iclbViewProcessRankingAnalytics" />
    <attribute sfwType="Collection" sfwEntity="entBpmAnalytics" ID="lstChartAnalytics" sfwValue="iclbChartAnalytics" />
    <attribute sfwType="Collection" sfwEntity="entBpmAnalytics" ID="lstViewAnalytics" sfwValue="iclbViewAnalytics" />
  </attributes>
  <objectmethods>
    <method ID="LoadDashboardData" sfwReturnType="ArrayList" />
  </objectmethods>
</entity>