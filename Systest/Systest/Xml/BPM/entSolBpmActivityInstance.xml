<entity asp="ASPControl" swc="SagitecWebControls" xsi="http://www.w3.org/2001/XMLSchema-instance" di="http://www.omg.org/spec/DD/20100524/DI" bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" dc="http://www.omg.org/spec/DD/20100524/DC" sbpmn="SagitecBPMNExtensionElements" ID="entSolBpmActivityInstance" sfwMainCDO="icdoBpmActivityInstance" sfwType="BusinessRule" sfwActive="True" sfwStatus="Review" sfwObjectID="busSolBpmActivityInstance" sfwParentEntity="entNeobaseBpmActivityInstance">
  <rules>
    <rule ID="IsOrgActivity" sfwExpression="(RFunc.GetValue&lt;Int32&gt;(this, &quot;ibusBpmProcessInstance.ibusBpmCaseInstance.ibusOrganization.icdoOrganization.org_id&quot;) &gt; 0)" sfwObjectBased="True" />
    <rule ID="IsPersonActivity" sfwExpression="(RFunc.GetValue&lt;Int32&gt;(this, &quot;ibusBpmProcessInstance.ibusBpmCaseInstance.ibusPerson.icdoPerson.person_id&quot;) &gt; 0)" sfwObjectBased="True" />
    <rule ID="IsStatusInProcess" sfwExpression="!(this.iblnHasAssignedActivities == False) &amp;&amp; &#xA;((this.icdoBpmActivityInstance.status_value == &quot;INPC&quot;) || &#xA;(this.icdoBpmActivityInstance.status_value == &quot;RESU&quot;))" sfwObjectBased="True" />
    <rule ID="No Pending Activities" sfwExpression="(this.iblnHasAssignedActivities == False)" sfwObjectBased="True" />
    <rule ID="Pending Activities" sfwExpression="!(this.iblnHasAssignedActivities == False)" sfwObjectBased="True" />
    <rule ID="VisibleResumeLink" sfwRuleType="Validation" sfwExpression="(this.icdoBpmActivityInstance.status_value == &quot;SUSP&quot; || this.icdoBpmActivityInstance.status_value == &quot;FAIL&quot;)" sfwObjectBased="True" />
    <rule ID="Visible Rule -Activity Type Value Is User Task" sfwRuleType="Validation" sfwObjectBased="False" sfwExpression="(this.ibusBpmActivity.icdoBpmActivity.activity_type_value== &quot;USTK&quot;)" />
    <rule ID="VisibleRuleIsApprovalActivity" sfwRuleType="Validation" sfwObjectBased="True" sfwExpression="( ((this.iblnIsApprovalActivity) )&amp;&amp;  ( (this.icdoBpmActivityInstance.status_value == &quot;INPC&quot;) ||  (this.icdoBpmActivityInstance.status_value == &quot;RESU&quot;) ) )" />
    <rule ID="VRIsNextActivityInitiationMannually" sfwRuleType="Validation" sfwObjectBased="True" sfwExpression="(RFunc.GetValue&lt;Int32&gt;(this, &quot;ibusBpmProcessInstance.ibusBpmCaseInstance.ibusBpmCase.icdoBpmCase.version&quot;) &gt; 1) &amp;&amp;&#xA;(RFunc.GetValue&lt;String&gt;(this, &quot;ibusBpmProcessInstance.ibusBpmCaseInstance.ibusBpmCase.icdoBpmCase.name&quot;) == &quot;sbpCreateandMaintainOrganizationInformation&quot;) &amp;&amp; &#xA; (RFunc.GetValue&lt;String&gt;(this, &quot;ibusBpmActivity.icdoBpmActivity.name&quot;) == &quot;Enter Organization Information&quot;)" />
  </rules>
  <delete>
    <property ID="lstBpmActivityInstanceUsers" sfwMethodName="LoadBpmActivityInstanceEligibleUsers" />
    <property ID="lstBpmProcessInstanceAttachments" sfwMethodName="LoadProcessInstanceAttachments" />
    <property ID="lstBpmEscalationInstances" sfwMethodName="LoadBpmEscalationInstances" />
    <property ID="lstBpmDocumentUpload" sfwMethodName="LoadDocumentUpload" />
  </delete>
  <checklist />
  <initialload>
    <item ID="IsOrgActivity" sfwMode="All" sfwStatus="Active" />
    <item ID="IsPersonActivity" sfwMode="All" sfwStatus="Active" />
    <item ID="No Pending Activities" sfwMode="All" sfwStatus="Active" />
    <item ID="Pending Activities" sfwMode="All" sfwStatus="Active" />
    <item ID="IsStatusInProcess" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleResumeLink" sfwStatus="Active" sfwMode="All" />
    <item ID="IsNoteExist" sfwMode="All" sfwStatus="Active" />
    <item ID="IsActivityInstanceInProgressStatus" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleCancelButton" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleCheckoutButton" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleCompleteButton" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRegerateButton" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleReleaseButton" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleResumeButton" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleReturnButton" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleReturnToAuditButton" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleSendButton" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleSuspendButton" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleLaunchLink" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleCheckoutLink" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleCompleteLink" sfwMode="All" sfwStatus="Active" />
    <item ID="Visible Rule -Activity Type Value Is User Task" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRuleIsApprovalActivity" sfwMode="All" sfwStatus="Active" />
    <item ID="VRIsNextActivityInitiationMannually" sfwMode="All" sfwStatus="Active" />
  </initialload>
  <softerror />
  <harderror>
    <RequiredItems />
  </harderror>
  <validatedelete />
  <groupslist />
  <updateablecdo />
  <commonproperties />
  <expressionfields />
  <reference />
  <rulelist />
  <conditionlist />
  <compoundconditionlist />
  <Constraint />
  <constraint />
  <attributes>
    <attribute ID="lstrStatusDescription" sfwDataType="string" sfwPrivate="False" sfwValue="icdoBpmActivityInstance.status_description" sfwType="Property" />
    <attribute ID="lstSolBpmProcessInstanceAttachments" sfwType="Collection" sfwValue="iclbSolBpmProcessInstanceAttachments" sfwEntity="entSolBpmProcessInstanceAttachments" sfwPrivate="False" />
    <attribute ID="IstrViewActivity" sfwDataType="string" sfwPrivate="False" sfwValue="istrViewActivity" sfwType="Property" />
    <attribute ID="IstrNewModeScreen" sfwDataType="string" sfwValue="istrNewModeScreen" sfwType="Property" />
    <attribute ID="IstrUpdateModeScreen" sfwDataType="string" sfwValue="istrUpdateModeScreen" sfwType="Property" />
    <attribute ID="IstrRoleDescription" sfwDataType="string" sfwValue="istrRoleDescription" sfwType="Property" />
    <attribute ID="lstProcessChecklist" sfwType="Collection" sfwValue="iclbProcessChecklist" sfwEntity="entBpmActivityInstanceChecklist" sfwPrivate="False" />
    <attribute ID="lstBpmActivityInstanceHistory" sfwType="Collection" sfwValue="iclbBpmActivityInstHistory" sfwEntity="entBpmActivityInstanceHistory" sfwPrivate="False" />
    <attribute ID="lstProcessInstanceImageData" sfwType="Collection" sfwValue="iclbProcessInstanceImageData" sfwEntity="entSolBpmProcessInstanceAttachments" sfwPrivate="False" />
    <attribute ID="lblnNextActivityInitiation" sfwDataType="bool" sfwPrivate="False" sfwValue="iblnNextActivityInitiation" sfwType="Property" />
  </attributes>
  <objectmethods>
    <method ID="InvokeWorkflowAction" sfwReturnType="ArrayList" />
    <method ID="GetResumeActions" sfwReturnType="Collection" sfwEntity="entBpmResumeAction" />
    <method ID="AddNotes" sfwReturnType="ArrayList" />
    <method ID="LoadNotes" sfwReturnType="ArrayList">
      <parameters>
        <parameter ID="aintNoteID" sfwDataType="int" />
      </parameters>
    </method>
    <method ID="ReloadCenterleft" sfwReturnType="ArrayList">
      <parameters>
        <parameter ID="aintActivityInstanceID" sfwDataType="int" />
      </parameters>
    </method>
    <method ID="UpdateUserEscalationMessage" sfwReturnType="ArrayList">
      <parameters>
        <parameter ID="aarrSelectedObjects" sfwDataType="ArrayList" />
      </parameters>
    </method>
    <method ID="LoadBpmActivityInstanceEligibleUsers" sfwReturnType="Void" />
    <method ID="LoadProcessInstanceAttachments" sfwReturnType="Void" />
    <method ID="LoadBpmEscalationInstances" sfwReturnType="Void" />
    <method ID="LoadCenterleftObjects" sfwReturnType="Void">
      <parameters>
        <parameter ID="aintActivityInstanceID" sfwDataType="int" />
      </parameters>
    </method>
    <method ID="LoadBpmActivity" sfwReturnType="Void" />
    <method ID="LoadBpmProcessInstance" sfwReturnType="Void" />
    <method ID="LoadBpmProcessInstanceDetails" sfwReturnType="Void" />
    <method ID="LoadBpmActivityInstanceChecklist" sfwReturnType="Void" />
    <method ID="LoadProcessInstanceNotes" sfwReturnType="Void" />
    <method ID="EvaluateInitialLoadRules" sfwReturnType="Void">
      <parameters>
        <parameter ID="aenmPageMode" sfwDataType="utlPageMode" />
      </parameters>
    </method>
    <method ID="LoadActivityEscalation" sfwReturnType="Void" />
    <method ID="UploadBPMDocument" sfwReturnType="Void" />
    <method ID="LoadDocumentUpload" sfwReturnType="Void" />
    <method ID="deleteBPMDocument" sfwReturnType="Void">
      <parameters>
        <parameter ID="aintBPMDocumentUploadId" sfwDataType="int" />
      </parameters>
    </method>
    <method ID="LoadDocuments" sfwReturnType="Void" />
    <method ID="SearchImages" sfwReturnType="Void" />
    <method ID="AddToBpmActivityInstanceAttachments" sfwReturnType="ArrayList">
      <parameters>
        <parameter ID="aarrSelectedObjects" sfwDataType="arraylist" />
      </parameters>
    </method>
    <method ID="UnassignActivityInstance" sfwReturnType="ArrayList" />
  </objectmethods>
  <queries>
    <query ID="LoadSuspendedInstancesByProcessAndReference" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT    ACT.*&#xD;&#xA;FROM     sgw_bpm_activity_instance ACT WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS_INSTANCE WRK WITH(NOLOCK)&#xD;&#xA;ON ACT.PROCESS_INSTANCE_ID = WRK.PROCESS_INSTANCE_ID &#xD;&#xA;INNER JOIN SGW_BPM_PROCESS_INSTANCE SPI WITH(NOLOCK) ON ACT.PROCESS_INSTANCE_ID = SPI.PROCESS_INSTANCE_ID&#xD;&#xA;INNER JOIN SGW_BPM_CASE_INSTANCE SCI WITH(NOLOCK) ON SCI.CASE_INSTANCE_ID = SPI.CASE_INSTANCE_ID&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS SP WITH(NOLOCK) ON SP.PROCESS_ID = SPI.PROCESS_ID&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS_ID_DESC SPD WITH(NOLOCK) ON SP.DESCRIPTION = SPD.DESCRIPTION&#xD;&#xA;WHERE     ACT.STATUS_VALUE = 'SUSP'&#xD;&#xA;AND WRK.PROCESS_ID = @PROCESSID&#xD;&#xA;AND ACT.REFERENCE_ID = @REFERENCEID">
      <parameters>
        <parameter ID="@PROCESSID" sfwDataType="int" />
        <parameter ID="@REFERENCEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadRunningRMDProcessInstancesByPersonAndPlan" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT    SAI.*&#xD;&#xA;FROM     SGW_BPM_ACTIVITY_INSTANCE SAI WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS_INSTANCE SPI WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGW_BPM_CASE_INSTANCE SCI WITH(NOLOCK) ON SCI.CASE_INSTANCE_ID = SPI.CASE_INSTANCE_ID&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS SP WITH(NOLOCK) ON SP.PROCESS_ID = SPI.PROCESS_ID&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS_ID_DESC SPD WITH(NOLOCK) ON SP.DESCRIPTION = SPD.DESCRIPTION&#xD;&#xA; ON SAI.PROCESS_INSTANCE_ID = SPI.PROCESS_INSTANCE_ID&#xD;&#xA; WHERE     SAI.STATUS_VALUE NOT IN('CANC','PROC','RETU','REAU')&#xD;&#xA; AND SPI.PROCESS_ID = @PROCESSID&#xD;&#xA; and isnull(SPI.process_instance_id,0) &lt;&gt; @processInstanceID &#xD;&#xA; and ((Select count(*) FROM SGT_BENEFIT_APPLICATION(NOLOCK) WHERE MEMBER_PERSON_ID=@PERSONID&#xD;&#xA; and member_person_id = SCI.PERSON_ID&#xD;&#xA; AND PLAN_ID=@PLANID AND BENEFIT_ACCOUNT_TYPE_VALUE IN ('RETR','DETH','DISA','RFND')) &gt;0)">
      <parameters>
        <parameter ID="@PROCESSID" sfwDataType="int" />
        <parameter ID="@processInstanceID" sfwDataType="int" />
        <parameter ID="@PERSONID" sfwDataType="int" />
        <parameter ID="@PLANID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadProcessInstanceHistoryByOrg" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT BC.description as PROCESS_NAME,&#xD;&#xA;CV.DESCRIPTION AS STATUS_DESCRIPTION,&#xD;&#xA;SAIH.START_TIME,&#xD;&#xA;SAIH.END_TIME,&#xD;&#xA;SAIH.ACTION_USER_ID,&#xD;&#xA;SA.NAME AS ACTIVITY_NAME,&#xD;&#xA;CVSO.DESCRIPTION AS SOURCE,&#xD;&#xA;CONVERT(INT,ISNULL(SCIP.PARAMETER_VALUE,'0')) as contact_ticket_id,&#xD;&#xA;SP.DESCRIPTION as Process_Description&#xD;&#xA;FROM SGW_BPM_ACTIVITY_INST_HISTORY SAIH&#xD;&#xA;INNER JOIN SGW_BPM_ACTIVITY_INSTANCE SAI ON SAIH.ACTIVITY_INSTANCE_ID = SAI.ACTIVITY_INSTANCE_ID&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS_INSTANCE SPI ON SAI.PROCESS_INSTANCE_ID = SPI.PROCESS_INSTANCE_ID&#xD;&#xA;INNER JOIN SGW_BPM_CASE_INSTANCE SCI WITH(NOLOCK) ON SPI.CASE_INSTANCE_ID = SCI.CASE_INSTANCE_ID&#xD;&#xA;INNER JOIN SGW_BPM_CASE BC with(Nolock) on BC.CASE_ID=SCI.CASE_ID&#xD;&#xA;INNER JOIN SGW_BPM_CASE_INST_PARAMETER SCIP WITH(NOLOCK) ON SCIP.CASE_INSTANCE_ID=SCI.CASE_INSTANCE_ID AND SCIP.PARAMETER_NAME='contact_ticket_id'&#xD;&#xA;INNER JOIN SGW_BPM_ACTIVITY SA ON SAI.ACTIVITY_ID=SA.ACTIVITY_ID AND SA.ACTIVITY_TYPE_VALUE='USTK'&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS SP on SA.PROCESS_ID=SP.PROCESS_ID&#xD;&#xA;INNER JOIN SGS_CODE_VALUE CV ON CV.CODE_ID=SAIH.STATUS_ID AND CV.CODE_VALUE=SAIH.STATUS_VALUE&#xD;&#xA;LEFT JOIN sgt_contact_ticket sct on CONVERT(INT,ISNULL(SCIP.PARAMETER_VALUE,'0')) = sct.CONTACT_TICKET_ID&#xD;&#xA;LEFT JOIN SGW_BPM_REQUEST SWR ON SCI.REQUEST_ID = SWR.REQUEST_ID&#xD;&#xA;LEFT JOIN SGS_CODE_VALUE CVSO ON CVSO.CODE_ID=SWR.SOURCE_ID AND CVSO.CODE_VALUE=SWR.SOURCE_VALUE&#xD;&#xA;WHERE SCI.ORG_ID=@ORG_ID&#xD;&#xA;ORDER BY START_TIME DESC">
      <parameters>
        <parameter ID="@ORG_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadProcessInstanceHistoryByPerson" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SP.NAME AS PROCESS_NAME,&#xD;&#xA;CV.DESCRIPTION AS STATUS_DESCRIPTION,&#xD;&#xA;SAIH.START_TIME,&#xD;&#xA;SAIH.END_TIME,&#xD;&#xA;SAIH.ACTION_USER_ID,&#xD;&#xA;SA.Name AS ACTIVITY_NAME,&#xD;&#xA;CVSO.DESCRIPTION AS SOURCE,&#xD;&#xA;sct.contact_ticket_id as contact_ticket_id,&#xD;&#xA;SP.DESCRIPTION as Process_Description&#xD;&#xA;FROM SGW_BPM_ACTIVITY_INST_HISTORY SAIH&#xD;&#xA;INNER JOIN SGW_BPM_ACTIVITY_INSTANCE SAI ON SAIH.ACTIVITY_INSTANCE_ID = SAI.ACTIVITY_INSTANCE_ID&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS_INSTANCE SPI ON SAI.PROCESS_INSTANCE_ID = SPI.PROCESS_INSTANCE_ID&#xD;&#xA;INNER JOIN SGW_BPM_CASE_INSTANCE SCI WITH(NOLOCK) ON SCI.CASE_INSTANCE_ID = SPI.CASE_INSTANCE_ID &#xD;&#xA;INNER JOIN SGW_BPM_CASE_INST_PARAMETER SCIP WITH(NOLOCK) ON SCI.CASE_INSTANCE_ID = SCIP.CASE_INSTANCE_ID AND SCIP.PARAMETER_NAME='CONTACT_TICKET_ID'&#xD;&#xA;INNER JOIN SGW_BPM_ACTIVITY SA ON SAI.ACTIVITY_ID=SA.ACTIVITY_ID AND SA.ACTIVITY_TYPE_VALUE='USTK'&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS SP on SA.PROCESS_ID=SP.PROCESS_ID&#xD;&#xA;INNER JOIN SGS_CODE_VALUE CV ON CV.CODE_ID=SAIH.STATUS_ID AND CV.CODE_VALUE=SAIH.STATUS_VALUE&#xD;&#xA;LEFT JOIN sgt_contact_ticket sct on CAST(ISNULL(SCIP.PARAMETER_VALUE,'0') as int) = ISNULL(sct.CONTACT_TICKET_ID,0) -- some cases request will be deleted&#xD;&#xA;LEFT JOIN SGW_BPM_REQUEST SWR ON SCI.REQUEST_ID = SWR.REQUEST_ID&#xD;&#xA;LEFT JOIN SGS_CODE_VALUE CVSO ON CVSO.CODE_ID=SWR.SOURCE_ID AND CVSO.CODE_VALUE=SWR.SOURCE_VALUE &#xD;&#xA;WHERE SCI.PERSON_ID=@PERSON_ID&#xD;&#xA;ORDER BY START_TIME DESC">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadRunningInstancesByPersonProcessRef" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT * FROM SGW_BPM_ACTIVITY_INSTANCE SAI WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS_INSTANCE SPI WITH(NOLOCK) ON SPI.PROCESS_INSTANCE_ID = SAI.PROCESS_INSTANCE_ID&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS SP WITH(NOLOCK) ON SP.PROCESS_ID = SPI.PROCESS_ID&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS_ID_DESC SWPD WITH(NOLOCK) ON SP.DESCRIPTION = SWPD.DESCRIPTION AND SWPD.PROCESS_ID = @PROCESSID &#xD;&#xA;INNER JOIN SGW_BPM_CASE_INSTANCE SCI WITH(NOLOCK) ON SCI.CASE_INSTANCE_ID = SPI.CASE_INSTANCE_ID&#xD;&#xA;INNER JOIN SGW_BPM_REQUEST SWR WITH(NOLOCK) ON SWR.REQUEST_ID = SCI.REQUEST_ID&#xD;&#xA;WHERE SCI.PERSON_ID = @PERSONID AND ISNULL(SWR.REFERENCE_ID,0)=@REFERENCEID&#xD;&#xA;AND SAI.STATUS_VALUE NOT IN ('CANC','PROC','RETU','REAU')">
      <parameters>
        <parameter ID="@PROCESSID" sfwDataType="int" />
        <parameter ID="@PERSONID" sfwDataType="int" />
        <parameter ID="@REFERENCEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="IsActivityInstanceAlreadyExists" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT * FROM SGW_BPM_ACTIVITY_INSTANCE SAI WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS_INSTANCE SPI WITH(NOLOCK) ON SPI.PROCESS_INSTANCE_ID = SAI.PROCESS_INSTANCE_ID&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS SP WITH(NOLOCK) ON SP.PROCESS_ID = SPI.PROCESS_ID&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS_ID_DESC SWPD WITH(NOLOCK) ON SP.DESCRIPTION = SWPD.DESCRIPTION AND SWPD.PROCESS_ID = @PROCESSID &#xD;&#xA;INNER JOIN SGW_BPM_CASE_INSTANCE SCI WITH(NOLOCK) ON SCI.CASE_INSTANCE_ID = SPI.CASE_INSTANCE_ID&#xD;&#xA;WHERE SCI.PERSON_ID = @PERSONID AND ISNULL(SAI.REFERENCE_ID,0)=@REFERENCEID AND &#xD;&#xA;SAI.STATUS_VALUE NOT IN ('CANC','PROC','RETU','REAU')">
      <parameters>
        <parameter ID="@PROCESSID" sfwDataType="int" />
        <parameter ID="@PERSONID" sfwDataType="int" />
        <parameter ID="@REFERENCEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadSuspendedInstancesByPersonWhenDeathNotificationComplete" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT  SAI.* FROM SGW_BPM_ACTIVITY_INSTANCE SAI WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS_INSTANCE SPI WITH(NOLOCK) ON SPI.PROCESS_INSTANCE_ID = SAI.PROCESS_INSTANCE_ID&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS SP WITH(NOLOCK) ON SP.PROCESS_ID = SPI.PROCESS_ID&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS_ID_DESC SWPD WITH(NOLOCK)  ON SWPD.PROCESS_ID in(249,250,282,283,284) AND  SP.DESCRIPTION = SWPD.DESCRIPTION&#xD;&#xA;INNER JOIN SGW_BPM_CASE_INSTANCE SCI WITH(NOLOCK) ON SCI.CASE_INSTANCE_ID = SPI.CASE_INSTANCE_ID&#xD;&#xA;WHERE SCI.PERSON_ID = @PERSONID AND SAI.STATUS_VALUE ='SUSP'">
      <parameters>
        <parameter ID="@PERSONID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadSuspendedInstancesByPersonWhenEmploymentEnded" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT  SAI.* FROM SGW_BPM_ACTIVITY_INSTANCE SAI WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS_INSTANCE SPI WITH(NOLOCK) ON SPI.PROCESS_INSTANCE_ID = SAI.PROCESS_INSTANCE_ID&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS SP WITH(NOLOCK) ON SP.PROCESS_ID = SPI.PROCESS_ID&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS_ID_DESC SWPD WITH(NOLOCK)  ON SWPD.PROCESS_ID in(236,238,239,237,256) AND  SP.DESCRIPTION = SWPD.DESCRIPTION&#xD;&#xA;INNER JOIN SGW_BPM_CASE_INSTANCE SCI WITH(NOLOCK) ON SCI.CASE_INSTANCE_ID = SPI.CASE_INSTANCE_ID&#xD;&#xA;WHERE SCI.PERSON_ID = @PERSONID AND SAI.STATUS_VALUE ='SUSP'">
      <parameters>
        <parameter ID="@PERSONID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadAllInstancesByProcessAndReference" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT  SAI.* from SGW_BPM_ACTIVITY_INSTANCE SAI WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS_INSTANCE SPI WITH(NOLOCK) ON SAI.PROCESS_INSTANCE_ID = SPI.PROCESS_INSTANCE_ID&#xD;&#xA;WHERE SAI.STATUS_VALUE NOT IN ('CANC','PROC','RETU','REAU') AND SPI.PROCESS_ID = @PROCESSID  AND SAI.REFERENCE_ID=@REFERENCEID">
      <parameters>
        <parameter ID="@PROCESSID" sfwDataType="int" />
        <parameter ID="@REFERENCEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadRunningInstancesByPersonAndProcess" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT *  from SGW_BPM_ACTIVITY_INSTANCE SAI WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS_INSTANCE SPI WITH(NOLOCK) ON SPI.PROCESS_INSTANCE_ID = SAI.PROCESS_INSTANCE_ID&#xD;&#xA;INNER JOIN SGW_BPM_CASE_INSTANCE SCI WITH(NOLOCK) ON SCI.CASE_INSTANCE_ID = SPI.CASE_INSTANCE_ID&#xD;&#xA;WHERE  SCI.PERSON_ID=@PERSONID AND SPI.PROCESS_ID = @PROCESSID  AND&#xD;&#xA; SAI.status_value not in ('CANC','PROC','RETU','REAU')">
      <parameters>
        <parameter ID="@PERSONID" sfwDataType="int" />
        <parameter ID="@PROCESSID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="rptWorkFlowMetrics" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SET NOCOUNT ON&#xA;&#xA;DECLARE @CTR AS TABLE&#xA;( &#xA; ACTIVITY_INSTANCE_ID INT,&#xA; ACTIVITY_ID INT,&#xA; PROCESS_ID INT,&#xA; PERSON_ID INT,&#xA; ORG_ID INT,&#xA; CREATED_DATE DATETIME,&#xA; CURRENT_STATUS VARCHAR(4),&#xA; MODIFIED_BY VARCHAR(50),&#xA; UNPC INT,&#xA; INPC INT,&#xA; [PROC] INT,&#xA; RELE INT,&#xA; SUSP INT,&#xA; CANC INT,&#xA; RETU INT,&#xA; REAU INT,&#xA; RESU INT&#xA;)&#xA;&#xA;&#xA;DECLARE @TIMEDIF AS TABLE&#xA;( &#xA; ACTIVITY_INSTANCE_ID INT,&#xA; ACTIVITY_ID INT,&#xA; PROCESS_ID INT,&#xA; PERSON_ID INT,&#xA; ORG_ID INT,&#xA; CREATED_DATE DATETIME,&#xA; CURRENT_STATUS VARCHAR(4),&#xA; MODIFIED_BY VARCHAR(50),&#xA; UNPC INT,&#xA; INPC INT,&#xA; [PROC] INT,&#xA; RELE INT,&#xA; SUSP INT,&#xA; CANC INT,&#xA; RETU INT,&#xA; REAU INT,&#xA; RESU INT&#xA;)&#xA;  &#xA;&#xA;INSERT INTO @CTR&#xA; SELECT &#xA;  ACTIVITY_INSTANCE_ID ,&#xA;  ACTIVITY_ID ,&#xA;  PROCESS_ID,&#xA;  PERSON_ID ,&#xA;  ORG_ID ,&#xA;  CREATED_DATE ,&#xA;  CURRENT_STATUS ,&#xA;  MODIFIED_BY, &#xA;  [UNPC] AS UNPC,&#xA;  [INPC] AS INPC,&#xA;  [PROC] ,&#xA;  [RELE] AS RELE,&#xA;  [SUSP] AS SUSP,&#xA;  [CANC] AS CANC,&#xA;  [RETU] AS RETU,&#xA;  [REAU] AS REAU,&#xA;  [RESU] AS REAU&#xA; FROM &#xA;  (&#xA;&#xA;   SELECT AI.ACTIVITY_INSTANCE_ID ,&#xA;    AI.ACTIVITY_Id,&#xA;    AP.PROCESS_ID, &#xA;    PERSON_ID ,&#xA;    ORG_ID ,&#xA;    AI.CREATED_DATE, &#xA;    AI.STATUS_VALUE AS CURRENT_STATUS,&#xA;    AI.MODIFIED_BY, &#xA;    AIH.STATUS_VALUE AS STATUS_VALUE&#xA;   FROM SGW_BPM_ACTIVITY_INSTANCE AI&#xA;    INNER JOIN SGW_BPM_ACTIVITY_INST_HISTORY AIH &#xA;     ON AI.Activity_Instance_Id = AIH.Activity_Instance_Id&#xA;    INNER JOIN SGS_CODE_VALUE CV &#xA;     ON AI.Status_Id = CV.Code_Id and AI.Status_Value  = CV.Code_Value&#xA;    INNER JOIN SGW_BPM_ACTIVITY AP &#xA;     ON AP.ACTIVITY_ID = AI.ACTIVITY_id&#xA;    INNER JOIN SGW_BPM_PROCESS_INSTANCE SPI &#xA;     ON AI.PROCESS_INSTANCE_ID = SPI.PROCESS_INSTANCE_ID&#xA;&#x9;inner join SGW_BPM_CASE_INSTANCE SCI ON SPI.CASE_INSTANCE_ID=SCI.CASE_INSTANCE_ID&#xA;   WHERE CONVERT(DATETIME,CONVERT(VARCHAR,Start_Time,101) ,110) &gt;= CONVERT(DATETIME,CONVERT(VARCHAR,@startTime,101) ,110) &#xA;   AND CONVERT(DATETIME,CONVERT(VARCHAR,isnull(End_Time,getDate()),101) ,110) &lt;= CONVERT(DATETIME,CONVERT(VARCHAR,@endTime,101) ,110)&#xA;   AND (@typeId IS NULL OR @typeId = '' OR @typeId = '0' OR @typeId = AP.Process_ID)&#xA;   AND (@qualifiedName IS NULL OR @qualifiedName = '' OR @qualifiedName = '0' OR @qualifiedName = AP.ACTIVITY_ID)&#xA;   AND (@userID IS NULL OR @userID = '' OR lower(@userID) = lower(AI.modified_by))&#xA;   AND (@personID IS NULL OR @personID = '' OR @personID = SCI.PERSON_ID)&#xA;   AND (@orgID IS NULL OR @orgID = '' OR @orgID = SCI.ORG_ID)&#xA;   AND (@status IS NULL OR @status = '' OR @status = AI.status_value) &#xA;  ) P&#xA; PIVOT&#xA;  (&#xA;   COUNT (STATUS_VALUE)&#xA;   FOR STATUS_VALUE IN&#xA;   ([UNPC] ,[INPC] ,[PROC] ,[RELE] ,[SUSP] ,[CANC] ,[RETU] ,[REAU] ,[RESU] )&#xA;  ) AS PVT&#xA; ORDER BY &#xA;  ACTIVITY_INSTANCE_ID ,&#xA;  ACTIVITY_Id,&#xA;  PROCESS_ID, &#xA;  PERSON_ID ,&#xA;  ORG_ID,&#xA;  CREATED_DATE ,&#xA;  CURRENT_STATUS ,&#xA;  MODIFIED_BY&#xA;&#xA;&#xA;INSERT INTO @TIMEDIF&#xA; SELECT &#xA;  ACTIVITY_INSTANCE_ID ,&#xA;  ACTIVITY_Id,&#xA;  PROCESS_ID,   &#xA;  PERSON_ID ,&#xA;  ORG_ID ,&#xA;  CREATED_DATE ,&#xA;  CURRENT_STATUS ,&#xA;  MODIFIED_BY,&#xA;  [UNPC] AS UNPC,&#xA;  [INPC] AS INPC,&#xA;  [PROC] ,&#xA;  [RELE] AS RELE,&#xA;  [SUSP] AS SUSP,&#xA;  [CANC] AS CANC,&#xA;  [RETU] AS RETU,&#xA;  [REAU] AS REAU,&#xA;  [RESU] AS REAU&#xA; FROM &#xA;  (&#xA;   SELECT AI.ACTIVITY_INSTANCE_ID ,&#xA;    AI.ACTIVITY_Id,&#xA;    AP.PROCESS_ID, &#xA;    PERSON_ID ,&#xA;    ORG_ID ,&#xA;    AI.CREATED_DATE, &#xA;    AI.STATUS_VALUE AS CURRENT_STATUS,&#xA;    AI.MODIFIED_BY,&#xA;    AIH.STATUS_VALUE AS STATUS_VALUE,&#xA;    ISNULL(dbo.GetWorkingTimeInMinutes(Start_time, End_time),0) &#xA;    AS DifMins&#xA;   FROM SGW_BPM_ACTIVITY_INSTANCE AI&#xA;    INNER JOIN SGW_BPM_ACTIVITY_INST_HISTORY AIH &#xA;     ON AI.Activity_Instance_Id = AIH.Activity_Instance_Id&#xA;    INNER JOIN SGS_CODE_VALUE CV &#xA;     ON AI.Status_Id = CV.Code_Id and AI.Status_Value  = CV.Code_Value&#xA;   INNER JOIN SGW_BPM_ACTIVITY AP ON AP.ACTIVITY_ID = AI.ACTIVITY_id&#xA;    INNER JOIN SGW_BPM_PROCESS_INSTANCE SPI   ON AI.PROCESS_INSTANCE_ID = SPI.PROCESS_INSTANCE_ID&#xA;&#x9;inner join SGW_BPM_CASE_INSTANCE SCI ON SPI.CASE_INSTANCE_ID=SCI.CASE_INSTANCE_ID&#xA;   WHERE CONVERT(DATETIME,CONVERT(VARCHAR,Start_Time,101) ,110) &gt;= CONVERT(DATETIME,CONVERT(VARCHAR,@startTime,101) ,110) &#xA;   AND CONVERT(DATETIME,CONVERT(VARCHAR,isnull(End_Time,getDate()),101) ,110) &lt;= CONVERT(DATETIME,CONVERT(VARCHAR,@endTime,101) ,110)&#xA;   AND (@typeId IS NULL OR @typeId = '' OR @typeId = '0' OR @typeId = AP.Process_ID)&#xA;   AND (@qualifiedName IS NULL OR @qualifiedName = '' OR @qualifiedName = '0' OR @qualifiedName = AP.ACTIVITY_ID)&#xA;   AND (@userID IS NULL OR @userID = '' OR lower(@userID) = lower(AI.modified_by))&#xA;   AND (@personID IS NULL OR @personID = '' OR @personID = SCI.PERSON_ID)&#xA;   AND (@orgID IS NULL OR @orgID = '' OR @orgID = SCI.ORG_ID)&#xA;   AND (@status IS NULL OR @status = '' OR @status = AI.status_value) &#xA;  ) P&#xA; PIVOT&#xA;  (&#xA;   SUM(DifMins)&#xA;   FOR STATUS_VALUE IN ( [UNPC] ,[INPC] ,[PROC], [RELE] ,[SUSP] ,[CANC] ,[RETU] ,[REAU] ,[RESU] )&#xA;  ) AS PVT&#xA; ORDER BY &#xA;  ACTIVITY_INSTANCE_ID ,&#xA;  ACTIVITY_ID,&#xA;  PROCESS_ID, &#xA;  PERSON_ID ,&#xA;  ORG_ID,&#xA;  CREATED_DATE ,&#xA;  CURRENT_STATUS ,&#xA;  MODIFIED_BY&#xA;&#xA;&#xA;SELECT  PR.DESCRIPTION as PROCESS_NAME,&#xA;  C.ACTIVITY_INSTANCE_ID ,&#xA;  C.ACTIVITY_ID  AS ACTIVITY_PROFILE_ID,&#xA;  AP.[Name] AS ACTIVITY_NAME,&#xA;  AP.[NAME] AS DISPLAY_NAME,&#xA;  C.PERSON_ID ,&#xA;  C.ORG_ID ,&#xA;        O.ORG_CODE AS ORG_CODE,&#xA;  C.CREATED_DATE ,&#xA;  CV.DESCRIPTION AS CURRENT_STATUS,&#xA;  CAST((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))/480 as Varchar(3)) &#xA;   +':' + Cast(((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))- (ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))/480 * 480)/60 As Varchar(2))&#xA;   +':'+right('00'+Cast(((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0)) - (((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))/480 * 480) &#xA;   + (((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))- (ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))/480 * 480)/60)*60)) as Varchar(2)),2)  AS CURRENT_DURATION,&#xA;  C.UNPC AS UNPC_COUNT,&#xA;  CAST((T.UNPC)/480 as Varchar(3)) +':' + Cast(((T.UNPC)- (T.UNPC)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.UNPC) - (((T.UNPC)/480 * 480) + (((T.UNPC)- (T.UNPC)/480 * 480)/60)*60)) as Varchar(2)),2)  AS UNPC_DURATION,&#xA;  C.INPC AS INPC_COUNT,&#xA;  CAST((T.INPC)/480 as Varchar(3)) +':' + Cast(((T.INPC)- (T.INPC)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.INPC) - (((T.INPC)/480 * 480) + (((T.INPC)- (T.INPC)/480 * 480)/60)*60)) as Varchar(2)),2)  AS INPC_DURATION,&#xA;  C.[PROC] AS PROC_COUNT,&#xA;  CAST((T.[PROC])/480 as Varchar(3)) +':' + Cast(((T.[PROC])- (T.[PROC])/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.[PROC]) - (((T.[PROC])/480 * 480) + (((T.[PROC])- (T.[PROC])/480 * 480)/60)*60)) as Varchar(2)),2)  AS PROC_DURATION,&#xA;  C.RELE AS RELE_COUNT,&#xA;  CAST((T.RELE)/480 as Varchar(3)) +':' + Cast(((T.RELE)- (T.RELE)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.RELE) - (((T.RELE)/480 * 480) + (((T.RELE)- (T.RELE)/480 * 480)/60)*60)) as Varchar(2)),2)  AS RELE_DURATION,&#xA;  C.SUSP AS SUSP_COUNT,&#xA;  CAST((T.SUSP)/480 as Varchar(3)) +':' + Cast(((T.SUSP)- (T.SUSP)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.SUSP) - (((T.SUSP)/480 * 480) + (((T.SUSP)- (T.SUSP)/480 * 480)/60)*60)) as Varchar(2)),2)  AS SUSP_DURATION,&#xA;  C.CANC AS CANC_COUNT,&#xA;  CAST((T.CANC)/480 as Varchar(3)) +':' + Cast(((T.CANC)- (T.CANC)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.CANC) - (((T.CANC)/480 * 480) + (((T.CANC)- (T.CANC)/480 * 480)/60)*60)) as Varchar(2)),2)  AS CANC_DURATION,&#xA;  C.RETU AS RETU_COUNT,&#xA;  CAST((T.RETU)/480 as Varchar(3)) +':' + Cast(((T.RETU)- (T.RETU)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.RETU) - (((T.RETU)/480 * 480) + (((T.RETU)- (T.RETU)/480 * 480)/60)*60)) as Varchar(2)),2)  AS RETU_DURATION,&#xA;  C.REAU AS REAU_COUNT,&#xA;  CAST((T.REAU)/480 as Varchar(3)) +':' + Cast(((T.REAU)- (T.REAU)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.REAU) - (((T.REAU)/480 * 480) + (((T.REAU)- (T.REAU)/480 * 480)/60)*60)) as Varchar(2)),2)  AS REAU_DURATION,&#xA;  C.RESU AS RESU_COUNT,&#xA;  CAST((T.RESU)/480 as Varchar(3)) +':' + Cast(((T.RESU)- (T.RESU)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.RESU) - (((T.RESU)/480 * 480) + (((T.RESU)- (T.RESU)/480 * 480)/60)*60)) as Varchar(2)),2)  AS RESU_DURATION,&#xA;  C.MODIFIED_BY AS USER_ID&#xA; FROM  @CTR C &#xA; INNER JOIN @TIMEDIF T ON &#xA; C.ACTIVITY_INSTANCE_ID = T.ACTIVITY_INSTANCE_ID and &#xA; C.ACTIVITY_ID = T.ACTIVITY_ID AND&#xA; C.PROCESS_ID = T.PROCESS_ID&#xA; INNER JOIN SGW_BPM_ACTIVITY AP ON AP.ACTIVITY_ID=C.ACTIVITY_ID&#xA; INNER JOIN SGS_CODE_VALUE CV ON CV.CODE_VALUE=C.CURRENT_STATUS AND CV.CODE_ID=20&#xA; INNER JOIN SGW_BPM_PROCESS PR on C.PROCESS_ID = PR.PROCESS_ID&#xA;   LEFT JOIN SGT_ORGANIZATION O ON O.ORG_ID = C.ORG_ID&#xA;&#xA;SET NOCOUNT OFF">
      <parameters>
        <parameter ID="@startTime" sfwDataType="DateTime" />
        <parameter ID="@endTime" sfwDataType="DateTime" />
        <parameter ID="@typeId" sfwDataType="string" />
        <parameter ID="@qualifiedName" sfwDataType="string" />
        <parameter ID="@userID" sfwDataType="string" />
        <parameter ID="@personID" sfwDataType="string" />
        <parameter ID="@orgID" sfwDataType="string" />
        <parameter ID="@status" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="LoadRunningInstancesByOrgAndProcess" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT * FROM SGW_BPM_ACTIVITY_INSTANCE SAI WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS_INSTANCE SPI WITH(NOLOCK) ON SPI.PROCESS_INSTANCE_ID = SAI.PROCESS_INSTANCE_ID&#xD;&#xA;INNER JOIN SGW_BPM_CASE_INSTANCE SCI WITH(NOLOCK) ON SCI.CASE_INSTANCE_ID = SPI.CASE_INSTANCE_ID&#xD;&#xA;WHERE SCI.ORG_ID = @ORGID  AND SPI.PROCESS_ID = @PROCESSID AND &#xD;&#xA;SAI.STATUS_VALUE NOT IN ('CANC','PROC','RETU','REAU')">
      <parameters>
        <parameter ID="@ORGID" sfwDataType="int" />
        <parameter ID="@PROCESSID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadRunningInstancesByReferenceAndProcess" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select * FROM SGW_BPM_ACTIVITY_INSTANCE SAI WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGW_BPM_PROCESS_INSTANCE SPI WITH(NOLOCK) ON SPI.PROCESS_INSTANCE_ID = SAI.PROCESS_INSTANCE_ID&#xD;&#xA;WHERE SAI.REFERENCE_ID=@Refid AND SPI.PROCESS_ID=@processID AND  sai.status_value not in ('CANC','PROC','RETU','REAU')">
      <parameters>
        <parameter ID="@Refid" sfwDataType="int" />
        <parameter ID="@processID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="rptProcessBatchReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SET NOCOUNT ON&#xD;&#xA;DECLARE @CTR as table&#xD;&#xA;( ACTION_USER_ID VARCHAR(50),&#xD;&#xA; ACTIVITY_ID INT, &#xD;&#xA; PROCESS_ID INT,&#xD;&#xA; [UNPC] INT,&#xD;&#xA; [INPC] INT,&#xD;&#xA; [PROC] INT,&#xD;&#xA; [RELE] INT,&#xD;&#xA; [SUSP] INT,&#xD;&#xA; [CANC] INT,&#xD;&#xA; [RETU] INT,&#xD;&#xA; [REAU] INT,&#xD;&#xA; [RESU] INT&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;DECLARE @TIMEDIF as table&#xD;&#xA;( ACTION_USER_ID VARCHAR(50),&#xD;&#xA; ACTIVITY_ID INT,&#xD;&#xA; PROCESS_ID INT, &#xD;&#xA; [UNPC] BIGINT,&#xD;&#xA; [INPC] BIGINT,&#xD;&#xA; [PROC] BIGINT,&#xD;&#xA; [RELE] BIGINT,&#xD;&#xA; [SUSP] BIGINT,&#xD;&#xA; [CANC] INT,&#xD;&#xA; [RETU] INT,&#xD;&#xA; [REAU] INT,&#xD;&#xA; [RESU] BIGINT&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;INSERT INTO @CTR&#xD;&#xA; SELECT &#xD;&#xA;  ACTION_USER_ID ,&#xD;&#xA;  ACTIVITY_ID , &#xD;&#xA;  PROCESS_ID ,&#xD;&#xA;   [UNPC] AS UNPC,&#xD;&#xA;   [INPC] AS INPC,&#xD;&#xA;   [PROC] AS [PROC],&#xD;&#xA;   [RELE] AS RELE,&#xD;&#xA;   [SUSP] AS SUSP,&#xD;&#xA;   [CANC] AS CANC,&#xD;&#xA;   [RETU] AS RETU,&#xD;&#xA;   [REAU] AS REAU,&#xD;&#xA;   [RESU] AS RESU&#xD;&#xA; FROM &#xD;&#xA;  (&#xD;&#xA;   SELECT  AIH.ACTION_USER_ID AS ACTION_USER_ID, &#xD;&#xA;    AI.ACTIVITY_ID AS ACTIVITY_ID , &#xD;&#xA;    AP.PROCESS_ID  AS PROCESS_ID,&#xD;&#xA;    AIH.STATUS_VALUE AS STATUS_VALUE, &#xD;&#xA;    Count(AIH.STATUS_VALUE) as DifSecs&#xD;&#xA;   FROM SGW_BPM_ACTIVITY_INST_HISTORY AIH&#xD;&#xA;   INNER JOIN SGW_BPM_ACTIVITY_INSTANCE AI &#xD;&#xA;    ON AIH.ACTIVITY_INSTANCE_ID = AI.ACTIVITY_INSTANCE_ID&#xD;&#xA;   INNER JOIN SGW_BPM_PROCESS_INSTANCE AP &#xD;&#xA;    ON AI.PROCESS_INSTANCE_ID = AP.PROCESS_INSTANCE_ID&#xD;&#xA;   group by AIH.ACTION_USER_ID ,AI.ACTIVITY_ID,AP.PROCESS_ID,AIH.STATUS_VALUE  &#xD;&#xA;&#xD;&#xA;  ) P&#xD;&#xA; PIVOT&#xD;&#xA;  (&#xD;&#xA;   SUM(difsecs)&#xD;&#xA;   FOR STATUS_VALUE IN&#xD;&#xA;   ([UNPC],[INPC],[PROC],[RELE],[SUSP],[CANC],[RETU],[REAU],[RESU])&#xD;&#xA;  ) AS pvt&#xD;&#xA; ORDER BY &#xD;&#xA;  ACTION_USER_ID , &#xD;&#xA;  ACTIVITY_ID ,&#xD;&#xA;  PROCESS_ID&#xD;&#xA;&#xD;&#xA;INSERT INTO @TIMEDIF&#xD;&#xA;SELECT &#xD;&#xA; ACTION_USER_ID ,&#xD;&#xA; ACTIVITY_ID , &#xD;&#xA; PROCESS_ID ,&#xD;&#xA;  [UNPC] AS UNPC,&#xD;&#xA;  [INPC] AS INPC,&#xD;&#xA;  [PROC] AS [PROC],&#xD;&#xA;  [RELE] AS RELE,&#xD;&#xA;  [SUSP] AS SUSP,&#xD;&#xA;  [CANC] AS CANC,&#xD;&#xA;  [RETU] AS RETU,&#xD;&#xA;  [REAU] AS REAU,&#xD;&#xA;  [RESU] AS RESU&#xD;&#xA;FROM &#xD;&#xA; (&#xD;&#xA;  SELECT  AIH.ACTION_USER_ID AS ACTION_USER_ID, &#xD;&#xA;   AI.ACTIVITY_ID AS ACTIVITY_ID , &#xD;&#xA;   AP.PROCESS_ID  AS PROCESS_ID,&#xD;&#xA;   AIH.STATUS_VALUE AS STATUS_VALUE, &#xD;&#xA;   cast(dbo.GetWorkingTimeInMinutes(Start_time, End_time) as bigint) as DifSecs&#xD;&#xA;  FROM SGW_BPM_ACTIVITY_INST_HISTORY AIH&#xD;&#xA;  INNER JOIN SGW_BPM_ACTIVITY_INSTANCE AI &#xD;&#xA;   ON AIH.ACTIVITY_INSTANCE_ID = AI.ACTIVITY_INSTANCE_ID&#xD;&#xA;  INNER JOIN SGW_BPM_PROCESS_INSTANCE AP &#xD;&#xA;   ON AI.PROCESS_INSTANCE_ID = AP.PROCESS_INSTANCE_ID&#xD;&#xA; ) P&#xD;&#xA;PIVOT&#xD;&#xA; (&#xD;&#xA;  SUM(DifSecs)&#xD;&#xA;  FOR STATUS_VALUE IN&#xD;&#xA;  ([UNPC],[INPC],[PROC],[RELE],[SUSP],[CANC],[RETU],[REAU],[RESU])&#xD;&#xA; ) AS pvt&#xD;&#xA;ORDER BY &#xD;&#xA; ACTION_USER_ID , &#xD;&#xA; ACTIVITY_ID , &#xD;&#xA; PROCESS_ID &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT PR.DESCRIPTION as PROCESS_NAME,&#xD;&#xA;  C.ACTIVITY_ID AS ACTIVITY_PROFILE_ID,&#xD;&#xA;  AP1.NAME AS ACTIVITY_NAME,&#xD;&#xA;  C.ACTION_USER_ID,&#xD;&#xA;  C.UNPC AS UNPC_COUNT,&#xD;&#xA;  CAST((CASE WHEN C.UNPC = 0 THEN 0 ELSE T.UNPC/C.UNPC END)/480 as Varchar(10)) +':' + Cast(((CASE WHEN C.UNPC = 0 THEN 0 ELSE T.UNPC/C.UNPC END)- (CASE WHEN C.UNPC = 0 THEN 0 ELSE T.UNPC/C.UNPC END)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((CASE WHEN C.UNPC = 0 THEN 0 ELSE T.UNPC/C.UNPC END) - (((CASE WHEN C.UNPC = 0 THEN 0 ELSE T.UNPC/C.UNPC END)/480 * 480) + (((CASE WHEN C.UNPC = 0 THEN 0 ELSE T.UNPC/C.UNPC END)- (CASE WHEN C.UNPC = 0 THEN 0 ELSE T.UNPC/C.UNPC END)/480 * 480)/60)*60)) as Varchar(2)),2)  AS UNPC_TIME_MEAN_AVG,&#xD;&#xA;        C.INPC AS INPC_COUNT,&#xD;&#xA;  CAST((CASE WHEN C.INPC = 0 THEN 0 ELSE T.INPC/C.INPC END)/480 as Varchar(10)) +':' + Cast(((CASE WHEN C.INPC = 0 THEN 0 ELSE T.INPC/C.INPC END)- (CASE WHEN C.INPC = 0 THEN 0 ELSE T.INPC/C.INPC END)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((CASE WHEN C.INPC = 0 THEN 0 ELSE T.INPC/C.INPC END) - (((CASE WHEN C.INPC = 0 THEN 0 ELSE T.INPC/C.INPC END)/480 * 480) + (((CASE WHEN C.INPC = 0 THEN 0 ELSE T.INPC/C.INPC END)- (CASE WHEN C.INPC = 0 THEN 0 ELSE T.INPC/C.INPC END)/480 * 480)/60)*60)) as Varchar(2)),2) AS INPC_TIME_MEAN_AVG,&#xD;&#xA;        C.[PROC] AS PROC_COUNT,&#xD;&#xA;  CAST((CASE WHEN C.[PROC] = 0 THEN 0 ELSE T.[PROC]/C.[PROC] END)/480 as Varchar(10)) +':' + Cast(((CASE WHEN C.[PROC] = 0 THEN 0 ELSE T.[PROC]/C.[PROC] END)- (CASE WHEN C.[PROC] = 0 THEN 0 ELSE T.[PROC]/C.[PROC] END)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((CASE WHEN C.[PROC] = 0 THEN 0 ELSE T.[PROC]/C.[PROC] END) - (((CASE WHEN C.[PROC] = 0 THEN 0 ELSE T.[PROC]/C.[PROC] END)/480 * 480) + (((CASE WHEN C.[PROC] = 0 THEN 0 ELSE T.[PROC]/C.[PROC] END)- (CASE WHEN C.[PROC] = 0 THEN 0 ELSE T.[PROC]/C.[PROC] END)/480 * 480)/60)*60)) as Varchar(2)),2) AS PROC_TIME_MEAN_AVG,&#xD;&#xA;        C.RELE AS RELE_COUNT,&#xD;&#xA;  CAST((CASE WHEN C.RELE = 0 THEN 0 ELSE T.RELE/C.RELE END)/480 as Varchar(10)) +':' + Cast(((CASE WHEN C.RELE = 0 THEN 0 ELSE T.RELE/C.RELE END)- (CASE WHEN C.RELE = 0 THEN 0 ELSE T.RELE/C.RELE END)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((CASE WHEN C.RELE = 0 THEN 0 ELSE T.RELE/C.RELE END) - (((CASE WHEN C.RELE = 0 THEN 0 ELSE T.RELE/C.RELE END)/480 * 480) + (((CASE WHEN C.RELE = 0 THEN 0 ELSE T.RELE/C.RELE END)- (CASE WHEN C.RELE = 0 THEN 0 ELSE T.RELE/C.RELE END)/480 * 480)/60)*60)) as Varchar(2)),2) AS RELE_TIME_MEAN_AVG,&#xD;&#xA;        C.SUSP AS SUSP_COUNT,&#xD;&#xA;  CAST((CASE WHEN C.SUSP = 0 THEN 0 ELSE T.SUSP/C.SUSP END)/480 as Varchar(10)) +':' + Cast(((CASE WHEN C.SUSP = 0 THEN 0 ELSE T.SUSP/C.SUSP END)- (CASE WHEN C.SUSP = 0 THEN 0 ELSE T.SUSP/C.SUSP END)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((CASE WHEN C.SUSP = 0 THEN 0 ELSE T.SUSP/C.SUSP END) - (((CASE WHEN C.SUSP = 0 THEN 0 ELSE T.SUSP/C.SUSP END)/480 * 480) + (((CASE WHEN C.SUSP = 0 THEN 0 ELSE T.SUSP/C.SUSP END)- (CASE WHEN C.SUSP = 0 THEN 0 ELSE T.SUSP/C.SUSP END)/480 * 480)/60)*60)) as Varchar(2)),2) AS SUSP_TIME_MEAN_AVG,&#xD;&#xA;        C.CANC AS CANC_COUNT,&#xD;&#xA;  CAST((CASE WHEN C.CANC = 0 THEN 0 ELSE T.CANC/C.CANC END)/480 as Varchar(10)) +':' + Cast(((CASE WHEN C.CANC = 0 THEN 0 ELSE T.CANC/C.CANC END)- (CASE WHEN C.CANC = 0 THEN 0 ELSE T.CANC/C.CANC END)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((CASE WHEN C.CANC = 0 THEN 0 ELSE T.CANC/C.CANC END) - (((CASE WHEN C.CANC = 0 THEN 0 ELSE T.CANC/C.CANC END)/480 * 480) + (((CASE WHEN C.CANC = 0 THEN 0 ELSE T.CANC/C.CANC END)- (CASE WHEN C.CANC = 0 THEN 0 ELSE T.CANC/C.CANC END)/480 * 480)/60)*60)) as Varchar(2)),2) AS CANC_TIME_MEAN_AVG,&#xD;&#xA;        C.RETU AS RETU_COUNT,&#xD;&#xA;  CAST((CASE WHEN C.RETU = 0 THEN 0 ELSE T.RETU/C.RETU END)/480 as Varchar(10)) +':' + Cast(((CASE WHEN C.RETU = 0 THEN 0 ELSE T.RETU/C.RETU END)- (CASE WHEN C.RETU = 0 THEN 0 ELSE T.RETU/C.RETU END)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((CASE WHEN C.RETU = 0 THEN 0 ELSE T.RETU/C.RETU END) - (((CASE WHEN C.RETU = 0 THEN 0 ELSE T.RETU/C.RETU END)/480 * 480) + (((CASE WHEN C.RETU = 0 THEN 0 ELSE T.RETU/C.RETU END)- (CASE WHEN C.RETU = 0 THEN 0 ELSE T.RETU/C.RETU END)/480 * 480)/60)*60)) as Varchar(2)),2) AS RETU_TIME_MEAN_AVG,&#xD;&#xA;        C.REAU AS REAU_COUNT,&#xD;&#xA;  CAST((CASE WHEN C.REAU = 0 THEN 0 ELSE T.REAU/C.REAU END)/480 as Varchar(10)) +':' + Cast(((CASE WHEN C.REAU = 0 THEN 0 ELSE T.REAU/C.REAU END)- (CASE WHEN C.REAU = 0 THEN 0 ELSE T.REAU/C.REAU END)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((CASE WHEN C.REAU = 0 THEN 0 ELSE T.REAU/C.REAU END) - (((CASE WHEN C.REAU = 0 THEN 0 ELSE T.REAU/C.REAU END)/480 * 480) + (((CASE WHEN C.REAU = 0 THEN 0 ELSE T.REAU/C.REAU END)- (CASE WHEN C.REAU = 0 THEN 0 ELSE T.REAU/C.REAU END)/480 * 480)/60)*60)) as Varchar(2)),2) AS REAU_TIME_MEAN_AVG,&#xD;&#xA;        C.RESU AS RESU_COUNT,&#xD;&#xA;  CAST((CASE WHEN C.RESU = 0 THEN 0 ELSE T.RESU/C.RESU END)/480 as Varchar(10)) +':' + Cast(((CASE WHEN C.RESU = 0 THEN 0 ELSE T.RESU/C.RESU END)- (CASE WHEN C.RESU = 0 THEN 0 ELSE T.RESU/C.RESU END)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((CASE WHEN C.RESU = 0 THEN 0 ELSE T.RESU/C.RESU END) - (((CASE WHEN C.RESU = 0 THEN 0 ELSE T.RESU/C.RESU END)/480 * 480) + (((CASE WHEN C.RESU = 0 THEN 0 ELSE T.RESU/C.RESU END)- (CASE WHEN C.RESU = 0 THEN 0 ELSE T.RESU/C.RESU END)/480 * 480)/60)*60)) as Varchar(2)),2) AS RESU_TIME_MEAN_AVG,&#xD;&#xA;  T.UNPC, T.INPC,T.[PROC],T.RELE,T.SUSP,T.CANC,T.RETU,T.REAU,T.RESU&#xD;&#xA; FROM  @CTR C &#xD;&#xA; INNER JOIN @TIMEDIF T ON &#xD;&#xA;  C.ACTION_USER_ID   = T.ACTION_USER_ID  AND&#xD;&#xA;  C.ACTIVITY_ID = T.ACTIVITY_ID AND&#xD;&#xA;  C.PROCESS_ID = T.PROCESS_ID&#xD;&#xA; INNER JOIN SGW_BPM_ACTIVITY AP1 ON &#xD;&#xA;  AP1.ACTIVITY_ID = C.ACTIVITY_ID&#xD;&#xA; INNER JOIN SGW_BPM_PROCESS PR &#xD;&#xA;  on C.PROCESS_ID = PR.PROCESS_ID&#xD;&#xA; WHERE ISNULL(C.INPC,0) + ISNULL(C.[PROC],0) + ISNULL(C.RELE,0) + ISNULL(C.SUSP,0)&#xD;&#xA;   + ISNULL(C.CANC,0) + ISNULL(C.RETU,0) + ISNULL(C.REAU,0) + ISNULL(C.RESU,0) &gt; 0&#xD;&#xA;&#xD;&#xA;SET NOCOUNT OFF" />
  </queries>
  <methods>
    <method ID="FindBpmActivityInstance" sfwMethodType="Load" sfwMode="All" sfwLoadMainObject="False">
      <item sfwParameter="aintActivityInstanceID" ID="LoadCenterleftObjects" sfwDataType="Void" sfwItemType="Method" />
      <parameter ID="aintActivityInstanceID" sfwDataType="int" />
      <item ID="LoadBpmActivity" sfwDataType="Void" sfwItemType="Method" />
      <item ID="LoadBpmProcessInstance" sfwDataType="Void" sfwItemType="Method" />
      <item ID="LoadBpmProcessInstanceDetails" sfwDataType="Void" sfwItemType="Method" />
      <item ID="LoadBpmActivityInstanceChecklist" sfwDataType="Void" sfwItemType="Method" />
      <item ID="LoadProcessInstanceNotes" sfwDataType="Void" sfwItemType="Method" />
      <item ID="LoadBpmEscalationInstances" sfwItemType="Method" sfwDataType="Void" />
      <item ID="EvaluateInitialLoadRules" sfwDataType="Void" sfwItemType="Method" />
      <item ID="LoadActivityEscalation" sfwItemType="Method" sfwDataType="Void" />
      <item ID="LoadDocumentUpload" sfwItemType="Method" sfwDataType="Void" />
      <item ID="LoadDocuments" sfwItemType="Method" sfwDataType="Void" />
    </method>
  </methods>
  <lifecycle />
  <ExtraFields />
</entity>