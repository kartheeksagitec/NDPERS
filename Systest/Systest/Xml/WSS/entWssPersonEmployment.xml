<entity ID="entWssPersonEmployment" sfwMainCDO="icdoWssPersonEmployment" sfwType="BusinessRule" sfwActive="True" sfwStatus="Review" sfwObjectID="busWssPersonEmployment" sfwTableName="sgt_wss_person_employment" sfwView="False">
  <queries>
    <query ID="LeaveOfAbsence" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9;PE.PERSON_ID ,&#xA;&#x9;P.LAST_NAME,&#xA;&#x9;P.FIRST_NAME,&#xA;&#x9;PED.START_DATE,&#xA;&#x9;PED.END_DATE,&#xA;    CV.DESCRIPTION as TYPE_OF_LEAVE &#x9;&#xA;FROM&#xA;&#x9; SGT_PERSON_EMPLOYMENT_DETAIL PED    &#xA;&#x9;INNER JOIN SGT_PERSON_EMPLOYMENT PE&#x9; ON PED.PERSON_EMPLOYMENT_ID = PE.PERSON_EMPLOYMENT_ID     &#xA;&#x9;INNER JOIN SGT_PERSON &#x9;AS P ON  PE.PERSON_ID = P.PERSON_ID  &#xA;&#x9;INNER JOIN SGS_CODE_VALUE CV ON CV.CODE_ID = PED.STATUS_ID and CV.CODE_VALUE=PED.STATUS_VALUE&#xA;WHERE&#xA;&#x9; PED.STATUS_VALUE in ('LOA','LOAM','FMLA') AND&#xA;&#x9; PED.START_DATE &lt; =  GETDATE() AND&#xA;&#x9; (PED.END_DATE IS NULL OR PED.END_DATE &gt; =  GETDATE()) AND&#xA;&#xA;&#x9; &#x9; PE.ORG_ID = @ORG_ID&#xA; ORDER BY P.LAST_NAME,P.FIRST_NAME ASC">
      <parameters>
        <parameter ID="@ORG_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadFlexEnrollEmployees" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT * FROM&#xD;&#xA;&#x9;(SELECT  P.PERSON_ID ,P.LAST_NAME,P.FIRST_NAME,P.SSN, PAFCO.ANNUAL_PLEDGE_AMOUNT AS  DEPENDENTCAREAMOUNT, &#xD;&#xA;   (SELECT TOP 1  ANNUAL_PLEDGE_AMOUNT FROM SGT_PERSON_ACCOUNT_FLEX_COMP_OPTION WHERE LEVEL_OF_COVERAGE_VALUE='MSRA' AND PERSON_ACCOUNT_ID= PAFCO.PERSON_ACCOUNT_ID AND  EFFECTIVE_END_DATE IS NULL) AS MEDICALSPENDINGAMOUNT&#xD;&#xA;   FROM SGT_PERSON_ACCOUNT_FLEX_COMP_OPTION PAFCO&#xD;&#xA;   INNER JOIN SGT_PERSON_ACCOUNT  AS PA ON  PAFCO.PERSON_ACCOUNT_ID =PA.PERSON_ACCOUNT_ID&#xD;&#xA;   INNER JOIN SGT_PERSON AS P ON  PA.PERSON_ID=P.PERSON_ID &#xD;&#xA;   INNER JOIN SGT_PERSON_EMPLOYMENT  AS PE ON  PE.PERSON_ID=P.PERSON_ID&#xD;&#xA;   INNER JOIN SGT_PERSON_EMPLOYMENT_DETAIL AS PED ON PED.PERSON_EMPLOYMENT_ID = PE.PERSON_EMPLOYMENT_ID&#xD;&#xA;   WHERE  EFFECTIVE_START_DATE IS NOT NULL &#xD;&#xA;   AND EFFECTIVE_END_DATE IS NULL &#xD;&#xA;   AND LEVEL_OF_COVERAGE_VALUE='DCRA'&#xD;&#xA;   AND PA.PLAN_PARTICIPATION_STATUS_VALUE = 'ENL4'&#xD;&#xA;   AND PAFCO.EFFECTIVE_START_DATE BETWEEN PED.START_DATE AND (CASE WHEN PED.END_DATE IS NULL THEN '12/31/9999' ELSE PED.END_DATE END)&#xD;&#xA;   AND PE.ORG_ID = @ORG_ID) temp&#xD;&#xA;   WHERE ((TEMP.DEPENDENTCAREAMOUNT IS NOT NULL AND TEMP.DEPENDENTCAREAMOUNT !=0) OR (TEMP.MEDICALSPENDINGAMOUNT IS NOT NULL AND TEMP.MEDICALSPENDINGAMOUNT !=0))&#xD;&#xA;&#x9;ORDER BY TEMP.LAST_NAME">
      <parameters>
        <parameter ID="@ORG_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadMissingRetirementContributions" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="IF OBJECT_ID('tempdb.dbo.#TEMP', 'U') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#TEMP1') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP1;&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#TEMP2') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP2;&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#TEMP3') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP3;&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#TEMP4') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP4;&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#TEMP5') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP5;&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#NONSEASONAL_TEMP') IS NOT NULL&#xD;&#xA;DROP TABLE #NONSEASONAL_TEMP&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;DECLARE @MISSED_CONTRIBUTION_CHECK_START_DATE_SEASONAL DATETIME = DATEADD(MONTH, -14, DateAdd(Month, DateDiff(Month, 0, GetDate()), 0));  &#xD;&#xA;DECLARE @MISSED_CONTRIBUTION_CHECK_START_DATE DATETIME = CONVERT(DATETIME,(select DATA1 from SGS_CODE_VALUE where CODE_ID = 52 AND CODE_VALUE = 'MRCD'),101);--'01/01/2017';&#xD;&#xA;DECLARE @MISSED_CONTRIBUTION_CHECK_END_DATE DATETIME = DATEADD(MONTH, -2, DateAdd(Month, DateDiff(Month, 0, GetDate()), 0));&#xD;&#xA;&#xD;&#xA;--SEASONAL LOGIC&#xD;&#xA;&#xD;&#xA;WITH MISSEDCONTRIB AS &#xD;&#xA;(&#xD;&#xA;&#x9;SELECT   PED.[START_DATE], PED.[END_DATE], PED.[START_DATE] as EACH_MONTH_DATE, PE.PERSON_ID, PE.ORG_ID, PED.SEASONAL_VALUE, 0 AS I, PAED.PERSON_ACCOUNT_ID,P.PLAN_NAME FROM SGT_PERSON_EMPLOYMENT_DETAIL PED WITH(NOLOCK) &#xD;&#xA;&#x9;JOIN SGT_PERSON_EMPLOYMENT PE WITH(NOLOCK) ON PED.PERSON_EMPLOYMENT_ID = PE.PERSON_EMPLOYMENT_ID&#xD;&#xA;&#x9;JOIN SGT_PERSON_ACCOUNT_EMPLOYMENT_DETAIL PAED WITH(NOLOCK) ON PAED.PERSON_EMPLOYMENT_DTL_ID = PED.PERSON_EMPLOYMENT_DTL_ID AND PAED.PERSON_ACCOUNT_ID IS NOT NULL AND PAED.ELECTION_VALUE = 'ENLD'&#xD;&#xA;&#x9;JOIN SGT_PLAN P WITH(NOLOCK) ON P.PLAN_ID = PAED.PLAN_ID AND P.BENEFIT_TYPE_VALUE = 'RETR'&#xD;&#xA;&#x9;WHERE PED.STATUS_VALUE = 'CONT' AND PED.SEASONAL_VALUE IS NOT NULL AND &#xD;&#xA;&#x9;(PED.[START_DATE] &lt; @MISSED_CONTRIBUTION_CHECK_END_DATE) --AND @MISSED_CONTRIBUTION_CHECK_START_DATE BETWEEN DATEADD(month, DATEDIFF(month, 0, PED.[START_DATE]), 0) AND ISNULL(PED.[END_DATE], '99991231')&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;UNION ALL &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;SELECT M.[START_DATE], M.[END_DATE], DATEADD(MONTH, M.I+1, M.[START_DATE]) AS EACH_MONTH_DATE, M.PERSON_ID, M.ORG_ID, M.SEASONAL_VALUE, M.I + 1 AS I, M.PERSON_ACCOUNT_ID,M.PLAN_NAME FROM MISSEDCONTRIB M &#xD;&#xA;&#x9;WHERE (DATEADD(MONTH, M.I+1, M.[START_DATE]) &lt; ISNULL(M.[END_DATE], @MISSED_CONTRIBUTION_CHECK_END_DATE)) &#xD;&#xA;)&#xD;&#xA;SELECT M.PERSON_ID, M.ORG_ID, M.[START_DATE] AS EMP_DTL_START_DATE, M.SEASONAL_VALUE, CONVERT( BIGINT, SGS_CODE_VALUE.DATA2) AS MAX_Missing_Months_To_Show_On_Report,&#xD;&#xA;      M.EACH_MONTH_DATE, SUM(ISNULL(CASE WHEN PAYRLL_DETAIL.RECORD_TYPE_VALUE IN ('BONS', 'NBON') &#xD;&#xA;&#x9;  --AND ISNULL(PAR.SALARY_AMOUNT,0) != 0 THEN 0 ELSE PAR.SALARY_AMOUNT END, 0)) AS TOT_SALARY,&#xD;&#xA;&#x9;  and isnull(par.PENSION_SERVICE_CREDIT,0) != 0 then 0 else par.PENSION_SERVICE_CREDIT end, 0)) as tot_salary,&#xD;&#xA;&#x9;  M.PERSON_ACCOUNT_ID,M.PLAN_NAME&#xD;&#xA;INTO #TEMP1&#xD;&#xA;FROM MISSEDCONTRIB M&#xD;&#xA;LEFT JOIN SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION PAR WITH(NOLOCK) &#xD;&#xA;--ON ISNULL(PAR.SALARY_AMOUNT, 0) != 0 &#xD;&#xA;&#xD;&#xA;on isnull(par.PENSION_SERVICE_CREDIT, 0) != 0 and par.SUBSYSTEM_VALUE &lt;&gt; 'PURC'&#xD;&#xA;AND M.PERSON_ACCOUNT_ID = PAR.PERSON_ACCOUNT_ID&#xD;&#xA;AND MONTH(M.EACH_MONTH_DATE) = MONTH(PAR.EFFECTIVE_DATE) AND YEAR(M.EACH_MONTH_DATE) = YEAR(PAR.EFFECTIVE_DATE)&#xD;&#xA;LEFT JOIN SGS_CODE_VALUE WITH(NOLOCK) ON M.seasonal_value = SGS_Code_Value.CODE_VALUE AND SGS_CODE_VALUE.CODE_ID = 312&#xD;&#xA;LEFT JOIN SGT_EMPLOYER_PAYROLL_DETAIL PAYRLL_DETAIL WITH(NOLOCK) ON PAR.SUBSYSTEM_REF_ID = PAYRLL_DETAIL.EMPLOYER_PAYROLL_DETAIL_ID AND PAYRLL_DETAIL.RECORD_TYPE_VALUE IN ('BONS', 'NBON')&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT PA WITH(NOLOCK) ON M.PERSON_ACCOUNT_ID = PA.PERSON_ACCOUNT_ID AND PA.PLAN_PARTICIPATION_STATUS_VALUE NOT IN ('TRDC','CAN1','TRTF','TICR','WTN1','TRDB','RTRD')&#xD;&#xA;WHERE CONVERT(DATETIME,M.EACH_MONTH_DATE,101) &gt;= @MISSED_CONTRIBUTION_CHECK_START_DATE_SEASONAL AND M.EACH_MONTH_DATE &lt; @MISSED_CONTRIBUTION_CHECK_END_DATE&#xD;&#xA;GROUP BY  M.PERSON_ID, M.ORG_ID, M.SEASONAL_VALUE, M.EACH_MONTH_DATE, M.[START_DATE], M.PERSON_ACCOUNT_ID,M.PLAN_NAME, SGS_CODE_VALUE.DATA2&#xD;&#xA;HAVING SUM(ISNULL(CASE WHEN PAYRLL_DETAIL.RECORD_TYPE_VALUE IN ('BONS', 'NBON') &#xD;&#xA;--AND ISNULL(PAR.SALARY_AMOUNT,0) != 0 THEN 0 ELSE PAR.SALARY_AMOUNT END, 0)) = 0   --Was &gt; but should be = 0&#xD;&#xA;and isnull(par.PENSION_SERVICE_CREDIT,0) != 0 then 0 else par.PENSION_SERVICE_CREDIT end, 0)) = 0 &#xD;&#xA;order by M.ORG_ID,  M.PERSON_ID, M.EACH_MONTH_DATE&#xD;&#xA;OPTION (MAXRECURSION 0)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;select *, row_number() over (partition by person_id,org_id order by person_id, each_month_Date) AS missing_Record_Row_number, SUM(1)  OVER (PARTITION BY person_id,org_id) AS total_Missing_Record_In_Group into #TEMP2 from #TEMP1 &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CREATE NONCLUSTERED INDEX temp2_person_id&#xD;&#xA;ON #TEMP2 ([PERSON_ID],[ORG_ID])&#xD;&#xA;INCLUDE ([EACH_MONTH_DATE],[EMP_DTL_START_DATE],[SEASONAL_VALUE],[MAX_Missing_Months_To_Show_On_Report],[tot_salary],[PERSON_ACCOUNT_ID],[PLAN_NAME],[missing_Record_Row_number],[total_Missing_Record_In_Group])&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;select * INTO #TEMP3 from #TEMP2 Where missing_Record_Row_number = Total_Missing_Record_In_Group AND missing_Record_Row_number &lt;= MAX_Missing_Months_To_Show_On_Report &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CREATE NONCLUSTERED INDEX temp3_person_id&#xD;&#xA;ON #TEMP3 ([PERSON_ID],[ORG_ID],[missing_Record_Row_number])&#xD;&#xA;INCLUDE ([EACH_MONTH_DATE])&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;select #TEMP2.* &#xD;&#xA;INTO #TEMP&#xD;&#xA;from #TEMP2 &#xD;&#xA;INNER JOIN #TEMP3 ON #TEMP3.PERSON_ID = #TEMP2.PERSON_ID AND #TEMP3.ORG_ID = #TEMP2.ORG_ID &#xD;&#xA;ORDER BY #TEMP2.ORG_ID,#TEMP2.Person_id&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CREATE NONCLUSTERED INDEX temp_PERSON_ID_ORG_ID&#xD;&#xA;ON #TEMP ([PERSON_ID],[ORG_ID])&#xD;&#xA;INCLUDE ([EACH_MONTH_DATE],[missing_Record_Row_number])&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT  T1.PERSON_ID AS EXCLUDE_PERSON_ID,T1.ORG_ID AS EXCLUDE_ORG_ID INTO #TEMP4&#xD;&#xA;FROM #TEMP T1&#xD;&#xA;INNER JOIN #TEMP T2 ON T1.missing_Record_Row_number = T2.missing_Record_Row_number - 1 AND T1.PERSON_ID = T2.PERSON_ID AND T1.ORG_ID = T2.ORG_ID &#xD;&#xA;WHERE (MONTH(T2.EACH_MONTH_DATE) - MONTH(T1.EACH_MONTH_DATE)) != 1&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CREATE NONCLUSTERED INDEX temp4_EXCLUDE_PERSON_ID_EXCLUDE_ORG_ID&#xD;&#xA;ON #TEMP4 ([EXCLUDE_PERSON_ID],[EXCLUDE_ORG_ID])&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;select * INTO #TEMP5 from #TEMP2 T2 LEFT JOIN #TEMP4 T4 on T2.PERSON_ID = T4.EXCLUDE_PERSON_ID AND T2.ORG_ID = T4.EXCLUDE_ORG_ID;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;--NON SEASONAL LOGIC&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;WITH NONSEASONALMISSEDCONTRIB AS &#xD;&#xA;(&#xD;&#xA;&#x9;SELECT   PED.[START_DATE], PED.[END_DATE], PED.[START_DATE] as EACH_MONTH_DATE, PE.PERSON_ID, PE.ORG_ID, PED.SEASONAL_VALUE, 0 AS I, PAED.PERSON_ACCOUNT_ID,P.PLAN_NAME FROM SGT_PERSON_EMPLOYMENT_DETAIL PED WITH(NOLOCK)&#xD;&#xA;&#x9;JOIN SGT_PERSON_EMPLOYMENT PE WITH(NOLOCK) ON PED.PERSON_EMPLOYMENT_ID = PE.PERSON_EMPLOYMENT_ID&#xD;&#xA;&#x9;JOIN SGT_PERSON_ACCOUNT_EMPLOYMENT_DETAIL PAED WITH(NOLOCK) ON PAED.PERSON_EMPLOYMENT_DTL_ID = PED.PERSON_EMPLOYMENT_DTL_ID AND PAED.PERSON_ACCOUNT_ID IS NOT NULL AND PAED.ELECTION_VALUE = 'ENLD'&#xD;&#xA;&#x9;JOIN SGT_PLAN P WITH(NOLOCK) ON P.PLAN_ID = PAED.PLAN_ID AND P.BENEFIT_TYPE_VALUE = 'RETR'&#xD;&#xA;&#x9;WHERE PED.STATUS_VALUE = 'CONT' AND PED.SEASONAL_VALUE IS NULL AND &#xD;&#xA;&#x9;(PED.[START_DATE] &lt; @MISSED_CONTRIBUTION_CHECK_END_DATE) --AND @MISSED_CONTRIBUTION_CHECK_START_DATE BETWEEN DATEADD(month, DATEDIFF(month, 0, PED.[START_DATE]), 0) AND ISNULL(PED.[END_DATE], '99991231')&#xD;&#xA;&#x9;&#xD;&#xA;&#xD;&#xA;&#x9;UNION ALL&#xD;&#xA;&#xD;&#xA;&#x9;SELECT NSM.[START_DATE], NSM.[END_DATE], DATEADD(MONTH, NSM.I+1, NSM.[START_DATE]) AS EACH_MONTH_DATE, NSM.PERSON_ID, NSM.ORG_ID, NSM.SEASONAL_VALUE, NSM.I + 1 AS I, NSM.PERSON_ACCOUNT_ID,NSM.PLAN_NAME FROM NONSEASONALMISSEDCONTRIB NSM &#xD;&#xA;&#x9;WHERE (DATEADD(MONTH, NSM.I+1, NSM.[START_DATE]) &lt; ISNULL(NSM.[END_DATE], @MISSED_CONTRIBUTION_CHECK_END_DATE)) &#xD;&#xA;)&#xD;&#xA;SELECT NSM.PERSON_ID, NSM.ORG_ID, NSM.[START_DATE] AS EMP_DTL_START_DATE, NSM.SEASONAL_VALUE,&#xD;&#xA;      NSM.EACH_MONTH_DATE, SUM(ISNULL(CASE WHEN PAYRLL_DETAIL.RECORD_TYPE_VALUE IN ('BONS', 'NBON') &#xD;&#xA;&#x9;  --AND ISNULL(PAR.SALARY_AMOUNT,0) != 0 THEN 0 ELSE PAR.SALARY_AMOUNT END, 0)) AS TOT_SALARY,&#xD;&#xA;&#x9;  and isnull(par.PENSION_SERVICE_CREDIT,0) != 0 then 0 else par.PENSION_SERVICE_CREDIT end, 0)) AS TOT_SALARY,&#xD;&#xA;&#x9;  NSM.PERSON_ACCOUNT_ID,NSM.PLAN_NAME&#xD;&#xA;INTO #NONSEASONAL_TEMP&#xD;&#xA;FROM NONSEASONALMISSEDCONTRIB NSM&#xD;&#xA;LEFT JOIN SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION PAR WITH(NOLOCK) &#xD;&#xA;--ON ISNULL(PAR.SALARY_AMOUNT, 0) != 0 &#xD;&#xA;on isnull(par.PENSION_SERVICE_CREDIT, 0) != 0 and par.SUBSYSTEM_VALUE &lt;&gt; 'PURC'&#xD;&#xA;AND NSM.PERSON_ACCOUNT_ID = PAR.PERSON_ACCOUNT_ID&#xD;&#xA;AND MONTH(NSM.EACH_MONTH_DATE) = MONTH(PAR.EFFECTIVE_DATE) AND YEAR(NSM.EACH_MONTH_DATE) = YEAR(PAR.EFFECTIVE_DATE)&#xD;&#xA;&#xD;&#xA;LEFT JOIN SGT_EMPLOYER_PAYROLL_DETAIL PAYRLL_DETAIL WITH(NOLOCK) ON PAR.SUBSYSTEM_REF_ID = PAYRLL_DETAIL.EMPLOYER_PAYROLL_DETAIL_ID AND PAYRLL_DETAIL.RECORD_TYPE_VALUE IN ('BONS', 'NBON')&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT PA WITH(NOLOCK) ON NSM.PERSON_ACCOUNT_ID = PA.PERSON_ACCOUNT_ID AND PA.PLAN_PARTICIPATION_STATUS_VALUE NOT IN ('TRDC','CAN1','TRTF','TICR','WTN1','TRDB','RTRD')&#xD;&#xA;WHERE  CONVERT(DATETIME,NSM.EACH_MONTH_DATE,101) &gt;= @MISSED_CONTRIBUTION_CHECK_START_DATE AND NSM.EACH_MONTH_DATE &lt; @MISSED_CONTRIBUTION_CHECK_END_DATE &#xD;&#xA;GROUP BY  NSM.PERSON_ID, NSM.ORG_ID, NSM.SEASONAL_VALUE, NSM.EACH_MONTH_DATE, NSM.[START_DATE], NSM.PERSON_ACCOUNT_ID,NSM.PLAN_NAME&#xD;&#xA;HAVING SUM(ISNULL(CASE WHEN PAYRLL_DETAIL.RECORD_TYPE_VALUE IN ('BONS', 'NBON') &#xD;&#xA;--AND ISNULL(PAR.SALARY_AMOUNT,0) != 0 THEN 0 ELSE PAR.SALARY_AMOUNT END, 0)) = 0   --Was &gt; but should be = 0&#xD;&#xA;and isnull(par.PENSION_SERVICE_CREDIT,0) != 0 then 0 else par.PENSION_SERVICE_CREDIT end, 0)) = 0 &#xD;&#xA;order by NSM.ORG_ID,  NSM.PERSON_ID, NSM.EACH_MONTH_DATE&#xD;&#xA;OPTION (MAXRECURSION 0)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT ORG.ORG_NAME,ORG.ORG_CODE,PERSON.FIRST_NAME,PERSON.MIDDLE_NAME,PERSON.LAST_NAME,#NONSEASONAL_TEMP.PLAN_NAME,#NONSEASONAL_TEMP.EACH_MONTH_DATE AS MISSING_MONTH,&#xD;&#xA;   #NONSEASONAL_TEMP.PERSON_ID AS PERSLink_ID FROM #NONSEASONAL_TEMP &#xD;&#xA;INNER JOIN sgt_organization ORG WITH(NOLOCK) ON #NONSEASONAL_TEMP.ORG_ID = ORG.ORG_ID&#xD;&#xA;INNER JOIN SGT_PERSON PERSON WITH(NOLOCK) ON #NONSEASONAL_TEMP.PERSON_ID = PERSON.PERSON_ID&#xD;&#xA;&#xD;&#xA;UNION ALL &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT org.ORG_NAME,org.ORG_CODE,PERSON.FIRST_NAME,PERSON.MIDDLE_NAME,PERSON.LAST_NAME,T5.PLAN_NAME,T5.EACH_MONTH_DATE AS MISSING_MONTH,T5.PERSON_ID AS PERSLink_ID from #TEMP5 T5 &#xD;&#xA;INNER JOIN sgt_organization org WITH(NOLOCK) on T5.ORG_ID = org.ORG_ID&#xD;&#xA;INNER JOIN SGT_PERSON PERSON WITH(NOLOCK) ON T5.PERSON_ID = PERSON.PERSON_ID &#xD;&#xA;where T5.EXCLUDE_PERSON_ID IS NULL AND T5.EXCLUDE_ORG_ID IS NULL &#xD;&#xA;AND T5.MISSING_RECORD_ROW_NUMBER &gt;= T5.MAX_MISSING_MONTHS_TO_SHOW_ON_REPORT&#xD;&#xA;ORDER BY ORG.ORG_CODE,PERSON.LAST_NAME,PERSON.FIRST_NAME,MISSING_MONTH&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#TEMP', 'U') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#TEMP1') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP1;&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#TEMP2') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP2;&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#TEMP3') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP3;&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#TEMP4') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP4;&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#TEMP5') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP5;&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#NONSEASONAL_TEMP') IS NOT NULL&#xD;&#xA;DROP TABLE #NONSEASONAL_TEMP">
      <parameters />
    </query>
    <query ID="LoadMissingRetirementEnrollment" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="&#xD;&#xA;SELECT SGT_PERSON_EMPLOYMENT.PERSON_ID,SGT_PERSON_EMPLOYMENT.ORG_ID,SGT_PERSON.FIRST_NAME,SGT_PERSON.LAST_NAME,RIGHT(SGT_PERSON.SSN,4) AS SSN,&#xD;&#xA;       SGT_PERSON_EMPLOYMENT.START_DATE AS DATE_OF_HIRE,JOBCLASS.DESCRIPTION AS JOBCLASS,EMPTYPE.DESCRIPTION AS EMP_TYPE,PARTICIPATION.DESCRIPTION AS PARTICIPATION_STATUS,&#xD;&#xA;&#x9;   SGT_PERSON_EMPLOYMENT_DETAIL.END_DATE,SGT_PLAN.BENEFIT_TYPE_VALUE,SGT_PERSON_ACCOUNT_EMPLOYMENT_DETAIL.ELECTION_VALUE&#xD;&#xA;&#xD;&#xA;FROM   SGT_PERSON_EMPLOYMENT_DETAIL&#xD;&#xA;       INNER JOIN SGT_PERSON_EMPLOYMENT ON  SGT_PERSON_EMPLOYMENT_DETAIL.PERSON_EMPLOYMENT_ID = SGT_PERSON_EMPLOYMENT.PERSON_EMPLOYMENT_ID&#xD;&#xA;&#x9;   INNER JOIN SGT_PERSON_ACCOUNT_EMPLOYMENT_DETAIL ON SGT_PERSON_EMPLOYMENT_DETAIL.PERSON_EMPLOYMENT_DTL_ID = SGT_PERSON_ACCOUNT_EMPLOYMENT_DETAIL.PERSON_EMPLOYMENT_DTL_ID&#xD;&#xA;&#x9;   INNER JOIN SGT_PERSON ON  SGT_PERSON_EMPLOYMENT.PERSON_ID =SGT_PERSON.PERSON_ID&#xD;&#xA;&#x9;   INNER JOIN SGT_PLAN ON SGT_PERSON_ACCOUNT_EMPLOYMENT_DETAIL.PLAN_ID = SGT_PLAN.PLAN_ID&#xD;&#xA;&#x9;   INNER JOIN SGS_CODE_VALUE JOBCLASS ON JOBCLASS.CODE_ID = SGT_PERSON_EMPLOYMENT_DETAIL.JOB_CLASS_ID and JOBCLASS.CODE_VALUE=SGT_PERSON_EMPLOYMENT_DETAIL.JOB_CLASS_VALUE&#xD;&#xA;&#x9;   INNER JOIN SGS_CODE_VALUE EMPTYPE ON EMPTYPE.CODE_ID = SGT_PERSON_EMPLOYMENT_DETAIL.TYPE_ID and EMPTYPE.CODE_VALUE=SGT_PERSON_EMPLOYMENT_DETAIL.TYPE_VALUE&#xD;&#xA;&#x9;   INNER JOIN SGS_CODE_VALUE PARTICIPATION ON PARTICIPATION.CODE_ID = SGT_PERSON_EMPLOYMENT_DETAIL.STATUS_ID and PARTICIPATION.CODE_VALUE=SGT_PERSON_EMPLOYMENT_DETAIL.STATUS_VALUE&#xD;&#xA;&#xD;&#xA;WHERE  (SGT_PERSON_EMPLOYMENT_DETAIL.STATUS_VALUE = 'CONT') &#xD;&#xA;&#x9;   AND (SGT_PERSON_EMPLOYMENT_DETAIL.END_DATE IS NULL) &#xD;&#xA;&#x9;   AND (SGT_PLAN.BENEFIT_TYPE_VALUE = 'RETR') &#xD;&#xA;&#x9;   AND (SGT_PERSON_ACCOUNT_EMPLOYMENT_DETAIL.ELECTION_VALUE IS NULL)&#xD;&#xA;&#x9;   AND (SGT_PERSON_EMPLOYMENT.ORG_ID = @ORG_ID)&#xD;&#xA;&#x9;   AND SGT_PERSON_EMPLOYMENT.PERSON_ID NOT IN (&#xD;&#xA;&#xD;&#xA;&#x9;   SELECT   SGT_PERSON_EMPLOYMENT.PERSON_ID&#xD;&#xA;&#x9;   FROM    SGT_PERSON_EMPLOYMENT_DETAIL INNER JOIN&#xD;&#xA;               SGT_PERSON_EMPLOYMENT ON &#xD;&#xA;               SGT_PERSON_EMPLOYMENT_DETAIL.PERSON_EMPLOYMENT_ID = SGT_PERSON_EMPLOYMENT.PERSON_EMPLOYMENT_ID INNER JOIN&#xD;&#xA;               SGT_PERSON_ACCOUNT_EMPLOYMENT_DETAIL ON &#xD;&#xA;               SGT_PERSON_EMPLOYMENT_DETAIL.PERSON_EMPLOYMENT_DTL_ID = SGT_PERSON_ACCOUNT_EMPLOYMENT_DETAIL.PERSON_EMPLOYMENT_DTL_ID INNER JOIN&#xD;&#xA;               SGT_PLAN ON SGT_PERSON_ACCOUNT_EMPLOYMENT_DETAIL.PLAN_ID = SGT_PLAN.PLAN_ID&#xD;&#xA;       WHERE   (SGT_PERSON_EMPLOYMENT_DETAIL.STATUS_VALUE = 'CONT') &#xD;&#xA;&#x9;           AND (SGT_PERSON_EMPLOYMENT_DETAIL.END_DATE IS NULL) &#xD;&#xA;&#x9;&#x9;&#x9;   AND (SGT_PLAN.BENEFIT_TYPE_VALUE = 'RETR') &#xD;&#xA;&#x9;&#x9;&#x9;   AND (SGT_PERSON_ACCOUNT_EMPLOYMENT_DETAIL.ELECTION_VALUE IN ('ENLD', 'WAVD'))&#xD;&#xA;&#x9;&#x9;&#x9;   AND (SGT_PERSON_EMPLOYMENT.ORG_ID = @ORG_ID)&#xD;&#xA;&#xD;&#xA;&#x9;   )&#xD;&#xA;GROUP BY SGT_PERSON_EMPLOYMENT.PERSON_ID,SGT_PERSON_EMPLOYMENT.ORG_ID,SGT_PERSON_EMPLOYMENT_DETAIL.END_DATE,SGT_PERSON.SSN,&#xD;&#xA;         SGT_PERSON_EMPLOYMENT.START_DATE,SGT_PLAN.BENEFIT_TYPE_VALUE,SGT_PERSON_ACCOUNT_EMPLOYMENT_DETAIL.ELECTION_VALUE,&#xD;&#xA;&#x9;&#x9; JOBCLASS.DESCRIPTION,EMPTYPE.DESCRIPTION,PARTICIPATION.DESCRIPTION,SGT_PERSON.FIRST_NAME,SGT_PERSON.LAST_NAME &#xD;&#xA; ORDER BY SGT_PERSON.LAST_NAME,SGT_PERSON.FIRST_NAME ASC">
      <parameters>
        <parameter ID="@ORG_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadLifeEnrollEmployees" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql=" &#xD;&#xA;&#xD;&#xA;DECLARE @EFFECTIVEDATE DATETIME&#xD;&#xA;&#xD;&#xA;SET @EFFECTIVEDATE = GETDATE()&#xD;&#xA;SET @EFFECTIVEDATE = '2014-03-01 00:00:00.000'&#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA; PROVIDER_REPORT_DATA_INSURANCE_COMP_ID,&#xD;&#xA; SUBSYSTEM_VALUE,&#xD;&#xA; A.RECORD_TYPE_VALUE,&#xD;&#xA; SUBSYSTEM_REF_ID,&#xD;&#xA; A.PERSON_ID,A.PLAN_ID,&#xD;&#xA; A.PROVIDER_ORG_ID,&#xD;&#xA; EFFECTIVE_DATE,A.PREMIUM_AMOUNT,&#xD;&#xA; C.PERSON_ACCOUNT_ID,&#xD;&#xA; BASIC_PREMIUM * case when b.RECORD_TYPE_VALUE = '-ADJ' then -1 else 1 end as BASIC_PREMIUM,&#xD;&#xA; SUPPLEMENTAL_PREMIUM * case when b.RECORD_TYPE_VALUE = '-ADJ' then -1 else 1 end as SUPPLEMENTAL_PREMIUM ,          &#xD;&#xA; DEPENDENT_PREMIUM * case when b.RECORD_TYPE_VALUE = '-ADJ' then -1 else 1 end  as DEPENDENT_PREMIUM,                       &#xD;&#xA; SPOUSE_PREMIUM * case when b.RECORD_TYPE_VALUE = '-ADJ' then -1 else 1 end  as SPOUSE_PREMIUM ,&#xD;&#xA; LIFE_BASIC_COVERAGE_AMOUNT * case when b.RECORD_TYPE_VALUE = '-ADJ' then -1 else 1 end as LIFE_BASIC_COVERAGE_AMOUNT,&#xD;&#xA; LIFE_SUPP_COVERAGE_AMOUNT * case when b.RECORD_TYPE_VALUE = '-ADJ' then -1 else 1 end as LIFE_SUPP_COVERAGE_AMOUNT,&#xD;&#xA; LIFE_SPOUSE_SUPP_COVERAGE_AMOUNT * case when b.RECORD_TYPE_VALUE = '-ADJ' then -1 else 1 end as LIFE_SPOUSE_SUPP_COVERAGE_AMOUNT ,&#xD;&#xA; LIFE_DEP_SUPP_COVERAGE_AMOUNT * case when b.RECORD_TYPE_VALUE = '-ADJ' then -1 else 1 end as LIFE_DEP_SUPP_COVERAGE_AMOUNT,&#xD;&#xA; AD_AND_D_BASIC_PREMIUM_RATE * case when b.RECORD_TYPE_VALUE = '-ADJ' then -1 else 1 end as AD_AND_D_BASIC_PREMIUM_RATE,&#xD;&#xA; AD_AND_D_SUPPLEMENTAL_PREMIUM_RATE * case when b.RECORD_TYPE_VALUE = '-ADJ' then -1 else 1 end as AD_AND_D_SUPPLEMENTAL_PREMIUM_RATE&#xD;&#xA;INTO #TEMP1&#xD;&#xA;FROM SGT_PROVIDER_REPORT_DATA_INSURANCE A &#xD;&#xA;INNER JOIN SGT_EMPLOYER_PAYROLL_DETAIL B&#xD;&#xA; ON A.SUBSYSTEM_REF_ID = B.EMPLOYER_PAYROLL_DETAIL_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT C &#xD;&#xA; ON A.PERSON_ID = C.PERSON_ID AND A.PLAN_ID = C.PLAN_ID&#xD;&#xA;WHERE &#xD;&#xA;SUBSYSTEM_VALUE = 'PAYR' AND A.PLAN_ID = 13&#xD;&#xA;&#xD;&#xA;UNION ALL&#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA; PROVIDER_REPORT_DATA_INSURANCE_COMP_ID,&#xD;&#xA; SUBSYSTEM_VALUE,&#xD;&#xA; A.RECORD_TYPE_VALUE,&#xD;&#xA; SUBSYSTEM_REF_ID,&#xD;&#xA; A.PERSON_ID,A.PLAN_ID,&#xD;&#xA; A.PROVIDER_ORG_ID,&#xD;&#xA; EFFECTIVE_DATE,A.PREMIUM_AMOUNT,&#xD;&#xA; C.PERSON_ACCOUNT_ID,&#xD;&#xA; LIFE_BASIC_PREMIUM_AMOUNT AS BASIC_PREMIUM,&#xD;&#xA; LIFE_SUPP_PREMIUM_AMOUNT  AS  SUPPLEMENTAL_PREMIUM,             &#xD;&#xA; LIFE_DEP_SUPP_PREMIUM_AMOUNT AS DEPENDENT_PREMIUM ,&#xD;&#xA; LIFE_SPOUSE_SUPP_PREMIUM_AMOUNT AS SPOUSE_PREMIUM,   &#xD;&#xA; LIFE_BASIC_COVERAGE_AMOUNT,&#xD;&#xA; LIFE_SUPP_COVERAGE_AMOUNT,&#xD;&#xA; LIFE_SPOUSE_SUPP_COVERAGE_AMOUNT,&#xD;&#xA; LIFE_DEP_SUPP_COVERAGE_AMOUNT,&#xD;&#xA; AD_AND_D_BASIC_PREMIUM_RATE,&#xD;&#xA; AD_AND_D_SUPPLEMENTAL_PREMIUM_RATE&#xD;&#xA;FROM SGT_PROVIDER_REPORT_DATA_INSURANCE A &#xD;&#xA;INNER JOIN SGT_IBS_DETAIL B&#xD;&#xA; ON A.SUBSYSTEM_REF_ID = B.IBS_DETAIL_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT C &#xD;&#xA; ON A.PERSON_ID = C.PERSON_ID AND A.PLAN_ID = C.PLAN_ID&#xD;&#xA;WHERE &#xD;&#xA;SUBSYSTEM_VALUE = 'IBSD' AND A.PLAN_ID = 13 AND ISNULL(B.DETAIL_STATUS_VALUE, '') &lt;&gt; 'IGNR'&#xD;&#xA; &#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA; H.PERSON_ACCOUNT_ID,&#xD;&#xA; H.PERSON_ID,&#xD;&#xA; E.LAST_NAME,&#xD;&#xA; E.FIRST_NAME,&#xD;&#xA; E.SSN,&#xD;&#xA; H.RECORD_TYPE_VALUE,&#xD;&#xA; C.LIFE_INSURANCE_TYPE_VALUE,&#xD;&#xA; CAST('BASC' as  varchar(4)) AS LEVEL_OF_COVERAGE_VALUE,&#xD;&#xA; H.LIFE_BASIC_COVERAGE_AMOUNT AS COVERAGE_AMOUNT ,&#xD;&#xA; CAST(NULL AS VARCHAR(4)) AS SUPPLEMENTAL_RATE_CRITERIA_VALUE,&#xD;&#xA; DATEDIFF(YY,E.DATE_OF_BIRTH,H.EFFECTIVE_DATE) AS AGE,&#xD;&#xA; CAST(0 AS INT)  AS MIN_AGE_YRS, CAST(0 AS INT) AS MAX_AGE_YRS,&#xD;&#xA; H.PREMIUM_AMOUNT,H.EFFECTIVE_DATE,&#xD;&#xA; CAST(NULL AS VARCHAR(100))  AS COVERAGE_DESCRIPTION,&#xD;&#xA; CAST(NULL AS VARCHAR(100))  AS RATING_CRITERIA,&#xD;&#xA; CAST(BASIC_PREMIUM as decimal(13,4)) as REP_PREMIUM_AMOUNT,&#xD;&#xA; cast(H.AD_AND_D_BASIC_PREMIUM_RATE as decimal(13,4))  as Rate,&#xD;&#xA; BASIC_PREMIUM,&#xD;&#xA; SUPPLEMENTAL_PREMIUM,          &#xD;&#xA; DEPENDENT_PREMIUM,                       &#xD;&#xA; SPOUSE_PREMIUM,&#xD;&#xA; H.AD_AND_D_BASIC_PREMIUM_RATE,&#xD;&#xA; H.AD_AND_D_SUPPLEMENTAL_PREMIUM_RATE,&#xD;&#xA; cast(0 as decimal(13,4)) as SUPPLEMENTAL_PREMIUM_RATE_AMT&#xD;&#xA;INTO #TEMPFinal &#xD;&#xA;FROM #Temp1 h&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT_LIFE C &#xD;&#xA; ON C.PERSON_ACCOUNT_ID = H.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PERSON E &#xD;&#xA; ON E.PERSON_ID = H.PERSON_ID&#xD;&#xA;AND ISNULL(BASIC_PREMIUM,0) &lt;&gt; 0 &#xD;&#xA;&#xD;&#xA;UNION ALL &#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA; H.PERSON_ACCOUNT_ID,&#xD;&#xA; H.PERSON_ID,&#xD;&#xA; E.LAST_NAME,&#xD;&#xA; E.FIRST_NAME,&#xD;&#xA; E.SSN,&#xD;&#xA; H.RECORD_TYPE_VALUE,&#xD;&#xA; C.LIFE_INSURANCE_TYPE_VALUE,&#xD;&#xA; CAST('SPML' as  varchar(4)) AS LEVEL_OF_COVERAGE_VALUE,&#xD;&#xA; H.LIFE_SUPP_COVERAGE_AMOUNT AS COVERAGE_AMOUNT ,&#xD;&#xA; G.SUPPLEMENTAL_RATE_CRITERIA_VALUE,&#xD;&#xA; DATEDIFF(YY,E.DATE_OF_BIRTH,H.EFFECTIVE_DATE) AS AGE,&#xD;&#xA; MIN_AGE_YRS, MAX_AGE_YRS,&#xD;&#xA; H.PREMIUM_AMOUNT,H.EFFECTIVE_DATE,&#xD;&#xA; CAST(NULL AS VARCHAR(100))  AS COVERAGE_DESCRIPTION,&#xD;&#xA; CAST(NULL AS VARCHAR(100))  AS RATING_CRITERIA,&#xD;&#xA; CAST(SUPPLEMENTAL_PREMIUM as decimal(13,4)) as REP_PREMIUM_AMOUNT,&#xD;&#xA; Cast(H.AD_AND_D_SUPPLEMENTAL_PREMIUM_RATE as decimal(13,4)) as Rate,&#xD;&#xA; BASIC_PREMIUM,&#xD;&#xA; SUPPLEMENTAL_PREMIUM,          &#xD;&#xA; DEPENDENT_PREMIUM,                       &#xD;&#xA; SPOUSE_PREMIUM,&#xD;&#xA; H.AD_AND_D_BASIC_PREMIUM_RATE,&#xD;&#xA; H.AD_AND_D_SUPPLEMENTAL_PREMIUM_RATE,&#xD;&#xA; SUPPLEMENTAL_PREMIUM_RATE_AMT&#xD;&#xA;FROM #Temp1 h&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT_LIFE C &#xD;&#xA; ON C.PERSON_ACCOUNT_ID = H.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PERSON E &#xD;&#xA; ON E.PERSON_ID = H.PERSON_ID&#xD;&#xA;INNER JOIN SGT_ORG_PLAN_LIFE_RATE G &#xD;&#xA; ON G.LIFE_INSURANCE_TYPE_VALUE = C.LIFE_INSURANCE_TYPE_VALUE &#xD;&#xA;  AND G.LEVEL_OF_COVERAGE_VALUE = 'SPML'&#xD;&#xA;  AND ISNULL(G.SUPPLEMENTAL_COVERAGE_AMT,0)  = CASE WHEN G.LEVEL_OF_COVERAGE_VALUE = 'DSPL' &#xD;&#xA;    THEN abs(H.LIFE_DEP_SUPP_COVERAGE_AMOUNT)&#xD;&#xA;    ELSE ISNULL(G.SUPPLEMENTAL_COVERAGE_AMT,0)  END&#xD;&#xA;WHERE CASE WHEN MONTH(E.DATE_OF_BIRTH) &lt; MONTH(CAST(CAST(YEAR(H.EFFECTIVE_DATE) -1 AS VARCHAR(4))+'1231' AS DATETIME) )&#xD;&#xA;     OR (&#xD;&#xA;       MONTH(E.DATE_OF_BIRTH) =  MONTH(CAST(CAST(YEAR(H.EFFECTIVE_DATE) -1 AS VARCHAR(4))+'1231' AS DATETIME) )&#xD;&#xA;      AND DAY(E.DATE_OF_BIRTH) &lt;=  DAY(CAST(CAST(YEAR(H.EFFECTIVE_DATE) -1 AS VARCHAR(4))+'1231' AS DATETIME) )&#xD;&#xA;      )&#xD;&#xA;  THEN  DATEDIFF(YY,E.DATE_OF_BIRTH,CAST(CAST(YEAR(H.EFFECTIVE_DATE) -1 AS VARCHAR(4))+'1231' AS DATETIME) )  &#xD;&#xA;  ELSE DATEDIFF(YY,E.DATE_OF_BIRTH,CAST(CAST(YEAR(H.EFFECTIVE_DATE) -1 AS VARCHAR(4))+'1231' AS DATETIME) ) -1 END&#xD;&#xA;BETWEEN G.MIN_AGE_YRS AND G.MAX_AGE_YRS&#xD;&#xA;AND G.EFFECTIVE_DATE = (SELECT TOP 1 EFFECTIVE_DATE  FROM SGT_ORG_PLAN_LIFE_RATE RATE&#xD;&#xA;      WHERE EFFECTIVE_DATE &lt;= H.EFFECTIVE_DATE &#xD;&#xA;       AND RATE.LIFE_INSURANCE_TYPE_VALUE = G.LIFE_INSURANCE_TYPE_VALUE &#xD;&#xA;       AND RATE.LEVEL_OF_COVERAGE_VALUE = G.LEVEL_OF_COVERAGE_VALUE&#xD;&#xA;      ORDER BY EFFECTIVE_DATE DESC)&#xD;&#xA;AND ISNULL(SUPPLEMENTAL_PREMIUM,0) &lt;&gt; 0 &#xD;&#xA;&#xD;&#xA;UNION ALL &#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA; H.PERSON_ACCOUNT_ID,&#xD;&#xA; H.PERSON_ID,&#xD;&#xA; E.LAST_NAME,&#xD;&#xA; E.FIRST_NAME,&#xD;&#xA; E.SSN,&#xD;&#xA; H.RECORD_TYPE_VALUE,&#xD;&#xA; C.LIFE_INSURANCE_TYPE_VALUE,&#xD;&#xA; CAST('DSPL' as  varchar(4)) AS LEVEL_OF_COVERAGE_VALUE,&#xD;&#xA; H.LIFE_DEP_SUPP_COVERAGE_AMOUNT AS COVERAGE_AMOUNT ,&#xD;&#xA; G.SUPPLEMENTAL_RATE_CRITERIA_VALUE,&#xD;&#xA; DATEDIFF(YY,E.DATE_OF_BIRTH,H.EFFECTIVE_DATE) AS AGE,&#xD;&#xA; MIN_AGE_YRS, MAX_AGE_YRS,&#xD;&#xA; H.PREMIUM_AMOUNT,H.EFFECTIVE_DATE,&#xD;&#xA; CAST(NULL AS VARCHAR(100))  AS COVERAGE_DESCRIPTION,&#xD;&#xA; CAST(NULL AS VARCHAR(100))  AS RATING_CRITERIA,&#xD;&#xA; CAST(DEPENDENT_PREMIUM as decimal(13,4)) as REP_PREMIUM_AMOUNT,&#xD;&#xA; cast(G.SUPPLEMENTAL_PREMIUM_AMT  as decimal(13,4)) as Rate,&#xD;&#xA; BASIC_PREMIUM,&#xD;&#xA; SUPPLEMENTAL_PREMIUM,          &#xD;&#xA; DEPENDENT_PREMIUM,                       &#xD;&#xA; SPOUSE_PREMIUM,&#xD;&#xA; H.AD_AND_D_BASIC_PREMIUM_RATE,&#xD;&#xA; H.AD_AND_D_SUPPLEMENTAL_PREMIUM_RATE,&#xD;&#xA; cast(0 as decimal(13,4)) as SUPPLEMENTAL_PREMIUM_RATE_AMT&#xD;&#xA;FROM #Temp1 h&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT_LIFE C &#xD;&#xA; ON C.PERSON_ACCOUNT_ID = H.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PERSON E &#xD;&#xA; ON E.PERSON_ID = H.PERSON_ID&#xD;&#xA;INNER JOIN SGT_ORG_PLAN_LIFE_RATE G &#xD;&#xA; ON G.LIFE_INSURANCE_TYPE_VALUE = C.LIFE_INSURANCE_TYPE_VALUE &#xD;&#xA;  AND G.LEVEL_OF_COVERAGE_VALUE = 'DSPL'&#xD;&#xA;  AND ISNULL(G.SUPPLEMENTAL_COVERAGE_AMT,0)  = CASE WHEN G.LEVEL_OF_COVERAGE_VALUE = 'DSPL' &#xD;&#xA;    THEN abs(H.LIFE_DEP_SUPP_COVERAGE_AMOUNT)&#xD;&#xA;    ELSE ISNULL(G.SUPPLEMENTAL_COVERAGE_AMT,0)  END&#xD;&#xA;WHERE CASE WHEN MONTH(E.DATE_OF_BIRTH) &lt; MONTH(CAST(CAST(YEAR(H.EFFECTIVE_DATE) -1 AS VARCHAR(4))+'1231' AS DATETIME) )&#xD;&#xA;     OR (&#xD;&#xA;       MONTH(E.DATE_OF_BIRTH) =  MONTH(CAST(CAST(YEAR(H.EFFECTIVE_DATE) -1 AS VARCHAR(4))+'1231' AS DATETIME) )&#xD;&#xA;      AND DAY(E.DATE_OF_BIRTH) &lt;=  DAY(CAST(CAST(YEAR(H.EFFECTIVE_DATE) -1 AS VARCHAR(4))+'1231' AS DATETIME) )&#xD;&#xA;      )&#xD;&#xA;  THEN  DATEDIFF(YY,E.DATE_OF_BIRTH,CAST(CAST(YEAR(H.EFFECTIVE_DATE) -1 AS VARCHAR(4))+'1231' AS DATETIME) )  &#xD;&#xA;  ELSE DATEDIFF(YY,E.DATE_OF_BIRTH,CAST(CAST(YEAR(H.EFFECTIVE_DATE) -1 AS VARCHAR(4))+'1231' AS DATETIME) ) -1 END&#xD;&#xA;BETWEEN G.MIN_AGE_YRS AND G.MAX_AGE_YRS&#xD;&#xA;AND G.EFFECTIVE_DATE = (SELECT TOP 1 EFFECTIVE_DATE  FROM SGT_ORG_PLAN_LIFE_RATE RATE&#xD;&#xA;      WHERE EFFECTIVE_DATE &lt;= H.EFFECTIVE_DATE &#xD;&#xA;       AND RATE.LIFE_INSURANCE_TYPE_VALUE = G.LIFE_INSURANCE_TYPE_VALUE &#xD;&#xA;       AND RATE.LEVEL_OF_COVERAGE_VALUE = G.LEVEL_OF_COVERAGE_VALUE&#xD;&#xA;      ORDER BY EFFECTIVE_DATE DESC)&#xD;&#xA;AND ISNULL(DEPENDENT_PREMIUM,0) &lt;&gt; 0 &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;UNION ALL &#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA; H.PERSON_ACCOUNT_ID,&#xD;&#xA; H.PERSON_ID,&#xD;&#xA; E.LAST_NAME,&#xD;&#xA; E.FIRST_NAME,&#xD;&#xA; E.SSN,&#xD;&#xA; H.RECORD_TYPE_VALUE,&#xD;&#xA; C.LIFE_INSURANCE_TYPE_VALUE,&#xD;&#xA; CAST('SPSL' as  varchar(4)) AS LEVEL_OF_COVERAGE_VALUE,&#xD;&#xA; H.LIFE_SPOUSE_SUPP_COVERAGE_AMOUNT AS COVERAGE_AMOUNT ,&#xD;&#xA; G.SUPPLEMENTAL_RATE_CRITERIA_VALUE,&#xD;&#xA; DATEDIFF(YY,E.DATE_OF_BIRTH,H.EFFECTIVE_DATE) AS AGE,&#xD;&#xA; MIN_AGE_YRS, MAX_AGE_YRS,&#xD;&#xA; H.PREMIUM_AMOUNT,H.EFFECTIVE_DATE,&#xD;&#xA; CAST(NULL AS VARCHAR(100))  AS COVERAGE_DESCRIPTION,&#xD;&#xA; CAST(NULL AS VARCHAR(100))  AS RATING_CRITERIA,&#xD;&#xA; CAST(SPOUSE_PREMIUM as decimal(13,4)) as REP_PREMIUM_AMOUNT,&#xD;&#xA; cast(G.SUPPLEMENTAL_PREMIUM_RATE_AMT  as decimal(13,4)) as Rate,&#xD;&#xA; BASIC_PREMIUM,&#xD;&#xA; SUPPLEMENTAL_PREMIUM,          &#xD;&#xA; DEPENDENT_PREMIUM,                       &#xD;&#xA; SPOUSE_PREMIUM,&#xD;&#xA; H.AD_AND_D_BASIC_PREMIUM_RATE,&#xD;&#xA; H.AD_AND_D_SUPPLEMENTAL_PREMIUM_RATE,&#xD;&#xA; cast(0 as decimal(13,4)) as SUPPLEMENTAL_PREMIUM_RATE_AMT &#xD;&#xA;FROM #Temp1 h&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT_LIFE C &#xD;&#xA; ON C.PERSON_ACCOUNT_ID = H.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PERSON E &#xD;&#xA; ON E.PERSON_ID = H.PERSON_ID&#xD;&#xA;INNER JOIN SGT_ORG_PLAN_LIFE_RATE G &#xD;&#xA; ON G.LIFE_INSURANCE_TYPE_VALUE = C.LIFE_INSURANCE_TYPE_VALUE &#xD;&#xA;  AND G.LEVEL_OF_COVERAGE_VALUE = 'SPSL'&#xD;&#xA;  AND ISNULL(G.SUPPLEMENTAL_COVERAGE_AMT,0)  = CASE WHEN G.LEVEL_OF_COVERAGE_VALUE = 'DSPL' &#xD;&#xA;    THEN abs(H.LIFE_DEP_SUPP_COVERAGE_AMOUNT)&#xD;&#xA;    ELSE ISNULL(G.SUPPLEMENTAL_COVERAGE_AMT,0)  END&#xD;&#xA;WHERE CASE WHEN MONTH(E.DATE_OF_BIRTH) &lt; MONTH(CAST(CAST(YEAR(H.EFFECTIVE_DATE) -1 AS VARCHAR(4))+'1231' AS DATETIME) )&#xD;&#xA;     OR (&#xD;&#xA;       MONTH(E.DATE_OF_BIRTH) =  MONTH(CAST(CAST(YEAR(H.EFFECTIVE_DATE) -1 AS VARCHAR(4))+'1231' AS DATETIME) )&#xD;&#xA;      AND DAY(E.DATE_OF_BIRTH) &lt;=  DAY(CAST(CAST(YEAR(H.EFFECTIVE_DATE) -1 AS VARCHAR(4))+'1231' AS DATETIME) )&#xD;&#xA;      )&#xD;&#xA;  THEN  DATEDIFF(YY,E.DATE_OF_BIRTH,CAST(CAST(YEAR(H.EFFECTIVE_DATE) -1 AS VARCHAR(4))+'1231' AS DATETIME) )  &#xD;&#xA;  ELSE DATEDIFF(YY,E.DATE_OF_BIRTH,CAST(CAST(YEAR(H.EFFECTIVE_DATE) -1 AS VARCHAR(4))+'1231' AS DATETIME) ) -1 END&#xD;&#xA;BETWEEN G.MIN_AGE_YRS AND G.MAX_AGE_YRS&#xD;&#xA;AND G.EFFECTIVE_DATE = (SELECT TOP 1 EFFECTIVE_DATE  FROM SGT_ORG_PLAN_LIFE_RATE RATE&#xD;&#xA;      WHERE EFFECTIVE_DATE &lt;= H.EFFECTIVE_DATE &#xD;&#xA;       AND RATE.LIFE_INSURANCE_TYPE_VALUE = G.LIFE_INSURANCE_TYPE_VALUE &#xD;&#xA;       AND RATE.LEVEL_OF_COVERAGE_VALUE = G.LEVEL_OF_COVERAGE_VALUE&#xD;&#xA;      ORDER BY EFFECTIVE_DATE DESC)&#xD;&#xA;AND ISNULL(SPOUSE_PREMIUM,0) &lt;&gt; 0 &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT * INTO #TEMP11 FROM #tempfinal WHERE  LEVEL_OF_COVERAGE_VALUE  IN ('BASC','SPML')&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;UPDATE #TEMP11 SET COVERAGE_DESCRIPTION = 'AD&amp;D'+ &#xD;&#xA;   CASE WHEN LEVEL_OF_COVERAGE_VALUE  ='BASC' THEN ' BASIC' ELSE '  VOLUNTARY' END +&#xD;&#xA;   CASE WHEN LIFE_INSURANCE_TYPE_VALUE = 'REME' THEN ' RETIREE' ELSE ' EMPLOYEE ' END,&#xD;&#xA;   basic_premium = 0 ,SUPPLEMENTAL_PREMIUM =0,&#xD;&#xA;   RATING_CRITERIA = 'ALL MEMBERS ',&#xD;&#xA;   REP_PREMIUM_AMOUNT = CASE WHEN LEVEL_OF_COVERAGE_VALUE  ='BASC' THEN AD_AND_D_BASIC_PREMIUM_RATE * &#xD;&#xA;          (case when Basic_premium &lt;0  and AD_AND_D_BASIC_PREMIUM_RATE &gt; 0 then -1 else 1 end)&#xD;&#xA;           ELSE ( ROUND(ISNULL(COVERAGE_AMOUNT,0)* ISNULL(AD_AND_D_SUPPLEMENTAL_PREMIUM_RATE,0)/1000.0000,4)&#xD;&#xA;          *  CASE WHEN isnull(SUPPLEMENTAL_PREMIUM,0) &lt;0  THEN -1 ELSE 1 END) END,&#xD;&#xA;   Rate = CASE WHEN LEVEL_OF_COVERAGE_VALUE  ='BASC' THEN AD_AND_D_BASIC_PREMIUM_RATE * &#xD;&#xA;          (case when Basic_premium &lt;0 and AD_AND_D_BASIC_PREMIUM_RATE &gt; 0 then -1 else 1 end)&#xD;&#xA;           ELSE ISNULL(AD_AND_D_SUPPLEMENTAL_PREMIUM_RATE,0)&#xD;&#xA;          *  CASE WHEN isnull(SUPPLEMENTAL_PREMIUM,0) &lt;0 and ISNULL(AD_AND_D_SUPPLEMENTAL_PREMIUM_RATE,0) &gt; 0 THEN -1 ELSE 1 END END&#xD;&#xA;&#xD;&#xA;Update #TempFinal Set AD_AND_D_BASIC_PREMIUM_RATE =&#xD;&#xA;  AD_AND_D_BASIC_PREMIUM_RATE *  &#xD;&#xA;  (case when Basic_premium &lt;0  and AD_AND_D_BASIC_PREMIUM_RATE &gt; 0 then -1 else 1 end)&#xD;&#xA;WHERE LEVEL_OF_COVERAGE_VALUE  ='BASC'&#xD;&#xA;&#xD;&#xA;Update #TempFinal Set AD_AND_D_SUPPLEMENTAL_PREMIUM_RATE =&#xD;&#xA;  ISNULL(AD_AND_D_SUPPLEMENTAL_PREMIUM_RATE,0) *  &#xD;&#xA;  CASE WHEN isnull(SUPPLEMENTAL_PREMIUM,0) &lt;0 and &#xD;&#xA;  ISNULL(AD_AND_D_SUPPLEMENTAL_PREMIUM_RATE,0) &gt; 0 THEN -1 ELSE 1 END,&#xD;&#xA;  SUPPLEMENTAL_PREMIUM_RATE_AMT = isnull(SUPPLEMENTAL_PREMIUM_RATE_AMT,0) * &#xD;&#xA;  CASE WHEN isnull(SUPPLEMENTAL_PREMIUM,0) &lt;0 and &#xD;&#xA;  ISNULL(SUPPLEMENTAL_PREMIUM_RATE_AMT,0) &gt; 0 THEN -1 ELSE 1 END  &#xD;&#xA;WHERE LEVEL_OF_COVERAGE_VALUE  ='SPML'&#xD;&#xA;&#xD;&#xA;UPDATE #tempFinal SET COVERAGE_DESCRIPTION = 'LIFE BASIC'+ &#xD;&#xA;   CASE WHEN LIFE_INSURANCE_TYPE_VALUE = 'REME' THEN ' RETIREE' ELSE ' EMPLOYEE ' END,&#xD;&#xA;   RATING_CRITERIA = 'ALL MEMBERS ',&#xD;&#xA;   REP_PREMIUM_AMOUNT =  CAST(BASIC_PREMIUM AS DECIMAL(9,4)) - AD_AND_D_BASIC_PREMIUM_RATE,   &#xD;&#xA;   RATE = CAST(BASIC_PREMIUM AS DECIMAL(9,4)) - AD_AND_D_BASIC_PREMIUM_RATE  &#xD;&#xA;   WHERE LEVEL_OF_COVERAGE_VALUE  ='BASC'&#xD;&#xA;&#xD;&#xA;UPDATE #tempFinal SET COVERAGE_DESCRIPTION = 'LIFE VOLUNTARY DEPENDENT',&#xD;&#xA;   RATING_CRITERIA = 'COVERED DEPENDENT '+&#xD;&#xA;   '$'+CAST(abs(COVERAGE_AMOUNT) AS VARCHAR(20)) + ' OPTION'+&#xD;&#xA;   ' - AGE (' + &#xD;&#xA;   CAST(MIN_AGE_YRS AS VARCHAR(3)) +'-'+&#xD;&#xA;   CAST(MAX_AGE_YRS AS VARCHAR(3))+ ')',&#xD;&#xA;   REP_PREMIUM_AMOUNT =  DEPENDENT_PREMIUM,&#xD;&#xA;   RATE = CASE WHEN DEPENDENT_PREMIUM &lt; 0 then RATE*-1 ELSE RATE END&#xD;&#xA;   WHERE LEVEL_OF_COVERAGE_VALUE  ='DSPL'&#xD;&#xA;&#xD;&#xA;UPDATE #tempFinal SET COVERAGE_DESCRIPTION = 'LIFE VOLUNTARY SPOUSE',&#xD;&#xA;   RATING_CRITERIA = 'COVERED DEPENDENT AGE ('+ &#xD;&#xA;   CAST(MIN_AGE_YRS AS VARCHAR(3)) +'-'+&#xD;&#xA;   CAST(MAX_AGE_YRS AS VARCHAR(3))+ ')',&#xD;&#xA;   REP_PREMIUM_AMOUNT = SPOUSE_PREMIUM&#xD;&#xA;   WHERE LEVEL_OF_COVERAGE_VALUE  ='SPSL'&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;UPDATE #tempFinal SET COVERAGE_DESCRIPTION = 'LIFE VOLUNTARY EMPLOYEE',&#xD;&#xA;   RATING_CRITERIA = 'MEMBER AGE('+ &#xD;&#xA;   CAST(MIN_AGE_YRS AS VARCHAR(3)) +'-'+&#xD;&#xA;   CAST(MAX_AGE_YRS AS VARCHAR(3))+ ')',&#xD;&#xA;   REP_PREMIUM_AMOUNT = CAST(SUPPLEMENTAL_PREMIUM AS DECIMAL(13,4))- &#xD;&#xA;        ( ROUND(ISNULL(COVERAGE_AMOUNT,0)*ISNULL(AD_AND_D_SUPPLEMENTAL_PREMIUM_RATE,0)/1000.00,4)&#xD;&#xA;         *  CASE WHEN SUPPLEMENTAL_PREMIUM &lt;0  THEN -1 ELSE 1 END),&#xD;&#xA;   RATE =  (ISNULL(SUPPLEMENTAL_PREMIUM_RATE_AMT,0) - AD_AND_D_SUPPLEMENTAL_PREMIUM_RATE)&#xD;&#xA;   WHERE LEVEL_OF_COVERAGE_VALUE  ='SPML'&#xD;&#xA;&#xD;&#xA;INSERT INTO #tempFinal SELECT * FROM #Temp11&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Select * from #Temp11 C&#xD;&#xA;   INNER JOIN SGT_PERSON_EMPLOYMENT EMP &#xD;&#xA;   ON C.PERSON_ID=EMP.PERSON_ID &#xD;&#xA; where ORG_ID=@ORG_ID AND EFFECTIVE_DATE=@EFFECTIVEDATE&#xD;&#xA;  AND EMP.START_DATE &lt;= @EFFECTIVEDATE AND (EMP.END_DATE IS NULL OR EMP.END_DATE &gt;= @EFFECTIVEDATE)&#xD;&#xA;&#xD;&#xA;">
      <parameters>
        <parameter ID="@ORG_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadLifeInsuranceLevelofCoverage" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="Declare @PAYROLLPAIDDATE datetime;&#xD;&#xA;--SET @PAYROLLPAIDDATE = GETDATE()&#xD;&#xA; select @PAYROLLPAIDDATE=BATCH_DATE from SGS_SYSTEM_MANAGEMENT &#xD;&#xA;SELECT  &#xD;&#xA;&#x9;&#x9;PALH.PERSON_ACCOUNT_ID,PER.PERSON_ID,PER.FIRST_NAME,PER.LAST_NAME,PER.DATE_OF_BIRTH,PALH.LEVEL_OF_COVERAGE_VALUE,&#xD;&#xA;&#x9;&#x9;CV.DATA3,CV.DESCRIPTION AS LEVEL_OF_COVERAGE,PALH.COVERAGE_AMOUNT, PALH.LIFE_INSURANCE_TYPE_VALUE,PALH.EFFECTIVE_START_DATE,PALH.PREMIUM_CONVERSION_INDICATOR_FLAG AS PRE_TAX,&#xD;&#xA;&#x9;&#x9;@PAYROLLPAIDDATE AS RUN_DATE&#xD;&#xA;&#xD;&#xA;FROM SGT_PERSON_ACCOUNT_EMPLOYMENT_DETAIL PAED(NOLOCK)&#xD;&#xA;INNER JOIN SGT_PERSON_EMPLOYMENT_DETAIL PED(NOLOCK) ON PAED.PERSON_EMPLOYMENT_DTL_ID = PED.PERSON_EMPLOYMENT_DTL_ID&#xD;&#xA;INNER JOIN SGT_PERSON_EMPLOYMENT PE(NOLOCK) ON PE.PERSON_EMPLOYMENT_ID = PED.PERSON_EMPLOYMENT_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT PA(NOLOCK) ON PA.PERSON_ACCOUNT_ID = PAED.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PERSON PER (NOLOCK) ON PER.PERSON_ID=PA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT_LIFE_HISTORY PALH(NOLOCK) ON PA.PERSON_ACCOUNT_ID = PALH.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGS_CODE_VALUE CV ON CV.CODE_ID = PALH.LEVEL_OF_COVERAGE_ID and CV.CODE_VALUE=PALH.LEVEL_OF_COVERAGE_VALUE&#xD;&#xA;WHERE PAED.ELECTION_VALUE = 'ENLD' AND PALH.PLAN_PARTICIPATION_STATUS_VALUE = 'ENL2' AND&#xD;&#xA;PALH.PLAN_OPTION_STATUS_VALUE = 'ENLD' AND&#xD;&#xA;PALH.LIFE_INSURANCE_TYPE_VALUE = 'NREM' AND&#xD;&#xA;@PAYROLLPAIDDATE BETWEEN PALH.EFFECTIVE_START_DATE AND ISNULL(PALH.EFFECTIVE_END_DATE,'01/01/2900') AND&#xD;&#xA;PALH.EFFECTIVE_START_DATE &lt;&gt; ISNULL(PALH.EFFECTIVE_END_DATE,'01/01/2900') AND --IGNORE SAME DATED HISTORY RECORDS&#xD;&#xA;@PAYROLLPAIDDATE BETWEEN PA.START_DATE AND ISNULL(PA.END_DATE,'01/01/2900') AND&#xD;&#xA;@PAYROLLPAIDDATE BETWEEN PED.START_DATE AND DATEADD(M,1,ISNULL(PED.END_DATE,'01/01/2900')) AND&#xD;&#xA;@PAYROLLPAIDDATE BETWEEN LEFT(CONVERT(CHAR(8),DATEADD(M,1, PE.START_DATE), 111),8) + '01'  AND DATEADD(M,1,ISNULL(PE.END_DATE,'01/01/2900')) AND&#xD;&#xA;PAED.PLAN_ID = 13 AND&#xD;&#xA;PE.ORG_ID = @ORG_ID&#xD;&#xA;ORDER BY  PER.LAST_NAME, PER.FIRST_NAME, CV.DATA3  ASC">
      <parameters>
        <parameter ID="@ORG_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadAgencyStmtRetirementBillingAndPayment" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  SELECT &#xD;&#xA;         'Billings &amp; Adjustments' As RECORD_TYPE,&#xD;&#xA;         CV.DESCRIPTION,&#xD;&#xA;         GT.SOURCE_ID As REPORT_ID,&#xD;&#xA;         SUM(ISNULL(GT.DEBIT_AMOUNT,0)) - SUM (ISNULL(GT.CREDIT_AMOUNT,0)) As AMOUNT ,&#xD;&#xA;         FORMAT(HDR.PAYROLL_PAID_DATE,'MM/yyyy') AS REPORTING_MONTH,&#xD;&#xA;&#x9;     GT.EXTRACT_DATE As TRANSACTION_DATE&#xD;&#xA;  FROM SGT_GL_TRANSACTION AS GT INNER JOIN SGT_EMPLOYER_PAYROLL_HEADER AS HDR ON GT.SOURCE_ID=EMPLOYER_PAYROLL_HEADER_ID&#xD;&#xA;  INNER JOIN SGS_CODE_VALUE AS CV ON CV.CODE_ID=HDR.REPORT_TYPE_ID and CV.CODE_VALUE=HDR.REPORT_TYPE_VALUE&#xD;&#xA;  WHERE GT.ORG_ID = @ORG_ID   AND (EXTRACT_DATE BETWEEN @STARTDATE AND @ENDDATE)&#xD;&#xA;  AND FUND_VALUE IN (483,473,482,475,480)&#xD;&#xA;  AND ACCOUNT_ID = 26&#xD;&#xA;  AND SOURCE_TYPE_VALUE = 'EMPR'&#xD;&#xA;  GROUP BY  GT.SOURCE_ID,CV.DESCRIPTION,HDR.payroll_paid_date,GT.EXTRACT_DATE&#xD;&#xA;  &#xD;&#xA;  &#xD;&#xA;  UNION&#xD;&#xA;  &#xD;&#xA;  SELECT &#xD;&#xA;        'Payments &amp; Refunds' As RECORD_TYPE, &#xD;&#xA;        'DESCRIPTION'= CASE WHEN  SUM(ISNULL(DEBIT_AMOUNT,0)) - SUM (ISNULL(CREDIT_AMOUNT,0)) &lt; 0 THEN 'Payment' ELSE 'Refund' END ,&#xD;&#xA;&#x9;&#x9; NULL As REPORT_ID,&#xD;&#xA;        (Case WHEN SUM(ISNULL(DEBIT_AMOUNT,0)) - SUM (ISNULL(CREDIT_AMOUNT,0)) &lt; 0 &#xD;&#xA;&#x9;&#x9;       THEN -1 * SUM(ISNULL(DEBIT_AMOUNT,0)) - SUM (ISNULL(CREDIT_AMOUNT,0))   &#xD;&#xA;&#x9;&#x9;&#x9;   ELSE  ABS(SUM(ISNULL(DEBIT_AMOUNT,0)) - SUM (ISNULL(CREDIT_AMOUNT,0))) END) As Amount ,&#xD;&#xA;         NULL AS REPORTING_MONTH,&#xD;&#xA;         EXTRACT_DATE As TRANSACTION_DATE&#xD;&#xA;  FROM SGT_GL_TRANSACTION&#xD;&#xA;  WHERE ORG_ID = @ORG_ID&#xD;&#xA;  AND (EXTRACT_DATE BETWEEN @STARTDATE AND @ENDDATE)&#xD;&#xA;  AND FUND_VALUE IN (483,473,482,475,480)&#xD;&#xA;  AND ACCOUNT_ID = 26 &#xD;&#xA;  AND ((SOURCE_TYPE_VALUE = 'REMI' AND TRANSACTION_TYPE_VALUE = 'STAT')&#xD;&#xA;  OR (SOURCE_TYPE_VALUE = 'BEPY' AND TRANSACTION_TYPE_VALUE = 'ITLV')&#xD;&#xA;  OR (SOURCE_TYPE_VALUE = 'JHDR'))&#xD;&#xA;  GROUP BY EXTRACT_DATE">
      <parameters>
        <parameter ID="@ORG_ID" sfwDataType="int" />
        <parameter ID="@STARTDATE" sfwDataType="DateTime" />
        <parameter ID="@ENDDATE" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="LoadAgencyStmtInsuranceBillingAndPayment" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql=" &#xD;&#xA; SELECT &#xD;&#xA;         'Billings &amp; Adjustments' As RECORD_TYPE,&#xD;&#xA;         CV.DESCRIPTION,&#xD;&#xA;         GT.SOURCE_ID As REPORT_ID,&#xD;&#xA;          SUM(ISNULL(GT.DEBIT_AMOUNT,0)) - SUM (ISNULL(GT.CREDIT_AMOUNT,0)) As AMOUNT ,&#xD;&#xA;         FORMAT(HDR.PAYROLL_PAID_DATE,'MM/yyyy') AS REPORTING_MONTH,&#xD;&#xA;&#x9;     GT.EXTRACT_DATE As TRANSACTION_DATE&#xD;&#xA;  FROM SGT_GL_TRANSACTION AS GT INNER JOIN SGT_EMPLOYER_PAYROLL_HEADER AS HDR ON GT.SOURCE_ID=EMPLOYER_PAYROLL_HEADER_ID&#xD;&#xA;  INNER JOIN SGS_CODE_VALUE AS CV ON CV.CODE_ID=HDR.REPORT_TYPE_ID and CV.CODE_VALUE=HDR.REPORT_TYPE_VALUE&#xD;&#xA;  WHERE GT.ORG_ID = @ORG_ID&#xD;&#xA;  AND (GT.EXTRACT_DATE BETWEEN @STARTDATE AND @ENDDATE)&#xD;&#xA;  AND GT.FUND_VALUE = 470&#xD;&#xA;  AND SOURCE_TYPE_VALUE = 'EMPR'&#xD;&#xA;  GROUP BY  GT.SOURCE_ID,CV.DESCRIPTION,HDR.payroll_paid_date,GT.EXTRACT_DATE&#xD;&#xA;&#xD;&#xA;  UNION&#xD;&#xA; &#xD;&#xA;  SELECT&#xD;&#xA;       'Payments &amp; Refunds' As RECORD_TYPE, &#xD;&#xA;&#x9;   'DESCRIPTION'= CASE WHEN  SUM(ISNULL(DEBIT_AMOUNT,0)) - SUM (ISNULL(CREDIT_AMOUNT,0)) &lt; 0 THEN 'Payment' ELSE 'Refund' END ,&#xD;&#xA;&#x9;&#x9;NULL As REPORT_ID,&#xD;&#xA;        (Case WHEN SUM(ISNULL(DEBIT_AMOUNT,0)) - SUM (ISNULL(CREDIT_AMOUNT,0)) &lt; 0 &#xD;&#xA;&#x9;&#x9;       THEN -1 * SUM(ISNULL(DEBIT_AMOUNT,0)) - SUM (ISNULL(CREDIT_AMOUNT,0))   &#xD;&#xA;&#x9;&#x9;&#x9;   ELSE  ABS(SUM(ISNULL(DEBIT_AMOUNT,0)) - SUM (ISNULL(CREDIT_AMOUNT,0))) END) As Amount ,&#xD;&#xA;&#x9;&#x9;NULL AS REPORTING_MONTH,&#xD;&#xA;        EXTRACT_DATE As TRANSACTION_DATE&#xD;&#xA;  FROM SGT_GL_TRANSACTION &#xD;&#xA;  WHERE ORG_ID = @ORG_ID&#xD;&#xA;  AND (EXTRACT_DATE BETWEEN @STARTDATE AND @ENDDATE)&#xD;&#xA;  AND FUND_VALUE = 470&#xD;&#xA;  AND ACCOUNT_ID = 10&#xD;&#xA;  AND ((SOURCE_TYPE_VALUE = 'REMI' AND TRANSACTION_TYPE_VALUE = 'STAT')&#xD;&#xA;  OR (SOURCE_TYPE_VALUE = 'BEPY') AND (TRANSACTION_TYPE_VALUE = 'ITLV')&#xD;&#xA;  OR (SOURCE_TYPE_VALUE = 'JHDR'))&#xD;&#xA;  GROUP BY EXTRACT_DATE">
      <parameters>
        <parameter ID="@ORG_ID" sfwDataType="int" />
        <parameter ID="@STARTDATE" sfwDataType="DateTime" />
        <parameter ID="@ENDDATE" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="LoadAgencyStmtDefCompBillingAndPayment" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="   SELECT &#xD;&#xA;       'Billings &amp; Adjustments' As RECORD_TYPE,&#xD;&#xA;       CV.DESCRIPTION,&#xD;&#xA;       GT.SOURCE_ID As REPORT_ID,&#xD;&#xA;        SUM(ISNULL(GT.DEBIT_AMOUNT,0)) - SUM (ISNULL(GT.CREDIT_AMOUNT,0)) As AMOUNT ,&#xD;&#xA;       HDR.PAY_PERIOD_START_DATE,&#xD;&#xA;&#x9;   HDR.PAY_PERIOD_END_DATE,&#xD;&#xA;&#x9;   GT.EXTRACT_DATE As TRANSACTION_DATE&#xD;&#xA;     &#xD;&#xA;  FROM SGT_GL_TRANSACTION AS GT INNER JOIN SGT_EMPLOYER_PAYROLL_HEADER AS HDR ON GT.SOURCE_ID=EMPLOYER_PAYROLL_HEADER_ID&#xD;&#xA;  INNER JOIN SGS_CODE_VALUE AS CV ON CV.CODE_ID=HDR.REPORT_TYPE_ID and CV.CODE_VALUE=HDR.REPORT_TYPE_VALUE&#xD;&#xA;  WHERE GT.ORG_ID = @ORG_ID&#xD;&#xA;  AND (GT.EXTRACT_DATE BETWEEN @STARTDATE AND @ENDDATE)&#xD;&#xA;  AND GT.FUND_VALUE = 481&#xD;&#xA;  AND GT.ACCOUNT_ID = 10&#xD;&#xA;  AND GT.SOURCE_TYPE_VALUE = 'EMPR'&#xD;&#xA;  GROUP BY  GT.SOURCE_ID,CV.DESCRIPTION,GT.EXTRACT_DATE, HDR.PAY_PERIOD_START_DATE,HDR.PAY_PERIOD_END_DATE&#xD;&#xA;&#xD;&#xA;  UNION&#xD;&#xA;&#xD;&#xA;    SELECT &#xD;&#xA;&#x9;     'Payments &amp; Refunds' As RECORD_TYPE,&#xD;&#xA;&#x9;&#x9;  'DESCRIPTION'= CASE WHEN  SUM(ISNULL(DEBIT_AMOUNT,0)) - SUM (ISNULL(CREDIT_AMOUNT,0)) &lt; 0 THEN 'Payment' ELSE 'Refund' END ,&#xD;&#xA;&#x9;&#x9;  NULL As REPORT_ID,&#xD;&#xA;         (Case WHEN SUM(ISNULL(DEBIT_AMOUNT,0)) - SUM (ISNULL(CREDIT_AMOUNT,0)) &lt; 0 &#xD;&#xA;&#x9;&#x9;       THEN -1 * SUM(ISNULL(DEBIT_AMOUNT,0)) - SUM (ISNULL(CREDIT_AMOUNT,0))   &#xD;&#xA;&#x9;&#x9;&#x9;   ELSE  ABS(SUM(ISNULL(DEBIT_AMOUNT,0)) - SUM (ISNULL(CREDIT_AMOUNT,0))) END) As Amount ,&#xD;&#xA;&#x9;&#x9;  NULL AS PAY_PERIOD_START_DATE,&#xD;&#xA;&#x9;      NULL AS PAY_PERIOD_END_DATE,&#xD;&#xA;          EXTRACT_DATE As TRANSACTION_DATE&#xD;&#xA;       &#xD;&#xA;  FROM SGT_GL_TRANSACTION&#xD;&#xA;  WHERE ORG_ID = @ORG_ID   AND (EXTRACT_DATE BETWEEN @STARTDATE AND @ENDDATE)&#xD;&#xA;  AND FUND_VALUE = 481&#xD;&#xA;  AND ACCOUNT_ID = 10&#xD;&#xA;  AND ((SOURCE_TYPE_VALUE = 'REMI' AND TRANSACTION_TYPE_VALUE = 'STAT')&#xD;&#xA;  OR (SOURCE_TYPE_VALUE = 'BEPY') AND (TRANSACTION_TYPE_VALUE = 'ITLV')&#xD;&#xA;  OR (SOURCE_TYPE_VALUE = 'JHDR'))&#xD;&#xA;  GROUP BY EXTRACT_DATE">
      <parameters>
        <parameter ID="@ORG_ID" sfwDataType="int" />
        <parameter ID="@STARTDATE" sfwDataType="DateTime" />
        <parameter ID="@ENDDATE" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="LoadMissingRetirementContributionsESS" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="IF OBJECT_ID('tempdb.dbo.#TEMP', 'U') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#TEMP1', 'U') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP1&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#TEMP2', 'U') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP2&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#TEMP3', 'U') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP3&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#TEMP4', 'U') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP4&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#TEMP5', 'U') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP5&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#NONSEASONAL_TEMP', 'U') IS NOT NULL&#xD;&#xA;DROP TABLE #NONSEASONAL_TEMP&#xD;&#xA;&#xD;&#xA;DECLARE @MISSED_CONTRIBUTION_CHECK_START_DATE_SEASONAL DATETIME = DATEADD(MONTH, -14, DateAdd(Month, DateDiff(Month, 0, GetDate()), 0));  &#xD;&#xA;DECLARE @MISSED_CONTRIBUTION_CHECK_START_DATE DATETIME = CONVERT(DATETIME,(select DATA1 from SGS_CODE_VALUE where CODE_ID = 52 AND CODE_VALUE = 'MRCD'),101);--'01/01/2017';&#xD;&#xA;DECLARE @MISSED_CONTRIBUTION_CHECK_END_DATE DATETIME = DATEADD(MONTH, -2, DateAdd(Month, DateDiff(Month, 0, GetDate()), 0));&#xD;&#xA;&#xD;&#xA;--SEASONAL LOGIC&#xD;&#xA;&#xD;&#xA;WITH MISSEDCONTRIB AS &#xD;&#xA;(&#xD;&#xA;&#x9;SELECT PED.[START_DATE], PED.[END_DATE], PED.[START_DATE] as EACH_MONTH_DATE, PE.PERSON_ID, PE.ORG_ID, PED.SEASONAL_VALUE, 0 AS I, PAED.PERSON_ACCOUNT_ID,P.PLAN_NAME FROM SGT_PERSON_EMPLOYMENT_DETAIL PED WITH(NOLOCK) &#xD;&#xA;&#x9;JOIN SGT_PERSON_EMPLOYMENT PE WITH(NOLOCK) ON PED.PERSON_EMPLOYMENT_ID = PE.PERSON_EMPLOYMENT_ID&#xD;&#xA;&#x9;JOIN SGT_PERSON_ACCOUNT_EMPLOYMENT_DETAIL PAED WITH(NOLOCK) ON PAED.PERSON_EMPLOYMENT_DTL_ID = PED.PERSON_EMPLOYMENT_DTL_ID AND PAED.PERSON_ACCOUNT_ID IS NOT NULL AND PAED.ELECTION_VALUE = 'ENLD'&#xD;&#xA;&#x9;JOIN SGT_PLAN P WITH(NOLOCK) ON P.PLAN_ID = PAED.PLAN_ID AND P.BENEFIT_TYPE_VALUE = 'RETR'&#xD;&#xA;&#x9;WHERE PED.STATUS_VALUE = 'CONT' AND PED.SEASONAL_VALUE IS NOT NULL AND &#xD;&#xA;&#x9;(PED.[START_DATE] &lt; @MISSED_CONTRIBUTION_CHECK_END_DATE) --AND @MISSED_CONTRIBUTION_CHECK_START_DATE BETWEEN DATEADD(month, DATEDIFF(month, 0, PED.[START_DATE]), 0) AND ISNULL(PED.[END_DATE], '99991231')&#xD;&#xA;&#x9;AND PE.ORG_ID = @ORG_ID&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;UNION ALL &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;SELECT M.[START_DATE], M.[END_DATE], DATEADD(MONTH, M.I+1, M.[START_DATE]) AS EACH_MONTH_DATE, M.PERSON_ID, M.ORG_ID, M.SEASONAL_VALUE, M.I + 1 AS I, M.PERSON_ACCOUNT_ID,M.PLAN_NAME FROM MISSEDCONTRIB M &#xD;&#xA;&#x9;WHERE (DATEADD(MONTH, M.I+1, M.[START_DATE]) &lt; ISNULL(M.[END_DATE], @MISSED_CONTRIBUTION_CHECK_END_DATE))&#xD;&#xA;)&#xD;&#xA;SELECT M.PERSON_ID, M.ORG_ID, M.[START_DATE] AS EMP_DTL_START_DATE, M.SEASONAL_VALUE, SGS_CODE_VALUE.DATA2 AS MAX_Missing_Months_To_Show_On_Report,&#xD;&#xA;      M.EACH_MONTH_DATE, SUM(ISNULL(CASE WHEN PAYRLL_DETAIL.RECORD_TYPE_VALUE IN ('BONS', 'NBON') &#xD;&#xA;&#x9;  --AND ISNULL(PAR.SALARY_AMOUNT,0) != 0 THEN 0 ELSE PAR.SALARY_AMOUNT END, 0)) AS TOT_SALARY,&#xD;&#xA;&#x9;  and isnull(par.PENSION_SERVICE_CREDIT,0) != 0 then 0 else par.PENSION_SERVICE_CREDIT end, 0)) as tot_salary,&#xD;&#xA;&#x9;  M.PERSON_ACCOUNT_ID,M.PLAN_NAME&#xD;&#xA;INTO #TEMP1&#xD;&#xA;FROM MISSEDCONTRIB M&#xD;&#xA;LEFT JOIN SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION PAR WITH(NOLOCK) &#xD;&#xA;--ON ISNULL(PAR.SALARY_AMOUNT, 0) != 0 &#xD;&#xA;on isnull(par.PENSION_SERVICE_CREDIT, 0) != 0 and par.SUBSYSTEM_VALUE &lt;&gt; 'PURC'&#xD;&#xA;AND M.PERSON_ACCOUNT_ID = PAR.PERSON_ACCOUNT_ID&#xD;&#xA;AND MONTH(M.EACH_MONTH_DATE) = MONTH(PAR.EFFECTIVE_DATE) AND YEAR(M.EACH_MONTH_DATE) = YEAR(PAR.EFFECTIVE_DATE)&#xD;&#xA;LEFT JOIN SGS_CODE_VALUE WITH(NOLOCK) ON M.seasonal_value = SGS_Code_Value.CODE_VALUE AND SGS_CODE_VALUE.CODE_ID = 312&#xD;&#xA;LEFT JOIN SGT_EMPLOYER_PAYROLL_DETAIL PAYRLL_DETAIL WITH(NOLOCK) ON PAR.SUBSYSTEM_REF_ID = PAYRLL_DETAIL.EMPLOYER_PAYROLL_DETAIL_ID AND PAYRLL_DETAIL.RECORD_TYPE_VALUE IN ('BONS', 'NBON')&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT PA WITH(NOLOCK) ON M.PERSON_ACCOUNT_ID = PA.PERSON_ACCOUNT_ID AND PA.PLAN_PARTICIPATION_STATUS_VALUE NOT IN ('TRDC','CAN1','TRTF','TICR','WTN1','TRDB','RTRD')&#xD;&#xA;WHERE CONVERT(DATETIME,M.EACH_MONTH_DATE,101) &gt;= @MISSED_CONTRIBUTION_CHECK_START_DATE_SEASONAL AND M.EACH_MONTH_DATE &lt; @MISSED_CONTRIBUTION_CHECK_END_DATE&#xD;&#xA;GROUP BY  M.PERSON_ID, M.ORG_ID, M.SEASONAL_VALUE, M.EACH_MONTH_DATE, M.[START_DATE], M.PERSON_ACCOUNT_ID,M.PLAN_NAME, SGS_CODE_VALUE.DATA2&#xD;&#xA;HAVING SUM(ISNULL(CASE WHEN PAYRLL_DETAIL.RECORD_TYPE_VALUE IN ('BONS', 'NBON') &#xD;&#xA;--AND ISNULL(PAR.SALARY_AMOUNT,0) != 0 THEN 0 ELSE PAR.SALARY_AMOUNT END, 0)) = 0   --Was &gt; but should be = 0&#xD;&#xA;and isnull(par.PENSION_SERVICE_CREDIT,0) != 0 then 0 else par.PENSION_SERVICE_CREDIT end, 0)) = 0 &#xD;&#xA;order by M.ORG_ID, M.PERSON_ID, M.EACH_MONTH_DATE&#xD;&#xA;OPTION (MAXRECURSION 0)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;select *, row_number() over (partition by person_id,org_id order by person_id, each_month_Date) AS missing_Record_Row_number,SUM(1) OVER (PARTITION BY person_id,org_id) AS total_Missing_Record_In_Group into #TEMP2 from #TEMP1 &#xD;&#xA;&#xD;&#xA;select * INTO #TEMP3 from #TEMP2 Where missing_Record_Row_number = Total_Missing_Record_In_Group AND missing_Record_Row_number &lt;= MAX_Missing_Months_To_Show_On_Report&#xD;&#xA;&#xD;&#xA;select #TEMP2.* &#xD;&#xA;INTO #TEMP&#xD;&#xA;from #TEMP2 &#xD;&#xA;INNER JOIN #TEMP3 ON #TEMP3.PERSON_ID = #TEMP2.PERSON_ID AND #TEMP3.ORG_ID = #TEMP2.ORG_ID &#xD;&#xA;ORDER BY #TEMP2.ORG_ID,#TEMP2.Person_id&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT  T1.PERSON_ID AS EXCLUDE_PERSON_ID,T1.ORG_ID AS EXCLUDE_ORG_ID INTO #TEMP4&#xD;&#xA;FROM #TEMP T1&#xD;&#xA;INNER JOIN #TEMP T2 ON T1.missing_Record_Row_number = T2.missing_Record_Row_number - 1 AND T1.PERSON_ID = T2.PERSON_ID AND T1.ORG_ID = T2.ORG_ID &#xD;&#xA;WHERE (MONTH(T2.EACH_MONTH_DATE) - MONTH(T1.EACH_MONTH_DATE)) != 1&#xD;&#xA;&#xD;&#xA;select * INTO #TEMP5 from #TEMP2 T2 LEFT JOIN #TEMP4 T4 on T2.PERSON_ID = T4.EXCLUDE_PERSON_ID AND T2.ORG_ID = T4.EXCLUDE_ORG_ID;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;--NON SEASONAL LOGIC&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;WITH NONSEASONALMISSEDCONTRIB AS &#xD;&#xA;(&#xD;&#xA;&#x9;SELECT PED.[START_DATE], PED.[END_DATE], PED.[START_DATE] as EACH_MONTH_DATE, PE.PERSON_ID, PE.ORG_ID, PED.SEASONAL_VALUE, 0 AS I, PAED.PERSON_ACCOUNT_ID,P.PLAN_NAME FROM SGT_PERSON_EMPLOYMENT_DETAIL PED WITH(NOLOCK)&#xD;&#xA;&#x9;JOIN SGT_PERSON_EMPLOYMENT PE WITH(NOLOCK) ON PED.PERSON_EMPLOYMENT_ID = PE.PERSON_EMPLOYMENT_ID&#xD;&#xA;&#x9;JOIN SGT_PERSON_ACCOUNT_EMPLOYMENT_DETAIL PAED WITH(NOLOCK) ON PAED.PERSON_EMPLOYMENT_DTL_ID = PED.PERSON_EMPLOYMENT_DTL_ID AND PAED.PERSON_ACCOUNT_ID IS NOT NULL AND PAED.ELECTION_VALUE = 'ENLD'&#xD;&#xA;&#x9;JOIN SGT_PLAN P WITH(NOLOCK) ON P.PLAN_ID = PAED.PLAN_ID AND P.BENEFIT_TYPE_VALUE = 'RETR'&#xD;&#xA;&#x9;WHERE PED.STATUS_VALUE = 'CONT' AND PED.SEASONAL_VALUE IS NULL AND &#xD;&#xA;&#x9;(PED.[START_DATE] &lt; @MISSED_CONTRIBUTION_CHECK_END_DATE) --AND @MISSED_CONTRIBUTION_CHECK_START_DATE BETWEEN DATEADD(month, DATEDIFF(month, 0, PED.[START_DATE]), 0) AND ISNULL(PED.[END_DATE], '99991231')&#xD;&#xA;&#x9;AND PE.ORG_ID = @ORG_ID&#xD;&#xA;&#x9;&#xD;&#xA;&#xD;&#xA;&#x9;UNION ALL&#xD;&#xA;&#xD;&#xA;&#x9;SELECT NSM.[START_DATE], NSM.[END_DATE], DATEADD(MONTH, NSM.I+1, NSM.[START_DATE]) AS EACH_MONTH_DATE, NSM.PERSON_ID, NSM.ORG_ID, NSM.SEASONAL_VALUE, NSM.I + 1 AS I, NSM.PERSON_ACCOUNT_ID,NSM.PLAN_NAME FROM NONSEASONALMISSEDCONTRIB NSM &#xD;&#xA;&#x9;WHERE (DATEADD(MONTH, NSM.I+1, NSM.[START_DATE]) &lt; ISNULL(NSM.[END_DATE], @MISSED_CONTRIBUTION_CHECK_END_DATE)) &#xD;&#xA;)&#xD;&#xA;SELECT NSM.PERSON_ID, NSM.ORG_ID, NSM.[START_DATE] AS EMP_DTL_START_DATE, NSM.SEASONAL_VALUE,&#xD;&#xA;      NSM.EACH_MONTH_DATE, SUM(ISNULL(CASE WHEN PAYRLL_DETAIL.RECORD_TYPE_VALUE IN ('BONS', 'NBON') &#xD;&#xA;&#x9;  --AND ISNULL(PAR.SALARY_AMOUNT,0) != 0 THEN 0 ELSE PAR.SALARY_AMOUNT END, 0)) AS TOT_SALARY,&#xD;&#xA;&#x9;  and isnull(par.PENSION_SERVICE_CREDIT,0) != 0 then 0 else par.PENSION_SERVICE_CREDIT end, 0)) AS TOT_SALARY,&#xD;&#xA;&#x9;  NSM.PERSON_ACCOUNT_ID,NSM.PLAN_NAME&#xD;&#xA;INTO #NONSEASONAL_TEMP&#xD;&#xA;FROM NONSEASONALMISSEDCONTRIB NSM&#xD;&#xA;LEFT JOIN SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION PAR WITH(NOLOCK) &#xD;&#xA;--ON ISNULL(PAR.SALARY_AMOUNT, 0) != 0 &#xD;&#xA;on isnull(par.PENSION_SERVICE_CREDIT, 0) != 0 and par.SUBSYSTEM_VALUE &lt;&gt; 'PURC'&#xD;&#xA;AND NSM.PERSON_ACCOUNT_ID = PAR.PERSON_ACCOUNT_ID&#xD;&#xA;AND MONTH(NSM.EACH_MONTH_DATE) = MONTH(PAR.EFFECTIVE_DATE) AND YEAR(NSM.EACH_MONTH_DATE) = YEAR(PAR.EFFECTIVE_DATE)&#xD;&#xA;&#xD;&#xA;LEFT JOIN SGT_EMPLOYER_PAYROLL_DETAIL PAYRLL_DETAIL WITH(NOLOCK) ON PAR.SUBSYSTEM_REF_ID = PAYRLL_DETAIL.EMPLOYER_PAYROLL_DETAIL_ID AND PAYRLL_DETAIL.RECORD_TYPE_VALUE IN ('BONS', 'NBON')&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT PA WITH(NOLOCK) ON NSM.PERSON_ACCOUNT_ID = PA.PERSON_ACCOUNT_ID AND PA.PLAN_PARTICIPATION_STATUS_VALUE NOT IN ('TRDC','CAN1','TRTF','TICR','WTN1','TRDB','RTRD')&#xD;&#xA;WHERE  CONVERT(DATETIME,NSM.EACH_MONTH_DATE,101) &gt;= @MISSED_CONTRIBUTION_CHECK_START_DATE AND NSM.EACH_MONTH_DATE &lt; @MISSED_CONTRIBUTION_CHECK_END_DATE &#xD;&#xA;GROUP BY  NSM.PERSON_ID, NSM.ORG_ID, NSM.SEASONAL_VALUE, NSM.EACH_MONTH_DATE, NSM.[START_DATE], NSM.PERSON_ACCOUNT_ID,NSM.PLAN_NAME&#xD;&#xA;HAVING SUM(ISNULL(CASE WHEN PAYRLL_DETAIL.RECORD_TYPE_VALUE IN ('BONS', 'NBON') &#xD;&#xA;--AND ISNULL(PAR.SALARY_AMOUNT,0) != 0 THEN 0 ELSE PAR.SALARY_AMOUNT END, 0)) = 0   --Was &gt; but should be = 0&#xD;&#xA;and isnull(par.PENSION_SERVICE_CREDIT,0) != 0 then 0 else par.PENSION_SERVICE_CREDIT end, 0)) = 0 &#xD;&#xA;order by NSM.ORG_ID, NSM.PERSON_ID, NSM.EACH_MONTH_DATE&#xD;&#xA;OPTION (MAXRECURSION 0)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT ORG.ORG_NAME,ORG.ORG_CODE,PERSON.FIRST_NAME,PERSON.MIDDLE_NAME,PERSON.LAST_NAME,#NONSEASONAL_TEMP.PLAN_NAME,#NONSEASONAL_TEMP.EACH_MONTH_DATE AS MISSING_MONTH,&#xD;&#xA;   #NONSEASONAL_TEMP.PERSON_ID AS PERSLink_ID FROM #NONSEASONAL_TEMP &#xD;&#xA;INNER JOIN sgt_organization ORG WITH(NOLOCK) ON #NONSEASONAL_TEMP.ORG_ID = ORG.ORG_ID&#xD;&#xA;INNER JOIN SGT_PERSON PERSON WITH(NOLOCK) ON #NONSEASONAL_TEMP.PERSON_ID = PERSON.PERSON_ID&#xD;&#xA;&#xD;&#xA;UNION ALL &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT org.ORG_NAME,org.ORG_CODE,PERSON.FIRST_NAME,PERSON.MIDDLE_NAME,PERSON.LAST_NAME,T5.PLAN_NAME,T5.EACH_MONTH_DATE AS MISSING_MONTH,T5.PERSON_ID AS PERSLink_ID from #TEMP5 T5 &#xD;&#xA;INNER JOIN sgt_organization org WITH(NOLOCK) on T5.ORG_ID = org.ORG_ID&#xD;&#xA;INNER JOIN SGT_PERSON PERSON WITH(NOLOCK) ON T5.PERSON_ID = PERSON.PERSON_ID &#xD;&#xA;where T5.EXCLUDE_PERSON_ID IS NULL AND T5.EXCLUDE_ORG_ID IS NULL &#xD;&#xA;AND T5.MISSING_RECORD_ROW_NUMBER &gt;= T5.MAX_MISSING_MONTHS_TO_SHOW_ON_REPORT&#xD;&#xA;ORDER BY ORG.ORG_CODE,PERSON.LAST_NAME,PERSON.FIRST_NAME,PERSLink_ID,MISSING_MONTH&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#TEMP', 'U') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#TEMP1', 'U') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP1&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#TEMP2', 'U') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP2&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#TEMP3', 'U') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP3&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#TEMP4', 'U') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP4&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#TEMP5', 'U') IS NOT NULL&#xD;&#xA;DROP TABLE #TEMP5&#xD;&#xA;IF OBJECT_ID('tempdb.dbo.#NONSEASONAL_TEMP', 'U') IS NOT NULL&#xD;&#xA;DROP TABLE #NONSEASONAL_TEMP">
      <parameters>
        <parameter ID="@ORG_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadMissingContributionsDeferredComp" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="--***SELECT ALL DEFCOMP PROVIDER RECORDS***--&#xD;&#xA;IF OBJECT_ID('TEMP_DEFCOMP_CONTRIBUTIONS', 'u') IS NOT NULL &#xD;&#xA;  DROP TABLE TEMP_DEFCOMP_CONTRIBUTIONS;&#xD;&#xA;&#xD;&#xA;  IF OBJECT_ID('TEMP_MISSED_DEFCOMP', 'u') IS NOT NULL &#xD;&#xA;  DROP TABLE TEMP_MISSED_DEFCOMP;&#xD;&#xA;&#xD;&#xA;  IF OBJECT_ID('TEMP_MISSING_DEFCOMP_CNTR', 'u') IS NOT NULL &#xD;&#xA;  DROP TABLE TEMP_MISSING_DEFCOMP_CNTR;&#xD;&#xA;&#xD;&#xA;SELECT  SGT_PERSON_ACCOUNT.PERSON_ID, SGT_PERSON_ACCOUNT_DEFERRED_COMP_PROVIDER.PERSON_ACCOUNT_ID, &#xD;&#xA;&#x9;&#x9;SGT_ORG_PLAN_PROVIDER.PROVIDER_ORG_ID, SGT_PERSON_ACCOUNT_DEFERRED_COMP_PROVIDER.START_DATE, &#xD;&#xA;&#x9;&#x9;SGT_PERSON_ACCOUNT_DEFERRED_COMP_PROVIDER.END_DATE, SGT_PERSON_ACCOUNT_DEFERRED_COMP_PROVIDER.PERSON_EMPLOYMENT_ID&#xD;&#xA;INTO&#x9;TEMP_MISSED_DEFCOMP&#xD;&#xA;FROM&#x9;SGT_PERSON_ACCOUNT_DEFERRED_COMP_PROVIDER &#xD;&#xA;&#x9;&#x9;JOIN&#xD;&#xA;&#x9;&#x9;SGT_ORG_PLAN_PROVIDER ON &#xD;&#xA;&#x9;&#x9;SGT_PERSON_ACCOUNT_DEFERRED_COMP_PROVIDER.PROVIDER_ORG_PLAN_ID = SGT_ORG_PLAN_PROVIDER.ORG_PLAN_PROVIDER_ID&#xD;&#xA;&#x9;&#x9;JOIN &#xD;&#xA;&#x9;&#x9;SGT_PERSON_ACCOUNT ON &#xD;&#xA;&#x9;&#x9;SGT_PERSON_ACCOUNT_DEFERRED_COMP_PROVIDER.PERSON_ACCOUNT_ID = SGT_PERSON_ACCOUNT.PERSON_ACCOUNT_ID&#xD;&#xA;WHERE&#x9;SGT_PERSON_ACCOUNT.PLAN_ID = 19 &#xD;&#xA;&#x9;&#x9;AND SGT_PERSON_ACCOUNT.PLAN_PARTICIPATION_STATUS_VALUE LIKE 'ENL%' &#xD;&#xA;&#x9;&#x9;AND SGT_PERSON_ACCOUNT_DEFERRED_COMP_PROVIDER.PER_PAY_PERIOD_CONTRIBUTION_AMT &gt; 0 &#xD;&#xA;&#x9;&#x9;AND SGT_PERSON_ACCOUNT_DEFERRED_COMP_PROVIDER.START_DATE &lt; GETDATE()&#xD;&#xA;&#xD;&#xA;--GO&#xD;&#xA;&#xD;&#xA;--***SELECT ALL DEFCOMP CONTRIBUTIONS***--&#xD;&#xA;SELECT&#x9;SGT_PERSON_ACCOUNT_DEFERRED_COMP_CONTRIBUTION.PERSON_ACCOUNT_ID, &#xD;&#xA;&#x9;&#x9;SGT_PERSON_ACCOUNT_DEFERRED_COMP_CONTRIBUTION.PAY_PERIOD_START_DATE AS EFFECTIVE_DATE,&#xD;&#xA;&#x9;&#x9;SGT_PERSON_ACCOUNT_DEFERRED_COMP_CONTRIBUTION.PROVIDER_ORG_ID, SGT_PERSON_EMPLOYMENT_DETAIL.PERSON_EMPLOYMENT_ID&#xD;&#xA;INTO&#x9;TEMP_DEFCOMP_CONTRIBUTIONS&#xD;&#xA;FROM&#x9;SGT_PERSON_ACCOUNT_DEFERRED_COMP_CONTRIBUTION &#xD;&#xA;&#x9;&#x9;JOIN&#xD;&#xA;&#x9;&#x9;SGT_PERSON_EMPLOYMENT_DETAIL ON&#xD;&#xA;&#x9;&#x9;SGT_PERSON_ACCOUNT_DEFERRED_COMP_CONTRIBUTION.PERSON_EMPLOYMENT_DTL_ID = SGT_PERSON_EMPLOYMENT_DETAIL.PERSON_EMPLOYMENT_DTL_ID&#xD;&#xA;&#x9;&#x9;JOIN &#xD;&#xA;&#x9;&#x9;SGT_PERSON_ACCOUNT ON &#xD;&#xA;&#x9;&#x9;SGT_PERSON_ACCOUNT_DEFERRED_COMP_CONTRIBUTION.PERSON_ACCOUNT_ID = SGT_PERSON_ACCOUNT.PERSON_ACCOUNT_ID&#xD;&#xA;WHERE&#x9;SGT_PERSON_ACCOUNT.PLAN_ID = 19&#xD;&#xA;&#xD;&#xA;--GO&#xD;&#xA;&#xD;&#xA;--***UPDATE END DATES***--&#xD;&#xA;UPDATE&#x9;TEMP_MISSED_DEFCOMP &#xD;&#xA;SET&#x9;&#x9;END_DATE = DATEADD(MM,-1,GETDATE()) &#xD;&#xA;WHERE&#x9;END_DATE IS NULL &#xD;&#xA;&#x9;&#x9;OR END_DATE &gt; GETDATE();&#xD;&#xA;&#xD;&#xA;--GO&#xD;&#xA;&#xD;&#xA;--***COMPARE ENROLLMENT ELECTION TO CONTRIBUTIONS TO FIND MISSING***--&#xD;&#xA;WITH A1&#xD;&#xA;&#x9;&#x9;AS&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9;SELECT PERSON_ID, PERSON_ACCOUNT_ID , START_DATE, END_DATE, PERSON_EMPLOYMENT_ID&#xD;&#xA;&#x9;&#x9;FROM TEMP_MISSED_DEFCOMP A&#xD;&#xA;&#x9;&#x9;UNION ALL&#xD;&#xA;&#x9;&#x9;SELECT PERSON_ID, PERSON_ACCOUNT_ID ,DATEADD(MM,1,START_DATE), END_DATE, PERSON_EMPLOYMENT_ID&#xD;&#xA;&#x9;&#x9;FROM A1&#xD;&#xA;&#x9;&#x9;WHERE DATEADD(MM,1,START_DATE) &lt;= END_DATE &#xD;&#xA;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;SELECT PERSON_ID, PERSON_ACCOUNT_ID , START_DATE, PERSON_EMPLOYMENT_ID&#xD;&#xA;&#x9;&#x9;INTO TEMP_MISSING_DEFCOMP_CNTR&#xD;&#xA;&#x9;&#x9;FROM A1 &#xD;&#xA;&#x9;&#x9;WHERE &#xD;&#xA;&#x9;&#x9;NOT EXISTS&#xD;&#xA;&#x9;&#x9;(&#xD;&#xA;&#x9;&#x9;SELECT 1 FROM TEMP_DEFCOMP_CONTRIBUTIONS B1 &#xD;&#xA;&#x9;&#x9;WHERE B1.PERSON_ACCOUNT_ID = A1.PERSON_ACCOUNT_ID &#xD;&#xA;&#x9;&#x9;AND YEAR(B1.EFFECTIVE_DATE) = YEAR(A1.START_DATE) &#xD;&#xA;&#x9;&#x9;AND MONTH(B1.Effective_Date) = MONTH(A1.START_DATE) &#xD;&#xA;&#x9;&#x9;) &#xD;&#xA;&#x9;&#x9;OPTION (MAXRECURSION 0)&#xD;&#xA;&#xD;&#xA;--GO&#xD;&#xA;&#xD;&#xA;--***REMOVE DETAILS LINKED TO LOA AND LOAM&#xD;&#xA;DELETE A FROM TEMP_MISSING_DEFCOMP_CNTR A&#xD;&#xA;JOIN SGT_PERSON_EMPLOYMENT_DETAIL ON A.PERSON_EMPLOYMENT_ID = SGT_PERSON_EMPLOYMENT_DETAIL.PERSON_EMPLOYMENT_ID&#xD;&#xA;WHERE SGT_PERSON_EMPLOYMENT_DETAIL.STATUS_VALUE IN ('LOA', 'LOAM')&#xD;&#xA;AND A.START_DATE BETWEEN SGT_PERSON_EMPLOYMENT_DETAIL.START_DATE AND ISNULL(SGT_PERSON_EMPLOYMENT_DETAIL.END_DATE,'1/1/9999')&#xD;&#xA;&#xD;&#xA;--GO&#xD;&#xA;&#xD;&#xA;--***SELECT FOR FINAL REPORT***--&#xD;&#xA;&#xD;&#xA;DECLARE&#xD;&#xA;&#x9;&#x9;@PRIOR_MONTH_DATE DATETIME =  DATEADD(MM,-1,GETDATE())&#xD;&#xA;&#xD;&#xA;SELECT&#x9;TEMP_MISSING_DEFCOMP_CNTR.PERSON_ID, CONVERT(VARCHAR(10), TEMP_MISSING_DEFCOMP_CNTR.START_DATE, 101) AS START_DATE, &#xD;&#xA;&#x9;&#x9;SGT_ORGANIZATION.ORG_CODE, SGT_ORGANIZATION.ORG_NAME &#xD;&#xA;FROM&#x9;TEMP_MISSING_DEFCOMP_CNTR&#xD;&#xA;&#x9;&#x9;JOIN &#xD;&#xA;&#x9;&#x9;SGT_PERSON_EMPLOYMENT ON &#xD;&#xA;&#x9;&#x9;TEMP_MISSING_DEFCOMP_CNTR.PERSON_EMPLOYMENT_ID = SGT_PERSON_EMPLOYMENT.PERSON_EMPLOYMENT_ID&#xD;&#xA;&#x9;&#x9;JOIN &#xD;&#xA;&#x9;&#x9;SGT_ORGANIZATION ON &#xD;&#xA;&#x9;&#x9;SGT_PERSON_EMPLOYMENT.ORG_ID = SGT_ORGANIZATION.ORG_ID&#xD;&#xA;WHERE&#x9;MONTH(TEMP_MISSING_DEFCOMP_CNTR.START_DATE) = MONTH(@PRIOR_MONTH_DATE)&#xD;&#xA;&#x9;&#x9;AND YEAR(TEMP_MISSING_DEFCOMP_CNTR.START_DATE) = YEAR(@PRIOR_MONTH_DATE)&#xD;&#xA;ORDER BY 1,2&#xD;&#xA;&#xD;&#xA;  IF OBJECT_ID('TEMP_DEFCOMP_CONTRIBUTIONS', 'u') IS NOT NULL &#xD;&#xA;  DROP TABLE TEMP_DEFCOMP_CONTRIBUTIONS;&#xD;&#xA;&#xD;&#xA;  IF OBJECT_ID('TEMP_MISSED_DEFCOMP', 'u') IS NOT NULL &#xD;&#xA;  DROP TABLE TEMP_MISSED_DEFCOMP;&#xD;&#xA;&#xD;&#xA;  IF OBJECT_ID('TEMP_MISSING_DEFCOMP_CNTR', 'u') IS NOT NULL &#xD;&#xA;  DROP TABLE TEMP_MISSING_DEFCOMP_CNTR;">
      <parameters>
        <parameter ID="@PRIOR_MONTH_DATE" />
      </parameters>
    </query>
    <query ID="LoadDentalEnrollmentPlanRecord" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="Declare @PAYROLLPAIDDATE datetime;&#xD;&#xA;--Declare @ORG_ID int=44;&#xD;&#xA;--SET @PAYROLLPAIDDATE = GETDATE()&#xD;&#xA; select @PAYROLLPAIDDATE=BATCH_DATE from SGS_SYSTEM_MANAGEMENT &#xD;&#xA;SELECT  &#xD;&#xA;&#x9;&#x9;PALH.PERSON_ACCOUNT_GHDV_HISTORY_ID,PALH.PERSON_ACCOUNT_GHDV_ID,PER.PERSON_ID,PER.FIRST_NAME,PER.LAST_NAME,PER.DATE_OF_BIRTH,PALH.LEVEL_OF_COVERAGE_VALUE,&#xD;&#xA;&#x9;&#x9;CV.DATA3,CV.DESCRIPTION AS LEVEL_OF_COVERAGE, PALH.DENTAL_INSURANCE_TYPE_VALUE,PALH.START_DATE,PDENT.PREMIUM_CONVERSION_INDICATOR_FLAG AS PRE_TAX,@PAYROLLPAIDDATE AS RUN_DATE&#xD;&#xA;&#xD;&#xA;FROM SGT_PERSON_ACCOUNT_EMPLOYMENT_DETAIL PAED(NOLOCK)&#xD;&#xA;INNER JOIN SGT_PERSON_EMPLOYMENT_DETAIL PED(NOLOCK) ON PAED.PERSON_EMPLOYMENT_DTL_ID = PED.PERSON_EMPLOYMENT_DTL_ID&#xD;&#xA;INNER JOIN SGT_PERSON_EMPLOYMENT PE(NOLOCK) ON PE.PERSON_EMPLOYMENT_ID = PED.PERSON_EMPLOYMENT_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT PA(NOLOCK) ON PA.PERSON_ACCOUNT_ID = PAED.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PERSON PER (NOLOCK) ON PER.PERSON_ID=PA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT_GHDV PDENT(NOLOCK) ON PA.PERSON_ACCOUNT_ID = PDENT.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT_GHDV_HISTORY PALH(NOLOCK) ON PDENT.PERSON_ACCOUNT_GHDV_ID = PALH.PERSON_ACCOUNT_GHDV_ID&#xD;&#xA;LEFT JOIN SGS_CODE_VALUE CV ON CV.CODE_ID = PALH.LEVEL_OF_COVERAGE_ID and CV.CODE_VALUE=PALH.LEVEL_OF_COVERAGE_VALUE&#xD;&#xA;WHERE PAED.ELECTION_VALUE = 'ENLD' AND PALH.PLAN_PARTICIPATION_STATUS_VALUE = 'ENL2' AND&#xD;&#xA;PALH.DENTAL_INSURANCE_TYPE_VALUE = 'AC16' AND&#xD;&#xA;@PAYROLLPAIDDATE BETWEEN PALH.START_DATE AND ISNULL(PALH.END_DATE,'01/01/2900') AND&#xD;&#xA;PALH.START_DATE &lt;&gt; ISNULL(PALH.END_DATE,'01/01/2900') AND --IGNORE SAME DATED HISTORY RECORDS&#xD;&#xA;@PAYROLLPAIDDATE BETWEEN PA.START_DATE AND ISNULL(PA.END_DATE,'01/01/2900') AND&#xD;&#xA;@PAYROLLPAIDDATE BETWEEN PED.START_DATE AND DATEADD(M,1,ISNULL(PED.END_DATE,'01/01/2900')) AND&#xD;&#xA;@PAYROLLPAIDDATE BETWEEN LEFT(CONVERT(CHAR(8),DATEADD(M,1, PE.START_DATE), 111),8) + '01'  AND DATEADD(M,1,ISNULL(PE.END_DATE,'01/01/2900')) AND&#xD;&#xA;PAED.PLAN_ID = 16 AND&#xD;&#xA;PE.ORG_ID = @ORG_ID&#xD;&#xA;ORDER BY  PER.LAST_NAME, PER.FIRST_NAME, CV.DATA3  ASC">
      <parameters>
        <parameter ID="@ORG_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadHealthEnrollmentPlanRecord" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="Declare @PAYROLLPAIDDATE datetime;&#xA;--Declare @ORG_ID int=44;&#xA;--SET @PAYROLLPAIDDATE = GETDATE()&#xA;select @PAYROLLPAIDDATE=BATCH_DATE from SGS_SYSTEM_MANAGEMENT&#xA;SELECT  &#xA;        PDENT.coverage_code,PAED.PLAN_ID,PA.PERSON_ACCOUNT_ID,PER.PERSON_ID,PER.FIRST_NAME,PER.LAST_NAME,PER.DATE_OF_BIRTH,PALH.LEVEL_OF_COVERAGE_VALUE,&#xA;        CV.DATA3, PALH.HEALTH_INSURANCE_TYPE_VALUE,PALH.START_DATE,@PAYROLLPAIDDATE AS RUN_DATE,&#xA;        CV2.DESCRIPTION AS EMPLOYMENT_TYPE,&#xA;&#x9;&#x9;CASE&#xA;&#x9;&#x9;&#x9;WHEN PDENT.ALTERNATE_STRUCTURE_CODE_VALUE IS NULL THEN CV1.DESCRIPTION&#xA;&#x9;&#x9;&#x9;WHEN PDENT.ALTERNATE_STRUCTURE_CODE_VALUE IS NOT NULL THEN PDENT.ALTERNATE_STRUCTURE_CODE_VALUE&#xA;&#x9;&#x9;END AS TYPE_OF_COVERAGE,&#xA;        CONVERT(VARCHAR, OPHM.SHORT_DESCRIPTION) AS LEVEL_OF_COVERAGE&#xA;FROM SGT_PERSON_ACCOUNT_EMPLOYMENT_DETAIL PAED(NOLOCK)&#xA;INNER JOIN SGT_PERSON_EMPLOYMENT_DETAIL PED(NOLOCK) ON PAED.PERSON_EMPLOYMENT_DTL_ID = PED.PERSON_EMPLOYMENT_DTL_ID&#xA;LEFT JOIN SGS_CODE_VALUE CV2 ON CV2.CODE_ID = PED.TYPE_ID AND CV2.CODE_VALUE = PED.TYPE_VALUE&#xA;INNER JOIN SGT_PERSON_EMPLOYMENT PE(NOLOCK) ON PE.PERSON_EMPLOYMENT_ID = PED.PERSON_EMPLOYMENT_ID&#xA;INNER JOIN SGT_PERSON_ACCOUNT PA(NOLOCK) ON PA.PERSON_ACCOUNT_ID = PAED.PERSON_ACCOUNT_ID&#xA;INNER JOIN SGT_PERSON PER (NOLOCK) ON PER.PERSON_ID=PA.PERSON_ID&#xA;INNER JOIN SGT_PERSON_ACCOUNT_GHDV PDENT(NOLOCK) ON PA.PERSON_ACCOUNT_ID = PDENT.PERSON_ACCOUNT_ID&#xA;INNER JOIN SGT_PERSON_ACCOUNT_GHDV_HISTORY PALH(NOLOCK) ON PDENT.PERSON_ACCOUNT_GHDV_ID = PALH.PERSON_ACCOUNT_GHDV_ID&#xA;LEFT JOIN SGS_CODE_VALUE CV ON CV.CODE_ID = PALH.LEVEL_OF_COVERAGE_ID and CV.CODE_VALUE=PALH.LEVEL_OF_COVERAGE_VALUE&#xA;LEFT JOIN SGS_CODE_VALUE CV1 ON CV1.CODE_ID = PALH.PLAN_OPTION_ID and CV1.CODE_VALUE=PALH.PLAN_OPTION_VALUE&#xA;LEFT JOIN (SELECT DISTINCT SHORT_DESCRIPTION, COVERAGE_CODE FROM SGT_ORG_PLAN_GROUP_HEALTH_MEDICARE_PART_D_COVERAGE_REF) AS OPHM ON OPHM.COVERAGE_CODE = PALH.COVERAGE_CODE&#xA;&#xA;WHERE PAED.ELECTION_VALUE = 'ENLD' AND PALH.PLAN_PARTICIPATION_STATUS_VALUE = 'ENL2' AND&#xA;--PALH.HEALTH_INSURANCE_TYPE_VALUE IN ('NS12','RT09','RT12','ST12') AND&#xA;@PAYROLLPAIDDATE BETWEEN PALH.START_DATE AND ISNULL(PALH.END_DATE,'01/01/2900') AND&#xA;PALH.START_DATE &lt;&gt; ISNULL(PALH.END_DATE,'01/01/2900') AND --IGNORE SAME DATED HISTORY RECORDS&#xA;@PAYROLLPAIDDATE BETWEEN PA.START_DATE AND ISNULL(PA.END_DATE,'01/01/2900') AND&#xA;@PAYROLLPAIDDATE BETWEEN PED.START_DATE AND DATEADD(M,1,ISNULL(PED.END_DATE,'01/01/2900')) AND&#xA;@PAYROLLPAIDDATE BETWEEN LEFT(CONVERT(CHAR(8),DATEADD(M,1, PE.START_DATE), 111),8) + '01'  AND DATEADD(M,1,ISNULL(PE.END_DATE,'01/01/2900')) AND&#xA;PAED.PLAN_ID = 12 AND&#xA;PE.ORG_ID = @ORG_ID&#xA;ORDER BY  PER.LAST_NAME, PER.FIRST_NAME, CV.DATA3  ASC">
      <parameters>
        <parameter ID="@ORG_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadVisionEnrollmentPlanRecord" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="Declare @PAYROLLPAIDDATE datetime;&#xD;&#xA;--Declare @ORG_ID int=44;&#xD;&#xA;--SET @PAYROLLPAIDDATE = GETDATE()&#xD;&#xA; select @PAYROLLPAIDDATE=BATCH_DATE from SGS_SYSTEM_MANAGEMENT &#xD;&#xA;SELECT  &#xD;&#xA;&#x9;&#x9;PA.PERSON_ACCOUNT_ID,PALH.PERSON_ACCOUNT_GHDV_ID,PER.PERSON_ID,PER.FIRST_NAME,PER.LAST_NAME,PER.DATE_OF_BIRTH,PALH.LEVEL_OF_COVERAGE_VALUE,&#xD;&#xA;&#x9;&#x9;CV.DATA3,CV.DESCRIPTION AS LEVEL_OF_COVERAGE, PALH.VISION_INSURANCE_TYPE_VALUE,PALH.START_DATE,PDENT.PREMIUM_CONVERSION_INDICATOR_FLAG AS PRE_TAX,@PAYROLLPAIDDATE AS RUN_DATE&#xD;&#xA;&#xD;&#xA;FROM SGT_PERSON_ACCOUNT_EMPLOYMENT_DETAIL PAED(NOLOCK)&#xD;&#xA;INNER JOIN SGT_PERSON_EMPLOYMENT_DETAIL PED(NOLOCK) ON PAED.PERSON_EMPLOYMENT_DTL_ID = PED.PERSON_EMPLOYMENT_DTL_ID&#xD;&#xA;INNER JOIN SGT_PERSON_EMPLOYMENT PE(NOLOCK) ON PE.PERSON_EMPLOYMENT_ID = PED.PERSON_EMPLOYMENT_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT PA(NOLOCK) ON PA.PERSON_ACCOUNT_ID = PAED.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PERSON PER (NOLOCK) ON PER.PERSON_ID=PA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT_GHDV PDENT(NOLOCK) ON PA.PERSON_ACCOUNT_ID = PDENT.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT_GHDV_HISTORY PALH(NOLOCK) ON PDENT.PERSON_ACCOUNT_GHDV_ID = PALH.PERSON_ACCOUNT_GHDV_ID&#xD;&#xA;LEFT JOIN SGS_CODE_VALUE CV ON CV.CODE_ID = PALH.LEVEL_OF_COVERAGE_ID and CV.CODE_VALUE=PALH.LEVEL_OF_COVERAGE_VALUE&#xD;&#xA;WHERE PAED.ELECTION_VALUE = 'ENLD' AND PALH.PLAN_PARTICIPATION_STATUS_VALUE = 'ENL2' AND&#xD;&#xA;PALH.VISION_INSURANCE_TYPE_VALUE = 'ACTV' AND&#xD;&#xA;@PAYROLLPAIDDATE BETWEEN PALH.START_DATE AND ISNULL(PALH.END_DATE,'01/01/2900') AND&#xD;&#xA;PALH.START_DATE &lt;&gt; ISNULL(PALH.END_DATE,'01/01/2900') AND --IGNORE SAME DATED HISTORY RECORDS&#xD;&#xA;@PAYROLLPAIDDATE BETWEEN PA.START_DATE AND ISNULL(PA.END_DATE,'01/01/2900') AND&#xD;&#xA;@PAYROLLPAIDDATE BETWEEN PED.START_DATE AND DATEADD(M,1,ISNULL(PED.END_DATE,'01/01/2900')) AND&#xD;&#xA;@PAYROLLPAIDDATE BETWEEN LEFT(CONVERT(CHAR(8),DATEADD(M,1, PE.START_DATE), 111),8) + '01'  AND DATEADD(M,1,ISNULL(PE.END_DATE,'01/01/2900')) AND&#xD;&#xA;PAED.PLAN_ID = 17 AND&#xD;&#xA;PE.ORG_ID = @ORG_ID&#xD;&#xA;ORDER BY  PER.LAST_NAME, PER.FIRST_NAME, CV.DATA3  ASC">
      <parameters>
        <parameter ID="@ORG_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadRetirementEnrollmentPlanRecord" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="Declare @PAYROLLPAIDDATE datetime;&#xA;--Declare @ORG_ID INT=44;&#xA;--SET @PAYROLLPAIDDATE = GETDATE()&#xA; select @PAYROLLPAIDDATE=BATCH_DATE from SGS_SYSTEM_MANAGEMENT &#xA;SELECT  &#xA;&#x9;&#x9;PA.PERSON_ACCOUNT_ID,PER.PERSON_ID,PER.FIRST_NAME,PL.PLAN_NAME,PER.LAST_NAME,PER.DATE_OF_BIRTH, PALH.START_DATE,@PAYROLLPAIDDATE AS RUN_DATE&#xA;&#xA;FROM SGT_PERSON_ACCOUNT_EMPLOYMENT_DETAIL PAED(NOLOCK)&#xA;INNER JOIN SGT_PLAN PL ON PAED.PLAN_ID=PL.PLAN_ID&#xA;INNER JOIN SGT_PERSON_EMPLOYMENT_DETAIL PED(NOLOCK) ON PAED.PERSON_EMPLOYMENT_DTL_ID = PED.PERSON_EMPLOYMENT_DTL_ID&#xA;INNER JOIN SGT_PERSON_EMPLOYMENT PE(NOLOCK) ON PE.PERSON_EMPLOYMENT_ID = PED.PERSON_EMPLOYMENT_ID&#xA;INNER JOIN SGT_PERSON_ACCOUNT PA(NOLOCK) ON PA.PERSON_ACCOUNT_ID = PAED.PERSON_ACCOUNT_ID&#xA;INNER JOIN SGT_PERSON PER (NOLOCK) ON PER.PERSON_ID=PA.PERSON_ID&#xA;INNER JOIN SGT_PERSON_ACCOUNT_RETIREMENT_HISTORY PALH (NOLOCK) ON PALH.PERSON_ACCOUNT_ID=PA.PERSON_ACCOUNT_ID&#xA;&#xA;WHERE PAED.ELECTION_VALUE = 'ENLD' AND PALH.PLAN_PARTICIPATION_STATUS_VALUE = 'ENL1' AND&#xA;@PAYROLLPAIDDATE BETWEEN PALH.START_DATE AND ISNULL(PALH.END_DATE,'01/01/2900') AND&#xA;PALH.START_DATE &lt;&gt; ISNULL(PALH.END_DATE,'01/01/2900') AND --IGNORE SAME DATED HISTORY RECORDS&#xA;@PAYROLLPAIDDATE BETWEEN PA.START_DATE AND ISNULL(PA.END_DATE,'01/01/2900') AND&#xA;@PAYROLLPAIDDATE BETWEEN PED.START_DATE AND ISNULL(PED.END_DATE,'01/01/2900') AND&#xA;@PAYROLLPAIDDATE BETWEEN PE.START_DATE AND ISNULL(PE.END_DATE,'01/01/2900') AND&#xA;PAED.PLAN_ID in(1,2,3,4,5,6,7,20,26,27,28,29,30) AND&#xA;PE.ORG_ID = @ORG_ID&#xA;ORDER BY  PER.LAST_NAME, PER.FIRST_NAME  ASC">
      <parameters>
        <parameter ID="@ORG_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadDeffComEnrollmentPlanRecord" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="Declare @PAYROLLPAIDDATE datetime;&#xD;&#xA;--Declare @ORG_ID int=44;&#xD;&#xA;--SET @PAYROLLPAIDDATE = GETDATE()&#xD;&#xA; select @PAYROLLPAIDDATE=BATCH_DATE from SGS_SYSTEM_MANAGEMENT &#xD;&#xA;SELECT  &#xD;&#xA;&#x9;&#x9;PALH.PERSON_ACCOUNT_ID,PER.PERSON_ID,PER.FIRST_NAME,PER.LAST_NAME,PER.DATE_OF_BIRTH,&#xD;&#xA;&#x9;&#x9;PADP.START_DATE, ISNULL(PADP.PER_PAY_PERIOD_CONTRIBUTION_AMT,0.00) AS PER_PAY_PERIOD_CONTRIBUTION_AMT,PADP.COMPANY_NAME,PADP.END_DATE,@PAYROLLPAIDDATE AS RUN_DATE&#xD;&#xA;&#xD;&#xA;FROM SGT_PERSON_ACCOUNT_EMPLOYMENT_DETAIL PAED(NOLOCK)&#xD;&#xA;INNER JOIN SGT_PERSON_EMPLOYMENT_DETAIL PED(NOLOCK) ON PAED.PERSON_EMPLOYMENT_DTL_ID = PED.PERSON_EMPLOYMENT_DTL_ID&#xD;&#xA;INNER JOIN SGT_PERSON_EMPLOYMENT PE(NOLOCK) ON PE.PERSON_EMPLOYMENT_ID = PED.PERSON_EMPLOYMENT_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT PA(NOLOCK) ON PA.PERSON_ACCOUNT_ID = PAED.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PERSON PER (NOLOCK) ON PER.PERSON_ID=PA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT_DEFERRED_COMP_HISTORY PALH(NOLOCK) ON PA.PERSON_ACCOUNT_ID = PALH.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT_DEFERRED_COMP_PROVIDER PADP (NOLOCK) ON PADP.PERSON_ACCOUNT_ID=PALH.PERSON_ACCOUNT_ID&#xD;&#xA;WHERE PAED.ELECTION_VALUE = 'ENLD' AND PALH.PLAN_PARTICIPATION_STATUS_VALUE = 'ENL3' AND&#xD;&#xA;PADP.END_DATE is null AND&#xD;&#xA;@PAYROLLPAIDDATE BETWEEN PALH.START_DATE AND ISNULL(PALH.END_DATE,'01/01/2900') AND&#xD;&#xA;PALH.START_DATE &lt;&gt; ISNULL(PALH.END_DATE,'01/01/2900') AND --IGNORE SAME DATED HISTORY RECORDS&#xD;&#xA;@PAYROLLPAIDDATE BETWEEN PA.START_DATE AND ISNULL(PA.END_DATE,'01/01/2900') AND&#xD;&#xA;@PAYROLLPAIDDATE BETWEEN PED.START_DATE AND DATEADD(M,1,ISNULL(PED.END_DATE,'01/01/2900')) AND&#xD;&#xA;@PAYROLLPAIDDATE BETWEEN LEFT(CONVERT(CHAR(8),DATEADD(M,1, PE.START_DATE), 111),8) + '01'  AND DATEADD(M,1,ISNULL(PE.END_DATE,'01/01/2900')) AND&#xD;&#xA;PAED.PLAN_ID in(8,19) AND&#xD;&#xA;PE.ORG_ID = @ORG_ID&#xD;&#xA;AND PADP.PER_PAY_PERIOD_CONTRIBUTION_AMT &gt; 0&#xD;&#xA;ORDER BY  PER.LAST_NAME, PER.FIRST_NAME  ASC">
      <parameters>
        <parameter ID="@ORG_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadFlexCompEnrollmentPlanRecord" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="Declare @PAYROLLPAIDDATE datetime;&#xD;&#xA;--Declare @ORG_ID int=44;&#xD;&#xA;--SET @PAYROLLPAIDDATE = GETDATE()&#xD;&#xA; select @PAYROLLPAIDDATE=BATCH_DATE from SGS_SYSTEM_MANAGEMENT &#xD;&#xA;SELECT  &#xD;&#xA;&#x9;&#x9;PALH.PERSON_ACCOUNT_ID,PER.PERSON_ID,PER.FIRST_NAME,PER.LAST_NAME,PER.DATE_OF_BIRTH,PALH.LEVEL_OF_COVERAGE_VALUE,&#xD;&#xA;&#x9;&#x9;CV.DATA3,CV.DESCRIPTION AS LEVEL_OF_COVERAGE, PALH.FLEX_COMP_TYPE_VALUE,ISNULL(PALH.ANNUAL_PLEDGE_AMOUNT,'0.00') AS ANNUAL_PLEDGE_AMOUNT,PALH.EFFECTIVE_START_DATE&#xD;&#xA;         ,@PAYROLLPAIDDATE AS RUN_DATE&#xD;&#xA;FROM SGT_PERSON_ACCOUNT_EMPLOYMENT_DETAIL PAED(NOLOCK)&#xD;&#xA;INNER JOIN SGT_PERSON_EMPLOYMENT_DETAIL PED(NOLOCK) ON PAED.PERSON_EMPLOYMENT_DTL_ID = PED.PERSON_EMPLOYMENT_DTL_ID&#xD;&#xA;INNER JOIN SGT_PERSON_EMPLOYMENT PE(NOLOCK) ON PE.PERSON_EMPLOYMENT_ID = PED.PERSON_EMPLOYMENT_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT PA(NOLOCK) ON PA.PERSON_ACCOUNT_ID = PAED.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PERSON PER (NOLOCK) ON PER.PERSON_ID=PA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT_FLEX_COMP_HISTORY PALH(NOLOCK) ON PA.PERSON_ACCOUNT_ID = PALH.PERSON_ACCOUNT_ID&#xD;&#xA;LEFT JOIN SGS_CODE_VALUE CV ON CV.CODE_ID = PALH.LEVEL_OF_COVERAGE_ID and CV.CODE_VALUE=PALH.LEVEL_OF_COVERAGE_VALUE&#xD;&#xA;WHERE PAED.ELECTION_VALUE = 'ENLD' AND PALH.PLAN_PARTICIPATION_STATUS_VALUE = 'ENL4' AND&#xD;&#xA;PALH.FLEX_COMP_TYPE_VALUE = 'ACTV' AND&#xD;&#xA;@PAYROLLPAIDDATE BETWEEN PALH.EFFECTIVE_START_DATE AND ISNULL(PALH.EFFECTIVE_END_DATE,'01/01/2900') AND&#xD;&#xA;PALH.EFFECTIVE_START_DATE &lt;&gt; ISNULL(PALH.EFFECTIVE_END_DATE,'01/01/2900') AND --IGNORE SAME DATED HISTORY RECORDS&#xD;&#xA;@PAYROLLPAIDDATE BETWEEN PA.START_DATE AND ISNULL(PA.END_DATE,'01/01/2900') AND&#xD;&#xA;@PAYROLLPAIDDATE BETWEEN PED.START_DATE AND DATEADD(M,1,ISNULL(PED.END_DATE,'01/01/2900')) AND&#xD;&#xA;@PAYROLLPAIDDATE BETWEEN LEFT(CONVERT(CHAR(8),DATEADD(M,1, PE.START_DATE), 111),8) + '01'  AND DATEADD(M,1,ISNULL(PE.END_DATE,'01/01/2900')) AND&#xD;&#xA;PAED.PLAN_ID = 18 AND&#xD;&#xA;PE.ORG_ID = @ORG_ID&#xD;&#xA;AND PALH.ANNUAL_PLEDGE_AMOUNT &gt; 0&#xD;&#xA;ORDER BY  PER.LAST_NAME, PER.FIRST_NAME, CV.DATA3  ASC">
      <parameters>
        <parameter ID="@ORG_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadEAPEnrollmentPlanRecord" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="Declare @PAYROLLPAIDDATE datetime;&#xD;&#xA;--Declare @ORG_ID int=44;&#xD;&#xA;--SET @PAYROLLPAIDDATE = GETDATE()&#xD;&#xA; select @PAYROLLPAIDDATE=BATCH_DATE from SGS_SYSTEM_MANAGEMENT &#xD;&#xA;SELECT  &#xD;&#xA;&#x9;&#x9;PALH.PERSON_ACCOUNT_ID,PER.PERSON_ID,PER.FIRST_NAME,PER.LAST_NAME,PER.DATE_OF_BIRTH,&#xD;&#xA;&#x9;&#x9;PALH.START_DATE,@PAYROLLPAIDDATE AS RUN_DATE&#xD;&#xA;&#xD;&#xA;FROM SGT_PERSON_ACCOUNT_EMPLOYMENT_DETAIL PAED(NOLOCK)&#xD;&#xA;INNER JOIN SGT_PERSON_EMPLOYMENT_DETAIL PED(NOLOCK) ON PAED.PERSON_EMPLOYMENT_DTL_ID = PED.PERSON_EMPLOYMENT_DTL_ID&#xD;&#xA;INNER JOIN SGT_PERSON_EMPLOYMENT PE(NOLOCK) ON PE.PERSON_EMPLOYMENT_ID = PED.PERSON_EMPLOYMENT_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT PA(NOLOCK) ON PA.PERSON_ACCOUNT_ID = PAED.PERSON_ACCOUNT_ID&#xD;&#xA;INNER JOIN SGT_PERSON PER (NOLOCK) ON PER.PERSON_ID=PA.PERSON_ID&#xD;&#xA;INNER JOIN SGT_PERSON_ACCOUNT_EAP_HISTORY PALH(NOLOCK) ON PA.PERSON_ACCOUNT_ID = PALH.PERSON_ACCOUNT_ID&#xD;&#xA;&#xD;&#xA;WHERE PAED.ELECTION_VALUE = 'ENLD' AND PALH.PLAN_PARTICIPATION_STATUS_VALUE = 'ENL2' AND&#xD;&#xA;@PAYROLLPAIDDATE BETWEEN PALH.START_DATE AND ISNULL(PALH.END_DATE,'01/01/2900') AND&#xD;&#xA;PALH.START_DATE &lt;&gt; ISNULL(PALH.END_DATE,'01/01/2900') AND --IGNORE SAME DATED HISTORY RECORDS&#xD;&#xA;@PAYROLLPAIDDATE BETWEEN PA.START_DATE AND ISNULL(PA.END_DATE,'01/01/2900') AND&#xD;&#xA;@PAYROLLPAIDDATE BETWEEN PED.START_DATE AND DATEADD(M,1,ISNULL(PED.END_DATE,'01/01/2900')) AND&#xD;&#xA;@PAYROLLPAIDDATE BETWEEN LEFT(CONVERT(CHAR(8),DATEADD(M,1, PE.START_DATE), 111),8) + '01'  AND DATEADD(M,1,ISNULL(PE.END_DATE,'01/01/2900')) AND&#xD;&#xA;PAED.PLAN_ID = 14 AND&#xD;&#xA;PE.ORG_ID = @ORG_ID&#xD;&#xA;ORDER BY  PER.LAST_NAME, PER.FIRST_NAME  ASC">
      <parameters>
        <parameter ID="@ORG_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadRetirementContributionESS" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;    PL.PLAN_NAME,&#xA;    ORG.ORG_CODE AS ORG_CODE_ID,&#xA;    ORG.ORG_NAME,&#xA;    SUM(ISNULL(PARC.POST_TAX_EE_AMOUNT,0)) AS EE_POST_TAX_CONTRIBUTIONS,&#xA;    SUM(ISNULL(PARC.PRE_TAX_EE_AMOUNT,0)) AS EE_PRE_TAX_CONTRIBUTIONS,&#xA;    SUM(ISNULL(PARC.EE_ER_PICKUP_AMOUNT,0)) AS EE_EMPLOYER_PICKUP_CONTRIBUTIONS,&#xA;    SUM(ISNULL(PARC.ER_VESTED_AMOUNT,0)) AS ER_CONTRIBUTIONS,&#xA;    SUM(ISNULL(PARC.ER_RHIC_AMOUNT,0)) AS RHIC_ER_CONTRIBUTIONS,&#xA;    SUM(ISNULL(PARC.EE_RHIC_AMOUNT,0)) AS RHIC_EE_CONTRIBUTION,&#xA;    SUM(ISNULL(PARC.SALARY_AMOUNT,0)) AS ELIGIBLE_WAGES,&#xA;    SUM(ISNULL(PARC.POST_TAX_EE_AMOUNT+PARC.PRE_TAX_EE_AMOUNT+PARC.EE_ER_PICKUP_AMOUNT+PARC.ER_VESTED_AMOUNT+PARC.ER_RHIC_AMOUNT+PARC.EE_RHIC_AMOUNT,0)) AS TOTAL_CONTRIBUTIONS&#xA;FROM SGT_PERSON_ACCOUNT_RETIREMENT_CONTRIBUTION PARC&#xA;INNER JOIN SGT_PERSON_ACCOUNT PA ON PARC.PERSON_ACCOUNT_ID = PA.PERSON_ACCOUNT_ID&#xA;INNER JOIN SGT_PLAN PL ON PA.PLAN_ID = PL.PLAN_ID&#xA;INNER JOIN SGT_PERSON_EMPLOYMENT PE ON PA.PERSON_ID = PE.PERSON_ID&#xA;INNER JOIN sgt_organization ORG ON PE.ORG_ID = ORG.ORG_ID&#xA;WHERE&#xA;    PARC.EFFECTIVE_DATE BETWEEN @START_DATE AND @END_DATE AND&#xA;    ORG.ORG_ID = @ORG_ID&#xA;GROUP BY PL.PLAN_NAME,ORG.ORG_CODE,ORG.ORG_NAME">
      <parameters>
        <parameter ID="@START_DATE" sfwDataType="DateTime" />
        <parameter ID="@END_DATE" sfwDataType="DateTime" />
        <parameter ID="@ORG_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadDC25RetrEnrollmentPlanRecord" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="Declare @PAYROLLPAIDDATE datetime;&#xA;&#xA; select @PAYROLLPAIDDATE=BATCH_DATE from SGS_SYSTEM_MANAGEMENT &#xA;SELECT  &#xA;&#x9;&#x9;PA.PERSON_ACCOUNT_ID,PER.PERSON_ID,PER.FIRST_NAME,PL.PLAN_NAME,PER.LAST_NAME,PER.DATE_OF_BIRTH, PALH.START_DATE,@PAYROLLPAIDDATE AS RUN_DATE&#xA;&#x9;&#x9;,palh.ADDL_EE_CONTRIBUTION_PERCENT&#xA;&#xA;FROM SGT_PERSON_ACCOUNT_EMPLOYMENT_DETAIL PAED(NOLOCK)&#xA;INNER JOIN SGT_PLAN PL ON PAED.PLAN_ID=PL.PLAN_ID&#xA;INNER JOIN SGT_PERSON_EMPLOYMENT_DETAIL PED(NOLOCK) ON PAED.PERSON_EMPLOYMENT_DTL_ID = PED.PERSON_EMPLOYMENT_DTL_ID&#xA;INNER JOIN SGT_PERSON_EMPLOYMENT PE(NOLOCK) ON PE.PERSON_EMPLOYMENT_ID = PED.PERSON_EMPLOYMENT_ID&#xA;INNER JOIN SGT_PERSON_ACCOUNT PA(NOLOCK) ON PA.PERSON_ACCOUNT_ID = PAED.PERSON_ACCOUNT_ID&#xA;INNER JOIN SGT_PERSON PER (NOLOCK) ON PER.PERSON_ID=PA.PERSON_ID&#xA;INNER JOIN SGT_PERSON_ACCOUNT_RETIREMENT_HISTORY PALH (NOLOCK) ON PALH.PERSON_ACCOUNT_ID=PA.PERSON_ACCOUNT_ID&#xA;&#xA;WHERE PAED.ELECTION_VALUE = 'ENLD' AND PALH.PLAN_PARTICIPATION_STATUS_VALUE = 'ENL1' AND&#xA;@PAYROLLPAIDDATE BETWEEN PALH.START_DATE AND ISNULL(PALH.END_DATE,'01/01/2900') AND&#xA;PALH.START_DATE &lt;&gt; ISNULL(PALH.END_DATE,'01/01/2900') AND --IGNORE SAME DATED HISTORY RECORDS&#xA;@PAYROLLPAIDDATE BETWEEN PA.START_DATE AND ISNULL(PA.END_DATE,'01/01/2900') AND&#xA;@PAYROLLPAIDDATE BETWEEN PED.START_DATE AND ISNULL(PED.END_DATE,'01/01/2900') AND&#xA;@PAYROLLPAIDDATE BETWEEN PE.START_DATE AND ISNULL(PE.END_DATE,'01/01/2900') AND&#xA;PAED.PLAN_ID in(30) &#xA;AND PE.ORG_ID = @ORG_ID&#xA;ORDER BY  PER.LAST_NAME, PER.FIRST_NAME  ASC">
      <parameters>
        <parameter ID="@ORG_ID" sfwDataType="int" />
      </parameters>
    </query>
  </queries>
  <attributes>
    <attribute ID="WssPersonEmploymentId" sfwType="Column" sfwValue="wss_person_employment_id" sfwKeyNo="1" sfwIsNull="False" sfwIsIdentity="True" sfwDataType="int" />
    <attribute ID="MemberRecordRequestId" sfwType="Column" sfwValue="member_record_request_id" sfwKeyNo="0" sfwIsNull="False" sfwIsIdentity="False" sfwDataType="int" />
    <attribute ID="PersonEmploymentId" sfwType="Column" sfwValue="person_employment_id" sfwKeyNo="0" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="int" />
    <attribute ID="StartDate" sfwType="Column" sfwValue="start_date" sfwKeyNo="0" sfwIsNull="False" sfwIsIdentity="False" sfwDataType="DateTime" />
    <attribute ID="OrgId" sfwType="Column" sfwValue="org_id" sfwKeyNo="0" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="int" />
    <attribute ID="CreatedBy" sfwType="Column" sfwValue="created_by" sfwKeyNo="0" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwLength="50" />
    <attribute ID="CreatedDate" sfwType="Column" sfwValue="created_date" sfwKeyNo="0" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="DateTime" />
    <attribute ID="ModifiedBy" sfwType="Column" sfwValue="modified_by" sfwKeyNo="0" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwLength="50" />
    <attribute ID="ModifiedDate" sfwType="Column" sfwValue="modified_date" sfwKeyNo="0" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="DateTime" />
    <attribute ID="UpdateSeq" sfwType="Column" sfwValue="update_seq" sfwKeyNo="0" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="int" />
    <attribute ID="PsEmplRecordNumber" sfwType="Column" sfwValue="ps_empl_record_number" sfwKeyNo="0" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwLength="5" />
    <attribute ID="EndDate" sfwType="Column" sfwValue="end_date" sfwKeyNo="0" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="DateTime" />
  </attributes>
  <constraint />
  <rules />
  <initialload />
  <softerror />
  <harderror />
  <validatedelete />
  <delete />
  <groupslist />
  <checklist />
  <methods />
  <lifecycle />
  <objectmethods />
  <ExtraFields />
</entity>