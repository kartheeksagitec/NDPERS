-------------------------------------------------------------------------------001_Upgrade_UDT_Scripts--------------------------------------------------
--001_UserDefindedatatype_F.W

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_ACCTNO')
BEGIN
CREATE TYPE [dbo].[UDT_ACCTNO]
    FROM VARCHAR (17) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_ADDRESS')
BEGIN
CREATE TYPE [dbo].[UDT_ADDRESS]
FROM VARCHAR (60) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_ADDRESS_LINE')
BEGIN
CREATE TYPE [dbo].[UDT_ADDRESS_LINE]
    FROM VARCHAR (60) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_AGE')
BEGIN
CREATE TYPE [dbo].[UDT_AGE]
 FROM NUMERIC (3) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_AMT')
BEGIN
 CREATE TYPE [dbo].[UDT_AMT]
    FROM NUMERIC (11, 2) NOT NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_BIGINT')
BEGIN
CREATE TYPE [dbo].[UDT_BIGINT]
    FROM BIGINT NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_BIN_MAX_VALUE')
BEGIN
CREATE TYPE [dbo].[UDT_BIN_MAX_VALUE]
    FROM VARBINARY (MAX) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_CITY')
BEGIN
CREATE TYPE [dbo].[UDT_CITY]
    FROM VARCHAR (50) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_CODE')
BEGIN
CREATE TYPE [dbo].[UDT_CODE]
    FROM VARCHAR (10) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_CODE_ID')
BEGIN
CREATE TYPE [dbo].[UDT_CODE_ID]
    FROM INT NOT NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_CODE_VALUE')
BEGIN
CREATE TYPE [dbo].[UDT_CODE_VALUE]
    FROM VARCHAR (4) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_COL_VALUE')
BEGIN
CREATE TYPE [dbo].[UDT_COL_VALUE]
    FROM VARCHAR (1000) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_COMMENTS')
BEGIN
CREATE TYPE [dbo].[UDT_COMMENTS]
    FROM VARCHAR (2000) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_CREATEDBY')
BEGIN
CREATE TYPE [dbo].[UDT_CREATEDBY]
    FROM VARCHAR (50) NOT NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_DATA')
BEGIN
CREATE TYPE [dbo].[UDT_DATA]
    FROM VARCHAR (20) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_DATA40')
BEGIN
CREATE TYPE [dbo].[UDT_DATA40]
FROM VARCHAR (40) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_DATA50')
BEGIN
CREATE TYPE [dbo].[UDT_DATA50]
FROM VARCHAR (50) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_DATE')
BEGIN
CREATE TYPE [dbo].[UDT_DATE]
    FROM DATE NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_DATETIME')
BEGIN
CREATE TYPE [dbo].[UDT_DATETIME]
FROM DATETIME NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_DAYS')
BEGIN
CREATE TYPE [dbo].[UDT_DAYS]
FROM NUMERIC (5, 2) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_DBOBJ')
BEGIN
CREATE TYPE [dbo].[UDT_DBOBJ]
    FROM VARCHAR (128) NOT NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_DESC')
BEGIN
CREATE TYPE [dbo].[UDT_DESC]
    FROM VARCHAR (100) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_DESCRIPTION')
BEGIN
CREATE TYPE [dbo].[UDT_DESCRIPTION]
    FROM VARCHAR (255) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_EMAIL')
BEGIN
CREATE TYPE [dbo].[UDT_EMAIL]
    FROM VARCHAR (70) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_ENCRYPTEDVAL')
BEGIN
CREATE TYPE [dbo].[UDT_ENCRYPTEDVAL]
    FROM VARCHAR (256) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_FACTOR')
BEGIN
CREATE TYPE [dbo].[UDT_FACTOR]
    FROM NUMERIC (12, 9) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_FAX')
BEGIN
CREATE TYPE [dbo].[UDT_FAX]
    FROM VARCHAR (15) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_FEDERAL_ID')
BEGIN
CREATE TYPE [dbo].[UDT_FEDERAL_ID]
    FROM VARCHAR (9) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_FILE')
BEGIN
CREATE TYPE [dbo].[UDT_FILE]
    FROM VARBINARY (MAX) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_FILE_LOCATION')
BEGIN
CREATE TYPE [dbo].[UDT_FILE_LOCATION]
    FROM VARCHAR (200) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_FILE_MAX')
BEGIN
CREATE TYPE [dbo].[UDT_FILE_MAX]
    FROM VARCHAR (MAX) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_FILE_NAME')
BEGIN
CREATE TYPE [dbo].[UDT_FILE_NAME]
    FROM VARCHAR (100) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_FLAG')
BEGIN
CREATE TYPE [dbo].[UDT_FLAG]
    FROM VARCHAR (1) NOT NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_FOREIGN_POSTAL_CODE')
BEGIN
CREATE TYPE [dbo].[UDT_FOREIGN_POSTAL_CODE]
    FROM VARCHAR (12) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_FY_YEAR')
BEGIN
CREATE TYPE [dbo].[UDT_FY_YEAR]
FROM NUMERIC (4) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_HOURS')
BEGIN
CREATE TYPE [dbo].[UDT_HOURS]
    FROM DECIMAL (7, 2) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_ID')
BEGIN
CREATE TYPE [dbo].[UDT_ID]
 FROM INT NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_IDENTITY')
BEGIN
 CREATE TYPE [dbo].[UDT_IDENTITY]
    FROM INT NOT NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_IMAGE')
BEGIN
CREATE TYPE [dbo].[UDT_IMAGE]
    FROM IMAGE NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_IND')
BEGIN
CREATE TYPE [dbo].[UDT_IND]
    FROM VARCHAR (1) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_INT')
BEGIN
CREATE TYPE [dbo].[UDT_INT]
    FROM INT NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_KEY')
BEGIN
CREATE TYPE [dbo].[UDT_KEY]
    FROM VARCHAR (50) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_LONGDESC')
BEGIN
CREATE TYPE [dbo].[UDT_LONGDESC]
    FROM VARCHAR (500) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_LONGNAME')
BEGIN
CREATE TYPE [dbo].[UDT_LONGNAME]
    FROM VARCHAR (1000) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_MAILNAME')
BEGIN
CREATE TYPE [dbo].[UDT_MAILNAME]
    FROM VARCHAR (100) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_MAX_VALUE')
BEGIN
CREATE TYPE [dbo].[UDT_MAX_VALUE]
    FROM VARCHAR (MAX) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_MODIFIEDBY')
BEGIN
CREATE TYPE [dbo].[UDT_MODIFIEDBY]
    FROM VARCHAR (50) NOT NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_MONTHS')
BEGIN
CREATE TYPE [dbo].[UDT_MONTHS]
    FROM NUMERIC (5, 2) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_NAME')
BEGIN
CREATE TYPE [dbo].[UDT_NAME]
    FROM VARCHAR (100) NULL;

GRANT REFERENCES
ON TYPE::[dbo].[UDT_NAME] TO PUBLIC;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_NOTES')
BEGIN
CREATE TYPE [dbo].[UDT_NOTES]
    FROM VARCHAR (2000) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_NOTES_MAX')
BEGIN
CREATE TYPE [dbo].[UDT_NOTES_MAX]
    FROM VARCHAR (5300) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_NULL_DATETIME')
BEGIN
CREATE TYPE [dbo].[UDT_NULL_DATETIME]
    FROM DATETIME NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_ORGNAME')
BEGIN
CREATE TYPE [dbo].[UDT_ORGNAME]
    FROM VARCHAR (75) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_PASSWD')
BEGIN
CREATE TYPE [dbo].[UDT_PASSWD]
    FROM VARCHAR (20) NOT NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_PERC')
BEGIN
CREATE TYPE [dbo].[UDT_PERC]
    FROM NUMERIC (7, 4) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_PERCENT')
BEGIN
CREATE TYPE [dbo].[UDT_PERCENT]
    FROM NUMERIC (7, 4) NULL;

GRANT REFERENCES
    ON TYPE::[dbo].[UDT_PERCENT] TO PUBLIC;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_PHONE')
BEGIN
CREATE TYPE [dbo].[UDT_PHONE]
FROM BIGINT NULL;

GRANT REFERENCES
    ON TYPE::[dbo].[UDT_PHONE] TO PUBLIC;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_PIN')
BEGIN
CREATE TYPE [dbo].[UDT_PIN]
FROM VARCHAR (256) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_POSTAL_CODE')
BEGIN
CREATE TYPE [dbo].[UDT_POSTAL_CODE]
    FROM VARCHAR (12) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_PROVINCE')
BEGIN
CREATE TYPE [dbo].[UDT_PROVINCE]
FROM VARCHAR (50) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_RATE_PERC')
BEGIN
CREATE TYPE [dbo].[UDT_RATE_PERC]
FROM NUMERIC (7, 4) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_RECORD_DATA')
BEGIN
CREATE TYPE [dbo].[UDT_RECORD_DATA]
    FROM VARCHAR (899) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_REF_NBR')
BEGIN
CREATE TYPE [dbo].[UDT_REF_NBR]
    FROM VARCHAR (50) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_ROUTINGNO')
BEGIN
CREATE TYPE [dbo].[UDT_ROUTINGNO]
    FROM VARCHAR (20) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_SERVICE')
BEGIN
CREATE TYPE [dbo].[UDT_SERVICE]
    FROM NUMERIC (18, 15) NOT NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_SERVICE_TOTAL')
BEGIN
CREATE TYPE [dbo].[UDT_SERVICE_TOTAL]
    FROM NUMERIC (18, 15) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_SHORTDESC')
BEGIN
CREATE TYPE [dbo].[UDT_SHORTDESC]
    FROM VARCHAR (30) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_SHORTNAME')
BEGIN
CREATE TYPE [dbo].[UDT_SHORTNAME]
    FROM VARCHAR (50) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_SINT')
BEGIN
CREATE TYPE [dbo].[UDT_SINT]
    FROM SMALLINT NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_SMALLINT')
BEGIN
CREATE TYPE [dbo].[UDT_SMALLINT]
    FROM SMALLINT NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_SSN')
BEGIN
CREATE TYPE [dbo].[UDT_SSN]
    FROM VARCHAR (9) NULL;

GRANT REFERENCES
    ON TYPE::[dbo].[UDT_SSN] TO PUBLIC;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_STATE')
BEGIN
CREATE TYPE [dbo].[UDT_STATE]
   FROM VARCHAR (50) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_SUBMITEDBY')
BEGIN
CREATE TYPE [dbo].[UDT_SUBMITEDBY]
 FROM VARCHAR (50) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_TEXT')
BEGIN
 CREATE TYPE [dbo].[UDT_TEXT]
    FROM VARCHAR (256) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_TIME')
BEGIN
CREATE TYPE [dbo].[UDT_TIME]
    FROM NUMERIC (4, 2) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_UC_PATH_ID')
BEGIN
CREATE TYPE [dbo].[UDT_UC_PATH_ID]
    FROM VARCHAR (10) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_UNIQUE_IDENTIFIER')
BEGIN
CREATE TYPE [dbo].[UDT_UNIQUE_IDENTIFIER]
    FROM UNIQUEIDENTIFIER NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_UPDSEQ')
BEGIN
CREATE TYPE [dbo].[UDT_UPDSEQ]
    FROM INT NOT NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_URL')
BEGIN
CREATE TYPE [dbo].[UDT_URL]
    FROM VARCHAR (200) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_USERID')
BEGIN
CREATE TYPE [dbo].[UDT_USERID]
FROM VARCHAR (20) NOT NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_YEAR')
BEGIN
CREATE TYPE [dbo].[UDT_YEAR]
 FROM INT NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_YEARS')
BEGIN
 CREATE TYPE [dbo].[UDT_YEARS]
 FROM NUMERIC (5, 2) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_ZIP_CODE')
BEGIN
 CREATE TYPE [dbo].[UDT_ZIP_CODE]
 FROM VARCHAR (5) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_ZIP4')
BEGIN
CREATE TYPE [dbo].[UDT_ZIP4]
 FROM INT NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_ZIP4_CODE')
BEGIN
CREATE TYPE [dbo].[UDT_ZIP4_CODE]
FROM VARCHAR (4) NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_ZIP5')
BEGIN
CREATE TYPE [dbo].[UDT_ZIP5]
FROM INT NULL;
END

IF NOT EXISTS( SELECT * FROM sys.types where name ='UDT_ZIP5_CODE')
BEGIN
CREATE TYPE [dbo].[UDT_ZIP5_CODE]
FROM VARCHAR (5) NULL;
END



-------------------------------------------------------------------------------01_SGW_BPM_PROCESS--------------------------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_PROCESS') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESS IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_PROCESS] (
    [PROCESS_ID]     INT           IDENTITY (1, 1) NOT NULL,
    [BPM_PROCESS_ID] VARCHAR (50)  NULL,
    [CASE_ID]        INT           NULL,
    [DESCRIPTION]    VARCHAR (MAX) NULL,
    [NAME]           VARCHAR (MAX) NULL,
    [PRIORITY]       INT           NOT NULL,
    [PROCESS_CODE]   VARCHAR (50)  NULL,
    [TYPE_ID]        INT           NOT NULL,
    [TYPE_VALUE]     VARCHAR (4)   NULL,
    [STATUS_ID]      INT           NOT NULL,
    [STATUS_VALUE]   VARCHAR (4)   NULL,
    [CREATED_BY]     VARCHAR (50)  NOT NULL,
    [CREATED_DATE]   DATETIME      NOT NULL,
    [MODIFIED_BY]    VARCHAR (50)  NOT NULL,
    [MODIFIED_DATE]  DATETIME      NOT NULL,
    [UPDATE_SEQ]     INT           NULL,
	[SLA_MINUTES]		  INT			NULL,
	[SLA_HOURS]			  INT			NULL,
	[SLA_DAYS]			  INT			NULL,
	[RESTRICT_NOTIFY_FLAG]	varchar(1)	NULL,
	[ONLINE_IND]			varchar(1)				NULL,
	[SHORT_DESC]			varchar(20)				NULL,
    CONSTRAINT [PK_SGW_BPM_PROCESS_PROCESS_ID] PRIMARY KEY CLUSTERED ([PROCESS_ID] ASC)
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESS IS already EXISTS'
END       
GO

-----------------------------------------------------------------------------106_SGW_BPM_PROCESS(6.0.15.0.J)---------------------------------------------

IF NOT EXISTS(SELECT 1 FROM SYS.COLUMNS WHERE NAME =N'PROCESS_OWNER_ROLE'  AND OBJECT_ID = OBJECT_ID(N'SGW_BPM_PROCESS'))
BEGIN
ALTER TABLE [dbo].[SGW_BPM_PROCESS]
ADD [PROCESS_OWNER_ROLE] [int] NULL;
PRINT 'COLUMN NAME: PROCESS_OWNER_ROLE ALTERED SUCCESSFULLY'
END
ELSE
BEGIN
  PRINT 'COLUMN NAME: PROCESS_OWNER_ROLE ALREADY EXISTS IN THE TABLE SGW_BPM_PROCESS'
END
GO

-------------------------------------------------------------------02_SGW_BPM_PROCESS_ESC_MESSAGES------------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_PROCESS_ESC_MESSAGES') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESS_ESC_MESSAGES IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_PROCESS_ESC_MESSAGES](
	[PROCESS_ESC_MESSAGE_ID] [int] IDENTITY(1,1) NOT NULL,
	[ESCALATION_TYPE_VALUE] [varchar](4) NOT NULL,
	[ESCALATION_MESSAGE] [varchar](max) NOT NULL,
 CONSTRAINT [PK_PROCESS_ESC] PRIMARY KEY CLUSTERED 
(
	[PROCESS_ESC_MESSAGE_ID] ASC
))
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESS_ESC_MESSAGES IS already EXISTS'
END       
GO


------------------------------------------------------------------------------93_Alter_Script_for_SGW_BPM_PROCESS_ESC_MESSAGES(6.0.13.0)----------------------------------------------------------------- 
--Created By	:	Rashmi Deepak
--Created On	:	14th September 2020
--Description	:	Adding audit columns in  SGW_BPM_PROCESS_ESC_MESSAGES
------------------------------------------------------------------------------------------------------------------------ 

IF COL_LENGTH('dbo.SGW_BPM_PROCESS_ESC_MESSAGES', 'CREATED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_PROCESS_ESC_MESSAGES]
ADD CREATED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_PROCESS_ESC_MESSAGES', 'CREATED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_PROCESS_ESC_MESSAGES]
ADD CREATED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_PROCESS_ESC_MESSAGES', 'MODIFIED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_PROCESS_ESC_MESSAGES]
ADD MODIFIED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_PROCESS_ESC_MESSAGES', 'MODIFIED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_PROCESS_ESC_MESSAGES]
ADD MODIFIED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_PROCESS_ESC_MESSAGES', 'UPDATE_SEQ') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_PROCESS_ESC_MESSAGES]
ADD UPDATE_SEQ int NOT NULL DEFAULT 0
END
GO

--------------------------------------------------------------------------------151_INSERT_SGW_BPM_PROCESS_ESC_MESSAGES---------------------------------

IF NOT EXISTS(SELECT * FROM SGW_BPM_PROCESS_ESC_MESSAGES WHERE ESCALATION_TYPE_VALUE = 'LTAE') 
 BEGIN	
	INSERT INTO [dbo].[SGW_BPM_PROCESS_ESC_MESSAGES] (ESCALATION_TYPE_VALUE,ESCALATION_MESSAGE,CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ) VALUES
('LTAE','The process {0} with case instance id {1} is delayed whose due date is on {2}.','Conversion',GETDATE(),'Conversion',GETDATE(),0)
 END
GO

IF NOT EXISTS(SELECT * FROM SGW_BPM_PROCESS_ESC_MESSAGES WHERE ESCALATION_TYPE_VALUE = 'LTBE') 
BEGIN
	INSERT INTO [dbo].[SGW_BPM_PROCESS_ESC_MESSAGES] (ESCALATION_TYPE_VALUE,ESCALATION_MESSAGE,CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ) VALUES
('LTBE','The process {0} with case instance id {1} is due on {2}.','Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT * FROM SGW_BPM_PROCESS_ESC_MESSAGES WHERE ESCALATION_TYPE_VALUE = 'LTOE') 
 BEGIN
	INSERT INTO [dbo].[SGW_BPM_PROCESS_ESC_MESSAGES] (ESCALATION_TYPE_VALUE,ESCALATION_MESSAGE,CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ) VALUES
('LTOE','The process {0} with case instance id {1} is due now.','Conversion',GETDATE(),'Conversion',GETDATE(),0)
 END
GO

--------------------------------------------------------------------------------03_SGW_BPM_CASE---------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_CASE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_CASE] (
    [CASE_ID]       INT           IDENTITY (1, 1) NOT NULL,
    [CASE_FILE]     VARCHAR (MAX) NULL,
    [DESCRIPTION]   VARCHAR (MAX) NULL,
    [NAME]          VARCHAR (MAX) NULL,
    [CREATED_BY]    VARCHAR (50)  NOT NULL,
    [CREATED_DATE]  DATETIME      NOT NULL,
    [MODIFIED_BY]   VARCHAR (50)  NOT NULL,
    [MODIFIED_DATE] DATETIME      NOT NULL,
    [UPDATE_SEQ]    INT           NULL,
    [VERSION]       INT           NULL,
    [BPMMAP]        VARCHAR (MAX) NULL,
	[BBPMMAP]		IMAGE		  NULL,
    [STATUS_ID]     INT           NOT NULL,
    [STATUS_VALUE]  VARCHAR (4)   NULL,
	[EFFECTIVE_DATE] DATE		  NOT NULL DEFAULT GETDATE(),
	[RESOURCE_ID]    INT          NULL,
    CONSTRAINT [PK_SGW_BPM_CASE_CASE_ID] PRIMARY KEY CLUSTERED ([CASE_ID] ASC)
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE IS already EXISTS'
END       
GO

--------------------------------------------------------------------------------04_SGW_BPM_CASE_INSTANCE---------------------------------


IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_CASE_INSTANCE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_INSTANCE IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_CASE_INSTANCE] (
    [CASE_INSTANCE_ID]    INT            IDENTITY (1, 1) NOT NULL,
    [CASE_ID]             INT            NOT NULL,
    [PERSON_ID]           INT            NOT NULL,
    [ORG_ID]              INT            NOT NULL,
    [REFERENCE_ID]        BIGINT         NULL,
    [REQUEST_ID]          INT            NULL,
    [CREATED_BY]          VARCHAR (50)   NOT NULL,
    [CREATED_DATE]        DATETIME       NOT NULL,
    [MODIFIED_BY]         VARCHAR (50)   NOT NULL,
    [MODIFIED_DATE]       DATETIME       NOT NULL,
    [UPDATE_SEQ]          INT            NULL,
    [STATUS_ID]           INT            NOT NULL,
    [STATUS_VALUE]        VARCHAR (4)    NULL,
    [PRIORITY_CODE_ID]    INT            NULL,
    [PRIORITY_CODE_VALUE] VARCHAR (4)    NULL,
    [CASE_OWNER]          VARCHAR (100)  NULL,
    [TERMINATION_REASON]  VARCHAR (1000) NULL,
    CONSTRAINT [PK_SGW_BPM_CASE_INSTANCE_CASE_INSTANCE_ID] PRIMARY KEY CLUSTERED ([CASE_INSTANCE_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_CASE_INSTANCE_CASE_ID_SGW_BPM_CASE_CASE_ID] FOREIGN KEY ([CASE_ID]) REFERENCES [dbo].[SGW_BPM_CASE] ([CASE_ID])
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_INSTANCE IS already EXISTS'
END       
GO

--------------------------------------------------------------------------------05_SGW_BPM_CASE_DETAILS---------------------------------


IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_CASE_DETAILS') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_DETAILS IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_CASE_DETAILS] (
    [CASE_DETAILS_ID] INT             IDENTITY (1, 1) NOT NULL,
    [CASE_ID]         INT             NOT NULL,
    [CASE_DETAILS]    VARBINARY (MAX) NOT NULL,
    CONSTRAINT [PK_SGW_BPM_CASE_DETAILS] PRIMARY KEY CLUSTERED ([CASE_DETAILS_ID] ASC)
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_DETAILS IS already EXISTS'
END       
GO

--------------------------------------------------------------------------------06_SGW_BPM_ACTIVITY---------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_ACTIVITY') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ACTIVITY] (
    [ACTIVITY_ID]         INT           IDENTITY (1, 1) NOT NULL,
    [BPM_ACTIVITY_ID]     VARCHAR (50)  NULL,
    [PROCESS_ID]          INT           NOT NULL,
    [NAME]                VARCHAR (MAX) NULL,
    [ACTIVITY_TYPE_ID]    INT           NULL,
    [ACTIVITY_TYPE_VALUE] VARCHAR (4)   NULL,
    [CREATED_BY]          VARCHAR (50)  NOT NULL,
    [CREATED_DATE]        DATETIME      NOT NULL,
    [MODIFIED_BY]         VARCHAR (50)  NOT NULL,
    [MODIFIED_DATE]       DATETIME      NOT NULL,
    [UPDATE_SEQ]          INT           NULL,
    [PARENT_ACTIVITY_ID]  INT           NULL,
	[SLA_MINUTES]		  INT			NULL,
	[SLA_HOURS]			  INT			NULL,
	[SLA_DAYS]			  INT			NULL,
	[EXTERNAL_TASK]		  VARCHAR (1)	NULL,
	[TARGET_SITE_ID]	  INT           NULL,
	[TARGET_SITE_VALUE]	  VARCHAR(4)	NULL,
	[ASSIGNABLE_ACTY_COUNT] INT			NULL,
	[SHORT_DESC]			varchar(20)				NULL,
    CONSTRAINT [PK_SGW_BPM_ACTIVITY_ACTIVITY_ID] PRIMARY KEY CLUSTERED ([ACTIVITY_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_ACTIVITY_PROCESS_ID_SGW_BPM_PROCESS_PROCESS_ID] FOREIGN KEY ([PROCESS_ID]) REFERENCES [dbo].[SGW_BPM_PROCESS] ([PROCESS_ID])
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY IS already EXISTS'
END       
GO

--------------------------------------------------------------------------------07_SGW_BPM_CASE_CONFIG_TRACING---------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_CASE_CONFIG_TRACING') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_CONFIG_TRACING IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_CASE_CONFIG_TRACING](
	[CASE_CONFIG_TRACING_ID] [int] IDENTITY(1,1) NOT NULL,
	[CASE_FILE] VARCHAR(4000) NULL,
	[BPM_TRACING_FLAG] VARCHAR(1) NOT NULL,	
	[CREATED_BY] [VARCHAR](50) NOT NULL,
	[CREATED_DATE] [DATETIME] NOT NULL,
	[MODIFIED_BY] [VARCHAR](50) NOT NULL,
	[MODIFIED_DATE] [DATETIME] NOT NULL,
	[UPDATE_SEQ] [INT]  NULL,
 CONSTRAINT [PK_SGW_BPM_CASE_CONFIG_TRACING] PRIMARY KEY CLUSTERED 
(
	[CASE_CONFIG_TRACING_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_CONFIG_TRACING IS already EXISTS'
END       
GO

--------------------------------------------------------------------------------08_SGW_BPM_ACTIVITY_INST_DETAILS---------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_ACTIVITY_INST_DETAILS') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_INST_DETAILS IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ACTIVITY_INST_DETAILS](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[ACTIVITY_INSTANCE_ID] [int] NOT NULL,
	[PARENT_ACTV_INST_ID] [int] NOT NULL,
	[CREATED_BY] [varchar](50) NOT NULL,
	[CREATED_DATE] [datetime] NOT NULL,
	[MODIFIED_BY] [varchar](50) NOT NULL,
	[MODIFIED_DATE] [datetime] NOT NULL,
	[UPDATE_SEQ] [int] NOT NULL,
 CONSTRAINT [PK_SGW_BPM_ACTIVITY_INST_DETAILS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_INST_DETAILS IS already EXISTS'
END       
GO

--------------------------------------------------------------------------------09_SGW_BPM_ACTIVITY_ESC_MESSAGES---------------------------------------------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_ACTIVITY_ESC_MESSAGES') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_ESC_MESSAGES IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ACTIVITY_ESC_MESSAGES](
	[ACTIVITY_ESC_MESSAGE_ID] [int] IDENTITY(1,1) NOT NULL,
	[ESCALATION_TYPE_VALUE] [varchar](4) NOT NULL,
	[ESCALATION_MESSAGE] [varchar](max) NOT NULL,
 CONSTRAINT [PK_ACTIVITY_ESC] PRIMARY KEY CLUSTERED 
(
	[ACTIVITY_ESC_MESSAGE_ID] ASC
))

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_ESC_MESSAGES IS already EXISTS'
END       
GO
----------------------------------------------------------------------------------88_Alter_Script_for_SGW_BPM_ACTIVITY_ESC_MESSAGES(6.0.13.0)-----------------------------------
--Created By	:	Rashmi Deepak
--Created On	:	14th September 2020
--Description	:	Adding audit columns in  SGW_BPM_ACTIVITY_ESC_MESSAGES
------------------------------------------------------------------------------------------------------------------------ 

IF COL_LENGTH('dbo.SGW_BPM_ACTIVITY_ESC_MESSAGES', 'CREATED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ACTIVITY_ESC_MESSAGES]
ADD CREATED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ACTIVITY_ESC_MESSAGES', 'CREATED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ACTIVITY_ESC_MESSAGES]
ADD CREATED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ACTIVITY_ESC_MESSAGES', 'MODIFIED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ACTIVITY_ESC_MESSAGES]
ADD MODIFIED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ACTIVITY_ESC_MESSAGES', 'MODIFIED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ACTIVITY_ESC_MESSAGES]
ADD MODIFIED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ACTIVITY_ESC_MESSAGES', 'UPDATE_SEQ') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ACTIVITY_ESC_MESSAGES]
ADD UPDATE_SEQ int NOT NULL DEFAULT 0
END
GO

-----------------------------------------------------------------------152_INSERT_SGW_BPM_ACTIVITY_ESC_MESSAGES----------------------------------------------------


IF NOT EXISTS(SELECT * FROM SGW_BPM_ACTIVITY_ESC_MESSAGES WHERE ESCALATION_TYPE_VALUE = 'LTBE') 
 BEGIN	
	INSERT INTO [dbo].[SGW_BPM_ACTIVITY_ESC_MESSAGES] (ESCALATION_TYPE_VALUE,ESCALATION_MESSAGE,CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ) 
	VALUES ('LTBE','The case {0} with case instance id {1} at step {2} is due on {3}.','Conversion',GETDATE(),'Conversion',GETDATE(),0)
 END
GO

IF NOT EXISTS(SELECT * FROM SGW_BPM_ACTIVITY_ESC_MESSAGES WHERE ESCALATION_TYPE_VALUE = 'LTAE') 
BEGIN	
	INSERT INTO [dbo].[SGW_BPM_ACTIVITY_ESC_MESSAGES] (ESCALATION_TYPE_VALUE,ESCALATION_MESSAGE,CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ) VALUES
('LTAE','The case {0} with case instance id {1} at step {2} is delayed whose due date is on {3}.','Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT * FROM SGW_BPM_ACTIVITY_ESC_MESSAGES WHERE ESCALATION_TYPE_VALUE = 'LTSA') 
 BEGIN	
	INSERT INTO [dbo].[SGW_BPM_ACTIVITY_ESC_MESSAGES] (ESCALATION_TYPE_VALUE,ESCALATION_MESSAGE,CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ) VALUES
('LTSA','The case {0} with case instance id {1} at step {2} is suspended since {3}.','Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT * FROM SGW_BPM_ACTIVITY_ESC_MESSAGES WHERE ESCALATION_TYPE_VALUE = 'LTOE') 
 BEGIN
	INSERT INTO [dbo].[SGW_BPM_ACTIVITY_ESC_MESSAGES] (ESCALATION_TYPE_VALUE,ESCALATION_MESSAGE,CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ) VALUES
('LTOE','The case {0} with case instance id {1} at step {2} is due now.','Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

IF NOT EXISTS(SELECT * FROM SGW_BPM_ACTIVITY_ESC_MESSAGES WHERE ESCALATION_TYPE_VALUE = 'LTBE') 
 BEGIN	
	INSERT INTO [dbo].[SGW_BPM_ACTIVITY_ESC_MESSAGES] (ESCALATION_TYPE_VALUE,ESCALATION_MESSAGE,CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ) VALUES
('LTNA','The case {0} with case instance id {1} at step {2} is un assigned.','Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO

-----------------------------------------------------------------------10_SGW_BPM_CASE_CONFIGURATION----------------------------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_CASE_CONFIGURATION') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_CONFIGURATION IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_CASE_CONFIGURATION]
(
	[CASE_CONFIGURATION_ID]  int				IDENTITY(1,1) NOT NULL,
	[CASE_FILE]				 varchar(4000)		NULL,
	[ENGINE_ID]				 int				NULL,
	[ENGINE_VALUE]			 varchar(4)			NOT NULL,
	[SOURCE_ID]              int                NOT NULL DEFAULT 2021,
	[SOURCE_VALUE]           VARCHAR(4)         NULL,
	[PRIORITY_ID]            int                NOT NULL DEFAULT 3008,
	[PRIORITY_VALUE]         VARCHAR(4)         NULL,
	[CREATED_BY]			 varchar(50)		NOT NULL,
	[CREATED_DATE]			 datetime			NOT NULL,
	[MODIFIED_BY]			 varchar(50)		NOT NULL,
	[MODIFIED_DATE]			 datetime			NOT NULL,
	[UPDATE_SEQ]			 int				NOT NULL
	CONSTRAINT [PK_SGW_BPM_CASE_CONFIGURATION] PRIMARY KEY CLUSTERED ([CASE_CONFIGURATION_ID] ASC)
	WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] 
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_CONFIGURATION IS already EXISTS'
END       
GO

---------------------------------------------------------11_SGW_BPM_CASE_EXCPT_NTFC------------------------------------------------------


IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_CASE_EXCPT_NTFC') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_EXCPT_NTFC IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_CASE_EXCPT_NTFC](
    [CASE_EXCPT_NOTIFICATION_ID] [int] IDENTITY(1,1) NOT NULL,
	[CASE_ID] [int] NOT NULL,
	[TEMPLATE_ID] [int] NULL	
 CONSTRAINT [PK_SGW_BPM_EXCPT_NTFC_CASE_EXCPT_NOTIFICATION_ID] PRIMARY KEY CLUSTERED 
(
	[CASE_EXCPT_NOTIFICATION_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_EXCPT_NTFC IS already EXISTS'
END       
GO

----------------------------------------------------------------------89_Alter_Script_for_SGW_BPM_CASE_EXCPT_NTFC(6.0.13.0)----------------------------------------------------------------------

IF COL_LENGTH('dbo.SGW_BPM_CASE_EXCPT_NTFC', 'CREATED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_CASE_EXCPT_NTFC]
ADD CREATED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_CASE_EXCPT_NTFC', 'CREATED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_CASE_EXCPT_NTFC]
ADD CREATED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_CASE_EXCPT_NTFC', 'MODIFIED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_CASE_EXCPT_NTFC]
ADD MODIFIED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_CASE_EXCPT_NTFC', 'MODIFIED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_CASE_EXCPT_NTFC]
ADD MODIFIED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_CASE_EXCPT_NTFC', 'UPDATE_SEQ') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_CASE_EXCPT_NTFC]
ADD UPDATE_SEQ int NOT NULL DEFAULT 0
END
GO

-----------------------------------------------------------------12_SGW_BPM_CASE_INST_EXEC_PATH----------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_CASE_INST_EXEC_PATH') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_INST_EXEC_PATH IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_CASE_INST_EXEC_PATH] (
    [EXECUTION_PATH_ID]           INT           IDENTITY (1, 1) NOT NULL,
    [CASE_INSTANCE_ID]            INT           NOT NULL,
    [ELEMENT_ID]                  VARCHAR (50)  NOT NULL,
    [STATUS_ID]                   INT           NOT NULL,
    [STATUS_VALUE]                VARCHAR (4)   NOT NULL,
    [ACTIVITY_INSTANCE_ID]        INT           NULL,
    [PARENT_ACTIVITY_INSTANCE_ID] INT           NULL,
	[INITIATED_ACTIVITY_INSTANCE_ID] INT NULL,
    [NAME]                        VARCHAR (MAX) NULL,
    [START_DATE]                  DATETIME      NULL,
    [END_DATE]                    DATETIME      NULL,
    [PARAMETERS_SNAPSHOT]         VARBINARY(MAX)         NULL,
    [ELEMENT_TYPE_ID]             INT           NULL,
    [ELEMENT_TYPE_VALUE]          VARCHAR (4)   NULL,
    CONSTRAINT [PK_SGW_BPM_CASE_INST_EXEC_PATH] PRIMARY KEY CLUSTERED ([EXECUTION_PATH_ID] ASC)
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_INST_EXEC_PATH IS already EXISTS'
END       
GO
------------------------------------------------------------------------------------------92_Alter_Script_for_SGW_BPM_CASE_INST_EXEC_PATH(6.0.13.0)--------------------------------------

--Created By	:	Rashmi Deepak
--Created On	:	14th September 2020
--Description	:	Adding audit columns in  SGW_BPM_CASE_INST_EXEC_PATH
------------------------------------------------------------------------------------------------------------------------ 

IF COL_LENGTH('dbo.SGW_BPM_CASE_INST_EXEC_PATH', 'CREATED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_CASE_INST_EXEC_PATH]
ADD CREATED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_CASE_INST_EXEC_PATH', 'CREATED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_CASE_INST_EXEC_PATH]
ADD CREATED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_CASE_INST_EXEC_PATH', 'MODIFIED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_CASE_INST_EXEC_PATH]
ADD MODIFIED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_CASE_INST_EXEC_PATH', 'MODIFIED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_CASE_INST_EXEC_PATH]
ADD MODIFIED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_CASE_INST_EXEC_PATH', 'UPDATE_SEQ') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_CASE_INST_EXEC_PATH]
ADD UPDATE_SEQ int NOT NULL DEFAULT 0
END
GO

----------------------------------------------------------------13_SGW_BPM_CASE_EXCPT_NTFC_ROLE-----------------------------------------------------


IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_CASE_EXCPT_NTFC_ROLE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_EXCPT_NTFC_ROLE IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_CASE_EXCPT_NTFC_ROLE](
    [CASE_EXCPT_NTFC_ROLE_ID] [int] IDENTITY(1,1) NOT NULL,
	[CASE_EXCPT_NOTIFICATION_ID] [int] NOT NULL,
	[ROLE_ID] [int] NOT NULL
 CONSTRAINT [PK_SGW_BPM_CASE_EXCPT_NTFC_ROLE_CASE_EXCPT_NTFC_ROLE_ID] PRIMARY KEY CLUSTERED 
(
	[CASE_EXCPT_NTFC_ROLE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_EXCPT_NTFC_ROLE IS already EXISTS'
END       
GO
------------------------------------------------------------90_Alter_Script_for_SGW_BPM_CASE_EXCPT_NTFC_ROLE(6.0.13.0)---------------------------------------------

--Created By	:	Rashmi Deepak
--Created On	:	14th September 2020
--Description	:	Adding audit columns in  SGW_BPM_CASE_EXCPT_NTFC_ROLE
------------------------------------------------------------------------------------------------------------------------ 

IF COL_LENGTH('dbo.SGW_BPM_CASE_EXCPT_NTFC_ROLE', 'CREATED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_CASE_EXCPT_NTFC_ROLE]
ADD CREATED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_CASE_EXCPT_NTFC_ROLE', 'CREATED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_CASE_EXCPT_NTFC_ROLE]
ADD CREATED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_CASE_EXCPT_NTFC_ROLE', 'MODIFIED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_CASE_EXCPT_NTFC_ROLE]
ADD MODIFIED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_CASE_EXCPT_NTFC_ROLE', 'MODIFIED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_CASE_EXCPT_NTFC_ROLE]
ADD MODIFIED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_CASE_EXCPT_NTFC_ROLE', 'UPDATE_SEQ') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_CASE_EXCPT_NTFC_ROLE]
ADD UPDATE_SEQ int NOT NULL DEFAULT 0
END
GO

---------------------------------------------------------------14_SGW_BPM_CASE_EXCPT_NTFC_USER----------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_CASE_EXCPT_NTFC_USER') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_EXCPT_NTFC_USER IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_CASE_EXCPT_NTFC_USER](
    [CASE_EXCPT_NTFC_USER_ID] [int] IDENTITY(1,1) NOT NULL,
	[CASE_EXCPT_NOTIFICATION_ID] [int] NOT NULL,
	[USER_SERIAL_ID] [int] NOT NULL
 CONSTRAINT [PK_SGW_BPM_CASE_EXCPT_NTFC_USER_CASE_EXCPT_NTFC_USER_ID] PRIMARY KEY CLUSTERED 
(
	[CASE_EXCPT_NTFC_USER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_EXCPT_NTFC_USER IS already EXISTS'
END       
GO

---------------------------------------------------------91_Alter_Script_for_SGW_BPM_CASE_EXCPT_NTFC_USER(6.0.13.0)-----------------------------------------------

------------------------------------------------------------------------------------------------------------------------ 
--Created By	:	Rashmi Deepak
--Created On	:	14th September 2020
--Description	:	Adding audit columns in  SGW_BPM_CASE_EXCPT_NTFC_USER
------------------------------------------------------------------------------------------------------------------------ 

IF COL_LENGTH('dbo.SGW_BPM_CASE_EXCPT_NTFC_USER', 'CREATED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_CASE_EXCPT_NTFC_USER]
ADD CREATED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_CASE_EXCPT_NTFC_USER', 'CREATED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_CASE_EXCPT_NTFC_USER]
ADD CREATED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_CASE_EXCPT_NTFC_USER', 'MODIFIED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_CASE_EXCPT_NTFC_USER]
ADD MODIFIED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_CASE_EXCPT_NTFC_USER', 'MODIFIED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_CASE_EXCPT_NTFC_USER]
ADD MODIFIED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_CASE_EXCPT_NTFC_USER', 'UPDATE_SEQ') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_CASE_EXCPT_NTFC_USER]
ADD UPDATE_SEQ int NOT NULL DEFAULT 0
END
GO

---------------------------------------------------------15_SGW_BPM_CASE_PARAMETER-----------------------------------------------


IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_CASE_PARAMETER') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_PARAMETER IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_CASE_PARAMETER] (
    [CASE_PARAMETER_ID]   INT          IDENTITY (1, 1) NOT NULL,
    [CASE_ID]             INT          NULL,
    [PARAMETER_NAME]      VARCHAR (50) NOT NULL,
    [PARAMETER_DATA_TYPE] VARCHAR (50) NULL,
    [CREATED_BY]          VARCHAR (50) NOT NULL,
    [CREATED_DATE]        DATETIME     NOT NULL,
    [MODIFIED_BY]         VARCHAR (50) NOT NULL,
    [MODIFIED_DATE]       DATETIME     NOT NULL,
    [UPDATE_SEQ]          INT          NULL,
    CONSTRAINT [PK_SGW_BPM_CASE_PARAMETER_CASE_PARAMETER_ID] PRIMARY KEY CLUSTERED ([CASE_PARAMETER_ID] ASC)
);

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_PARAMETER IS already EXISTS'
END       
GO

---------------------------------------------------------16_SGW_BPM_CASE_INSTANCE_TRACING-----------------------------------------------


IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_CASE_INSTANCE_TRACING') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_INSTANCE_TRACING IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_CASE_INSTANCE_TRACING] (
    [CASE_ID]              INT           NULL,
    [PROCESS_ID]           INT           NULL,
    [ACTIVITY_ID]          INT           NULL,
    [CASE_INSTANCE_ID]     INT           NULL,
    [PROCESS_INSTANCE_ID]  INT           NULL,
    [ACTIVITY_INSTANCE_ID] INT           NULL,
    [TRACE_DETAILS]        VARCHAR (MAX) NULL,
    [ERROR_DETAILS]        VARCHAR (MAX) NULL,
    [CREATED_BY]           VARCHAR (50)  NOT NULL,
    [CREATED_DATE]         DATETIME      NOT NULL,
	[MACHINE_NAME]		   NVARCHAR(MAX) NULL
);

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_INSTANCE_TRACING IS already EXISTS'
END       
GO

---------------------------------------------------------17_SGW_BPM_CASE_MESSAGE_FLOW-----------------------------------------------


IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_CASE_MESSAGE_FLOW') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_MESSAGE_FLOW IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_CASE_MESSAGE_FLOW] (
    [BPM_CASE_MESSAGE_FLOW_ID] INT          IDENTITY (1, 1) NOT NULL,
    [CASE_ID]                  INT          NOT NULL,
    [BPM_MESSAGE_FLOW_ID]      VARCHAR (50) NOT NULL,
    [NAME]                     VARCHAR (50) NOT NULL,
    [SOURCE_BPM_ACTIVITY_ID]   VARCHAR (50) NOT NULL,
    [TARGET_BPM_ACTIVITY_ID]   VARCHAR (50) NOT NULL,
    [INITIATING_FLAG]          VARCHAR (1)  NULL,
    [SOURCE_BPM_PROCESS_ID]    VARCHAR (50) NULL,
    [TARGET_BPM_PROCESS_ID]    VARCHAR (50) NULL,
    [CREATED_BY]               VARCHAR (50) NOT NULL,
    [CREATED_DATE]             DATETIME     NOT NULL,
    [MODIFIED_BY]              VARCHAR (50) NOT NULL,
    [MODIFIED_DATE]            DATETIME     NOT NULL,
    [UPDATE_SEQ]               INT          NOT NULL,
    CONSTRAINT [PK_SGW_BPM_CASE_MESSAGE_BPM_CASE_MESSAGE_FLOW_ID] PRIMARY KEY CLUSTERED ([BPM_CASE_MESSAGE_FLOW_ID] ASC)
);

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_MESSAGE_FLOW IS already EXISTS'
END       
GO

---------------------------------------------------------18_SGW_BPM_ESCALATION-----------------------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_ESCALATION') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ESCALATION IS CREATED'

CREATE TABLE [dbo].[SGW_BPM_ESCALATION] (
    [ESCALATION_ID]              INT          IDENTITY (1, 1) NOT NULL,
    [ESCALATION_NAME]            VARCHAR (100) DEFAULT ('') NOT NULL,
    [CASE_ID]                    INT          NOT NULL,
    [PROCESS_ID]                 INT          NOT NULL,
    [ACTIVITY_ID]                INT          NOT NULL,
    [LAPSE_TYPE_ID]              INT          NOT NULL,
    [LAPSE_TYPE_VALUE]           VARCHAR (4)  NOT NULL,
    [LAPSE_TIME_IN_MINUTES]      INT          NULL,
    [RECUR_TYPE_ID]              INT          NULL,
    [RECUR_TYPE_VALUE]           VARCHAR (4)  NULL,
    [RECUR_TIME_IN_DAYS]         INT          NULL,
    [RECUR_TIME_IN_HOURS]        INT          NULL,
    [RECUR_TIME_IN_MINUTES]      INT          NULL,
    [SEND_TO_CURRENT_ASSIGNEE]   VARCHAR (1)  NULL,
    [CORRESPONDENCE_TEMPLATE_ID] INT          NULL,
    [CREATED_BY]                 VARCHAR (50) NOT NULL,
    [CREATED_DATE]               DATETIME     NOT NULL,
    [MODIFIED_BY]                VARCHAR (50) NOT NULL,
    [MODIFIED_DATE]              DATETIME     NOT NULL,
    [UPDATE_SEQ]                 INT          NULL,
	[STATUS_ID]					 INT		  NULL,
	[STATUS_VALUE]				 VARCHAR(4)	  NULL,
    CONSTRAINT [PK_SGW_BPM_ESCALATION_ESCALATION_ID] PRIMARY KEY CLUSTERED ([ESCALATION_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_ESCALATION_ACTIVITY_ID_SGW_BPM_ACTIVITY_ACTIVITY_ID] FOREIGN KEY ([ACTIVITY_ID]) REFERENCES [dbo].[SGW_BPM_ACTIVITY] ([ACTIVITY_ID]) ON DELETE CASCADE,
    CONSTRAINT [FK_SGW_BPM_ESCALATION_CASE_ID_SGW_BPM_CASE_CASE_ID] FOREIGN KEY ([CASE_ID]) REFERENCES [dbo].[SGW_BPM_CASE] ([CASE_ID]) ON DELETE CASCADE,
    CONSTRAINT [FK_SGW_BPM_ESCALATION_PROCESS_ID_SGW_BPM_PROCESS_PROCESS_ID] FOREIGN KEY ([PROCESS_ID]) REFERENCES [dbo].[SGW_BPM_PROCESS] ([PROCESS_ID]) ON DELETE CASCADE
);

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ESCALATION IS already EXISTS'
END       
GO

------------------------------------------------------------------------------------19_SGW_BPM_ESC_ADDTL_RECIPIENT---------------------------------------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_ESC_ADDTL_RECIPIENT') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ESC_ADDTL_RECIPIENT IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ESC_ADDTL_RECIPIENT] (
    [ESC_ADDTL_RECIPIENT_ID] INT IDENTITY (1, 1) NOT NULL,
    [ESCALATION_ID]                      INT NOT NULL,
    [USER_SERIAL_ID]                     INT NOT NULL,
    CONSTRAINT [PK_SGW_BPM_ESC_ADDTL_RECIPIENT_ESC_ADDTL_RECIPIENT_ID] PRIMARY KEY CLUSTERED ([ESC_ADDTL_RECIPIENT_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_ESC_ADDTL_RECIPIENT_ESCALATION_ID_SGW_BPM_ESCALATION_ESCALATION_ID] FOREIGN KEY ([ESCALATION_ID]) REFERENCES [dbo].[SGW_BPM_ESCALATION] ([ESCALATION_ID]) ON DELETE CASCADE,
    CONSTRAINT [FK_SGW_BPM_ESC_ADDTL_RECIPIENT_USER_SERIAL_ID_SGS_USER_USER_SERIAL_ID] FOREIGN KEY ([USER_SERIAL_ID]) REFERENCES [dbo].[SGS_USER] ([USER_SERIAL_ID]) ON DELETE CASCADE
);

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ESC_ADDTL_RECIPIENT IS already EXISTS'
END       
GO

---------------------------------------------------------------------------------78_Alter_Script_for_SGW_BPM_ESC_ADDTL_RECIPIENT(6.0.12.1)--------------------------------------------------

--Created By	:	Siddharth Sabadra
--Created On	:	30th June 2020
--Description	:	Adding audit columns in  SGW_BPM_ESC_ADDTL_RECIPIENT
------------------------------------------------------------------------------------------------------------------------ 

IF COL_LENGTH('dbo.SGW_BPM_ESC_ADDTL_RECIPIENT', 'CREATED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESC_ADDTL_RECIPIENT]
ADD CREATED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESC_ADDTL_RECIPIENT', 'CREATED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESC_ADDTL_RECIPIENT]
ADD CREATED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESC_ADDTL_RECIPIENT', 'MODIFIED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESC_ADDTL_RECIPIENT]
ADD MODIFIED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESC_ADDTL_RECIPIENT', 'MODIFIED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESC_ADDTL_RECIPIENT]
ADD MODIFIED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESC_ADDTL_RECIPIENT', 'UPDATE_SEQ') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESC_ADDTL_RECIPIENT]
ADD UPDATE_SEQ int NOT NULL DEFAULT 0
END
GO

------------------------------------------------------------------20_SGW_BPM_ESC_RECIPIENT_ROLE-----------------------------------------


IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_ESC_RECIPIENT_ROLE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ESC_RECIPIENT_ROLE IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ESC_RECIPIENT_ROLE](
	[ESCALATION_RECIPIENT_ROLE_ID] [int] IDENTITY(1,1) NOT NULL,
	[ESCALATION_ID] [int] NOT NULL,
	[ROLE_ID] [int] NOT NULL,
 CONSTRAINT [PK_SGW_BPM_ESC_RECIPIENT_ROLE] PRIMARY KEY CLUSTERED 
(
	[ESCALATION_RECIPIENT_ROLE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ESC_RECIPIENT_ROLE IS already EXISTS'
END       
GO

-----------------------------------------------------------------------------79_Alter_Script_for_SGW_BPM_ESC_RECIPIENT_ROLE.(6.0.12.1)---------------------------

------------------------------------------------------------------------------------------------------------------------ 
--Created By	:	Siddharth Sabadra
--Created On	:	30th June 2020
--Description	:	Adding audit columns in  SGW_BPM_ESC_RECIPIENT_ROLE
------------------------------------------------------------------------------------------------------------------------ 

IF COL_LENGTH('dbo.SGW_BPM_ESC_RECIPIENT_ROLE', 'CREATED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESC_RECIPIENT_ROLE]
ADD CREATED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESC_RECIPIENT_ROLE', 'CREATED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESC_RECIPIENT_ROLE]
ADD CREATED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESC_RECIPIENT_ROLE', 'MODIFIED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESC_RECIPIENT_ROLE]
ADD MODIFIED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESC_RECIPIENT_ROLE', 'MODIFIED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESC_RECIPIENT_ROLE]
ADD MODIFIED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESC_RECIPIENT_ROLE', 'UPDATE_SEQ') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESC_RECIPIENT_ROLE]
ADD UPDATE_SEQ int NOT NULL DEFAULT 0
END
GO

-------------------------------------------------------------------21_SGW_BPM_ESCALATION_MESSAGE----------------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_ESCALATION_MESSAGE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ESCALATION_MESSAGE IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ESCALATION_MESSAGE] (
    [ESCALATION_MESSAGE_ID]  INT           IDENTITY (1, 1) NOT NULL,
    [ESCALATION_INSTANCE_ID] INT           NOT NULL,
    [ESCALATION_TYPE_ID]     INT           NOT NULL,
    [ESCALATION_TYPE_VALUE]  VARCHAR (4)   NOT NULL,
    [ESCALATION_MESSAGE]     VARCHAR (MAX) NOT NULL,
    CONSTRAINT [PK_SGW_BPM_ESCALATION_MESSAGE] PRIMARY KEY CLUSTERED ([ESCALATION_MESSAGE_ID] ASC)
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ESCALATION_MESSAGE IS already EXISTS'
END       
GO

--------------------------------------------------------------------76_Alter_Script_for_SGW_BPM_ESCALATION_MESSAGE(6.0.12.1)------------------------------------------

------------------------------------------------------------------------------------------------------------------------ 
--Created By	:	Siddharth Sabadra
--Created On	:	30th June 2020
--Description	:	Adding audit columns in  SGW_BPM_ESCALATION_MESSAGE
------------------------------------------------------------------------------------------------------------------------ 

IF COL_LENGTH('dbo.SGW_BPM_ESCALATION_MESSAGE', 'CREATED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESCALATION_MESSAGE]
ADD CREATED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESCALATION_MESSAGE', 'CREATED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESCALATION_MESSAGE]
ADD CREATED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESCALATION_MESSAGE', 'MODIFIED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESCALATION_MESSAGE]
ADD MODIFIED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESCALATION_MESSAGE', 'MODIFIED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESCALATION_MESSAGE]
ADD MODIFIED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESCALATION_MESSAGE', 'UPDATE_SEQ') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESCALATION_MESSAGE]
ADD UPDATE_SEQ int NOT NULL DEFAULT 0
END
GO

-------------------------------------------------------------------22_SGW_BPM_ESCALATION_RECIPIENT---------------------------------------------


IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_ESCALATION_RECIPIENT') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ESCALATION_RECIPIENT IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ESCALATION_RECIPIENT] (
    [ESCALATION_RECIPIENT_ID]         INT         IDENTITY (1, 1) NOT NULL,
    [ESCALATION_ID]                   INT         NOT NULL,
    [ESCALTION_RECPNT_TYPE_ID]    INT         NOT NULL,
    [ESCALTION_RECPNT_TYPE_VALUE] VARCHAR (4) NOT NULL,
    [CREATED_BY]          VARCHAR (50)  NOT NULL DEFAULT 'BPM Service',
    [CREATED_DATE]        DATETIME      NOT NULL DEFAULT GetDate(),
    [MODIFIED_BY]         VARCHAR (50)  NOT NULL DEFAULT 'BPM Service',
    [MODIFIED_DATE]       DATETIME      NOT NULL DEFAULT GetDate(),
    [UPDATE_SEQ]          INT           NULL DEFAULT 0,
    CONSTRAINT [PK_SGW_BPM_ESCALATION_RECIPIENT_ESCALATION_RECIPIENT_ID] PRIMARY KEY CLUSTERED ([ESCALATION_RECIPIENT_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_ESCALATION_RECIPIENT_ESCALATION_RECIPIENT_ID_SGW_BPM_ESCALATION_ESCALATION_ID] FOREIGN KEY ([ESCALATION_ID]) REFERENCES [dbo].[SGW_BPM_ESCALATION] ([ESCALATION_ID]) ON DELETE CASCADE
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ESCALATION_RECIPIENT IS already EXISTS'
END       
GO
--------------------------------------------------------------------70_ALTER_SGW_BPM_ESCALATION_RECIPIENT(6.0.11.1)---------------------------

------------------------------------------------------------------------------------------------------------------------ 
--Created By	:	Mansi Shah
--Created On	:	17th April 2020
--Description	:	Adding audit columns in  SGW_BPM_ESCALATION_RECIPIENT
------------------------------------------------------------------------------------------------------------------------ 
IF COL_LENGTH('dbo.SGW_BPM_ESCALATION_RECIPIENT', 'CREATED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESCALATION_RECIPIENT]
ADD CREATED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESCALATION_RECIPIENT', 'CREATED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESCALATION_RECIPIENT]
ADD CREATED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESCALATION_RECIPIENT', 'MODIFIED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESCALATION_RECIPIENT]
ADD MODIFIED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESCALATION_RECIPIENT', 'MODIFIED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESCALATION_RECIPIENT]
ADD MODIFIED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESCALATION_RECIPIENT', 'UPDATE_SEQ') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESCALATION_RECIPIENT]
ADD UPDATE_SEQ int DEFAULT '0'
END
GO

--------------------------------------------------------------------71_sgs_act_log_inst_actn_step_dtl(6.0.12.0.J)---------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'sgs_act_log_inst_actn_step_dtl') 
BEGIN
PRINT 'TABLE Name : sgs_act_log_inst_actn_step_dtl IS CREATED'
create table [dbo].[sgs_act_log_inst_actn_step_dtl](
               [actn_step_dtl_id] [int] identity(1,1) not null,
               [transaction_id] [varchar](100) not null,
               [sub_transaction_id] [varchar](20) not null,
               [call_details] [varchar](200) not null,
               [start_time] [datetime] not null,
               [end_time] [datetime] not null,
               [time_in_ms] [int] null,
               [parameters] [varchar](max) null,
               [status] [varchar](1) not null,
               [error_details] [varchar](max) null,
constraint [pk_act_log_inst_actn_step_dtl] primary key clustered 
(
               [actn_step_dtl_id] asc
)with (pad_index = off, statistics_norecompute = off, ignore_dup_key = off, allow_row_locks = on, allow_page_locks = on, fillfactor = 90) on [primary]
) on [primary] textimage_on [primary]
END
ELSE
BEGIN
PRINT 'TABLE Name : sgs_act_log_inst_actn_step_dtl IS already EXISTS'
END       
GO

------------------------------------------------------------------------75_Alter_Script_for_SGW_BPM_ESCALATION_RECIPIENT(6.0.12.1)-----------------------------

------------------------------------------------------------------------------------------------------------------------ 
--Created By	:	Siddharth Sabadra
--Created On	:	30th June 2020
--Description	:	Adding audit columns in  SGW_BPM_ESCALATION_RECIPIENT
------------------------------------------------------------------------------------------------------------------------ 

IF COL_LENGTH('dbo.SGW_BPM_ESCALATION_RECIPIENT', 'CREATED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESCALATION_RECIPIENT]
ADD CREATED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESCALATION_RECIPIENT', 'CREATED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESCALATION_RECIPIENT]
ADD CREATED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESCALATION_RECIPIENT', 'MODIFIED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESCALATION_RECIPIENT]
ADD MODIFIED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESCALATION_RECIPIENT', 'MODIFIED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESCALATION_RECIPIENT]
ADD MODIFIED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESCALATION_RECIPIENT', 'UPDATE_SEQ') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESCALATION_RECIPIENT]
ADD UPDATE_SEQ int NOT NULL DEFAULT 0
END
GO

------------------------------------------------------------------------23_SGW_BPM_EVENT-----------------------------


IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_EVENT') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_EVENT IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_EVENT] (
    [BPM_EVENT_ID]             INT           IDENTITY (1, 1) NOT NULL,
    [EVENT_DESC]               VARCHAR (100) NULL,
    [EVENT_TYPE_ID]            INT           NOT NULL,
    [EVENT_TYPE_VALUE]         VARCHAR (4)   NULL,
    [RCPT_EMAIL_ID]            VARCHAR (70)  NULL,
    [RCPT_FAX_NU]              VARCHAR (15)  NULL,
    [DOC_TYPE]                 VARCHAR (50)  NULL,
    [SCREEN_ID]                VARCHAR (50)  NULL,   
    [PRIORITY_DOCUMENT_IND]    VARCHAR (1)   NULL,
    [ECM_SECURITY_TEMPLATE_ID] INT           NULL,
    [ECM_SUBSCRIPTION_FLAG]    VARCHAR (1)   NOT NULL,
    [STATUS_ID]                INT           NOT NULL,
    [STATUS_VALUE]             VARCHAR (4)   NULL,
    [CREATED_BY]               VARCHAR (50)  NOT NULL,
    [CREATED_DATE]             DATETIME      NOT NULL,
    [MODIFIED_BY]              VARCHAR (50)  NOT NULL,
    [MODIFIED_DATE]            DATETIME      NOT NULL,
    [UPDATE_SEQ]               INT           NULL,
    [DOCUMENT_CATEGORY]        VARCHAR (50)  NULL,
    [ORG_ID_REQUIRED_IND]      VARCHAR (1)   NULL,
    [PERSON_ID_REQUIRED_IND]   VARCHAR (1)   NULL,
	[DOC_CLASS]                 VARCHAR (100)  NULL,
    CONSTRAINT [PK_SGW_BPM_EVENT_EVENT_ID] PRIMARY KEY CLUSTERED ([BPM_EVENT_ID] ASC),
    CONSTRAINT [UK_SGW_BPM_EVENT_DOC_TYPE] UNIQUE NONCLUSTERED ([DOC_TYPE] ASC)
);

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_EVENT IS already EXISTS'
END       
GO

------------------------------------------------------------------------24_SGW_BPM_PROCESS_ESCALATION-----------------------------


IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_PROCESS_ESCALATION') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESS_ESCALATION IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_PROCESS_ESCALATION] (
    [PROCESS_ESCALATION_ID]      INT           IDENTITY (1, 1) NOT NULL,
    [PROCESS_ESCALATION_NAME]    VARCHAR (MAX) NOT NULL,
    [PROCESS_ID]                 INT           NOT NULL,
    [CASE_ID]                    INT           NOT NULL,
    [LAPSE_TYPE_ID]              INT           NOT NULL,
    [LAPSE_TYPE_VALUE]           VARCHAR (4)   NOT NULL,
    [LAPSE_TIME_IN_MINUTES]      INT           NULL,
    [RECUR_TYPE_ID]              INT           NOT NULL,
    [RECUR_TYPE_VALUE]           VARCHAR (4)   NOT NULL,
    [RECUR_TIME_IN_DAYS]         INT           NULL,
    [RECUR_TIME_IN_HOURS]        INT           NULL,
    [RECUR_TIME_IN_MINUTES]      INT           NULL,
    [CORRESPONDENCE_TEMPLATE_ID] INT           NULL,
    [CREATED_BY]                 VARCHAR (50)  NOT NULL,
    [CREATED_DATE]               DATETIME      NOT NULL,
    [MODIFIED_BY]                VARCHAR (50)  NOT NULL,
    [MODIFIED_DATE]              DATETIME      NOT NULL,
    [UPDATE_SEQ]                 INT           NULL,
	[STATUS_ID]					 INT		   NULL,
	[STATUS_VALUE]				 VARCHAR(4)	   NULL,
    CONSTRAINT [PK_PROCESS_ESCALATION] PRIMARY KEY CLUSTERED ([PROCESS_ESCALATION_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_PROCESS_ESCALATION_CASE_ID_SGW_BPM_CASE_CASE_ID] FOREIGN KEY ([CASE_ID]) REFERENCES [dbo].[SGW_BPM_CASE] ([CASE_ID]),
    CONSTRAINT [FK_SGW_BPM_PROCESS_ESCALATION_PROCESS_ID_SGW_BPM_PROCESS_PROCESS_ID] FOREIGN KEY ([PROCESS_ID]) REFERENCES [dbo].[SGW_BPM_PROCESS] ([PROCESS_ID])
);

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESS_ESCALATION IS already EXISTS'
END       
GO

------------------------------------------------------------------------25_SGW_BPM_PROCESS_EVENT_XR-----------------------------


IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_PROCESS_EVENT_XR') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESS_EVENT_XR IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_PROCESS_EVENT_XR] (
    [BPM_PROCESS_EVENT_XR_ID] INT          IDENTITY (1, 1) NOT NULL,
    [EVENT_ID]                INT          NOT NULL,
    [PROCESS_ID]              INT          NOT NULL,
    [ACTION_ID]               INT          NOT NULL,
    [ACTION_VALUE]            VARCHAR (4)  NULL,
    [CREATED_BY]              VARCHAR (50) NOT NULL,
    [CREATED_DATE]            DATETIME     NOT NULL,
    [MODIFIED_BY]             VARCHAR (50) NOT NULL,
    [MODIFIED_DATE]           DATETIME     NOT NULL,
    [UPDATE_SEQ]              INT          NULL,
    [EVENT_REASON_ID]         INT          NULL,
    [ACTIVITY_ID]             INT          DEFAULT (NULL) NULL,
    CONSTRAINT [PK_SGW_BPM_PROCESS_EVENT_XR_PROCESS_EVENT_XR_ID] PRIMARY KEY CLUSTERED ([BPM_PROCESS_EVENT_XR_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_PROCESS_EVENT_XR_ACTIVITY_ID_SGW_BPM_ACTIVIY_ACTIVITY_ID] FOREIGN KEY ([ACTIVITY_ID]) REFERENCES [dbo].[SGW_BPM_ACTIVITY] ([ACTIVITY_ID]),
    CONSTRAINT [FK_SGW_BPM_PROCESS_EVENT_XR_EVENT_ID_SGW_BPM_EVENT_EVENT_ID] FOREIGN KEY ([EVENT_ID]) REFERENCES [dbo].[SGW_BPM_EVENT] ([BPM_EVENT_ID]),
    CONSTRAINT [FK_SGW_BPM_PROCESS_EVENT_XR_PROCESS_ID_SGW_BPM_PROCESS_PROCESS_ID] FOREIGN KEY ([PROCESS_ID]) REFERENCES [dbo].[SGW_BPM_PROCESS] ([PROCESS_ID])
);

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESS_EVENT_XR IS already EXISTS'
END       
GO

------------------------------------------------------------------------26_SGW_BPM_PROCESS_INSTANCE-----------------------------



IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_PROCESS_INSTANCE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESS_INSTANCE IS CREATED'

CREATE TABLE [dbo].[SGW_BPM_PROCESS_INSTANCE] (
    [PROCESS_INSTANCE_ID] INT          IDENTITY (1, 1) NOT NULL,
    [CASE_INSTANCE_ID]    INT          NOT NULL,
    [PROCESS_ID]          INT          NOT NULL,
    [END_DATE]            DATETIME     NULL,
    [STATUS_ID]           INT          NOT NULL,
    [STATUS_VALUE]        VARCHAR (4)  NULL,
    [CREATED_BY]          VARCHAR (50) NOT NULL,
    [CREATED_DATE]        DATETIME     NOT NULL,
    [MODIFIED_BY]         VARCHAR (50) NOT NULL,
    [MODIFIED_DATE]       DATETIME     NOT NULL,
    [UPDATE_SEQ]          INT          NULL,
    [DUE_DATE]            DATETIME     NULL,
	[SLA_MINUTES]		  INT			NULL,
	[SLA_HOURS]			  INT			NULL,
	[SLA_DAYS]			  INT			NULL,
	[NOTIFICATION_MESSAGE] VARCHAR(100) NULL,    
    CONSTRAINT [PK_SGW_BPM_PROCESS_INSTANCE_PROCESS_INSTANCE_ID] PRIMARY KEY CLUSTERED ([PROCESS_INSTANCE_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_PROCESS_INSTANCE_PROCESS_ID_SGW_BPM_PROCESS_PROCESS_ID] FOREIGN KEY ([PROCESS_ID]) REFERENCES [dbo].[SGW_BPM_PROCESS] ([PROCESS_ID])
);

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESS_INSTANCE IS already EXISTS'
END       
GO

------------------------------------------------------------------------27_SGW_BPM_PROCESS_SEQUENCE_FLOW-----------------------------


IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_PROCESS_SEQUENCE_FLOW') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESS_SEQUENCE_FLOW IS CREATED'

CREATE TABLE [dbo].[SGW_BPM_PROCESS_SEQUENCE_FLOW] (
    [BPM_PROCESS_SEQUENCE_FLOW_ID] INT           IDENTITY (1, 1) NOT NULL,
    [PROCESS_ID]                   INT           NOT NULL,
    [BPM_SEQUENCE_FLOW_ID]         VARCHAR (50)  NOT NULL,
    [NAME]                         VARCHAR (50)  NOT NULL,
    [SOURCE_BPM_ACTIVITY_ID]       VARCHAR (50)  NOT NULL,
    [TARGET_BPM_ACTIVITY_ID]       VARCHAR (50)  NOT NULL,
    [FLOW_EXPRESSION]              VARCHAR (100) NULL,
    [CREATED_BY]                   VARCHAR (50)  NOT NULL,
    [CREATED_DATE]                 DATETIME      NOT NULL,
    [MODIFIED_BY]                  VARCHAR (50)  NOT NULL,
    [MODIFIED_DATE]                DATETIME      NOT NULL,
    [UPDATE_SEQ]                   INT           NOT NULL,
    CONSTRAINT [PK_SGW_BPM_PROCESS_SEQUENCE_FLOW_BPM_PROCESS_SEQUENCE_ID] PRIMARY KEY CLUSTERED ([BPM_PROCESS_SEQUENCE_FLOW_ID] ASC)
);

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESS_SEQUENCE_FLOW IS already EXISTS'
END       
GO

------------------------------------------------------------------------28_SGW_BPM_PROCESSING_ERROR-----------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_PROCESSING_ERROR') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESSING_ERROR IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_PROCESSING_ERROR](
	[PROCESSING_ERROR_ID] [int] IDENTITY(1,1) NOT NULL,
	[TRANSACTION_ID] [UNIQUEIDENTIFIER] NOT NULL,
	[TRACE_INSTANCE_ID] [int] NOT NULL,
	[SUB_TRANSACTION_ID] [int] NOT NULL,
	[ACTION_TYPE] VARCHAR(200) NULL,
	[METHOD_NAME] VARCHAR(200) NULL,
	[EXCEPTION_MESSAGE] VARCHAR(4000) NOT NULL,	
	[EXCEPTION_DATE] [DATETIME] NOT NULL,	
	[CREATED_BY] [VARCHAR](50) NOT NULL,
	[CREATED_DATE] [DATETIME] NOT NULL,
	[MODIFIED_BY] [VARCHAR](50) NOT NULL,
	[MODIFIED_DATE] [DATETIME] NOT NULL,
	[UPDATE_SEQ] [INT]  NULL,
	[MACHINE_NAME] [VARCHAR] (500) NULL,
 CONSTRAINT [PK_SGW_BPM_PROCESSING_ERROR] PRIMARY KEY CLUSTERED 
(
	[PROCESSING_ERROR_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESSING_ERROR IS already EXISTS'
END       
GO

------------------------------------------------------------------------29_SGW_BPM_ACTIVITY_CHECKLIST-----------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_ACTIVITY_CHECKLIST') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_CHECKLIST IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ACTIVITY_CHECKLIST](
	[ACTIVITY_CHECKLIST_ID] [dbo].[UDT_IDENTITY] IDENTITY(1,1) NOT NULL,
	[DESCRIPTION] [dbo].[UDT_DESC] NULL,
	[ACTIVITY_ID] [dbo].[UDT_ID] NULL,
	[BPM_EVENT_ID] [dbo].[UDT_ID] NULL,
	[REQUIRED_FLAG] [dbo].[UDT_FLAG] NOT NULL,
	[CREATED_BY] [dbo].[UDT_CREATEDBY] NOT NULL,
	[CREATED_DATE] [dbo].[UDT_DATETIME] NOT NULL,
	[MODIFIED_BY] [dbo].[UDT_CREATEDBY] NOT NULL,
	[MODIFIED_DATE] [dbo].[UDT_DATETIME] NOT NULL,
	[UPDATE_SEQ] [dbo].[UDT_UPDSEQ] NULL,
	[DELETED_IND] [dbo].[UDT_IND] NULL,
	[GROUP_ID]    INT NULL,
 CONSTRAINT [PK_SGW_ACTIVITY_CHECKLIST_ACTIVITY_CHECKLIST_ID] PRIMARY KEY CLUSTERED 
(
	[ACTIVITY_CHECKLIST_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_CHECKLIST IS already EXISTS'
END       
GO

IF (NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME ='FK_SGW_BPM_ACTIVITY_CHECKLIST_ACTIVITY_ID_SGW_ACTIVITY_ACTIVITY_ID'))
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ACTIVITY_CHECKLIST]  WITH CHECK ADD  CONSTRAINT [FK_SGW_BPM_ACTIVITY_CHECKLIST_ACTIVITY_ID_SGW_ACTIVITY_ACTIVITY_ID] FOREIGN KEY([ACTIVITY_ID])
REFERENCES [dbo].[SGW_BPM_ACTIVITY] ([ACTIVITY_ID])
END
ELSE
BEGIN
PRINT 'FK_SGW_BPM_ACTIVITY_CHECKLIST_ACTIVITY_ID_SGW_ACTIVITY_ACTIVITY_ID ALready exists'
END
GO

------------------------------------------------------------------------30_SGW_BPM_ACTIVITY_INSTANCE-----------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_ACTIVITY_INSTANCE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_INSTANCE IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ACTIVITY_INSTANCE] (
    [ACTIVITY_INSTANCE_ID]		INT				IDENTITY (1, 1) NOT NULL,
    [PROCESS_INSTANCE_ID]		INT				NOT NULL,
    [ACTIVITY_ID]				INT				NOT NULL,
    [CHECKED_OUT_USER]			VARCHAR (50)	NULL,
    [REFERENCE_ID]				BIGINT			NULL,
    [STATUS_ID]					INT				NOT NULL,
    [STATUS_VALUE]				VARCHAR (4)		NULL,
    [SUSPENSION_START_DATE]		DATETIME		NULL,
    [SUSPENSION_MINUTES]		INT				NULL,
    [SUSPENSION_END_DATE]		DATETIME		NULL,
    [RETURN_FROM_AUDIT_IND]		VARCHAR (1)		NULL,
    [RESUME_ACTION_ID]			INT				NOT NULL,
    [RESUME_ACTION_VALUE]		VARCHAR (4)		NULL,
    [SUSPENSION_REASON_ID]		INT				NOT NULL,
    [SUSPENSION_REASON_VALUE]	VARCHAR (4)		NULL,
    [COMMENTS]					VARCHAR (2000)	NULL,
    [DUE_DATE]					DATETIME		NULL,
    [START_DATE]				DATETIME		NULL,
    [END_DATE]					DATETIME		NULL,
    [INITIATOR_INSTANCE_ID]		INT				NULL,
    [CREATED_BY]				VARCHAR (50)	NOT NULL,
    [CREATED_DATE]				DATETIME		NOT NULL,
    [MODIFIED_BY]				VARCHAR (50)	NOT NULL,
    [MODIFIED_DATE]				DATETIME		NOT NULL,
    [UPDATE_SEQ]				INT				NULL,
    [CHECKED_OUT_DATE]			DATETIME		NULL,
    [ASSIGNED_BY]				VARCHAR (50)	CONSTRAINT [DF_SGW_BPM_ACTIVITY_INSTANCE_ASSIGNED_BY] DEFAULT ('') NOT NULL,
	[SLA_MINUTES]				INT				NULL,
	[SLA_HOURS]					INT				NULL,
	[SLA_DAYS]					INT				NULL,    
	[ACTION_CONTROL]			VARCHAR(100)	NULL,
	[REJECTION_REASON_ID]			INT				NULL,
	[REJECTION_REASON_VALUE]			VARCHAR(4)		NULL,
	[LAUNCH_DATE]						datetime		NULL
    CONSTRAINT [PK_SGW_BPM_ACTIVITY_INSTANCE_ACTIVITY_INSTANCE_ID] PRIMARY KEY CLUSTERED ([ACTIVITY_INSTANCE_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_ACTIVITY_INSTANCE_ACTIVITY_ID_SGW_BPM_ACTIVITY_ACTIVITY_ID] FOREIGN KEY ([ACTIVITY_ID]) REFERENCES [dbo].[SGW_BPM_ACTIVITY] ([ACTIVITY_ID]),
    CONSTRAINT [FK_SGW_BPM_ACTIVITY_INSTANCE_PROCESS_INSTANCE_ID_SGW_BPM_PROCESS_INSTANCE_PROCESS_INSTANCE_ID] FOREIGN KEY ([PROCESS_INSTANCE_ID]) REFERENCES [dbo].[SGW_BPM_PROCESS_INSTANCE] ([PROCESS_INSTANCE_ID])
);

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_INSTANCE IS already EXISTS'
END       
GO

------------------------------------------------------------------------31_SGW_BPM_ACTIVITY_INST_USERS-----------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_ACTIVITY_INST_USERS') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_INST_USERS IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ACTIVITY_INST_USERS] (
    [ID]                   INT          IDENTITY (1, 1) NOT NULL,
    [ACTIVITY_INSTANCE_ID] INT          NOT NULL,
    [USER_SERIAL_ID]       INT          NOT NULL,
    [USER_ID]              VARCHAR (50) NOT NULL,
    CONSTRAINT [PK_SGW_BPM_ACTIVITY_INST_USERS_ID] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [FK_SGW_BPM_ACTIVITY_INST_USERS_ACTIVITY_INSTANCE_ID_SGW_BPM_ACTIVITY_INSTANCE_ACTIVITY_INSTANCE_ID] FOREIGN KEY ([ACTIVITY_INSTANCE_ID]) REFERENCES [dbo].[SGW_BPM_ACTIVITY_INSTANCE] ([ACTIVITY_INSTANCE_ID])
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_INST_USERS IS already EXISTS'
END       
GO

------------------------------------------------------------------------32_SGW_BPM_ACTIVITY_INST_HISTORY-----------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_ACTIVITY_INST_HISTORY') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_INST_HISTORY IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ACTIVITY_INST_HISTORY] (
    [ACTIVITY_INSTANCE_HISTORY_ID] INT            IDENTITY (1, 1) NOT NULL,
    [ACTIVITY_INSTANCE_ID]         INT            NOT NULL,
    [STATUS_ID]                    INT            NOT NULL,
    [STATUS_VALUE]                 VARCHAR (4)    NULL,
    [ACTION_USER_ID]               VARCHAR (50)   NULL,
    [START_TIME]                   DATETIME       NULL,
    [END_TIME]                     DATETIME       NULL,
    [COMMENTS]                     VARCHAR (2000) NULL,
    [CREATED_BY]                   VARCHAR (50)   NOT NULL,
    [CREATED_DATE]                 DATETIME       NOT NULL,
    [MODIFIED_BY]                  VARCHAR (50)   NOT NULL,
    [MODIFIED_DATE]                DATETIME       NOT NULL,
    [UPDATE_SEQ]                   INT            NULL,
	[REASSIGNED_FROM]			   VARCHAR(50)	  NULL,
	[REASSIGNED_TO]				   VARCHAR(50)	  NULL,
	[CALCULATED_DAYS]  AS (datediff(second,[START_TIME],[END_TIME])/(86400)),
	[CALCULATED_HOURS]  AS ((datediff(second,[START_TIME],[END_TIME])%(86400))/(3600)),
	[CALCULATED_MINS]  AS ((datediff(second,[START_TIME],[END_TIME])%(3600))/(60)),
	[CALCULATED_SECONDS]  AS (datediff(second,[START_TIME],[END_TIME])%(60)),
    CONSTRAINT [PK_SGW_BPM_ACTIVITY_INST_HISTORY_ACTIVITY_INSTANCE_HISTORY_ID] PRIMARY KEY CLUSTERED ([ACTIVITY_INSTANCE_HISTORY_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_ACTIVITY_INST_HISTORY_ACTIVITY_INSTANCE_ID_SGW_BPM_ACTIVITY_INSTANCE_ACTIVITY_INSTANCE_ID] FOREIGN KEY ([ACTIVITY_INSTANCE_ID]) REFERENCES [dbo].[SGW_BPM_ACTIVITY_INSTANCE] ([ACTIVITY_INSTANCE_ID])
); 
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_INST_HISTORY IS already EXISTS'
END       
GO

------------------------------------------------------------------------33_SGW_BPM_ACTY_INST_CHECKLIST-----------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_ACTY_INST_CHECKLIST') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTY_INST_CHECKLIST IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ACTY_INST_CHECKLIST](
	[ACTIVITY_INST_CHECKLIST_ID] [dbo].[UDT_IDENTITY] IDENTITY(1,1) NOT NULL,
	[ACTIVITY_INSTANCE_ID] [dbo].[UDT_ID] NOT NULL,
	[ACTIVITY_CHECKLIST_ID] [dbo].[UDT_ID] NOT NULL,
	[REQUIRED_FLAG] [dbo].[UDT_FLAG] NOT NULL,
	[COMPLETED_IND] [dbo].[UDT_IND] NULL,
	[COMPLETED_DATE] [dbo].[UDT_DATE] NULL,
	[CREATED_BY] [dbo].[UDT_CREATEDBY] NOT NULL,
	[CREATED_DATE] [dbo].[UDT_DATETIME] NOT NULL,
	[MODIFIED_BY] [dbo].[UDT_CREATEDBY] NOT NULL,
	[MODIFIED_DATE] [dbo].[UDT_DATETIME] NOT NULL,
	[UPDATE_SEQ] [dbo].[UDT_UPDSEQ] NULL,
 CONSTRAINT [PK_SGW_BPM_ACTIVITY_INSTANCE_CHECKLIST_ACTIVITY_INSTANCE_CHECKLIST_ID] PRIMARY KEY CLUSTERED 
(
	[ACTIVITY_INST_CHECKLIST_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTY_INST_CHECKLIST IS already EXISTS'
END       
GO

IF (NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME ='FK_SGW_BPM_ACTY_INST_CHECKLIST_ACTY_INST_CHECKLIST_ID_SGW_ACTIVITY_CHECKLIST_ACTIVITY_CHECKLIST_ID'))
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ACTY_INST_CHECKLIST]  WITH CHECK ADD  CONSTRAINT [FK_SGW_BPM_ACTY_INST_CHECKLIST_ACTY_INST_CHECKLIST_ID_SGW_ACTIVITY_CHECKLIST_ACTIVITY_CHECKLIST_ID] FOREIGN KEY([ACTIVITY_CHECKLIST_ID])
REFERENCES [dbo].[SGW_BPM_ACTIVITY_CHECKLIST] ([ACTIVITY_CHECKLIST_ID])
END
ELSE
BEGIN
PRINT 'FK_SGW_BPM_ACTY_INST_CHECKLIST_ACTY_INST_CHECKLIST_ID_SGW_ACTIVITY_CHECKLIST_ACTIVITY_CHECKLIST_ID ALready exists'
END
GO

IF (NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME ='FK_ACTY_INST_CHECKLIST_ACTIVITY_INSTANCE_ID_SGW_BPM_ACTIVITY_INSTANCE_ACTIVITY_INSTANCE_ID'))
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ACTY_INST_CHECKLIST]  WITH CHECK ADD  CONSTRAINT [FK_ACTY_INST_CHECKLIST_ACTIVITY_INSTANCE_ID_SGW_BPM_ACTIVITY_INSTANCE_ACTIVITY_INSTANCE_ID] FOREIGN KEY([ACTIVITY_INSTANCE_ID])
REFERENCES [dbo].[SGW_BPM_ACTIVITY_INSTANCE] ([ACTIVITY_INSTANCE_ID])
END
ELSE
BEGIN
PRINT 'FK_ACTY_INST_CHECKLIST_ACTIVITY_INSTANCE_ID_SGW_BPM_ACTIVITY_INSTANCE_ACTIVITY_INSTANCE_ID ALready exists'
END
GO

IF (NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME ='FK_ACTY_INST_CHECKLIST_ACTIVITY_INSTANCE_ID_SGW_BPM_ACTIVITY_INSTANCE_ACTIVITY_INSTANCE_ID'))
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ACTY_INST_CHECKLIST] CHECK CONSTRAINT [FK_ACTY_INST_CHECKLIST_ACTIVITY_INSTANCE_ID_SGW_BPM_ACTIVITY_INSTANCE_ACTIVITY_INSTANCE_ID]
END
GO

------------------------------------------------------------------------35_SGW_BPM_ESCALATION_INSTANCE--------------------------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_ESCALATION_INSTANCE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ESCALATION_INSTANCE IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ESCALATION_INSTANCE] (
    [ESCALATION_INSTANCE_ID] INT         IDENTITY (1, 1) NOT NULL,
    [ESCALATION_ID]          INT         NOT NULL,
    [ACTIVITY_INSTANCE_ID]   INT         NOT NULL,
    [ESCLATION_DATE_TIME]    DATETIME    NOT NULL,
    [STATUS_ID]              INT         NOT NULL,
    [STATUS_VALUE]           VARCHAR (4) NOT NULL,
    [PROCESSING_FLAG]        VARCHAR (1) DEFAULT ('N') NULL,
    CONSTRAINT [PK_SGW_BPM_ESCALATION_INSTANCE_ESCALATION_INSTANCE_ID] PRIMARY KEY CLUSTERED ([ESCALATION_INSTANCE_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_ESCALATION_INSTANCE_ACTIVITY_INSTANCE_ID_SGW_BPM_ACTIVITY_INSTANCE_ACTIVITY_INSTANCE_ID] FOREIGN KEY ([ACTIVITY_INSTANCE_ID]) REFERENCES [dbo].[SGW_BPM_ACTIVITY_INSTANCE] ([ACTIVITY_INSTANCE_ID]) ON DELETE CASCADE,
    CONSTRAINT [FK_SGW_BPM_ESCALATION_INSTANCE_ESCALATION_ID_SGW_BPM_ESCALATION_ESCALATION_ID] FOREIGN KEY ([ESCALATION_ID]) REFERENCES [dbo].[SGW_BPM_ESCALATION] ([ESCALATION_ID]) ON DELETE CASCADE
);

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ESCALATION_INSTANCE IS already EXISTS'
END       
GO

------------------------------------------------------------------77_Alter_Script_for_SGW_BPM_ESCALATION_INSTANCE(6.0.12.1)----------------------------------------

------------------------------------------------------------------------------------------------------------------------ 
--Created By	:	Siddharth Sabara
--Created On	:	30th June 2020
--Description	:	Adding audit columns in  SGW_BPM_ESCALATION_INSTANCE
------------------------------------------------------------------------------------------------------------------------ 

IF COL_LENGTH('dbo.SGW_BPM_ESCALATION_INSTANCE', 'CREATED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESCALATION_INSTANCE]
ADD CREATED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESCALATION_INSTANCE', 'CREATED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESCALATION_INSTANCE]
ADD CREATED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESCALATION_INSTANCE', 'MODIFIED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESCALATION_INSTANCE]
ADD MODIFIED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESCALATION_INSTANCE', 'MODIFIED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESCALATION_INSTANCE]
ADD MODIFIED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESCALATION_INSTANCE', 'UPDATE_SEQ') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESCALATION_INSTANCE]
ADD UPDATE_SEQ int NOT NULL DEFAULT 0
END
GO

------------------------------------------------------------------35_SGW_BPM_PRCS_ESC_INSTANCE--------------------------------


IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_PRCS_ESC_INSTANCE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PRCS_ESC_INSTANCE IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_PRCS_ESC_INSTANCE] (
    [PROCESS_ESCALATION_INSTANCE_ID] INT          IDENTITY (1, 1) NOT NULL,
    [PROCESS_ESCALATION_ID]          INT          NOT NULL,
    [PROCESS_INSTANCE_ID]            INT          NOT NULL,
    [ESCALATION_DATE_TIME]           DATETIME     NOT NULL,
    [STATUS_ID]                      INT          NOT NULL,
    [STATUS_VALUE]                   VARCHAR (4)  NOT NULL,
    [CREATED_BY]                     VARCHAR (50) NOT NULL,
    [CREATED_DATE]                   DATETIME     NOT NULL,
    [MODIFIED_BY]                    VARCHAR (50) NOT NULL,
    [MODIFIED_DATE]                  DATETIME     NOT NULL,
    [UPDATE_SEQ]                     INT          NULL,
    [PROCESSING_FLAG]                VARCHAR (1)  DEFAULT ('N') NULL,
    CONSTRAINT [PK_SGW_BPM_PRCS_ESC_INSTANCE] PRIMARY KEY CLUSTERED ([PROCESS_ESCALATION_INSTANCE_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_PRCS_ESC_INSTANCE_PROCESS_ESCALATION_ID_SGW_BPM_PROCESS_ESCALATION_PROCESS_ESCALATION_ID] FOREIGN KEY ([PROCESS_ESCALATION_ID]) REFERENCES [dbo].[SGW_BPM_PROCESS_ESCALATION] ([PROCESS_ESCALATION_ID]),
    CONSTRAINT [FK_SGW_BPM_PRCS_ESC_INSTANCE_PROCESS_INSTANCE_ID_SGW_BPM_PROCESS_INSTANCE_PROCESS_INSTANCE_ID] FOREIGN KEY ([PROCESS_INSTANCE_ID]) REFERENCES [dbo].[SGW_BPM_PROCESS_INSTANCE] ([PROCESS_INSTANCE_ID])
);

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PRCS_ESC_INSTANCE IS already EXISTS'
END       
GO

------------------------------------------------------------------------37_SGW_BPM_PRCS_ESC_RECIPIENT----------------------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_PRCS_ESC_RECIPIENT') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PRCS_ESC_RECIPIENT IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_PRCS_ESC_RECIPIENT] (
    [PRCS_ESC_RECIPIENT_ID] INT IDENTITY (1, 1) NOT NULL,
    [PROCESS_ESCALATION_ID]           INT NOT NULL,
    [USER_SERIAL_ID]                  INT NOT NULL,
    CONSTRAINT [PK_SGW_BPM_PRCS_ESC_RECIPIENT] PRIMARY KEY CLUSTERED ([PRCS_ESC_RECIPIENT_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_PRCS_ESC_RECIPIENT_PROCESS_ESCALATION_ID_SGW_BPM_PROCESS_ESCALATION_PROCESS_ESCALATION_ID] FOREIGN KEY ([PROCESS_ESCALATION_ID]) REFERENCES [dbo].[SGW_BPM_PROCESS_ESCALATION] ([PROCESS_ESCALATION_ID])
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PRCS_ESC_RECIPIENT IS already EXISTS'
END       
GO

--------------------------------------------------------------------------80_Alter_Script_for_SGW_BPM_PRCS_ESC_RECIPIENT(6.0.12.1)--------------------------------

------------------------------------------------------------------------------------------------------------------------ 
--Created By	:	Siddharth Sabadra
--Created On	:	30th June 2020
--Description	:	Adding audit columns in  SGW_BPM_PRCS_ESC_RECIPIENT
------------------------------------------------------------------------------------------------------------------------ 

IF COL_LENGTH('dbo.SGW_BPM_PRCS_ESC_RECIPIENT', 'CREATED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_PRCS_ESC_RECIPIENT]
ADD CREATED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_PRCS_ESC_RECIPIENT', 'CREATED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_PRCS_ESC_RECIPIENT]
ADD CREATED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_PRCS_ESC_RECIPIENT', 'MODIFIED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_PRCS_ESC_RECIPIENT]
ADD MODIFIED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_PRCS_ESC_RECIPIENT', 'MODIFIED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_PRCS_ESC_RECIPIENT]
ADD MODIFIED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_PRCS_ESC_RECIPIENT', 'UPDATE_SEQ') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_PRCS_ESC_RECIPIENT]
ADD UPDATE_SEQ int NOT NULL DEFAULT 0
END
GO

-----------------------------------------------------38_SGW_BPM_PRCS_ESC_RECPNT_ROLE--------------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_PRCS_ESC_RECPNT_ROLE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PRCS_ESC_RECPNT_ROLE IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_PRCS_ESC_RECPNT_ROLE] (
    [PRCS_ESC_RECPNT_ROLE_ID] INT IDENTITY (1, 1) NOT NULL,
    [PROCESS_ESCALATION_ID]                INT NOT NULL,
    [ROLE_ID]                              INT NOT NULL,
    CONSTRAINT [PK_SGW_BPM_PRCS_ESC_RECPNT_ROLE] PRIMARY KEY CLUSTERED ([PRCS_ESC_RECPNT_ROLE_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_PRCS_ESC_RECPNT_ROLE_PROCESS_ESCALATION_ID_SGW_BPM_PROCESS_ESCALATION_PROCESS_ESCALATION_ID] FOREIGN KEY ([PROCESS_ESCALATION_ID]) REFERENCES [dbo].[SGW_BPM_PROCESS_ESCALATION] ([PROCESS_ESCALATION_ID])
);

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PRCS_ESC_RECPNT_ROLE IS already EXISTS'
END       
GO


------------------------------------------------------81_Alter_Script_for_SGW_BPM_PRCS_ESC_RECPNT_ROLE(6.0.12.1)---------------------------------------------


--Created By	:	Siddharth Sabadra
--Created On	:	30th June 2020
--Description	:	Adding audit columns in  SGW_BPM_PRCS_ESC_RECPNT_ROLE
------------------------------------------------------------------------------------------------------------------------ 

IF COL_LENGTH('dbo.SGW_BPM_PRCS_ESC_RECPNT_ROLE', 'CREATED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_PRCS_ESC_RECPNT_ROLE]
ADD CREATED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_PRCS_ESC_RECPNT_ROLE', 'CREATED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_PRCS_ESC_RECPNT_ROLE]
ADD CREATED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_PRCS_ESC_RECPNT_ROLE', 'MODIFIED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_PRCS_ESC_RECPNT_ROLE]
ADD MODIFIED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_PRCS_ESC_RECPNT_ROLE', 'MODIFIED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_PRCS_ESC_RECPNT_ROLE]
ADD MODIFIED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_PRCS_ESC_RECPNT_ROLE', 'UPDATE_SEQ') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_PRCS_ESC_RECPNT_ROLE]
ADD UPDATE_SEQ int NOT NULL DEFAULT 0
END
GO

------------------------------------------------------38_SGW_BPM_PRCS_INST_ATTACHMENTS---------------------------------------------


IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_PRCS_INST_ATTACHMENTS') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PRCS_INST_ATTACHMENTS IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_PRCS_INST_ATTACHMENTS] (
    [PROCESS_INST_ATTCHMNT_ID] INT           IDENTITY (1, 1) NOT NULL,
    [BPM_PROCESS_INSTANCE_ID]  INT           NULL,
    [ECM_GUID]                 VARCHAR (MAX) NULL,
    [CREATED_BY]               VARCHAR (50)  NOT NULL,
    [CREATED_DATE]             DATETIME      NOT NULL,
    [MODIFIED_BY]              VARCHAR (50)  NOT NULL,
    [MODIFIED_DATE]            DATETIME      NOT NULL,
    [UPDATE_SEQ]               INT           NULL,
    [DOC_TYPE]                 VARCHAR (50)  NULL,
    [DOC_CLASS]                VARCHAR (100) NULL,
    [ACTIVITY_INSTANCE_ID]     INT           NULL,
    CONSTRAINT [PK_SGW_BPM_PRCS_INST_ATTACHMENTS_PROCESS_INST_ATTCHMNT_ID] PRIMARY KEY CLUSTERED ([PROCESS_INST_ATTCHMNT_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_PRCS_INST_ATTACHMENTS_BPM_PROCESS_INSTANCE_ID_SGW_BPM_PROCESS_INSTANCE_PROCESS_INSTANCE_ID] FOREIGN KEY ([BPM_PROCESS_INSTANCE_ID]) REFERENCES [dbo].[SGW_BPM_PROCESS_INSTANCE] ([PROCESS_INSTANCE_ID])
);

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PRCS_INST_ATTACHMENTS IS already EXISTS'
END       
GO

------------------------------------------------------39_SGW_BPM_PRCS_INST_RSRT_NOTY_XR---------------------------------------------


IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_PRCS_INST_RSRT_NOTY_XR') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PRCS_INST_RSRT_NOTY_XR IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_PRCS_INST_RSRT_NOTY_XR](
    [PRCS_INST_RESTRICT_NOTIFY_ID] [int] IDENTITY(1,1) NOT NULL,
	[PARENT_PROCESS_INSTANCE_ID] [int] NOT NULL,
	[DEPENDENT_PROCESS_INSTANCE_ID] [int] NULL,
	[RESTRICT_NOTIFY_CODE_ID] [int] NOT NULL,
	[RESTRICT_NOTIFY_CODE_VALUE] [varchar](4) NULL,
	[CREATED_BY] [varchar](50) NOT NULL,
	[CREATED_DATE] [datetime] NOT NULL,
	[MODIFIED_BY] [varchar](50) NOT NULL,
	[MODIFIED_DATE] [datetime] NOT NULL,
	[UPDATE_SEQ] [int] NULL   
 CONSTRAINT [SGW_BPM_PRCS_INST_RSRT_NOTY_XR_S_INST_RESTRICT_NOTIFY_ID] PRIMARY KEY CLUSTERED 
(
	[PRCS_INST_RESTRICT_NOTIFY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PRCS_INST_RSRT_NOTY_XR IS already EXISTS'
END       
GO

------------------------------------------------------40_SGW_BPM_PRCS_RSTRT_NOTY_XR---------------------------------------------


IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_PRCS_RSTRT_NOTY_XR') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PRCS_RSTRT_NOTY_XR IS CREATED'

CREATE TABLE [dbo].[SGW_BPM_PRCS_RSTRT_NOTY_XR](
    [PROCESS_RESTRICT_NOTIFY_ID] [int] IDENTITY(1,1) NOT NULL,
	[PARENT_PROCESS_ID] [int] NOT NULL,
	[DEPENDENT_PROCESS_ID] [int] NULL,
	[RESTRICT_NOTIFY_CODE_ID] [int] NOT NULL,
	[RESTRICT_NOTIFY_CODE_VALUE] [varchar](4) NULL,
	[STATUS_ID] [int] NOT NULL,
	[STATUS_VALUE] [varchar](4) NULL,
	[CREATED_BY] [varchar](50) NOT NULL,
	[CREATED_DATE] [datetime] NOT NULL,
	[MODIFIED_BY] [varchar](50) NOT NULL,
	[MODIFIED_DATE] [datetime] NOT NULL,
	[UPDATE_SEQ] [int] NULL   
 CONSTRAINT [SGW_BPM_PRCS_RSTRT_NOTY_XR_PROCESS_RESTRICT_NOTIFY_ID] PRIMARY KEY CLUSTERED 
(
	[PROCESS_RESTRICT_NOTIFY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY];


END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PRCS_RSTRT_NOTY_XR IS already EXISTS'
END       
GO

------------------------------------------------------41_SGW_BPM_PRCS_RSTRT_NOTY_XR---------------------------------------------


IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_CASE_INST_PARAMETER') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_INST_PARAMETER IS CREATED'

CREATE TABLE [dbo].[SGW_BPM_CASE_INST_PARAMETER] (
    [CASE_INSTANCE_PARAMETER_ID] INT            IDENTITY (1, 1) NOT NULL,
    [CASE_INSTANCE_ID]           INT            NOT NULL,
    [PARAMETER_NAME]             VARCHAR (50)   NOT NULL,
    [PARAMETER_VALUE]            VARCHAR (1000) NULL,
    [OBJECT_VALUE]               VARBINARY(MAX)          NULL,
    [CREATED_BY]                 VARCHAR (50)   NOT NULL,
    [CREATED_DATE]               DATETIME       NOT NULL,
    [MODIFIED_BY]                VARCHAR (50)   NOT NULL,
    [MODIFIED_DATE]              DATETIME       NOT NULL,
    [UPDATE_SEQ]                 INT            NULL,
    CONSTRAINT [PK_SGW_BPM_CASE_INST_PARAMETER_CASE_INSTANCE_PARAMETER_ID] PRIMARY KEY CLUSTERED ([CASE_INSTANCE_PARAMETER_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_CASE_INST_PARAMETER_SGW_BPM_CASE_INSTANCE_CASE_INSTANCE_ID] FOREIGN KEY ([CASE_INSTANCE_ID]) REFERENCES [dbo].[SGW_BPM_CASE_INSTANCE] ([CASE_INSTANCE_ID])
);


END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_CASE_INST_PARAMETER IS already EXISTS'
END       
GO

------------------------------------------------------------------42_SGW_BPM_DOCUMENT_UPLOAD-----------------------------------------------------


IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_DOCUMENT_UPLOAD') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_DOCUMENT_UPLOAD IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_DOCUMENT_UPLOAD](
	[BPM_DOCUMENT_UPLOAD_ID]		[int]	IDENTITY (1, 1)	NOT NULL,
	[BPM_PROCESS_INSTANCE_ID]		[int]					NOT NULL,
	[BPM_DOCUMENT_NAME]				[varchar](100)			NOT NULL,
	[CREATED_BY]					[dbo].[UDT_CREATEDBY]	NOT NULL,
	[CREATED_DATE]					[dbo].[UDT_DATETIME]	NOT NULL,
	[MODIFIED_BY]					[dbo].[UDT_MODIFIEDBY]	NOT NULL,
	[MODIFIED_DATE]					[dbo].[UDT_DATETIME]	NOT NULL,
	[UPDATE_SEQ]					[dbo].[UDT_UPDSEQ]		NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[BPM_DOCUMENT_UPLOAD_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
END
GO   

IF (NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME ='FK_SGW_BPM_DOCUMENT_UPLOAD_SGW_BPM_PROCESS_INSTANCE'))
BEGIN
ALTER TABLE [dbo].[SGW_BPM_DOCUMENT_UPLOAD]  WITH CHECK ADD  CONSTRAINT [FK_SGW_BPM_DOCUMENT_UPLOAD_SGW_BPM_PROCESS_INSTANCE] FOREIGN KEY([BPM_PROCESS_INSTANCE_ID])
REFERENCES [dbo].[SGW_BPM_PROCESS_INSTANCE] ([PROCESS_INSTANCE_ID])
END
ELSE
BEGIN
PRINT 'FK_SGW_BPM_DOCUMENT_UPLOAD_SGW_BPM_PROCESS_INSTANCE ALready exists'
END
GO

ALTER TABLE [dbo].[SGW_BPM_DOCUMENT_UPLOAD] CHECK CONSTRAINT [FK_SGW_BPM_DOCUMENT_UPLOAD_SGW_BPM_PROCESS_INSTANCE]


GO

------------------------------------------------------------------43_SGW_BPM_QUEUE-----------------------------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_QUEUE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_QUEUE IS CREATED'

CREATE TABLE [dbo].[SGW_BPM_QUEUE] (
	[QUEUE_ITEM_ID]       INT             IDENTITY (1, 1) NOT NULL,
	[MACHINE_NAME]        NVARCHAR (MAX)  NULL,
	[PRIORITY_CODE_ID]    INT             NULL,
	[PRIORITY_CODE_VALUE] VARCHAR (4)     NULL,
	[ENGINE_VALUE]		  VARCHAR (4)	  NULL,
	[SRC_PRCS_INST_ID]			INT NULL,
	[ACTV_INST_ID_TO_EXEC]		INT NULL,
	[TRG_PRCS_INST_ID]			INT NULL,
	[TRG_ACTV_ID_TO_INST]		INT NULL,
	[STATUS_ID]					[UDT_CODE_ID] NULL,
	[STATUS_VALUE]				[UDT_CODE_VALUE] NULL,
	[QUEUE_REQUEST_TYPE_ID]		[UDT_CODE_ID] NULL,
	[QUEUE_REQUEST_TYPE_VALUE]	[UDT_CODE_VALUE] NULL,
	[CREATED_BY]				[UDT_CREATEDBY]	NOT NULL default user,
	[CREATED_DATE]			    [UDT_DATETIME]	NOT NULL,
	[MODIFIED_BY]				[UDT_MODIFIEDBY]	NOT NULL default user,
	[MODIFIED_DATE]				[UDT_DATETIME]	NOT NULL,
	[UPDATE_SEQ]				[UDT_UPDSEQ]		NOT NULL
	CONSTRAINT [PK_SGW_BPM_QUEUE] PRIMARY KEY CLUSTERED ([QUEUE_ITEM_ID] ASC)
);


END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_QUEUE IS already EXISTS'
END       
GO

---------------------------------------------------------------44_SGW_BPM_REQUEST---------------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_REQUEST') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_REQUEST IS CREATED'

CREATE TABLE [dbo].[SGW_BPM_REQUEST] (
    [REQUEST_ID]                 INT              IDENTITY (1, 1) NOT NULL,
    [PERSON_ID]                  INT              NULL,
    [ORG_ID]                     INT              NULL,
    [PROCESS_ID]                 INT              NULL,
    [REFERENCE_ID]               BIGINT           NULL,
    [SOURCE_ID]                  INT              NOT NULL,
    [SOURCE_VALUE]               VARCHAR (4)      NULL,
    [STATUS_ID]                  INT              NOT NULL,
    [STATUS_VALUE]               VARCHAR (4)      NULL,
    [CREATED_BY]                 VARCHAR (50)     NOT NULL,
    [CREATED_DATE]               DATETIME         NOT NULL,
    [MODIFIED_BY]                VARCHAR (50)     NOT NULL,
    [MODIFIED_DATE]              DATETIME         NOT NULL,
    [UPDATE_SEQ]                 INT              NULL,
    [CASE_INSTANCE_ID]           INT              NULL,
    [BPM_MESSAGE_FLOW_ID]        VARCHAR (50)     NULL,
    [DOC_TYPE]                   VARCHAR (50)     NULL,
    [ECM_GUID]                   VARCHAR(MAX) NULL,
    [MACHINE_NAME]               NVARCHAR (MAX)   NULL,
    [PRIORITY_CODE_ID]           INT              NULL,
    [PRIORITY_CODE_VALUE]        VARCHAR (4)      NULL,
    [PARENT_CASE_INSTANCE_ID]    INT              NULL,
    [PARENT_PROCESS_INSTANCE_ID] INT              NULL,
	[DOC_CLASS]					[dbo].[UDT_DESC] NULL,
	[REASON_ID]					[dbo].[UDT_CODE_ID] NULL,
	[REASON_VALUE]				[dbo].[UDT_CODE_VALUE] NULL,
	[DOCUMENT_TITLE]			[dbo].[UDT_DESC] NULL,
	[SCAN_DT]					[dbo].[UDT_DATETIME] NULL,
	[PARENT_REQUEST_ID]			INT					NULL,
	[COMMENTS]					VARCHAR (4000)		NULL,
	[TRACKING_ID]				INT NULL,
	[ERROR_MESSAGE]				VARCHAR (500)       NULL,
	[RETRY_COUNT]				INT                 NULL,
	[SERVER_NAME]				VARCHAR (50)		NULL,
	[PROCESSED_BY_MACHINE]		VARCHAR (50)		NULL
    CONSTRAINT [PK_SGW_BPM_REQUEST_REQUEST_ID] PRIMARY KEY CLUSTERED ([REQUEST_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_REQUEST_PROCESS_ID_SGW_BPM_PROCESS_PROCESS_ID] FOREIGN KEY ([PROCESS_ID]) REFERENCES [dbo].[SGW_BPM_PROCESS] ([PROCESS_ID])
);

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_REQUEST IS already EXISTS'
END       
GO

------------------------------------------------------------------------------------------115_ALTER_SGW_BPM_REQUEST------------------------------------------------------------------

IF COL_LENGTH('dbo.SGW_BPM_REQUEST', 'CHECK_FOR_EXISTING_INST') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_REQUEST]
ADD CHECK_FOR_EXISTING_INST varchar(256) NULL
END
GO

--------------------------------------------------------------------------45_SGW_BPM_REQUEST_ACTION-------------------------------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_REQUEST_ACTION') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_REQUEST_ACTION IS CREATED'

CREATE TABLE [dbo].[SGW_BPM_REQUEST_ACTION]
(
	[REQUEST_ACTION_ID] [dbo].[UDT_IDENTITY] IDENTITY (1, 1) NOT NULL, 
    [REQUEST_ID] [dbo].[UDT_INT] NULL, 
    [CASE_INSTANCE_ID] [dbo].[UDT_INT] NULL, 
    [PROCESS_INSTANCE_ID] [dbo].[UDT_INT] NULL, 
    [ACTIVITY_INSTANCE_ID] [dbo].[UDT_INT] NULL, 
    [TYPE] [dbo].[UDT_DESC] NULL, 
    CONSTRAINT [PK_SGW_BPM_REQUEST_ACTION] PRIMARY KEY CLUSTERED ([REQUEST_ACTION_ID])	
)

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_REQUEST_ACTION IS already EXISTS'
END       
GO

---------------------------------------------------------------------------------94_Alter_Script_for_SGW_BPM_REQUEST_ACTION(6.0.13.0)------------------------------------------------------------------------

--Created By	:	Rashmi Deepak
--Created On	:	14th September 2020
--Description	:	Adding audit columns in  SGW_BPM_REQUEST_ACTION
------------------------------------------------------------------------------------------------------------------------ 

IF COL_LENGTH('dbo.SGW_BPM_REQUEST_ACTION', 'CREATED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_REQUEST_ACTION]
ADD CREATED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_REQUEST_ACTION', 'CREATED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_REQUEST_ACTION]
ADD CREATED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_REQUEST_ACTION', 'MODIFIED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_REQUEST_ACTION]
ADD MODIFIED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_REQUEST_ACTION', 'MODIFIED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_REQUEST_ACTION]
ADD MODIFIED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_REQUEST_ACTION', 'UPDATE_SEQ') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_REQUEST_ACTION]
ADD UPDATE_SEQ int NOT NULL DEFAULT 0
END
GO

--------------------------------------------------------------------46_SGW_BPM_REQUEST_PARAMETER----------------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_REQUEST_PARAMETER') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_REQUEST_PARAMETER IS CREATED'

CREATE TABLE [dbo].[SGW_BPM_REQUEST_PARAMETER] (
    [REQUEST_PARAMETER_ID] INT            IDENTITY (1, 1) NOT NULL,
    [REQUEST_ID]           INT            NULL,
    [PARAMETER_NAME]       VARCHAR (50)   NULL,
    [PARAMETER_VALUE]      VARCHAR (1000) NULL,
    [CREATED_BY]           VARCHAR (50)   NOT NULL,
    [CREATED_DATE]         DATETIME       NOT NULL,
    [MODIFIED_BY]          VARCHAR (50)   NOT NULL,
    [MODIFIED_DATE]        DATETIME       NOT NULL,
    [UPDATE_SEQ]           INT            NULL,
    CONSTRAINT [PK_SGW_BPM_REQUEST_PARAMETER_REQUEST_PARAMETER_ID] PRIMARY KEY CLUSTERED ([REQUEST_PARAMETER_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_REQUEST_PARAMETER_REQUEST_ID_SGW_BPM_REQUEST_REQUEST_ID] FOREIGN KEY ([REQUEST_ID]) REFERENCES [dbo].[SGW_BPM_REQUEST] ([REQUEST_ID])
);

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_REQUEST_PARAMETER IS already EXISTS'
END       
GO

-------------------------------------------------------------------133_Alter_sgw_bpm_request_parameter--------------------------------------------------------------------

IF COL_LENGTH('sgw_bpm_request_parameter', 'PARAMETER_CODE_ID') IS NULL
BEGIN
ALTER TABLE [dbo].[sgw_bpm_request_parameter]
ADD PARAMETER_CODE_ID int NULL
END
GO

---------------------------------------------------------------------47_SGW_BPM_SERVICE_TIMER-----------------------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_SERVICE_TIMER') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_SERVICE_TIMER IS CREATED'

CREATE TABLE [dbo].[SGW_BPM_SERVICE_TIMER](
	[SERVICE_TIMER_ID] [int] IDENTITY(1,1) NOT NULL,
	[ACTION_METHOD] [varchar](200) NOT NULL,
	[INTERVAL] [int] NOT NULL,
	[ENABLED] [varchar](1) NOT NULL CONSTRAINT [DF_SGW_BPM_SERVICE_TIMERS_ENABLED]  DEFAULT ('Y'),
	[BPM_TRACING_FLAG]						VARCHAR(1)			NULL,
	[BPM_QUERY_TRACING_FLAG]				VARCHAR(50)			NULL,
	[BPM_QUERY_LIMIT]						INT					NULL,
	[BPM_QUERY_LIMIT_ALERT]					VARCHAR(100)		NULL,
	[BPM_QUERY_HIGH_LIMIT]					INT					NULL,
	[BPM_QUERY_HIGH_LIMIT_ALERT]			VARCHAR(100)		NULL,
 CONSTRAINT [PK_SGW_BPM_SERVICE_TIMERS] PRIMARY KEY CLUSTERED 
(
	[SERVICE_TIMER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]


END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_SERVICE_TIMER IS already EXISTS'
END       
GO


-------------------------------------------------------------------------------64_INSERT_SGW_BPM_SERVICE_TIMER(6.0.10.2)---------------------------------------------

--Created By	:	Siddharth Sabadra
--Created On	:	12th February 2020
--Description	:	Adding Timer to SGW_BPM_SERVICE_TIMER table
------------------------------------------------------------------------------------------------------------------------ 
IF NOT EXISTS(select * from SGW_BPM_SERVICE_TIMER where ACTION_METHOD='ResumeStuckTasks') 
BEGIN
 INSERT into [dbo].[SGW_BPM_SERVICE_TIMER](ACTION_METHOD, INTERVAL, ENABLED, BPM_TRACING_FLAG, BPM_QUERY_TRACING_FLAG, BPM_QUERY_LIMIT, BPM_QUERY_LIMIT_ALERT, BPM_QUERY_HIGH_LIMIT, BPM_QUERY_HIGH_LIMIT_ALERT) values('ResumeStuckTasks',300000,'N','N','N',5000,NULL,5000,NULL);
END
GO

-------------------------------------------------------------------------------------------96_Alter_Script_for_SGW_BPM_SERVICE_TIMER(6.0.13.0)--------------------------------------------------

--Created By	:	Rashmi Deepak
--Created On	:	14th September 2020
--Description	:	Adding audit columns in  SGW_BPM_SERVICE_TIMER
------------------------------------------------------------------------------------------------------------------------ 

IF COL_LENGTH('dbo.SGW_BPM_SERVICE_TIMER', 'CREATED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_SERVICE_TIMER]
ADD CREATED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_SERVICE_TIMER', 'CREATED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_SERVICE_TIMER]
ADD CREATED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_SERVICE_TIMER', 'MODIFIED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_SERVICE_TIMER]
ADD MODIFIED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_SERVICE_TIMER', 'MODIFIED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_SERVICE_TIMER]
ADD MODIFIED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_SERVICE_TIMER', 'UPDATE_SEQ') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_SERVICE_TIMER]
ADD UPDATE_SEQ int NOT NULL DEFAULT 0
END
GO

-------------------------------------------------------------------------------------160_INSERT_SGW_BPM_SERVICE_TIMER---------------------------------------------------------------------------------------------------------- ------------------------------------------------- 
 
IF NOT EXISTS(select * from SGW_BPM_SERVICE_TIMER where ACTION_METHOD='ProcessNeospinBatch') 
BEGIN
INSERT INTO [dbo].[SGW_BPM_SERVICE_TIMER] ([ACTION_METHOD], [INTERVAL], [ENABLED], [BPM_TRACING_FLAG], [BPM_QUERY_TRACING_FLAG], [BPM_QUERY_LIMIT], [BPM_QUERY_LIMIT_ALERT], [BPM_QUERY_HIGH_LIMIT], [BPM_QUERY_HIGH_LIMIT_ALERT], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ]) VALUES (N'ProcessNeospinBatch', 60000, N'Y', N'Y', N'Y', 1000, NULL, 3000, NULL, N'BPM Service', CAST(N'2020-09-29T21:51:00.000' AS DateTime), N'!perslinkdev2', CAST(N'2022-02-01T12:08:27.487' AS DateTime), 0)
END
GO

IF NOT EXISTS(select * from SGW_BPM_SERVICE_TIMER where ACTION_METHOD='ProcessNeospinBatchWSS') 
BEGIN
INSERT [dbo].[SGW_BPM_SERVICE_TIMER] ([ACTION_METHOD], [INTERVAL], [ENABLED], [BPM_TRACING_FLAG], [BPM_QUERY_TRACING_FLAG], [BPM_QUERY_LIMIT], [BPM_QUERY_LIMIT_ALERT], [BPM_QUERY_HIGH_LIMIT], [BPM_QUERY_HIGH_LIMIT_ALERT], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ]) VALUES (N'ProcessNeospinBatchWSS', 900000, N'Y', N'Y', N'Y', 1000, NULL, 3000, NULL, N'BPM Service', CAST(N'2020-09-29T21:51:00.000' AS DateTime), N'!perslinkdev2', CAST(N'2022-02-01T12:08:27.487' AS DateTime), 0)
END
GO

--------------------------------------------------------------------------------------------------129_INSERT_SGW_BPM_SERVICE_TIMER----------------------------------------------------------------------------
IF NOT EXISTS(select * from SGW_BPM_SERVICE_TIMER where ACTION_METHOD='ResumeSuspendedUserTasks') 
BEGIN
INSERT INTO [dbo].[SGW_BPM_SERVICE_TIMER]([ACTION_METHOD],[INTERVAL],[ENABLED],[BPM_TRACING_FLAG],[BPM_QUERY_TRACING_FLAG],[BPM_QUERY_LIMIT],[BPM_QUERY_LIMIT_ALERT],[BPM_QUERY_HIGH_LIMIT],[BPM_QUERY_HIGH_LIMIT_ALERT],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])VALUES('ResumeSuspendedUserTasks','300000','N','Y','Y','1000',NULL,'3000',NULL,'BPM Service','Sep 29 2020  9:51PM','BPM Service','Sep 29 2020  9:51PM','0')
END
GO

IF NOT EXISTS(select * from SGW_BPM_SERVICE_TIMER where ACTION_METHOD='ResumeTimerActivities') 
BEGIN
INSERT INTO [dbo].[SGW_BPM_SERVICE_TIMER]([ACTION_METHOD],[INTERVAL],[ENABLED],[BPM_TRACING_FLAG],[BPM_QUERY_TRACING_FLAG],[BPM_QUERY_LIMIT],[BPM_QUERY_LIMIT_ALERT],[BPM_QUERY_HIGH_LIMIT],[BPM_QUERY_HIGH_LIMIT_ALERT],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])VALUES('ResumeTimerActivities','6000','N','Y','Y','1000',NULL,'3000',NULL,'BPM Service','Sep 29 2020  9:51PM','BPM Service','Sep 29 2020  9:51PM','0')
END
GO

IF NOT EXISTS(select * from SGW_BPM_SERVICE_TIMER where ACTION_METHOD='TriggerActivityEscalations') 
BEGIN
INSERT INTO [dbo].[SGW_BPM_SERVICE_TIMER]([ACTION_METHOD],[INTERVAL],[ENABLED],[BPM_TRACING_FLAG],[BPM_QUERY_TRACING_FLAG],[BPM_QUERY_LIMIT],[BPM_QUERY_LIMIT_ALERT],[BPM_QUERY_HIGH_LIMIT],[BPM_QUERY_HIGH_LIMIT_ALERT],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])VALUES('TriggerActivityEscalations','300000','N','Y','Y','1000',NULL,'3000',NULL,'BPM Service','Sep 29 2020  9:51PM','BPM Service','Sep 29 2020  9:51PM','0')
END
GO

IF NOT EXISTS(select * from SGW_BPM_SERVICE_TIMER where ACTION_METHOD='TriggerProcessEscalations') 
BEGIN
INSERT INTO [dbo].[SGW_BPM_SERVICE_TIMER]([ACTION_METHOD],[INTERVAL],[ENABLED],[BPM_TRACING_FLAG],[BPM_QUERY_TRACING_FLAG],[BPM_QUERY_LIMIT],[BPM_QUERY_LIMIT_ALERT],[BPM_QUERY_HIGH_LIMIT],[BPM_QUERY_HIGH_LIMIT_ALERT],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])VALUES('TriggerProcessEscalations','300000','N','Y','Y','1000',NULL,'3000',NULL,'BPM Service','Sep 29 2020  9:51PM','BPM Service','Sep 29 2020  9:51PM','0')
END
GO

IF NOT EXISTS(select * from SGW_BPM_SERVICE_TIMER where ACTION_METHOD='BpmRequestsHandler') 
BEGIN
INSERT INTO [dbo].[SGW_BPM_SERVICE_TIMER]([ACTION_METHOD],[INTERVAL],[ENABLED],[BPM_TRACING_FLAG],[BPM_QUERY_TRACING_FLAG],[BPM_QUERY_LIMIT],[BPM_QUERY_LIMIT_ALERT],[BPM_QUERY_HIGH_LIMIT],[BPM_QUERY_HIGH_LIMIT_ALERT],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])VALUES('BpmRequestsHandler','6000','Y','Y','Y','1000',NULL,'3000',NULL,'BPM Service','Sep 29 2020  9:51PM','BPM Service','Sep 29 2020  9:51PM','0')
END
GO

IF NOT EXISTS(select * from SGW_BPM_SERVICE_TIMER where ACTION_METHOD='ResumeStuckTasks') 
BEGIN
INSERT INTO [dbo].[SGW_BPM_SERVICE_TIMER]([ACTION_METHOD],[INTERVAL],[ENABLED],[BPM_TRACING_FLAG],[BPM_QUERY_TRACING_FLAG],[BPM_QUERY_LIMIT],[BPM_QUERY_LIMIT_ALERT],[BPM_QUERY_HIGH_LIMIT],[BPM_QUERY_HIGH_LIMIT_ALERT],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])VALUES('ResumeStuckTasks','300000','N','N','N','5000',NULL,'5000',NULL,'BPM Service','Sep 29 2020  9:51PM','BPM Service','Sep 29 2020  9:51PM','0')
END
GO


-----------------------------------------------------------------------------------------142_Update_BPM_SERVICE_TIMER-----------------------------------------------------------------------------

IF EXISTS(SELECT 1 FROM SGW_BPM_SERVICE_TIMER where ACTION_METHOD = 'BpmRequestsHandler')
BEGIN

	Update [dbo].[SGW_BPM_SERVICE_TIMER] set INTERVAL = 60000 where ACTION_METHOD = 'BpmRequestsHandler'
	
END 
GO


--------------------------------------------------------------48_SGW_BPM_TMER_ACTY_INST_DETAILS--------------------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_TMER_ACTY_INST_DETAILS') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_TMER_ACTY_INST_DETAILS IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_TMER_ACTY_INST_DETAILS] (
    [TIMER_ID]             INT            IDENTITY (1, 1) NOT NULL,
    [ACTIVITY_INSTANCE_ID] INT            NOT NULL,
    [START_DATE_TIME]      DATETIME       NOT NULL,
    [END_DATE_TIME]        DATETIME       NOT NULL,
    [MACHINE_NAME]         NVARCHAR (MAX) NULL,
    [PROCESSING_FLAG]      VARCHAR (1)    DEFAULT ('N') NULL,
    CONSTRAINT [PK_SGW_BPM_TMER_ACTY_INST_DETAILS] PRIMARY KEY CLUSTERED ([TIMER_ID] ASC),
    CONSTRAINT [FK_SGW_BPM_TMER_ACTY_INST_DETAILS_ACTIVITY_INSTANCE_ID_SGW_BPM_ACTIVITY_INSTANCE_ACTIVITY_INSTANCE_ID] FOREIGN KEY ([ACTIVITY_INSTANCE_ID]) REFERENCES [dbo].[SGW_BPM_ACTIVITY_INSTANCE] ([ACTIVITY_INSTANCE_ID])
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_TMER_ACTY_INST_DETAILS IS already EXISTS'
END       
GO


------------------------------------------------------------------------------------97_Alter_Script_for_SGW_BPM_TMER_ACTY_INST_DETAILS(6.0.13.0)-----------------------------------------------------------------------------

--Created By	:	Rashmi Deepak
--Created On	:	14th September 2020
--Description	:	Adding audit columns in  SGW_BPM_TMER_ACTY_INST_DETAILS
------------------------------------------------------------------------------------------------------------------------ 

IF COL_LENGTH('dbo.SGW_BPM_TMER_ACTY_INST_DETAILS', 'CREATED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_TMER_ACTY_INST_DETAILS]
ADD CREATED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_TMER_ACTY_INST_DETAILS', 'CREATED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_TMER_ACTY_INST_DETAILS]
ADD CREATED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_TMER_ACTY_INST_DETAILS', 'MODIFIED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_TMER_ACTY_INST_DETAILS]
ADD MODIFIED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_TMER_ACTY_INST_DETAILS', 'MODIFIED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_TMER_ACTY_INST_DETAILS]
ADD MODIFIED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

--------------------------------------------------------------49_SGW_BPM_TRACE_INST_ACTN--------------------------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_TRACE_INST_ACTN') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_TRACE_INST_ACTN IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_TRACE_INST_ACTN](
	[TRACE_INST_ACTN_ID] [INT] IDENTITY(1,1) NOT NULL,	
	[TRACE_INSTANCE_ID] [INT] NOT NULL,
	[START_TIME] [DATETIME] NOT NULL,
	[ACTION_TYPE] [VARCHAR](200) NOT NULL,
	[PARAMETER_DETAILS] [varchar](8000) NULL,
	[QUERY_ID] [VARCHAR](100) NOT NULL,
	[QUERY_TEXT] [VARCHAR](8000) NOT NULL,
	[RECORD_COUNT] [INT] NULL,
	[TRANSACTION_ID] [uniqueidentifier] NULL,
	[END_TIME] [DATETIME] NULL,
	[CREATED_BY] [VARCHAR](50) NOT NULL,
	[CREATED_DATE] [DATETIME] NOT NULL,
	[MODIFIED_BY] [VARCHAR](50) NOT NULL,
	[MODIFIED_DATE] [DATETIME] NOT NULL,
	[UPDATE_SEQ] [INT] NULL,
 CONSTRAINT [PK_SGW_BPM_TRACE_INST_ACTN] PRIMARY KEY CLUSTERED 
(
	[TRACE_INST_ACTN_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_TRACE_INST_ACTN IS already EXISTS'
END       
GO

--------------------------------------------------------------50_SGW_BPM_TRACE_INST_ACTN_DTL--------------------------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_TRACE_INST_ACTN_DTL') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_TRACE_INST_ACTN_DTL IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_TRACE_INST_ACTN_DTL](
	[TRACE_INST_ACTN_DTL_ID] [INT] IDENTITY(1,1) NOT NULL,		
	[START_TIME] [DATETIME] NOT NULL,
	[REFERENCE_TYPE] [VARCHAR](100)  NULL,
	[REFERENCE_ID] [BIGINT]  NULL,
	[PROCESS_INSTANCE_ID] [INT]  NULL,
	[RESPONSE_MESSAGE_VALUE] [INT]  NULL,	
	[TRANSACTION_ID] [uniqueidentifier] null,
	[SUB_TRANSACTION_ID] int,
	[END_TIME] [DATETIME]  NULL,	
	[CREATED_BY] [VARCHAR](50) NOT NULL,
	[CREATED_DATE] [DATETIME] NOT NULL,
	[MODIFIED_BY] [VARCHAR](50) NOT NULL,
	[MODIFIED_DATE] [DATETIME] NOT NULL,
	[UPDATE_SEQ] [INT] NULL,
 CONSTRAINT [PK_SGW_BPM_TRACE_INST_ACTN_DTL] PRIMARY KEY CLUSTERED 
(
	[TRACE_INST_ACTN_DTL_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]


END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_TRACE_INST_ACTN_DTL IS already EXISTS'
END       
GO




IF COL_LENGTH('dbo.SGW_BPM_TMER_ACTY_INST_DETAILS', 'UPDATE_SEQ') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_TMER_ACTY_INST_DETAILS]
ADD UPDATE_SEQ int NOT NULL DEFAULT 0
END
GO


----------------------------------------------------------------------51_SGW_BPM_TRACE_INST_QUERY--------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_TRACE_INST_QUERY') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_TRACE_INST_QUERY IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_TRACE_INST_QUERY](
	[BPM_TRACE_INST_QUERY_ID] [int] IDENTITY(1,1) NOT NULL,	
	[QUERY_ID] [varchar](100) NULL,
	[QUERY_TEXT] [varchar](8000) NOT NULL,
	[RESULT] [varchar](500) NULL,
	[START_TIME] [datetime] NOT NULL,
	[END_TIME] [datetime]  NULL,
	[STEP_NAME] [varchar](100) NULL,
	[PARAMETER_DETAILS] [varchar](8000) NULL,
	[TRANSACTION_ID] [uniqueidentifier] null,
	[SUB_TRANSACTION_ID] int,
	[TOTAL_TIME_IN_MS] [int] NULL,	
 CONSTRAINT [PK_SGW_BPM_TRACE_INST_QUERY] PRIMARY KEY CLUSTERED 
(
	[BPM_TRACE_INST_QUERY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] 
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_TRACE_INST_QUERY IS already EXISTS'
END       
GO

---------------------------------------------------------------------------------98_Alter_Script_for_SGW_BPM_TRACE_INST_QUERY(6.0.13.0)--------------------------


--Created By	:	Rashmi Deepak
--Created On	:	14th September 2020
--Description	:	Adding audit columns in  SGW_BPM_TRACE_INST_QUERY
------------------------------------------------------------------------------------------------------------------------ 

IF COL_LENGTH('dbo.SGW_BPM_TRACE_INST_QUERY', 'CREATED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_TRACE_INST_QUERY]
ADD CREATED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_TRACE_INST_QUERY', 'CREATED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_TRACE_INST_QUERY]
ADD CREATED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_TRACE_INST_QUERY', 'MODIFIED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_TRACE_INST_QUERY]
ADD MODIFIED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_TRACE_INST_QUERY', 'MODIFIED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_TRACE_INST_QUERY]
ADD MODIFIED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_TRACE_INST_QUERY', 'UPDATE_SEQ') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_TRACE_INST_QUERY]
ADD UPDATE_SEQ int NOT NULL DEFAULT 0
END
GO

----------------------------------------------------------------------52_SGW_BPM_TRACE_INSTANCE--------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_TRACE_INSTANCE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_TRACE_INSTANCE IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_TRACE_INSTANCE](
	[TRACE_INSTANCE_ID] [INT] IDENTITY(1,1) NOT NULL,	
	[ENGINE_NAME] [VARCHAR](100) NULL,
	[START_TIME] [DATETIME] NOT NULL,
	[END_TIME] [DATETIME] NULL,
	[MACHINE_NAME] [VARCHAR](50) NULL,
	[USER_ID] [VARCHAR] (100) NULL,
	[PARAMETER_DETAILS][VARCHAR](8000) NULL,
	[CREATED_BY] [VARCHAR](50) NOT NULL,
	[CREATED_DATE] [DATETIME] NOT NULL,
	[MODIFIED_BY] [VARCHAR](50) NOT NULL,
	[MODIFIED_DATE] [DATETIME] NOT NULL,
	[UPDATE_SEQ] [INT] NULL,
 CONSTRAINT [PK_SGW_BPM_TRACE_INSTANCE] PRIMARY KEY CLUSTERED 
(
	[TRACE_INSTANCE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_TRACE_INSTANCE IS already EXISTS'
END       
GO

------------------------------------------------------------------------------53_SGW_BPM_TRACE_THRESHOLD_QUERY----------------------------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_TRACE_THRESHOLD_QUERY') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_TRACE_THRESHOLD_QUERY IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_TRACE_THRESHOLD_QUERY](
	[TRACE_THRESHOLD_QUERY_ID] [int] IDENTITY(1,1) NOT NULL,
	[ACTIVITY_INSTANCE_ID] [int] NOT NULL,	
	[QUERY_ID] [varchar](100)  NULL,
	[QUERY_TEXT] [varchar](8000) NULL,
	[QUERY_RESULT] [varchar](100) NULL,	
	[START_TIME] [datetime] NOT NULL,
	[END_TIME] [datetime] NULL,
	[PARAMETER_DETAILS] [varchar](8000) NULL,
	[TRANSACTION_ID] [uniqueidentifier] null,
	[SUB_TRANSACTION_ID] int,
	[TOTAL_TIME_IN_MS] [int] NOT NULL,		
 CONSTRAINT [PK_SGW_BPM_TRACE_THRESHOLD_QUERY] PRIMARY KEY CLUSTERED 
(
	[TRACE_THRESHOLD_QUERY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]  
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_TRACE_THRESHOLD_QUERY IS already EXISTS'
END       
GO

-------------------------------------------------------------------------------------99_Alter_Script_for_SGW_BPM_TRACE_THRESHOLD_QUERY(6.0.13.0)--------------------------------------------------

--Created By	:	Rashmi Deepak
--Created On	:	14th September 2020
--Description	:	Adding audit columns in  SGW_BPM_TRACE_THRESHOLD_QUERY
------------------------------------------------------------------------------------------------------------------------ 

IF COL_LENGTH('dbo.SGW_BPM_TRACE_THRESHOLD_QUERY', 'CREATED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_TRACE_THRESHOLD_QUERY]
ADD CREATED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_TRACE_THRESHOLD_QUERY', 'CREATED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_TRACE_THRESHOLD_QUERY]
ADD CREATED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_TRACE_THRESHOLD_QUERY', 'MODIFIED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_TRACE_THRESHOLD_QUERY]
ADD MODIFIED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_TRACE_THRESHOLD_QUERY', 'MODIFIED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_TRACE_THRESHOLD_QUERY]
ADD MODIFIED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_TRACE_THRESHOLD_QUERY', 'UPDATE_SEQ') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_TRACE_THRESHOLD_QUERY]
ADD UPDATE_SEQ int NOT NULL DEFAULT 0
END
GO

---------------------------------------------------------------------------------------54_SGW_BPM_USERS_ESC_MESSAGE-----------------------------------------------------------------------------


IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_USERS_ESC_MESSAGE') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_USERS_ESC_MESSAGE IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_USERS_ESC_MESSAGE] (
    [USERS_ESC_MESSAGE_ID] INT         IDENTITY (1, 1) NOT NULL,
    [ESCALATION_MESSAGE_ID]       INT         NOT NULL,
    [USER_SERIAL_ID]              INT         NOT NULL,
    [MARK_AS_READ]                VARCHAR (1) NOT NULL,
    CONSTRAINT [PK_SGW_BPM_USERS_ESC_MESSAGE] PRIMARY KEY CLUSTERED ([USERS_ESC_MESSAGE_ID] ASC)
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_USERS_ESC_MESSAGE IS already EXISTS'
END       
GO

---------------------------------------------------------------------------------------82_Alter_Script_for_SGW_BPM_USERS_ESC_MESSAGE(6.0.12.1)---------------------

--Created By	:	Siddharth Sabadra
--Created On	:	30th June 2020
--Description	:	Adding audit columns in  SGW_BPM_USERS_ESC_MESSAGE
------------------------------------------------------------------------------------------------------------------------ 

IF COL_LENGTH('dbo.SGW_BPM_USERS_ESC_MESSAGE', 'CREATED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_USERS_ESC_MESSAGE]
ADD CREATED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_USERS_ESC_MESSAGE', 'CREATED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_USERS_ESC_MESSAGE]
ADD CREATED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_USERS_ESC_MESSAGE', 'MODIFIED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_USERS_ESC_MESSAGE]
ADD MODIFIED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_USERS_ESC_MESSAGE', 'MODIFIED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_USERS_ESC_MESSAGE]
ADD MODIFIED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_USERS_ESC_MESSAGE', 'UPDATE_SEQ') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_USERS_ESC_MESSAGE]
ADD UPDATE_SEQ int NOT NULL DEFAULT 0
END
GO


--------------------------------------------------------------------------------100_Alter_Script_for_SGW_BPM_USERS_ESC_MESSAGE(6.0.13.0)---------------------------------------


--Created By	:	Rashmi Deepak
--Created On	:	14th September 2020
--Description	:	Adding audit columns in  SGW_BPM_USERS_ESC_MESSAGE
------------------------------------------------------------------------------------------------------------------------ 

IF COL_LENGTH('dbo.SGW_BPM_USERS_ESC_MESSAGE', 'CREATED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_USERS_ESC_MESSAGE]
ADD CREATED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_USERS_ESC_MESSAGE', 'CREATED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_USERS_ESC_MESSAGE]
ADD CREATED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_USERS_ESC_MESSAGE', 'MODIFIED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_USERS_ESC_MESSAGE]
ADD MODIFIED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_USERS_ESC_MESSAGE', 'MODIFIED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_USERS_ESC_MESSAGE]
ADD MODIFIED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_USERS_ESC_MESSAGE', 'UPDATE_SEQ') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_USERS_ESC_MESSAGE]
ADD UPDATE_SEQ int NOT NULL DEFAULT 0
END
GO

--------------------------------------------------------------------------------55_SGW_USER_TIMEOFF---------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_USER_TIMEOFF') 
BEGIN
PRINT 'TABLE Name : SGW_USER_TIMEOFF IS CREATED'
CREATE TABLE [dbo].[SGW_USER_TIMEOFF](
	[USER_TIMEOFF_ID] [dbo].[UDT_IDENTITY] IDENTITY(1,1) NOT NULL,
	[USER_SERIAL_ID] [dbo].[UDT_IDENTITY] NOT NULL,
	[START_DATE] [dbo].[UDT_DATE] NOT NULL,
	[END_DATE] [dbo].[UDT_DATE] NOT NULL,
	[STATUS_ID] [dbo].[UDT_CODE_ID] NOT NULL,
	[STATUS_VALUE] [dbo].[UDT_CODE_VALUE] NOT NULL,
	[CREATED_BY] [dbo].[UDT_CREATEDBY] NOT NULL,
	[CREATED_DATE] [dbo].[UDT_DATETIME] NOT NULL,
	[MODIFIED_BY] [dbo].[UDT_MODIFIEDBY] NOT NULL,
	[MODIFIED_DATE] [dbo].[UDT_DATETIME] NOT NULL,
	[UPDATE_SEQ] [dbo].[UDT_UPDSEQ] NOT NULL,
 CONSTRAINT [PK_SGW_USER_TIMEOFF] PRIMARY KEY CLUSTERED 
(
	[USER_TIMEOFF_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_USER_TIMEOFF IS already EXISTS'
END       
GO

IF (NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME ='FK_SGW_USER_TIMEOFF_SGS_USER'))
BEGIN
ALTER TABLE [dbo].[SGW_USER_TIMEOFF]  WITH NOCHECK ADD  CONSTRAINT [FK_SGW_USER_TIMEOFF_SGS_USER] FOREIGN KEY([USER_SERIAL_ID])
REFERENCES [dbo].[SGS_USER] ([USER_SERIAL_ID])
END
ELSE
BEGIN
PRINT 'FK_SGW_USER_TIMEOFF_SGS_USER ALready exists'
END
GO

ALTER TABLE [dbo].[SGW_USER_TIMEOFF] CHECK CONSTRAINT [FK_SGW_USER_TIMEOFF_SGS_USER]
GO

--------------------------------------------------------------------------------56_SGW_BPM_TRACING---------------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_TRACING') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_TRACING IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_TRACING](
	[BPM_TRACING_ID] [int] IDENTITY(1,1) NOT NULL,
	[BPM_TRACING_FLAG] VARCHAR(1) NOT NULL,
	[BPM_QUERY_TRACING_FLAG] VARCHAR(1) NULL,
	[BPM_QUERY_LIMIT] [INT] NOT NULL ,
	[BPM_QUERY_LIMIT_ALERT] [VARCHAR](100) NOT NULL, 
	[BPM_QUERY_HIGH_LIMIT] [INT] NOT NULL,	
	[BPM_QUERY_HIGH_LIMIT_ALERT] [VARCHAR](100) NOT NULL,	
	[CREATED_BY] [VARCHAR](50) NOT NULL,
	[CREATED_DATE] [DATETIME] NOT NULL,
	[MODIFIED_BY] [VARCHAR](50) NOT NULL,
	[MODIFIED_DATE] [DATETIME] NOT NULL,
	[UPDATE_SEQ] [INT]  NULL,
 CONSTRAINT [PK_SGW_BPM_TRACING] PRIMARY KEY CLUSTERED 
(
	[BPM_TRACING_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]

END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_TRACING IS already EXISTS'
END       
GO

--------------------------------------------------------------------------------57_SGS_SERVERS---------------------------------------


IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGS_SERVERS') 
BEGIN
PRINT 'TABLE Name : SGS_SERVERS IS CREATED'
CREATE TABLE [dbo].[SGS_SERVERS]
(
	[SERVER_ID]			int				IDENTITY(1,1) NOT NULL,
	[SERVER_NAME]		varchar (4000)	NULL,
	[CREATED_BY]		varchar	(50)	NOT NULL,
	[CREATED_DATE]		datetime		NOT NULL,
	[MODIFIED_BY]		varchar (50)	NOT NULL,
	[MODIFIED_DATE]		datetime		NOT NULL,
	[UPDATE_SEQ]		int			NOT null
	CONSTRAINT [PK_SGS_SERVERS] PRIMARY KEY CLUSTERED ([SERVER_ID] ASC)	
	WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	)

END
ELSE
BEGIN
PRINT 'TABLE Name : SGS_SERVERS IS already EXISTS'
END       
GO

-------------------------------------------------------------------------------58_SGW_BPM_SERVER_SETTINGS------------------------------------------


IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_SERVER_SETTINGS') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_SERVER_SETTINGS IS CREATED'

CREATE TABLE [dbo].[SGW_BPM_SERVER_SETTINGS](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[SERVER_ID] [int] NOT NULL,
	[SERVICE_TIMER_ID] [int] NOT NULL,
	[INTERVAL] [int] NOT NULL,
	[ENABLED] [varchar](1) NOT NULL,
	[BPM_TRACING_FLAG]			varchar(1) NULL,
	[BPM_QUERY_TRACING_FLAG]	varchar(50) NULL,
	[BPM_QUERY_LIMIT]			INT			NULL,
	[BPM_QUERY_LIMIT_ALERT]		varchar(100) NULL,
	[BPM_QUERY_HIGH_LIMIT]		INT			NULL,
	[BPM_QUERY_HIGH_LIMIT_ALERT] varchar(100) NULL
 CONSTRAINT [PK_SGW_BPM_SERVER_SETTINGS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF (NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME ='FK_SGW_BPM_SERVER_SETTINGS_SGS_SERVER_SERVER_ID'))
BEGIN
ALTER TABLE [dbo].[SGW_BPM_SERVER_SETTINGS]  WITH NOCHECK ADD  CONSTRAINT [FK_SGW_BPM_SERVER_SETTINGS_SGS_SERVER_SERVER_ID] FOREIGN KEY([SERVER_ID])
REFERENCES [dbo].[SGS_SERVERS] ([SERVER_ID])
END
ELSE
BEGIN
PRINT 'FK_SGW_BPM_SERVER_SETTINGS_SGS_SERVER_SERVER_ID ALready exists'
END
GO

IF (NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME ='FK_SGW_BPM_SERVER_SETTINGS_SGS_SERVER_SERVER_ID'))
BEGIN
ALTER TABLE [dbo].[SGW_BPM_SERVER_SETTINGS] CHECK CONSTRAINT [FK_SGW_BPM_SERVER_SETTINGS_SGS_SERVER_SERVER_ID]
END
ELSE
BEGIN
PRINT 'FK_SGW_BPM_SERVER_SETTINGS_SGS_SERVER_SERVER_ID ALready exists'
END
GO

IF (NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME ='FK_SGW_BPM_SERVER_SETTINGS_SGW_BPM_SERVICE_TIMERS_SERVICE_TIMER_ID'))
BEGIN
ALTER TABLE [dbo].[SGW_BPM_SERVER_SETTINGS]  WITH NOCHECK ADD  CONSTRAINT [FK_SGW_BPM_SERVER_SETTINGS_SGW_BPM_SERVICE_TIMERS_SERVICE_TIMER_ID] FOREIGN KEY([SERVICE_TIMER_ID])
REFERENCES [dbo].[SGW_BPM_SERVICE_TIMER] ([SERVICE_TIMER_ID])
END
ELSE
BEGIN
PRINT 'FK_SGW_BPM_SERVER_SETTINGS_SGW_BPM_SERVICE_TIMERS_SERVICE_TIMER_ID ALready exists'
END
GO


ALTER TABLE [dbo].[SGW_BPM_SERVER_SETTINGS] CHECK CONSTRAINT [FK_SGW_BPM_SERVER_SETTINGS_SGW_BPM_SERVICE_TIMERS_SERVICE_TIMER_ID]

GO


--------------------------------------------------------------95_Alter_Script_for_SGW_BPM_SERVER_SETTINGS(6.0.13.0)-----------------------------------------

--Created By	:	Rashmi Deepak
--Created On	:	14th September 2020
--Description	:	Adding audit columns in  SGW_BPM_SERVER_SETTINGS
------------------------------------------------------------------------------------------------------------------------ 

IF COL_LENGTH('dbo.SGW_BPM_SERVER_SETTINGS', 'CREATED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_SERVER_SETTINGS]
ADD CREATED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_SERVER_SETTINGS', 'CREATED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_SERVER_SETTINGS]
ADD CREATED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_SERVER_SETTINGS', 'MODIFIED_BY') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_SERVER_SETTINGS]
ADD MODIFIED_BY varchar(50) NOT NULL DEFAULT 'BPM Service'
END
GO

IF COL_LENGTH('dbo.SGW_BPM_SERVER_SETTINGS', 'MODIFIED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_SERVER_SETTINGS]
ADD MODIFIED_DATE datetime NOT NULL DEFAULT getdate()
END
GO

IF COL_LENGTH('dbo.SGW_BPM_SERVER_SETTINGS', 'UPDATE_SEQ') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_SERVER_SETTINGS]
ADD UPDATE_SEQ int NOT NULL DEFAULT 0
END
GO

----------------------------------------------------------------------------59_INSERT_SGS_CODE_VALUE(6.0.10.0.A)-----------------------------------------------------------
--Created By	:	Mansi Shah
--Created On	:	21st January 2020
--Description	:	Adding RELE,APPR,REJT to SGS_CODE_VALUE table
------------------------------------------------------------------------------------------------------------------------ 
GO
IF NOT EXISTS(SELECT * FROM SGS_CODE_VALUE WHERE CODE_ID = 2007 AND CODE_VALUE = 'RELE')
BEGIN   
 INSERT INTO [dbo].[SGS_CODE_VALUE](CODE_ID,CODE_VALUE,DESCRIPTION,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) VALUES (2007,'RELE','Released','system',GETDATE(),'system',GETDATE(),0);  
 PRINT 'RELE CODE VALUE INSERTED SUCCESSFULLY.' 
END
ELSE
BEGIN
PRINT 'RELE CODE_VALUE already EXISTS'
END     
GO




-----------------------------------------------------------------------------60_INSERT_SGS_CODE_VALUE(6.0.10.1)--------------------------------------------------------------------

IF NOT EXISTS(SELECT * FROM SGS_CODE_VALUE WHERE CODE_ID = 2007 AND CODE_VALUE = 'RELE')
BEGIN
INSERT INTO [dbo].[SGS_CODE_VALUE](CODE_ID,CODE_VALUE,DESCRIPTION,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) VALUES (2007,'RELE','Released','system',GETDATE(),'system',GETDATE(),0);  
PRINT 'RELE CODE VALUE INSERTED SUCCESSFULLY.' 
END
ELSE
BEGIN
PRINT 'RELE CODE_VALUE already EXISTS'
END  
GO


-------------------------------------------------------------------------116_INSERT_SGS_CODE_VALUE-----------------------------------------------------------------------------------

IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 2021) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2021, 'Workflow - Request - Source', NULL,NULL,NULL,NULL,NULL,NULL,'All',NULL,NULL,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
END
GO


IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE   WHERE CODE_ID = 2021 AND CODE_VALUE = 'BTCH')
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2021,'BTCH','Batch',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',getdate(),'Conversion',getdate(),0);
	 PRINT 'BTCH CODE VALUE INSERTED SUCCESSFULLY.' 
END
ELSE
BEGIN
PRINT 'BTCH CODE_VALUE already EXISTS'
END  
GO


IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE   WHERE CODE_ID = 2021 AND CODE_VALUE = 'INDX')
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2021,'INDX','Scanning & Indexing',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',getdate(),'Conversion',getdate(),0);
	 PRINT 'INDX CODE VALUE INSERTED SUCCESSFULLY.' 
END
ELSE
BEGIN
PRINT 'INDX CODE_VALUE already EXISTS'
END  
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE   WHERE CODE_ID = 2021 AND CODE_VALUE = 'MSGF')
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2021,'MSGF','Message Flow',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',getdate(),'system',getdate(),0);
	 PRINT 'MSGF CODE VALUE INSERTED SUCCESSFULLY.' 
END
ELSE
BEGIN
PRINT 'MSGF CODE_VALUE already EXISTS'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE   WHERE CODE_ID = 2021 AND CODE_VALUE = 'ONLI')
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2021,'ONLI','Online',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',getdate(),'Conversion',getdate(),0);
	 PRINT 'ONLI CODE VALUE INSERTED SUCCESSFULLY.' 
END
ELSE
BEGIN
PRINT 'ONLI CODE_VALUE already EXISTS'
END
GO


----------------------------------------------------------------------------123_INSERT_SGS_CODE_VALUE--------------------------------------------------------------


IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 2010) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2010, 'Workflow - Event - Type', NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	  PRINT 'RECORD INSERTED SUCCESSFULLY.' 
END
GO


IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2010 AND CODE_VALUE = 'DOC') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2010,'DOC','Document',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	   PRINT 'RECORD INSERTED SUCCESSFULLY.' 
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2010 AND CODE_VALUE = 'EML') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2010,'EML','Email',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	   PRINT 'RECORD INSERTED SUCCESSFULLY.' 
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2010 AND CODE_VALUE = 'FAX') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2010,'FAX','FAX',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	   PRINT 'RECORD INSERTED SUCCESSFULLY.' 
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2010 AND CODE_VALUE = 'SCRN') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2010,'SCRN','Screen',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	   PRINT 'RECORD INSERTED SUCCESSFULLY.' 
END
GO


IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 2009) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2009, 'Workflow - Event - Status', NULL,NULL,NULL,NULL,NULL,NULL,'All',NULL,NULL,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	   PRINT 'RECORD INSERTED SUCCESSFULLY.' 
END
GO


IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2009 AND CODE_VALUE = 'ACTV') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2009,'ACTV','Active',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	   PRINT 'RECORD INSERTED SUCCESSFULLY.' 
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2009 AND CODE_VALUE = 'EXCD') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2009,'EXCD','Excluded',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	   PRINT 'RECORD INSERTED SUCCESSFULLY.' 
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2009 AND CODE_VALUE = 'INAC') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2009,'INAC','Inactive',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	   PRINT 'RECORD INSERTED SUCCESSFULLY.' 
END
GO


IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 2011) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2011, 'Workflow - Activity Instance - Suspension Reason', NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	   PRINT 'RECORD INSERTED SUCCESSFULLY.' 
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2011 AND CODE_VALUE = 'AMRR') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2011,'AMRR','Awaiting Member / Recipient''s Response',NULL,NULL, NULL,NULL,NULL, NULL,6,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
  PRINT 'RECORD INSERTED SUCCESSFULLY.' 
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2011 AND CODE_VALUE = 'CRTI') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2011,'CRTI','Certification Issue',NULL,NULL, NULL,NULL,NULL, NULL,3,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 PRINT 'RECORD INSERTED SUCCESSFULLY.' 
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2011 AND CODE_VALUE = 'ERRN') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2011,'ERRN','Employer Response Needed',NULL,NULL, NULL,NULL,NULL, NULL,4,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 PRINT 'RECORD INSERTED SUCCESSFULLY.' 
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2011 AND CODE_VALUE = 'INIR') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2011,'INIR','Incorrect Information Received',NULL,NULL, NULL,NULL,NULL, NULL,2,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 PRINT 'RECORD INSERTED SUCCESSFULLY.' 
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2011 AND CODE_VALUE = 'INRN') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2011,'INRN','Internal Response Needed',NULL,NULL, NULL,NULL,NULL, NULL,5,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 PRINT 'RECORD INSERTED SUCCESSFULLY.' 
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2011 AND CODE_VALUE = 'MINF') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2011,'MINF','Missing Information',NULL,NULL, NULL,NULL,NULL, NULL,1,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 PRINT 'RECORD INSERTED SUCCESSFULLY.' 
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2011 AND CODE_VALUE = 'OTHR') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2011,'OTHR','Other',NULL,NULL, NULL,NULL,NULL, NULL,8,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 PRINT 'RECORD INSERTED SUCCESSFULLY.' 
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2011 AND CODE_VALUE = 'RBMR') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2011,'RBMR','Requested by Member / Recipient',NULL,NULL, NULL,NULL,NULL, NULL,7,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 PRINT 'RECORD INSERTED SUCCESSFULLY.' 
END
GO



-------------------------------------------------------------------------------------130_INSERT_SGS_CODE_VALUE------------------------------------------------------



 IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2004 AND CODE_VALUE = 'ABRT') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2004,'ABRT','Aborted',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',getdate(),'Conversion',getdate(),0);
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

 IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2004 AND CODE_VALUE = 'INPC') 
BEGIN
	INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2004,'INPC','In Progress',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',getdate(),'Conversion',getdate(),0);
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO
 
  IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2004 AND CODE_VALUE = 'PROC') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2004,'PROC','Processed',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',getdate(),'Conversion',getdate(),0);
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2004 AND CODE_VALUE = 'TERM') 
BEGIN
	  INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2004,'TERM','Terminated',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',getdate(),'Conversion',getdate(),0);
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2004 AND CODE_VALUE = 'UNPC') 
BEGIN
	INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2004,'UNPC','Not Processed',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',getdate(),'Conversion',getdate(),0);
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO
 

 IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2004 AND CODE_VALUE = 'RETR') 
BEGIN
	INSERT INTO dbo.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2004, 'RETR', 'Restricted', NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 'Conversion', getdate(), 'Conversion', getdate(), 0);
 PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2002 AND CODE_VALUE = 'ACTV') 
BEGIN
	  INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2002,'ACTV','Active',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
	 END
GO

 IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2002 AND CODE_VALUE = 'INAC') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2002,'INAC','Inactive',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 20007001 AND CODE_VALUE = 'ACTV') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (20007001,'ACTV','Active',NULL,NULL, NULL,NULL,NULL, NULL,NULL,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 20007001 AND CODE_VALUE = 'VOID') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (20007001,'VOID','Void',NULL,NULL, NULL,NULL,NULL, NULL,NULL,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2003 AND CODE_VALUE = 'NONE') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2003,'NONE','None',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2003 AND CODE_VALUE = 'ORGN') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2003,'ORGN','Organization',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2003 AND CODE_VALUE = 'PERS') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2003,'PERS','Person',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO
-------------------------------------------------------------------------------132_INSERT_SGS_CODE_VALUE---------------------------------------------------

IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 3013) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (3013, 'Reason Id', NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL, 'system',GETDATE(),'system',GETDATE(),0)
	   PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 3013 AND CODE_VALUE = 'UNDL') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (3013,'UNDL','Undelivered',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',getdate(),'system',getdate(),0);
	   PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 3013 AND CODE_VALUE = 'TRNA') 
BEGIN
	INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (3013,'TRNA','Turn Around',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',getdate(),'system',getdate(),0);
	   PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO


---------------------------------------------------------------------------135_INSERT_SGS_CODE_VALUE--------------------------------------------------------


IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 2006)
BEGIN
INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2006, 'Workflow - Resume Action', NULL,NULL,NULL,NULL,NULL,NULL,'All',NULL,NULL,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
 PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2006 AND CODE_VALUE = 'ALLD')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2006,'ALLD','All Documents',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
 PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2006 AND CODE_VALUE = 'ANYD')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2006,'ANYD','Any Document',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
 PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO


-----------------------------------------------------------------------136_INSERT__SGS_CODE_VALUE----------------------------------------------------------

IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 7026) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (7026, 'Workflow - Request - Status', NULL,NULL,NULL,NULL,NULL,NULL,'All',NULL,NULL,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 7026 AND CODE_VALUE = 'IGNO') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (7026,'IGNO','Ignored',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 7026 AND CODE_VALUE = 'PEND') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (7026,'PEND','Pended',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 7026 AND CODE_VALUE = 'PICK') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (7026,'PICK','Picked',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 7026 AND CODE_VALUE = 'PROC') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (7026,'PROC','Processed',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 7026 AND CODE_VALUE = 'UNPC') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (7026,'UNPC','Not Processed',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT * FROM SGS_CODE_VALUE WHERE CODE_ID = 7026 AND CODE_VALUE = 'FAIL') 
BEGIN
INSERT INTO [dbo].[SGS_CODE_VALUE](CODE_ID,CODE_VALUE,DESCRIPTION,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
VALUES (7026,'FAIL','Failed','system',GETDATE(),'system',GETDATE(),0) 
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

 
IF NOT EXISTS(SELECT * FROM SGS_CODE_VALUE WHERE CODE_ID = 7026 AND CODE_VALUE = 'RETR') 
BEGIN
	INSERT INTO [dbo].[SGS_CODE_VALUE](CODE_ID,CODE_VALUE,DESCRIPTION,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
	VALUES (7026,'RETR','Restricted','system',GETDATE(),'system',GETDATE(),0) 
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

------------------------------------------------------------------------146_INSERT_SGS_CODE_VALUE----------------------------------------------------------

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 3003 AND CODE_VALUE = 'ACTV')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (3003,'ACTV','Active',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 3003 AND CODE_VALUE = 'INTV')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (3003,'INTV','In Active',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO


---------------------------------------------------------------148_INSERT_SGS_CODE_VALUE-------------------------------------------------------


IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'BACA')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'BACA','Calling Activity',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'BAEV')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'BAEV','Base Event',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'BAGW')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'BAGW','Gateway',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'BATK')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'BATK','Base Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'BATV')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'BATV','Base Activity',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'BRCA')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'BRCA','Calling Global Business Rule Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'COGW')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'COGW','Complex Gateway',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'EBGW')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'EBGW','Event Based Gateway',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'EDEV')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'EDEV','End Event',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'EXGW')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'EXGW','Exclusive Gateway',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'GTCA')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'GTCA','Calling Global Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'IMCE')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'IMCE','Intermediate Message Catch Event',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'INCE')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'INCE','Intermediate Catch Event',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'INGW')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'INGW','Inclusive Gateway',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'INTE')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'INTE','Intermediate Throw Event',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'ITCE')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'ITCE','Intermediate Timer Catch Event',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'MACA')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'MACA','Calling Global Manual Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'MATK')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'MATK','Manual Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'PAGW')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'PAGW','Parallel Gateway',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'PRCA')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'PRCA','Calling Process',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'RMTK')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'RMTK','Receive Message Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'RUTK')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'RUTK','Business Rule Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'SCCA')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'SCCA','Calling Global Script Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'SCTK')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'SCTK','Script Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'SMTK')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'SMTK','Send Message Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'SPTK')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'SPTK','Sub Process',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'SRTK')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'SRTK','Service Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'STEV')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'STEV','Start Event',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'USCA')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'USCA','Calling Global User Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2031 AND CODE_VALUE = 'USTK')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031,'USTK','User Task',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

-------------------------------------------------------158_UPDATE_SGS_CODE_VALUE(Mail - BPM Upgrade Code Deployment On Systest)--------------------------------

IF EXISTS(SELECT 1 FROM SGS_CODE_VALUE where CODE_ID=3003 and CODE_VALUE='INTV')
BEGIN
update [dbo].[SGS_CODE_VALUE] set DESCRIPTION='Inactive' where CODE_ID=3003 and CODE_VALUE='INTV'
END

GO

----------------------------------------------------151_INSERT_SGS_CODE_VALUE----------------------------------------------------------


IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2007 AND CODE_VALUE = 'CANC')
BEGIN
INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2007,'CANC','Cancelled',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO


------------------------------------------------------------------------117_INSERT_SGS_CODE---------------------------------------------------------------

  IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 3008) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (3008, 'Instance Priority', NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL, 'system',GETDATE(),'system',GETDATE(),0)
	 	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO



IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 3008 AND CODE_VALUE = 'HIGH') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (3008,'HIGH','High',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
	 	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 3008 AND CODE_VALUE = 'NORM') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (3008,'NORM','Normal',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
	 	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

------------------------------------------------------131_INSERT_SGS_CODE----------------------------------------------------------

 IF NOT EXISTS(SELECT 1 FROM SGS_CODE   WHERE CODE_ID = 2004) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2004, 'Workflow - Process Instance - Status', NULL,NULL,NULL,NULL,NULL,NULL,'All',NULL,NULL,NULL, 'Conversion',getdate(),'Conversion',getdate(),0);
	 PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 2002) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2002, 'Workflow - Process - Status', NULL,NULL,NULL,NULL,NULL,NULL,'All',NULL,NULL,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS (SELECT *	FROM SGS_CODE	WHERE CODE_ID = 20007001)
BEGIN
INSERT INTO [dbo].[SGS_CODE] (CODE_ID, DESCRIPTION, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (20007001, 'Status of out of office record', 'Conversion', GETDATE(), 'Conversion', GETDATE(), 0);
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO


IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 2003) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2003, 'Workflow - Process - Type', NULL,NULL,NULL,NULL,NULL,NULL,'All',NULL,NULL,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

----------------------------------------------------------------------------------------------------------137_INSERT_SGS_CODE-----------------------------------

IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 2007) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2007, 'Workflow - Activity Instance - Status', NULL,NULL,NULL,NULL,NULL,NULL,'All',NULL,NULL,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 	 PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO


IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2007 AND CODE_VALUE = 'INPC') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2007,'INPC','In Progress',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 	 PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2007 AND CODE_VALUE = 'PROC') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2007,'PROC','Completed',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 	 PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO


IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2007 AND CODE_VALUE = 'RESU') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2007,'RESU','Resumed',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 	 PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO


IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2007 AND CODE_VALUE = 'SUSP') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2007,'SUSP','Suspended',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 	 PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2007 AND CODE_VALUE = 'UNPC') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2007,'UNPC','Initiated',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 	 PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

	 
-------------------------------------------------------------------------------------------145_INSERT_SGS_CODE-----------------------------------------------------   
	  
 IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 3004) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (3004, 'Escalation Supervisor Level', NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO


IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 3004 AND CODE_VALUE = 'BOSS') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (3004,'BOSS','Supervisor','1',NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 3004 AND CODE_VALUE = 'BS01') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (3004,'BS01','Level1_Supervisor','2',NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 3004 AND CODE_VALUE = 'BS02') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (3004,'BS02','Level2_Supervisor','3',NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 3004 AND CODE_VALUE = 'BS03') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (3004,'BS03','Level3_Supervisor','4',NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

--------------------------------------------------------------------------------------------------147_INSERT_SGS_CODE------------------------------------------------------

IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 2031)
BEGIN
INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (2031, 'Activity Type', NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL, 'system',GETDATE(),'system',GETDATE(),0)
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

------------------------------------------------------------------------------------------154_INSERT_SGS_CODE-------------------------------------------------------------------
IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 7029) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (7029, 'Escalation Lapse Type', NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO


IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 7029 AND CODE_VALUE = 'LTAE') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (7029,'LTAE','After Expiration',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 7029 AND CODE_VALUE = 'LTBE') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (7029,'LTBE','Before Expiration',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 7029 AND CODE_VALUE = 'LTNA') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (7029,'LTNA','Un Assigned Activity',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF EXISTS(SELECT 1 FROM SGS_CODE_VALUE where CODE_ID=7029 and CODE_VALUE='LTNA')
BEGIN
update [dbo].[SGS_CODE_VALUE] set DESCRIPTION='Unassigned Activity' where CODE_ID=7029 and CODE_VALUE='LTNA'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 7029 AND CODE_VALUE = 'LTOE') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (7029,'LTOE','On Expiration',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	 PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

------------------------------------------------------------------------------------------155_INSERT_SGS_CODE-----------------------------------------------------------------  

IF NOT EXISTS(SELECT 1 FROM SGS_CODE WITH(NOLOCK) WHERE CODE_ID = 7030) 
BEGIN
	 INSERT INTO DBO.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (7030, 'Escalation Recur Type', NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 7030 AND CODE_VALUE = 'RTET') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (7030,'RTET','Each Recur Time',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 7030 AND CODE_VALUE = 'RTNO') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (7030,'RTNO','None',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'Conversion',GETDATE(),'Conversion',GETDATE(),0)
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO


  
------------------------------------------------------------------------------------------157_INSERT_SGS_CODE-----------------------------------------------------------------  
IF NOT EXISTS (SELECT *	FROM SGS_CODE WHERE CODE_ID = 3006)
BEGIN
INSERT INTO dbo.SGS_CODE (CODE_ID, DESCRIPTION, DATA1_CAPTION, DATA1_TYPE, DATA2_CAPTION, DATA2_TYPE, DATA3_CAPTION, DATA3_TYPE, FIRST_LOOKUP_ITEM, FIRST_MAINTENANCE_ITEM, COMMENTS, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (3006, 'Process Escalation Lapse Type', NULL, NULL, NULL, NULL, NULL, NULL, 'All', NULL, NULL, NULL, 'rahul.mane', GETDATE(), 'tanaji.biradar', GETDATE(), 0)
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS (SELECT  1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 3006 AND CODE_VALUE = 'LTAE')
BEGIN
INSERT INTO dbo.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (3006, 'LTAE', 'After Expiration', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'rahul.mane', GETDATE(), 'tanaji.biradar', GETDATE(), 0)
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO


IF NOT EXISTS (SELECT  1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 3006 AND CODE_VALUE = 'LTBE')
BEGIN
INSERT INTO dbo.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (3006, 'LTBE', 'Before Expiration', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'rahul.mane', GETDATE(), 'tanaji.biradar', GETDATE(), 0)
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS (SELECT  1 FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 3006 AND CODE_VALUE = 'LTOE')
BEGIN
INSERT INTO dbo.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
VALUES (3006, 'LTOE', 'On Expiration', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'rahul.mane', GETDATE(), 'tanaji.biradar', GETDATE(), 0)
	  PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO


---------------------------------------------------------------61_INSERT_SGS_MESSAGES(6.0.10.1)------------------------------------------------------
--Created By	:	Siddharth Sabadra
--Created On	:	27st January 2020
--Description	:	Adding Message to SGS_FWK_MESSAGES table

IF NOT EXISTS(SELECT * FROM SGS_MESSAGES where MESSAGE_ID = 20007034 and DISPLAY_MESSAGE = 'Please enter valid Process Events') 
BEGIN
 insert into [dbo].[SGS_MESSAGES] (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID, SEVERITY_VALUE,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) values (20007034,'Please enter valid Process Events',20002001,'E','system',getdate(),'system',getdate(),0);
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

---------------------------------------------------------------62_INSERT_SGS_MESSAGES(6.0.10.1.A)----------------------------------------------

--Created By	:	Siddharth Sabadra
--Created On	:	27st January 2020
--Description	:	Adding Message to SGS_FWK_MESSAGES table
------------------------------------------------------------------------------------------------------------------------ 
IF NOT EXISTS(SELECT * FROM SGS_MESSAGES where MESSAGE_ID = 20007034 and DISPLAY_MESSAGE = 'Please enter valid Process Events') 
BEGIN
 insert into [dbo].[SGS_MESSAGES] (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID, SEVERITY_VALUE,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) values (20007034,'Please enter valid Process Events',20002001,'E','system',getdate(),'system',getdate(),0);
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO


------------------------------------------------------------------121_INSERT_SGS_MESSAGES-------------------------------------------------------------


IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 1556) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (1556,'Workflow Process Initialized.',20002001,'I','','','Conversion',GETDATE(),'Conversion',GETDATE(),0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO


----------------------------------------------------------------122_INSERT_SGS_MESSAGES-------------------------------------



IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 20007006))
  BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] (MESSAGE_ID, DISPLAY_MESSAGE, SEVERITY_ID, SEVERITY_VALUE, INTERNAL_INSTRUCTIONS, EMPLOYER_INSTRUCTIONS,CREATED_DATE, CREATED_BY, MODIFIED_DATE, MODIFIED_BY, UPDATE_SEQ) 
	VALUES (20007006, 'Event Description is required.',20002001, 'E', NULL, NULL , GETDATE(), 'System', GETDATE(), 'System', 0);
		PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO
  
IF NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 20007015)
   BEGIN
	INSERT INTO dbo.SGS_MESSAGES (MESSAGE_ID, DISPLAY_MESSAGE, SEVERITY_ID, SEVERITY_VALUE, INTERNAL_INSTRUCTIONS, EMPLOYER_INSTRUCTIONS,CREATED_DATE, CREATED_BY, MODIFIED_DATE, MODIFIED_BY, UPDATE_SEQ) 
	VALUES (20007015, 'Document Class is required.',20002001, 'E', NULL, NULL,GETDATE(), 'System', GETDATE(), 'System', 0);
		PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES    WHERE MESSAGE_ID = 20007011) 
  BEGIN
	INSERT INTO [dbo].[SGS_MESSAGES] (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007011,'Status is required.',20002001,'E','','','System', GETDATE(), 'System',GETDATE(), 0);
		PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
 GO 
  

IF(NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WHERE MESSAGE_ID = 20007010))
  BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] (MESSAGE_ID, DISPLAY_MESSAGE, SEVERITY_ID, SEVERITY_VALUE, INTERNAL_INSTRUCTIONS, EMPLOYER_INSTRUCTIONS,CREATED_DATE, CREATED_BY, MODIFIED_DATE, MODIFIED_BY, UPDATE_SEQ) 
	VALUES (20007010, 'Event Type is required.',20002001, 'E', NULL, NULL, GETDATE(), 'System', GETDATE(),'System', 0);
		PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 20007009))
   BEGIN
	INSERT INTO dbo.SGS_MESSAGES (MESSAGE_ID, DISPLAY_MESSAGE, SEVERITY_ID, SEVERITY_VALUE, INTERNAL_INSTRUCTIONS, EMPLOYER_INSTRUCTIONS, CREATED_DATE, CREATED_BY, MODIFIED_DATE, MODIFIED_BY, UPDATE_SEQ) 
	VALUES (20007009, 'Document Type is required.',20002001, 'E',  NULL, NULL, GETDATE(), 'System', GETDATE(),'System', 0);
		PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO


-----------------------------------------------------------124_INSERT_SGS_MESSAGES---------------------------------------------------------

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES    WHERE MESSAGE_ID = 20007017) 
  BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007017,'Case is required.',20002001,'E','','', 'Conversion',GETDATE(),'Conversion',GETDATE(),0);
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
  Go
  
IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007018) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007018,'Activity is required.',20002001,'E','','','system',GETDATE(),'system',GETDATE(),0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007019) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007019,'Lapse Time In Minutes is required.',20002001,'E','','','system',GETDATE(),'system',GETDATE(),0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007021) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007021,'Escalation Name is required.',20002001,'E','','','system',GETDATE(),'system',GETDATE(),0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO


IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007023) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007023,'At least one user is required.',20002001,'E','','','system',GETDATE(),'system',GETDATE(),0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007022) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007022,'Process is required.',20002001,'E','','','system',GETDATE(),'system',GETDATE(),0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007028) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007028,'Process Escalation Name is required.',20002001,'E','','','system',GETDATE(),'system',GETDATE(),0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 20007029))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (20007029, 'At least one recipient is required.',20002001, 'I', NULL, NULL, GETDATE(), 'system', GETDATE(), 'system', 0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20008002) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20008002,'Notes are required.',20002001,'E','Notes Are Required','Notes are required.','System',GETDATE(),'system',GETDATE(),0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO
-------------------------------------------------------------------------125_SGS_MESSAGES------------------------------------------------



IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 1523) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (1523,'User ID selected does not have access to the Process.',20002001,'I','','','Conversion',GETDATE(),'Conversion',GETDATE(),0)
		PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 1524))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS], [CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (1524, 'Process Name is required.', 20002001, 'E', NULL, NULL, GETDATE(), 'admin', GETDATE(), 'admin', 0)
		PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT * FROM SGS_CODE WHERE CODE_ID = 3010) 
BEGIN
INSERT INTO [dbo].[SGS_CODE](CODE_ID,DESCRIPTION,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
VALUES (3010,'Engine Id','system',GETDATE(),'system',GETDATE(),0); 
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT * FROM SGS_CODE_VALUE WHERE CODE_ID = 3010 AND CODE_VALUE = 'DFLT') 
BEGIN
INSERT INTO [dbo].[SGS_CODE_VALUE](CODE_ID,CODE_VALUE,DESCRIPTION,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ) 
VALUES (3010,'DFLT','Default','system',GETDATE(),'system',GETDATE(),0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

--------------------------------------------------------------------------134_INSERT_SGS_MESSAGES-----------------------------------------------------
IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 1569))
BEGIN
INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS], [CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ])
VALUES (1569, 'Please set Process Type to initiate the process.',20002001, 'E', NULL, NULL, GETDATE(), 'vijayw', GETDATE(), 'vijayw', 0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

  IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 1503) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (1503,'Activity Completed Successfully.',20002001,'I','','','Conversion',GETDATE(),'Conversion',GETDATE(),0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO


IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 1508) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (1508,'Activity Suspended Successfully.',20002001,'I','','','Conversion',GETDATE(),'Conversion',GETDATE(),0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 1555) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (1555,'Activity Resumed Successfully.',20002001,'I','','','Conversion',GETDATE(),'Conversion',GETDATE(),0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 1535) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (1535,'Workflow has been terminated.',20002001,'I','','','Conversion',GETDATE(),'Conversion',GETDATE(),0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 1509) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (1509,'Activity Checked out Successfully.',20002001,'I','','','Conversion',GETDATE(),'Conversion',GETDATE(),0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

-------------------------------------------------------------------------------141_INSERT_SGS_MESSAGES-----------------------------------------

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 1573))
BEGIN 
	INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ]) 
	VALUES (1573, 'Process can not be Initiated for both Person and Organisation.',20002001, 'E', NULL, NULL, GETDATE(), 'vivekb', GETDATE(), 'vivekb', 0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007024) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007024,'Duplicate Escalation Name exists.',20002001,'E','','','system',GETDATE(),'system',GETDATE(),0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

------------------------------------------------------------------------143_INSERT_SGS_MESSAGES-----------------------------------------------------------

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 1538)
BEGIN
INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
VALUES (1538,'User ID is invalid.',20002001,'E','','','Conversion',GETDATE(),'Conversion',GETDATE(),0)
PRINT 'RECORD INSERTED SUCCESSFULLY.'
END

GO
------------------------------------------------------------------------144_INSERT_SGS_MESSAGES---------------------------

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 1533) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (1533, 'No notes have been entered.',20002001,'E','','','system',GETDATE(),'system',GETDATE(),0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

--------------------------------------------------149_INSERT_SGS_MESSAGES------------------------------------------------------------

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 20007002))
BEGIN
INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS], [CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ])
VALUES (20007002, 'Start Date is requried.',20002001, 'E', NULL, NULL, GETDATE(), 'TanajiB', GETDATE(), 'TanajiB', 0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO


IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 20007003))
BEGIN
INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS], [CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ])
VALUES (20007003, 'End Date is required.',20002001, 'E', NULL, NULL, GETDATE(), 'TanajiB', GETDATE(), 'TanajiB', 0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO


IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007033)
BEGIN
INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS], [CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ])
VALUES (20007033, 'Cannot set multiple out of office records for the same user with overlapping dates',20002001, 'E', NULL, NULL, GETDATE(), 'vijay.kaza', GETDATE(), 'vijay.kaza', 0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 20007001))
BEGIN
INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS], [CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ])
VALUES (20007001, 'User Name is required.',20002001, 'E', NULL, NULL, GETDATE(), 'TanajiB', GETDATE(), 'TanajiB', 0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO


--------------------------------------------------------------------150_INSERT_SGS_MESSAGES----------------------------------------------------------------------

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007016) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007016, 'Another event with same document type exists. Please enter unique document type.',20002001,'E','','','system',GETDATE(),'system',GETDATE(),0)
		PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

------------------------------------------------------------------156_INSERT_SGS_MESSAGES------------------------------------

IF NOT EXISTS(SELECT 1 FROM SGS_MESSAGES WITH(NOLOCK) WHERE MESSAGE_ID = 20007014) 
BEGIN
	INSERT INTO DBO.SGS_MESSAGES (MESSAGE_ID,DISPLAY_MESSAGE,SEVERITY_ID,SEVERITY_VALUE,INTERNAL_INSTRUCTIONS,EMPLOYER_INSTRUCTIONS,CREATED_BY,CREATED_DATE,MODIFIED_BY,MODIFIED_DATE,UPDATE_SEQ)
	VALUES (20007014,'Duplicate Process Escalation Name exists.',20002001,'E','','','system',GETDATE(),'system',GETDATE(),0)
		PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO
------------------------------------------------------------------159_INSERT_SGS_MESSAGES-------------------------------------------------

IF(NOT EXISTS(SELECT 1 FROM dbo.SGS_MESSAGES WHERE MESSAGE_ID = 1582))
BEGIN
INSERT INTO [dbo].[SGS_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [INTERNAL_INSTRUCTIONS], [EMPLOYER_INSTRUCTIONS],[CREATED_DATE], [CREATED_BY], [MODIFIED_DATE], [MODIFIED_BY], [UPDATE_SEQ])
VALUES (1582, 'Entered user is unavailable.',20002001, 'E', NULL, NULL, GETDATE(), 'TanajiB', GETDATE(), 'TanajiB', 0)
	PRINT 'RECORD INSERTED SUCCESSFULLY.'
END
GO

-----------------------------------------------------------------------------61A_INSERT_SGS_SYSTEM_SETTINGS(6.0.12.0.E)-----------------------------------

IF NOT EXISTS(SELECT 1 FROM SYS.COLUMNS WHERE NAME =N'REFRESHABLE'  AND OBJECT_ID = OBJECT_ID(N'SGS_SYSTEM_SETTINGS'))
BEGIN
ALTER TABLE [dbo].[SGS_SYSTEM_SETTINGS]
ADD REFRESHABLE varchar(1) NULL; 
END

ELSE
BEGIN
  PRINT 'COLUMN NAME: REFRESHABLE ALREADY EXISTS IN THE TABLE SGS_SYSTEM_SETTINGS'
END
GO
-------------------------------------------------------------63_INSERT_SGS_SYSTEM_SETTINGS(6.0.10.2)------------------------------------

IF NOT EXISTS (SELECT 1 FROM [dbo].SGS_SYSTEM_SETTINGS WHERE SETTING_NAME = 'ValidateDuplicateControls')
BEGIN
INSERT [dbo].[SGS_SYSTEM_SETTINGS] ([SETTING_NAME], [SETTING_TYPE], [SETTING_VALUE], [ENCRYPTED_FLAG],[REFRESHABLE]) 
VALUES (N'ValidateDuplicateControls', N'bool', N'false', NULL,NULL);
PRINT 'RECORD INSERTED SUCCESSFULLY.'
 END
GO

------------------------------------------------------65_INSERT_SGS_SYSTEM_SETTINGS(6.0.11.0)----------------------------------------------------------


IF NOT EXISTS (SELECT 1 FROM [dbo].SGS_SYSTEM_SETTINGS WHERE SETTING_NAME = 'AvoidDuplicateEntriesInHistory')
BEGIN
INSERT [dbo].[SGS_SYSTEM_SETTINGS] ([SETTING_NAME], [SETTING_TYPE], [SETTING_VALUE], [ENCRYPTED_FLAG],[REFRESHABLE]) 
VALUES (N'AvoidDuplicateEntriesInHistory', N'bool', N'true ', NULL,NULL);
PRINT 'RECORD INSERTED SUCCESSFULLY.'
 END
GO


-----------------------------------------------------------------------------111_INSERT_SGS_SYSTEM_MANAGEMENT---------------------------------------------------------------------------

IF NOT EXISTS(SELECT 1 FROM SYS.COLUMNS WHERE NAME =N'USE_APPLICATION_DATE'  AND OBJECT_ID = OBJECT_ID(N'SGS_SYSTEM_MANAGEMENT'))
BEGIN
ALTER TABLE [dbo].[SGS_SYSTEM_MANAGEMENT] ADD USE_APPLICATION_DATE VARCHAR(1) DEFAULT ('N') NOT NULL 
END

ELSE
BEGIN
  PRINT 'COLUMN NAME: USE_APPLICATION_DATE ALREADY EXISTS IN THE TABLE SGS_SYSTEM_MANAGEMENT'
END
GO

IF NOT EXISTS(SELECT 1 FROM SYS.COLUMNS WHERE NAME =N'SYSTEM_FLAG'  AND OBJECT_ID = OBJECT_ID(N'SGS_SYSTEM_MANAGEMENT'))
BEGIN
ALTER TABLE [dbo].[SGS_SYSTEM_MANAGEMENT] ADD SYSTEM_FLAG VARCHAR(50) NULL
END

ELSE
BEGIN
  PRINT 'COLUMN NAME: SYSTEM_FLAG ALREADY EXISTS IN THE TABLE SGS_SYSTEM_MANAGEMENT'
END
GO

IF NOT EXISTS(SELECT 1 FROM SYS.COLUMNS WHERE NAME =N'DATA1'  AND OBJECT_ID = OBJECT_ID(N'SGS_SYSTEM_MANAGEMENT'))
BEGIN
ALTER TABLE [dbo].[SGS_SYSTEM_MANAGEMENT] ADD DATA1 VARCHAR(50) NULL
END

ELSE
BEGIN
  PRINT 'COLUMN NAME: DATA1 ALREADY EXISTS IN THE TABLE SGS_SYSTEM_MANAGEMENT'
END
GO

IF NOT EXISTS(SELECT 1 FROM SYS.COLUMNS WHERE NAME =N'DATA2'  AND OBJECT_ID = OBJECT_ID(N'SGS_SYSTEM_MANAGEMENT'))
BEGIN
ALTER TABLE [dbo].[SGS_SYSTEM_MANAGEMENT] ADD DATA2 VARCHAR(50) NULL
END

ELSE
BEGIN
  PRINT 'COLUMN NAME: DATA2 ALREADY EXISTS IN THE TABLE SGS_SYSTEM_MANAGEMENT'
END
GO


---------------------------------------------------------------------------------119_ALTER_SGS_SYSTEM_MANAGEMENT---------------------------------------------------------------------

IF NOT EXISTS(SELECT 1 FROM SYS.COLUMNS WHERE NAME =N'APPLICATION_DATE'  AND OBJECT_ID = OBJECT_ID(N'SGS_SYSTEM_MANAGEMENT'))
BEGIN
ALTER TABLE [dbo].[SGS_SYSTEM_MANAGEMENT] ADD APPLICATION_DATE UDT_DATETIME NULL
END

ELSE
BEGIN
  PRINT 'COLUMN NAME: APPLICATION_DATE ALREADY EXISTS IN THE TABLE SGS_SYSTEM_MANAGEMENT'
END
GO

------------------------------------------------------64_PBI21005_CreateTablesSQL(6.0.11.0)----------------------------------------------------------
-----------------------------------------
--Created By	:	Mansi Shah
--Created On	:	4th March 2020
--Description	:	Adding tables SGW_BPM_ACTIVITY_ESC_MESSAGES,SGW_BPM_PROCESS_ESC_MESSAGES and default data
------------------------------------------------------------------------------------------------------------------------ 
IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE  TABLE_NAME = 'SGW_BPM_ACTIVITY_ESC_MESSAGES'))
BEGIN
CREATE TABLE [dbo].[SGW_BPM_ACTIVITY_ESC_MESSAGES](
	[ACTIVITY_ESC_MESSAGE_ID] [int] IDENTITY(1,1) NOT NULL,
	[ESCALATION_TYPE_VALUE] [varchar](4) NOT NULL,
	[ESCALATION_MESSAGE] [varchar](max) NOT NULL,
 CONSTRAINT [PK_ACTIVITY_ESC] PRIMARY KEY CLUSTERED 
(
	[ACTIVITY_ESC_MESSAGE_ID] ASC
)) 

--Insert default messages
insert into [dbo].[SGW_BPM_ACTIVITY_ESC_MESSAGES] (ESCALATION_TYPE_VALUE,ESCALATION_MESSAGE) values ('LTBE','The case {0} with case instance id {1} at step {2} is due on {3}.')
insert into [dbo].[SGW_BPM_ACTIVITY_ESC_MESSAGES] (ESCALATION_TYPE_VALUE,ESCALATION_MESSAGE) values ('LTAE','The case {0} with case instance id {1} at step {2} is delayed whose due date is on {3}.')
insert into [dbo].[SGW_BPM_ACTIVITY_ESC_MESSAGES] (ESCALATION_TYPE_VALUE,ESCALATION_MESSAGE) values ('LTSA','The case {0} with case instance id {1} at step {2} is suspended since {3}.')
insert into [dbo].[SGW_BPM_ACTIVITY_ESC_MESSAGES] (ESCALATION_TYPE_VALUE,ESCALATION_MESSAGE) values ('LTOE','The case {0} with case instance id {1} at step {2} is due now.')
insert into [dbo].[SGW_BPM_ACTIVITY_ESC_MESSAGES] (ESCALATION_TYPE_VALUE,ESCALATION_MESSAGE) values ('LTNA','The case {0} with case instance id {1} at step {2} is un assigned.')

END
GO

IF (NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE  TABLE_NAME = 'SGW_BPM_PROCESS_ESC_MESSAGES'))
BEGIN
CREATE TABLE [dbo].[SGW_BPM_PROCESS_ESC_MESSAGES](
	[PROCESS_ESC_MESSAGE_ID] [int] IDENTITY(1,1) NOT NULL,
	[ESCALATION_TYPE_VALUE] [varchar](4) NOT NULL,
	[ESCALATION_MESSAGE] [varchar](max) NOT NULL,
 CONSTRAINT [PK_PROCESS_ESC] PRIMARY KEY CLUSTERED 
(
	[PROCESS_ESC_MESSAGE_ID] ASC
))

--Insert default messages
insert into [dbo].[SGW_BPM_PROCESS_ESC_MESSAGES] (ESCALATION_TYPE_VALUE,ESCALATION_MESSAGE) values ('LTAE','The process {0} with case instance id {1} is delayed whose due date is on {2}.')
insert into [dbo].[SGW_BPM_PROCESS_ESC_MESSAGES] (ESCALATION_TYPE_VALUE,ESCALATION_MESSAGE) values ('LTBE','The process {0} with case instance id {1} is due on {2}.')
insert into [dbo].[SGW_BPM_PROCESS_ESC_MESSAGES] (ESCALATION_TYPE_VALUE,ESCALATION_MESSAGE) values ('LTOE','The process {0} with case instance id {1} is due now.')

END
GO


------------------------------------------------------65_PBI21009_AlterTablesSQL(6.0.11.0)----------------------------------------------------------
-----------------------------------------
--Created By	:	Mansi Shah
--Created On	:	4th March 2020
--Description	:	Change datatype of image columns.
------------------------------------------------------------------------------------------------------------------------ 
IF (EXISTS (SELECT * FROM sys.columns WHERE NAME = 'PARAMETERS_SNAPSHOT' AND Object_ID = Object_ID('SGW_BPM_CASE_INST_EXEC_PATH')))
BEGIN
ALTER TABLE [dbo].[SGW_BPM_CASE_INST_EXEC_PATH] ALTER COLUMN PARAMETERS_SNAPSHOT VARBINARY(MAX)
END
GO

IF (EXISTS (SELECT * FROM sys.columns WHERE NAME = 'OBJECT_VALUE' AND Object_ID = Object_ID('SGW_BPM_CASE_INST_PARAMETER')))
BEGIN
ALTER TABLE [dbo].[SGW_BPM_CASE_INST_PARAMETER] ALTER COLUMN OBJECT_VALUE VARBINARY(MAX)
END
GO

------------------------------------------------------66_PBI21011_DeleteTablesSQL(6.0.11.0)----------------------------------------------------------

-----------------------------------------
--Created By	:	Mansi Shah
--Created On	:	4th March 2020
--Description	:	Removal of unwanted BPM tables.
------------------------------------------------------------------------------------------------------------------------ 
IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE  TABLE_NAME = 'SGW_BPM_CASE_PARAMETER'))
BEGIN
drop table [dbo].[SGW_BPM_CASE_PARAMETER]
END
GO

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE  TABLE_NAME = 'SGW_BPM_PROCESS_SEQUENCE_FLOW'))
BEGIN
drop table [dbo].[SGW_BPM_PROCESS_SEQUENCE_FLOW]
END
GO

IF (EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE  TABLE_NAME = 'SGW_BPM_CASE_MESSAGE_FLOW'))
BEGIN
drop table [dbo].[SGW_BPM_CASE_MESSAGE_FLOW]
END
GO

------------------------------------------------------67_PIR_21116(6.0.11.0)----------------------------------------------------------

DECLARE @MESSAGE_ID AS INT
DECLARE @MESSAGE_KEY AS VARCHAR(200)
DECLARE @DISPLAY_MESSAGE AS VARCHAR(MAX)
DECLARE @SEVERITY_ID AS INT
DECLARE @SEVERITY_VALUE AS VARCHAR(50)
DECLARE @CATEGORY_ID AS INT
DECLARE @CATEGORY_VALUE AS VARCHAR(50)
DECLARE @CATEGORY_NAME AS VARCHAR(50)
DECLARE @CREATED_BY AS VARCHAR(200)
DECLARE @CREATED_DATE AS DATETIME
DECLARE @UPDATE_SEQ AS INT
DECLARE @PRINT_MESSAGE_FLAG AS BIT
DECLARE @UPDATE_MESSAGE_FLAG AS BIT
DECLARE @PRINT_MESSAGE AS VARCHAR(100)
DECLARE @INSERT_MESSAGE AS VARCHAR(100)
DECLARE @UPDATE_MESSAGE AS VARCHAR(100)
DECLARE @EXISTS_MESSAGE AS VARCHAR(100)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--========================================================================================================================================================================
SET @PRINT_MESSAGE_FLAG = 1   -- Flag to Print or Do not print Message after execution
SET @UPDATE_MESSAGE_FLAG = 1  -- Flag to Update the existing message
--========================================================================================================================================================================
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SET @PRINT_MESSAGE = 'MESSAGE {MESSAGE_TYPE} - MESSAGE_ID: {MESSAGE_ID} DISPLAY_MESSAGE: "{DISPLAY_MESSAGE}".'
SET @INSERT_MESSAGE = REPLACE(@PRINT_MESSAGE, '{MESSAGE_TYPE}', 'INSERTED')
SET @UPDATE_MESSAGE = REPLACE(@PRINT_MESSAGE, '{MESSAGE_TYPE}', 'UPDATED')
SET @EXISTS_MESSAGE = REPLACE(@PRINT_MESSAGE, '{MESSAGE_TYPE}', 'ALREADY EXISTS')
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SET @CREATED_BY = 'FRAMEWORK'
SET @SEVERITY_ID = 16
SET @CATEGORY_ID = 256
SET @CREATED_DATE = GETDATE()
SET @UPDATE_SEQ = 0
SET @CATEGORY_NAME = 'FWK'
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SET @CATEGORY_VALUE = 'OTM'
SET @SEVERITY_VALUE = 'I'
SET @MESSAGE_ID = 50030
SET @DISPLAY_MESSAGE = 'Error Occured.'

IF NOT EXISTS (SELECT 1 FROM SGS_FWK_MESSAGES WHERE MESSAGE_ID = @MESSAGE_ID OR DISPLAY_MESSAGE LIKE @DISPLAY_MESSAGE)
BEGIN
	INSERT INTO [dbo].[SGS_FWK_MESSAGES]
	(MESSAGE_ID,  MESSAGE_KEY,   DISPLAY_MESSAGE,  SEVERITY_ID,  SEVERITY_VALUE,  CATEGORY_NAME,  CATEGORY_ID,  CATEGORY_VALUE,  CREATED_BY,  CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	VALUES
	(@MESSAGE_ID, @MESSAGE_KEY, @DISPLAY_MESSAGE, @SEVERITY_ID, @SEVERITY_VALUE, @CATEGORY_NAME, @CATEGORY_ID, @CATEGORY_VALUE, @CREATED_BY, @CREATED_DATE, @CREATED_BY, @CREATED_DATE, @UPDATE_SEQ)

	IF @PRINT_MESSAGE_FLAG = 1
	BEGIN
		PRINT REPLACE(REPLACE(@INSERT_MESSAGE, '{MESSAGE_ID}', CONVERT(VARCHAR, @MESSAGE_ID)), '{DISPLAY_MESSAGE}', CONVERT(VARCHAR(MAX), @DISPLAY_MESSAGE))
	END
END
ELSE
BEGIN
	IF @UPDATE_MESSAGE_FLAG = 1
	BEGIN
		UPDATE [dbo].[SGS_FWK_MESSAGES]
		SET
			MESSAGE_KEY = @MESSAGE_KEY,
			DISPLAY_MESSAGE = @DISPLAY_MESSAGE,
			SEVERITY_ID = @SEVERITY_ID,
			SEVERITY_VALUE = @SEVERITY_VALUE,
			CATEGORY_NAME = @CATEGORY_NAME,
			CATEGORY_ID = @CATEGORY_ID,
			CATEGORY_VALUE = @CATEGORY_VALUE,
			MODIFIED_BY = @CREATED_BY,
			MODIFIED_DATE = @CREATED_DATE,
			UPDATE_SEQ = UPDATE_SEQ + 1
		WHERE MESSAGE_ID = @MESSAGE_ID

		IF @PRINT_MESSAGE_FLAG = 1
		BEGIN
			PRINT REPLACE(REPLACE(@UPDATE_MESSAGE, '{MESSAGE_ID}', CONVERT(VARCHAR, @MESSAGE_ID)), '{DISPLAY_MESSAGE}', CONVERT(VARCHAR(MAX), @DISPLAY_MESSAGE))
		END
	END
	ELSE IF @PRINT_MESSAGE_FLAG = 1
	BEGIN
		PRINT REPLACE(REPLACE(@EXISTS_MESSAGE, '{MESSAGE_ID}', CONVERT(VARCHAR, @MESSAGE_ID)), '{DISPLAY_MESSAGE}', CONVERT(VARCHAR(MAX), @DISPLAY_MESSAGE))
	END
END


------------------------------------------------------68_TableAlterScipts(6.0.12.0.E)----------------------------------------------------------

IF COL_LENGTH('dbo.SGS_SESSION_STORE', 'UPDATE_SEQ') IS NULL
BEGIN
ALTER TABLE [dbo].[SGS_SESSION_STORE]
ADD UPDATE_SEQ INT NOT NULL DEFAULT(0);
END
GO

IF COL_LENGTH('dbo.SGS_ACT_LOG', 'REFRESH_DB_CACHE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGS_ACT_LOG]
ADD REFRESH_DB_CACHE DATETIME NULL;
END
GO

IF COL_LENGTH('dbo.SGS_ACT_LOG', 'REFRESH_SYSTEM_SETTINGS_CACHE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGS_ACT_LOG]
ADD REFRESH_SYSTEM_SETTINGS_CACHE DATETIME NULL;
END
GO

IF COL_LENGTH('dbo.SGS_ACT_LOG', 'REFRESH_DB_CONNECTION') IS NULL
BEGIN
ALTER TABLE [dbo].[SGS_ACT_LOG]
ADD REFRESH_DB_CONNECTION DATETIME NULL;
END
GO

IF COL_LENGTH('dbo.SGS_ACT_LOG', 'REFRESH_WEB_CACHE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGS_ACT_LOG]
ADD REFRESH_WEB_CACHE DATETIME NULL;
END
GO

IF COL_LENGTH('dbo.SGS_ACT_LOG', 'RUN_GC') IS NULL
BEGIN
ALTER TABLE [dbo].[SGS_ACT_LOG]
ADD RUN_GC DATETIME NULL;
END
GO

IF COL_LENGTH('dbo.SGS_ACT_LOG', 'CLEAR_DB_POOL') IS NULL
BEGIN
ALTER TABLE [dbo].[SGS_ACT_LOG]
ADD CLEAR_DB_POOL DATETIME NULL;
END
GO



IF EXISTS(SELECT *  FROM INFORMATION_SCHEMA.COLUMNS WHERE  TABLE_NAME = 'SGS_DATABASE_CONNECTIONS' AND COLUMN_NAME = 'SUPPORTS_ALWAYS_ON_FLAG') 
BEGIN
	PRINT ' COLUMN NAME :: SUPPORTS_ALWAYS_ON_FLAG IS SUCCESSFULLY DRPPED'
	ALTER TABLE [dbo].[SGS_DATABASE_CONNECTIONS]
   DROP COLUMN SUPPORTS_ALWAYS_ON_FLAG;
END
ELSE
BEGIN
	PRINT 'COLUMN NAME :: SUPPORTS_ALWAYS_ON_FLAG IS ALREADY DROPPED'
END

------------------------------------------------------------------------72_sgs_session_store_without_oltp------------------------------------------------

/****** Object:  StoredProcedure [dbo].[GetActivityRuleFromSessionStore]    Script Date: 05-06-2020 19:16:11 ******/
IF EXISTS (SELECT 1 FROM sys.objects
WHERE Name = '[GetActivityRuleFromSessionStore]'
AND Type IN ( N'P'))

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE OR ALTER PROCEDURE [dbo].[GetActivityRuleFromSessionStore]
	-- Add the parameters for the stored procedure here
	@SESSION_STORE_SERIAL_ID INT
AS 
BEGIN
   --Insert statements for the stored procedure here
 SELECT ACTIVITY_INSTANCE_ID, RULE_RESULT FROM dbo.SGS_SESSION_STORE WITH(NOLOCK)  WHERE SESSION_STORE_SERIAL_ID = @SESSION_STORE_SERIAL_ID 
END
GO




/****** Object:  StoredProcedure [dbo].[GetBusObjectFromSessionStore]    Script Date: 05-06-2020 19:16:49 ******/
IF EXISTS (SELECT 1 FROM sys.objects
WHERE Name = '[GetBusObjectFromSessionStore]'
AND Type IN ( N'P'))

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE OR ALTER PROCEDURE [dbo].[GetBusObjectFromSessionStore]
	-- Add the parameters for the stored procedure here
	@SESSION_USER_KEY VARCHAR(200)
AS 
BEGIN
   --Insert statements for the stored procedure here
 SELECT BUS_OBJECT FROM DBO.SGS_SESSION_STORE WITH(NOLOCK) where SESSION_USER_KEY=@SESSION_USER_KEY
END
GO



IF EXISTS (SELECT 1 FROM sys.objects
WHERE Name = '[GetDetailsFromSessionStore]'
AND Type IN ( N'P'))

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
CREATE OR ALTER PROCEDURE [dbo].[GetDetailsFromSessionStore]
	-- Add the parameters for the stored procedure here
	@SESSION_STORE_SERIAL_ID INT
AS 
BEGIN
   --Insert statements for the stored procedure here
 SELECT PRIMARY_KEY,SESSION_ID,FORM_ID,GRID_HASH FROM DBO.SGS_SESSION_STORE WITH(NOLOCK)  WHERE SESSION_STORE_SERIAL_ID = @SESSION_STORE_SERIAL_ID
END
GO



IF EXISTS (SELECT 1 FROM sys.objects
WHERE Name = '[GetSessionDetails]'
AND Type IN ( N'P'))

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
CREATE OR ALTER PROCEDURE [dbo].[GetSessionDetails]
	-- Add the parameters for the stored procedure here
	@SESSION_STORE_SERIAL_ID INT
AS 
BEGIN
   --Insert statements for the stored procedure here
 SELECT SESSION_ID,FORM_ID,BUS_OBJECT FROM DBO.SGS_SESSION_STORE WITH(NOLOCK)   where SESSION_STORE_SERIAL_ID = @SESSION_STORE_SERIAL_ID
END

GO



IF EXISTS (SELECT 1 FROM sys.objects
WHERE Name = '[InsertSessionStore]'
AND Type IN ( N'P'))

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE OR ALTER PROCEDURE [dbo].[InsertSessionStore]
	-- Add the parameters for the stored procedure here
	@SESSION_USER_KEY varchar(100) ,
	@SESSION_ID  VARCHAR (50) ,
	@WINDOW_NAME VARCHAR(40),
	@FORM_ID VARCHAR(100) ,
	@PRIMARY_KEY INT ,
	@DATE_CREATED DATETIME ,
	@RULE_RESULT VARBINARY ,
	@ACTIVITY_INSTANCE_ID INT ,
	@GRID_HASH VARBINARY (MAX)
AS 
BEGIN
   --Insert statements for the stored procedure here
   DECLARE @SESSION_STORE_SERIAL_ID INT ; 
 INSERT INTO DBO.SGS_SESSION_STORE (SESSION_USER_KEY, SESSION_ID, WINDOW_NAME, FORM_ID, PRIMARY_KEY, DATE_CREATED, RULE_RESULT, ACTIVITY_INSTANCE_ID, GRID_HASH)
                           VALUES (@SESSION_USER_KEY, @SESSION_ID, @WINDOW_NAME, @FORM_ID, @PRIMARY_KEY, @DATE_CREATED, @RULE_RESULT, @ACTIVITY_INSTANCE_ID, @GRID_HASH) 
  SET @SESSION_STORE_SERIAL_ID = SCOPE_IDENTITY()  ;

  return @SESSION_STORE_SERIAL_ID ; 
END
GO





IF EXISTS (SELECT 1 FROM sys.objects
WHERE Name = '[UpdateSessionStore]'
AND Type IN ( N'P'))

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE OR ALTER PROCEDURE [dbo].[UpdateSessionStore]
	-- Add the parameters for the stored procedure here
	@ACTIVITY_INSTANCE_ID INT ,
	@GRID_HASH VARBINARY (MAX) ,
	@RULE_RESULT VARBINARY (MAX),
	@DATE_CREATED DATETIME ,
	@BUS_OBJECT VARBINARY (MAX),
	@SESSION_STORE_SERIAL_ID INT
AS 

begin
   --Insert statements for the stored procedure here
 UPDATE DBO.SGS_SESSION_STORE SET ACTIVITY_INSTANCE_ID = @ACTIVITY_INSTANCE_ID, GRID_HASH = @GRID_HASH, RULE_RESULT = @RULE_RESULT, DATE_CREATED = @DATE_CREATED, BUS_OBJECT= @BUS_OBJECT WHERE SESSION_STORE_SERIAL_ID = @SESSION_STORE_SERIAL_ID
END
GO

-------------------------------------------------------------------------------73_sgs_session_data_without_oltp(6.0.12.0.F)--------------------------------------------------


/****** Object:  StoredProcedure [dbo].[GetSessionObject]    Script Date: 05-06-2020 19:20:25 ******/
IF EXISTS (SELECT 1 FROM sys.objects
WHERE Name = '[GetSessionObject]'
AND Type IN ( N'P'))

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE OR ALTER PROCEDURE [dbo].[GetSessionObject]
	-- Add the parameters for the stored procedure here
	 @SESSION_ID varchar(100) 
AS 
BEGIN
   --Insert statements for the stored procedure here
 SELECT SESSION_OBJECT FROM DBO.SGS_SESSION_DATA WITH(NOLOCK)  where SESSION_ID=@SESSION_ID 
END
GO


IF EXISTS (SELECT 1 FROM sys.objects
WHERE Name = '[UpdateSessionData]'
AND Type IN ( N'P'))

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
CREATE OR ALTER PROCEDURE [dbo].[UpdateSessionData]
	-- Add the parameters for the stored procedure here
	
	@SESSION_OBJECT varbinary(max),
	 @DATE_CREATED datetime ,
	 @SESSION_ID varchar(100) 
AS 
begin
   --Insert statements for the stored procedure here
   DECLARE @ROW_COUNT INT  ;
    set @ROW_COUNT = 0;
	SELECT @ROW_COUNT = 1 FROM  DBO.SGS_SESSION_DATA WHERE SESSION_ID = @SESSION_ID ;
	IF @ROW_COUNT =1 
			UPDATE DBO.SGS_SESSION_DATA SET SESSION_OBJECT = @SESSION_OBJECT, DATE_CREATED = @DATE_CREATED WHERE SESSION_ID = @SESSION_ID;
	ELSE 
			INSERT INTO DBO.SGS_SESSION_DATA (SESSION_ID,SESSION_OBJECT, DATE_CREATED) VALUES (@SESSION_ID,@SESSION_OBJECT, @DATE_CREATED)
END
GO


------------------------------------------------------------------------85_SGS_SESSION_DATA(6.0.13.0)-------------------------------------
IF OBJECT_ID('dbo.GetSessionObject', 'P') IS NOT NULL 
  DROP PROCEDURE dbo.GetSessionObject;
GO

IF OBJECT_ID('dbo.UpdateSessionData', 'P') IS NOT NULL 
  DROP PROCEDURE dbo.UpdateSessionData;
GO


-- DROP TABLE--
IF OBJECT_ID('dbo.SGS_SESSION_DATA', 'U') IS NOT NULL 
  DROP TABLE dbo.SGS_SESSION_DATA;
GO

CREATE TABLE [dbo].[SGS_SESSION_DATA]
(
	[SESSION_ID] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[SESSION_OBJECT] [varbinary](max) NULL,
	[DATE_CREATED] [datetime] NOT NULL,
	[DELETE_FLAG] [varchar](1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

 CONSTRAINT [PK_SGS_SESSION_DATA]  PRIMARY KEY NONCLUSTERED 
(
	[SESSION_ID]
))
GO


CREATE PROCEDURE [dbo].[GetSessionObject]
	-- Add the parameters for the stored procedure here
	@SESSION_ID varchar(100) 
AS
BEGIN
   --Insert statements for the stored procedure here
 SELECT SESSION_OBJECT FROM DBO.SGS_SESSION_DATA  where SESSION_ID=@SESSION_ID 
END
GO


CREATE PROCEDURE [dbo].[UpdateSessionData]
	-- Add the parameters for the stored procedure here
	
	@SESSION_OBJECT varbinary(max),
	 @DATE_CREATED datetime ,
	 @SESSION_ID varchar(100) 
AS
BEGIN
   --Insert statements for the stored procedure here
   DECLARE @ROW_COUNT INT  ;
    SET @ROW_COUNT = 0; 
	SELECT @ROW_COUNT = 1 FROM  DBO.SGS_SESSION_DATA WHERE SESSION_ID = @SESSION_ID ;
	IF @ROW_COUNT =1 
			UPDATE DBO.SGS_SESSION_DATA SET SESSION_OBJECT = @SESSION_OBJECT, DATE_CREATED = @DATE_CREATED WHERE SESSION_ID = @SESSION_ID;
	ELSE 
			INSERT INTO DBO.SGS_SESSION_DATA (SESSION_ID,SESSION_OBJECT, DATE_CREATED) VALUES (@SESSION_ID,@SESSION_OBJECT, @DATE_CREATED)
END
GO


------------------------------------------------------------------------86_SGS_SESSION_STORE(6.0.13.0)-------------------------------------

-- DROP PROCEDURES--
IF OBJECT_ID('dbo.CheckObjectInSQL', 'P') IS NOT NULL 
	DROP PROCEDURE [dbo].[CheckObjectInSQL];
GO

IF OBJECT_ID('dbo.GetActivityRuleFromSessionStore', 'P') IS NOT NULL 
	DROP PROCEDURE [dbo].[GetActivityRuleFromSessionStore];
GO

IF OBJECT_ID('dbo.GetBusObjectFromSessionStore', 'P') IS NOT NULL 
	DROP PROCEDURE [dbo].[GetBusObjectFromSessionStore];
GO

IF OBJECT_ID('dbo.GetDetailsFromSessionStore', 'P') IS NOT NULL 
  DROP PROCEDURE dbo.GetDetailsFromSessionStore;
GO

IF OBJECT_ID('dbo.GetSessionDetails', 'P') IS NOT NULL 
  DROP PROCEDURE dbo.GetSessionDetails;
GO

IF OBJECT_ID('dbo.InsertSessionStore', 'P') IS NOT NULL 
  DROP PROCEDURE dbo.InsertSessionStore;
GO

IF OBJECT_ID('dbo.UpdateSessionStore', 'P') IS NOT NULL 
  DROP PROCEDURE dbo.UpdateSessionStore;
GO

IF OBJECT_ID('dbo.SelectRuleResultFromSessionStoreForCaptcha', 'P') IS NOT NULL 
  DROP PROCEDURE dbo.SelectRuleResultFromSessionStoreForCaptcha;
GO

IF OBJECT_ID('dbo.UpdateRuleResultInSessionStoreForCaptcha', 'P') IS NOT NULL 
  DROP PROCEDURE dbo.UpdateRuleResultInSessionStoreForCaptcha;
GO

-- DROP TABLE--
IF OBJECT_ID('dbo.SGS_SESSION_STORE', 'U') IS NOT NULL 
  DROP TABLE dbo.SGS_SESSION_STORE;
GO

-- CREATE TABLE 
CREATE TABLE [dbo].[SGS_SESSION_STORE]
(
	[SESSION_STORE_SERIAL_ID] [int] IDENTITY(1,1) NOT NULL,
	[SESSION_USER_KEY] [nvarchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SESSION_ID] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FORM_ID] [nvarchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PRIMARY_KEY] [int] NULL,
	[BUS_OBJECT] [varbinary](max) NULL,
	[DATE_CREATED] [datetime] NOT NULL,
	[WINDOW_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[RULE_RESULT] [varbinary](max) NULL,
	[ACTIVITY_INSTANCE_ID] [int] NULL,
	[GRID_HASH] [varbinary](max) NULL,
	[UPDATE_SEQ] [int] NULL DEFAULT 0,

INDEX [NCIX_SGS_SESSION_STORE_SESSION_ID] NONCLUSTERED 
(
	[SESSION_ID] ASC
),
INDEX [NCIX_SGS_SESSION_STORE_SESSION_USER_KEY] NONCLUSTERED 
(
	[SESSION_USER_KEY] ASC
),
 CONSTRAINT [PK_SGS_SESSION_STORE]  PRIMARY KEY NONCLUSTERED 
(
	[SESSION_STORE_SERIAL_ID]
))
GO

-- CREATE STORED PROCEDURES --
CREATE PROCEDURE [dbo].[CheckObjectInSQL]
	@SESSION_USER_KEY varchar(200) 
AS
BEGIN
 SELECT session_store_serial_id,update_seq FROM dbo.SGS_SESSION_STORE  WHERE SESSION_USER_KEY = @SESSION_USER_KEY 
END
GO

CREATE PROCEDURE [dbo].[GetActivityRuleFromSessionStore]
	@SESSION_STORE_SERIAL_ID INT
AS
BEGIN
 SELECT ACTIVITY_INSTANCE_ID, RULE_RESULT,UPDATE_SEQ FROM dbo.SGS_SESSION_STORE  WHERE SESSION_STORE_SERIAL_ID = @SESSION_STORE_SERIAL_ID 
END
GO

CREATE PROCEDURE [dbo].[GetBusObjectFromSessionStore]
	@SESSION_USER_KEY VARCHAR(200)
AS
BEGIN
 SELECT BUS_OBJECT FROM DBO.SGS_SESSION_STORE  where SESSION_USER_KEY=@SESSION_USER_KEY
END
GO


CREATE PROCEDURE [dbo].[GetDetailsFromSessionStore]
	@SESSION_STORE_SERIAL_ID INT

AS
BEGIN
 SELECT PRIMARY_KEY,SESSION_ID,FORM_ID,GRID_HASH, UPDATE_SEQ FROM DBO.SGS_SESSION_STORE  WHERE SESSION_STORE_SERIAL_ID = @SESSION_STORE_SERIAL_ID
END
GO

CREATE PROCEDURE [dbo].[GetSessionDetails]
	-- Add the parameters for the stored procedure here
	@SESSION_STORE_SERIAL_ID INT

AS
BEGIN
   --Insert statements for the stored procedure here
 SELECT SESSION_ID,FORM_ID,BUS_OBJECT FROM DBO.SGS_SESSION_STORE  where SESSION_STORE_SERIAL_ID = @SESSION_STORE_SERIAL_ID
END
GO

CREATE PROCEDURE [dbo].[InsertSessionStore]
	-- Add the parameters for the stored procedure here
	@SESSION_USER_KEY varchar(200) ,
	@SESSION_ID  VARCHAR (50) ,
	@WINDOW_NAME VARCHAR(40),
	@FORM_ID VARCHAR(100) ,
	@PRIMARY_KEY INT ,
	@DATE_CREATED DATETIME ,
	@RULE_RESULT VARBINARY ,
	@ACTIVITY_INSTANCE_ID INT ,
	@GRID_HASH VARBINARY (MAX),
	@UPDATE_SEQ INT = 0

AS
BEGIN
	
   --Insert statements for the stored procedure here
   DECLARE @SESSION_STORE_SERIAL_ID INT ; 
 INSERT INTO DBO.SGS_SESSION_STORE (SESSION_USER_KEY, SESSION_ID, WINDOW_NAME, FORM_ID, PRIMARY_KEY, DATE_CREATED, RULE_RESULT, ACTIVITY_INSTANCE_ID, GRID_HASH, UPDATE_SEQ)
                           VALUES (@SESSION_USER_KEY, @SESSION_ID, @WINDOW_NAME, @FORM_ID, @PRIMARY_KEY, @DATE_CREATED, @RULE_RESULT, @ACTIVITY_INSTANCE_ID, @GRID_HASH, ISNULL(@UPDATE_SEQ,0)) 
  SET @SESSION_STORE_SERIAL_ID = SCOPE_IDENTITY()  ;

  return @SESSION_STORE_SERIAL_ID ; 
END
GO

CREATE PROCEDURE [dbo].[UpdateSessionStore]
	-- Add the parameters for the stored procedure here
	@ACTIVITY_INSTANCE_ID INT ,
	@GRID_HASH VARBINARY (MAX) ,
	@RULE_RESULT VARBINARY (MAX),
	@DATE_CREATED DATETIME ,
	@BUS_OBJECT VARBINARY (MAX),
	@SESSION_STORE_SERIAL_ID INT,
	@UPDATE_SEQ INT = 0

AS
BEGIN
   --Insert statements for the stored procedure here
 UPDATE DBO.SGS_SESSION_STORE SET ACTIVITY_INSTANCE_ID = @ACTIVITY_INSTANCE_ID, GRID_HASH = @GRID_HASH, RULE_RESULT = @RULE_RESULT, DATE_CREATED = @DATE_CREATED, BUS_OBJECT= @BUS_OBJECT, UPDATE_SEQ= ISNULL(@UPDATE_SEQ,0) WHERE SESSION_STORE_SERIAL_ID = @SESSION_STORE_SERIAL_ID
END
GO

CREATE PROCEDURE [dbo].[SelectRuleResultFromSessionStoreForCaptcha]
	-- Add the parameters for the stored procedure here
	@SESSION_STORE_SERIAL_ID INT
AS BEGIN 
	
   --Insert statements for the stored procedure here
 SELECT RULE_RESULT FROM DBO.SGS_SESSION_STORE WHERE SESSION_STORE_SERIAL_ID = @SESSION_STORE_SERIAL_ID
END
GO

CREATE PROCEDURE [dbo].[UpdateRuleResultInSessionStoreForCaptcha]
	-- Add the parameters for the stored procedure here
	@RULE_RESULT VARBINARY (MAX),
	@SESSION_STORE_SERIAL_ID INT
AS BEGIN 
   --Insert statements for the stored procedure here
 UPDATE DBO.SGS_SESSION_STORE SET RULE_RESULT = @RULE_RESULT WHERE SESSION_STORE_SERIAL_ID = @SESSION_STORE_SERIAL_ID
END
GO

------------------------------------------------------------------------84_AddingFrameworkMessagesSqlScript(6.0.12.1)-------------------------------------

--Created By	:	Siddharth Sabadra
--Created On	:	10th July 2020
--Description	:	Adding Message to sgs_fwk_messages table
------------------------------------------------------------------------------------------------------------------------ 
IF NOT EXISTS(select * from sgs_fwk_messages where MESSAGE_ID=1561)
BEGIN 
 insert into [dbo].[sgs_fwk_messages] values(1561,null,'Could not find the path to upload documents',16,'E','FWK',256,'HDEM','system',getdate(),'FRAMEWORK',getdate(),0)
END
GO

IF NOT EXISTS(select * from sgs_fwk_messages where MESSAGE_ID=1562)
BEGIN 
 insert into [dbo].[sgs_fwk_messages] values(1562,null,'No BPM Process find to upload a file',16,'E','FWK',256,'HDEM','system',getdate(),'FRAMEWORK',getdate(),0)
END
GO


IF NOT EXISTS(select * from sgs_fwk_messages where MESSAGE_ID=1563)
BEGIN 
 insert into [dbo].[sgs_fwk_messages] values(1563,null,'No file chosen to upload. Please choose one before proceeding',16,'E','FWK',256,'HDEM','system',getdate(),'FRAMEWORK',getdate(),0)
END
GO
-----------------------------------------------------------------------------------101_AddingFrameworkMessagesSqlScript(6.0.13.1)-------------------------------------------------------------------------

--Created By	:	Siddharth Sabadra
--Created On	:	6th October 2020
--Description	:	Adding Message to sgs_fwk_messages table
------------------------------------------------------------------------------------------------------------------------

IF NOT EXISTS(select * from sgs_fwk_messages where MESSAGE_ID=1564) 
BEGIN
 insert into [dbo].[sgs_fwk_messages] values(1564,null,'This Process has a dependent process in Progess and is Restricted',16,'E','FWK',256,'HDEM','system',getdate(),'FRAMEWORK',getdate(),0)
END

GO
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

IF NOT EXISTS (SELECT * FROM [dbo].[SGS_FWK_MESSAGES] WHERE [MESSAGE_ID] = 1550)
BEGIN
INSERT [dbo].[SGS_FWK_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [CATEGORY_NAME], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ])
VALUES (1550, N'WFL PROCESS INITIATION FAILED. THIS WFL PROCESS ALREADY EXISTS FOR THIS PERSON.', 16, N'I', N'FWK', N'Conversion', CAST(N'2017-02-02 16:28:01.583' AS DateTime), N'Conversion', CAST(N'2017-02-02 16:28:01.583' AS DateTime), 0)
END
GO

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


IF NOT EXISTS (SELECT * FROM [dbo].[SGS_FWK_MESSAGES] WHERE [MESSAGE_ID] = 1549)
BEGIN
INSERT [dbo].[SGS_FWK_MESSAGES] ([MESSAGE_ID], [DISPLAY_MESSAGE], [SEVERITY_ID], [SEVERITY_VALUE], [CATEGORY_NAME], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ])
VALUES (1549, N'WFL PROCESS INITIATION FAILED. THIS WFL PROCESS ALREADY EXISTS FOR THIS ORGANIZATION.', 16, N'I', N'FWK', N'Conversion', CAST(N'2017-02-02 16:28:01.583' AS DateTime), N'Conversion', CAST(N'2017-02-02 16:28:01.583' AS DateTime), 0)
END
GO



------------------------------------------------------------------------75_TableAlterScripts(6.0.13.0)-------------------------------------


declare @Setting_value varchar(1000)='10000'
IF NOT EXISTS(select * from SGS_SYSTEM_SETTINGS where SETTING_NAME='DBCallDelayForSettingsRefresh') 
BEGIN
INSERT INTO [dbo].[SGS_SYSTEM_SETTINGS]
           ([SETTING_NAME]
           ,[SETTING_TYPE]
           ,[SETTING_VALUE]
           ,[ENCRYPTED_FLAG]
		   ,[REFRESHABLE])
     VALUES
           ('DBCallDelayForSettingsRefresh'
           ,'int'
           ,@Setting_value
           ,null
		   ,'Y');
END
GO

declare @Setting_value1 varchar(1000)='true'
IF NOT EXISTS(select * from SGS_SYSTEM_SETTINGS where SETTING_NAME='SupportsAlwaysOnFlag') 
BEGIN
INSERT INTO [dbo].[SGS_SYSTEM_SETTINGS]
           ([SETTING_NAME]
           ,[SETTING_TYPE]
           ,[SETTING_VALUE]
           ,[ENCRYPTED_FLAG]
		   ,[REFRESHABLE])
     VALUES
           ('SupportsAlwaysOnFlag'
           ,'bool'
           ,@Setting_value1
           ,null
		   ,'Y');
END
GO

------------------------------------------------------------------------76_DROP_USER_WAIT_TIME_COLUMN(6.0.13.2)-------------------------------------

IF EXISTS (SELECT TOP 1 (1)  FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SGS_ACT_LOG_APP' AND COLUMN_NAME = 'USERS_WAIT_TIME')
BEGIN
	PRINT 'DROPPING COLUMN';
	ALTER TABLE [dbo].[SGS_ACT_LOG_APP] DROP COLUMN USERS_WAIT_TIME;
	PRINT 'COLUMN DROPPED SUCCESSFULLY !';
END
GO

------------------------------------------------------------------------77_SGW_BPM_ACTIVITY_INST_USERS_primary_key_to_Bigint(6.0.15.0.G)-------------------------------------

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--Created By	:	Siddharth Sabadra
--Created On	:	26th April 2021
--Description	:	Changing the column ID of SGW_BPM_ACTIVITY_INST_USERS to bigint and setting to Identity using temporary table SGW_BPM_ACTIVITY_INST_USERS_TEMP 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_ACTIVITY_INST_USERS_TEMP') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_INST_USERS_TEMP IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ACTIVITY_INST_USERS_TEMP](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[ACTIVITY_INSTANCE_ID] [int] NOT NULL,
	[USER_SERIAL_ID] [int] NOT NULL,
	[USER_ID] [varchar](50) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTIVITY_INST_USERS_TEMP IS already EXISTS'
END       
GO

IF (NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME ='FK_SGW_BPM_ACTIVITY_INST_USERS_SGW_BPM_ACTIVITY_INSTANCE'))
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ACTIVITY_INST_USERS_TEMP]  WITH NOCHECK ADD  CONSTRAINT [FK_SGW_BPM_ACTIVITY_INST_USERS_SGW_BPM_ACTIVITY_INSTANCE] FOREIGN KEY([ACTIVITY_INSTANCE_ID])
REFERENCES [dbo].[SGW_BPM_ACTIVITY_INSTANCE] ([ACTIVITY_INSTANCE_ID])
END
ELSE
BEGIN
PRINT 'FK_SGW_BPM_ACTIVITY_INST_USERS_SGW_BPM_ACTIVITY_INSTANCE ALready exists'
END
GO

IF (NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS WHERE CONSTRAINT_NAME ='FK_ACTY_INST_CHECKLIST_ACTIVITY_INSTANCE_ID_SGW_BPM_ACTIVITY_INSTANCE_ACTIVITY_INSTANCE_ID'))
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ACTIVITY_INST_USERS_TEMP] CHECK CONSTRAINT [FK_SGW_BPM_ACTIVITY_INST_USERS_SGW_BPM_ACTIVITY_INSTANCE]
END
GO

SET IDENTITY_INSERT SGW_BPM_ACTIVITY_INST_USERS_TEMP ON

INSERT INTO [dbo].[SGW_BPM_ACTIVITY_INST_USERS_TEMP](ID,ACTIVITY_INSTANCE_ID,USER_SERIAL_ID,USER_ID)
SELECT ID,ACTIVITY_INSTANCE_ID,USER_SERIAL_ID,USER_ID FROM SGW_BPM_ACTIVITY_INST_USERS
GO

SET IDENTITY_INSERT SGW_BPM_ACTIVITY_INST_USERS_TEMP OFF

DROP TABLE [dbo].[SGW_BPM_ACTIVITY_INST_USERS]

EXEC sp_rename 'SGW_BPM_ACTIVITY_INST_USERS_TEMP', 'SGW_BPM_ACTIVITY_INST_USERS'


------------------------------------------------------------------------79_BPM_Enhancement(6.0.16.0)-------------------------------------

IF COL_LENGTH('dbo.SGW_BPM_PROCESS_INSTANCE', 'PROCESS_OWNER_ROLE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_PROCESS_INSTANCE]
ADD [PROCESS_OWNER_ROLE] [int] NULL;
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ESCALATION', 'NOTIFY_PROCESS_OWNER') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ESCALATION]
ADD [NOTIFY_PROCESS_OWNER] [varchar](1) NULL;
END
GO

IF COL_LENGTH('dbo.SGW_BPM_PROCESS_ESCALATION', 'NOTIFY_PROCESS_OWNER') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_PROCESS_ESCALATION]
ADD [NOTIFY_PROCESS_OWNER] [varchar](1) NULL;
END
GO

/****** Object:  Table [dbo].[SGW_BPM_EXCEPTION_DETAILS]    Script Date: 5/12/2021 6:14:21 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_EXCEPTION_DETAILS') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_EXCEPTION_DETAILS IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_EXCEPTION_DETAILS](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[ACTIVITY_INSTANCE_ID] [int] NOT NULL,
	[EXCEPTION_INSTANCE_ID] [uniqueidentifier] NOT NULL,
	[EXCEPTION_TYPE] [nvarchar](100) NOT NULL,
	[EXCEPTION_MESSAGE] [nvarchar](1000) NOT NULL,
	[ROLES] [nvarchar](max) NULL,
	[RETRY_COUNT] [int] NOT NULL,
	[RETRY_FREQUENCY] [int] NOT NULL,
	[NEXT_RETRY] [datetime] NULL,
	[STATUS_ID] [int] NOT NULL,
	[STATUS_VALUE] [varchar](4) NOT NULL,
	[CREATED_BY] [varchar](50) NOT NULL,
	[CREATED_DATE] [datetime] NOT NULL,
	[MODIFIED_BY] [varchar](50) NOT NULL,
	[MODIFIED_DATE] [datetime] NOT NULL,
	[UPDATE_SEQ] [int] NOT NULL,
	[MACHINE_NAME] [varchar](100) NULL,
 CONSTRAINT [PK_SGW_BPM_EXCEPTION_DETAILS] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_EXCEPTION_DETAILS IS already EXISTS'
END       
GO


IF (SELECT Column_Default FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SGW_BPM_EXCEPTION_DETAILS' AND COLUMN_NAME = 'CREATED_BY') is NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_EXCEPTION_DETAILS] ADD  DEFAULT ('BPM Service') FOR [CREATED_BY]
END
ELSE
BEGIN
PRINT 'CREATED_BY CONSTRAINT ALready exists'
END
GO

IF (SELECT Column_Default FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SGW_BPM_EXCEPTION_DETAILS' AND COLUMN_NAME = 'CREATED_DATE') is NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_EXCEPTION_DETAILS] ADD  DEFAULT (getdate()) FOR [CREATED_DATE]
END
ELSE
BEGIN
PRINT 'CREATED_DATE CONSTRAINT ALready exists'
END
GO

IF (SELECT Column_Default FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SGW_BPM_EXCEPTION_DETAILS' AND COLUMN_NAME = 'MODIFIED_BY') is NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_EXCEPTION_DETAILS] ADD  DEFAULT ('BPM Service') FOR [MODIFIED_BY]
END
ELSE
BEGIN
PRINT 'MODIFIED_BY CONSTRAINT ALready exists'
END
GO

IF (SELECT Column_Default FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SGW_BPM_EXCEPTION_DETAILS' AND COLUMN_NAME = 'MODIFIED_DATE') is NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_EXCEPTION_DETAILS] ADD  DEFAULT (getdate()) FOR [MODIFIED_DATE]
END
ELSE
BEGIN
PRINT 'MODIFIED_DATE CONSTRAINT ALready exists'
END
GO

IF (SELECT Column_Default FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SGW_BPM_EXCEPTION_DETAILS' AND COLUMN_NAME = 'UPDATE_SEQ') is NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_EXCEPTION_DETAILS] ADD  DEFAULT ((0)) FOR [UPDATE_SEQ]
END
ELSE
BEGIN
PRINT 'UPDATE_SEQ ALready exists'
END
GO

------------------------------------------------------------------------80_SGS_ACT_LOG_APP_BLOCK_IP_COLUMN(6.0.16.0)-------------------------------------

IF NOT EXISTS (
  SELECT
    *
  FROM
    INFORMATION_SCHEMA.COLUMNS
  WHERE
    TABLE_NAME = 'SGS_ACT_LOG_APP' AND COLUMN_NAME = 'BLOCK_IP')
BEGIN
  ALTER TABLE [dbo].[SGS_ACT_LOG_APP]
    ADD BLOCK_IP varchar(2000) NULL
END;

------------------------------------------------------------------------81_CREATE_SGS_SERVER_CONFIGURATION-------------------------------------


IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGS_SERVER_CONFIGURATION') 
BEGIN
PRINT 'TABLE Name : SGS_SERVER_CONFIGURATION IS CREATED'
CREATE TABLE [dbo].[SGS_SERVER_CONFIGURATION]
(
	[SERVER_CONFIGURATION_ID]	int					  IDENTITY(1,1) NOT NULL,
	[SERVER_ID]					int					  NOT NULL,	
	[ENGINE_ID]					int					  NOT NULL,
	[ENGINE_VALUE]				varchar(4)			  NOT NULL,
	[CREATED_BY]				varchar(50)			  NOT NULL,
	[CREATED_DATE]				datetime			  NOT NULL,
	[MODIFIED_BY]				varchar(50)			  NOT NULL,
	[MODIFIED_DATE]				datetime			  NOT NULL,
	[UPDATE_SEQ]				int					  NOT NULL,
	CONSTRAINT [PK_SGS_SERVER_CONFIGURATION] PRIMARY KEY CLUSTERED ([SERVER_CONFIGURATION_ID] ASC)
	WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
)
END
ELSE
BEGIN
PRINT 'TABLE Name : SGS_SERVER_CONFIGURATION IS already EXISTS'
END       
GO


------------------------------------------------------------------------82_INSERT_SGS_USER-------------------------------------

IF COL_LENGTH('dbo.SGS_USER', 'SUPERVISOR_ID') IS NULL
BEGIN
ALTER TABLE [dbo].[SGS_USER]
ADD SUPERVISOR_ID int NULL DEFAULT 0
END
GO
------------------------------------------------------------------------83_CREATE_SGS_TIME_TRAVEL-------------------------------------



IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGS_TIME_TRAVEL') 
BEGIN
PRINT 'TABLE Name : SGS_TIME_TRAVEL IS CREATED'
CREATE TABLE [dbo].[SGS_TIME_TRAVEL] (
    [TIME_TRAVEL_ID]         [dbo].[UDT_IDENTITY]   IDENTITY (1, 1) NOT NULL,
    [MACHINE_NAME]			 [dbo].[UDT_NAME]		NOT NULL UNIQUE,
    [APPLICATION_DATE]       [dbo].[UDT_DATETIME]   NOT NULL,   
	[CREATED_BY]             [dbo].[UDT_CREATEDBY]  NOT NULL,
    [CREATED_DATE]           [dbo].[UDT_DATETIME]   NOT NULL,
    [MODIFIED_BY]            [dbo].[UDT_MODIFIEDBY] NOT NULL,
    [MODIFIED_DATE]          [dbo].[UDT_DATETIME]   NOT NULL,
    [UPDATE_SEQ]             [dbo].[UDT_UPDSEQ]     NOT NULL, 
    CONSTRAINT [PK_SGS_TIME_TRAVEL_ID] PRIMARY KEY CLUSTERED ([TIME_TRAVEL_ID] ASC) WITH (FILLFACTOR = 80, STATISTICS_NORECOMPUTE = ON)
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGS_TIME_TRAVEL IS already EXISTS'
END       
GO


------------------------------------------------------------------------85_ALTER_SGS_COR_TRACKING-------------------------------------
IF COL_LENGTH('SGS_COR_TRACKING', 'activity_instance_id') IS NULL
BEGIN
ALTER TABLE [dbo].[SGS_COR_TRACKING]
ADD activity_instance_id int NULL
END
GO
------------------------------------------------------------------------86_CREATE_SGW_BPM_ACTV_CHKL_GROUP-------------------------------------
IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_ACTV_CHKL_GROUP') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTV_CHKL_GROUP IS CREATED'
CREATE TABLE [dbo].[SGW_BPM_ACTV_CHKL_GROUP](
	[GROUP_ID] [int] IDENTITY(1,1) NOT NULL,
	[ACTIVITY_ID] [int] NOT NULL,
	[GROUP_NAME] [varchar](max) NOT NULL,
	[MIN_REQ_FIELDS] [int] NULL,
	[CREATED_BY] [varchar](50) NOT NULL,
	[CREATED_DATE] [datetime] NOT NULL,
	[MODIFIED_BY] [varchar](50) NOT NULL,
	[MODIFIED_DATE] [datetime] NOT NULL,
	[UPDATE_SEQ] [int] NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[GROUP_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 90) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]


END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_ACTV_CHKL_GROUP IS already EXISTS'
END       
GO

------------------------------------------------------------------------87_INSERT_SGS_SYSTEM_PATHS-------------------------------------
IF(NOT EXISTS(SELECT 1 FROM SGS_SYSTEM_PATHS WHERE PATH_CODE = 'BPM_UPLD'))
BEGIN
INSERT INTO [dbo].[SGS_SYSTEM_PATHS] (PATH_CODE ,PATH_VALUE ,PATH_DESCRIPTION ,CREATED_BY ,CREATED_DATE ,MODIFIED_BY ,MODIFIED_DATE ,UPDATE_SEQ )
VALUES ( 'BPM_UPLD' ,'BPMDocumentUpload\' ,'Upload BPM Related Document.','Conversion' ,GETDATE() ,'Conversion' ,GETDATE() , 0)
END 
Go


------------------------------------------------------------------------88_SGW_BPM_PROCESS_ID_DESC-------------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGW_BPM_PROCESS_ID_DESC') 
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESS_ID_DESC IS CREATED'
SELECT PROCESS_ID,DESCRIPTION
INTO SGW_BPM_PROCESS_ID_DESC
FROM [dbo].[SGW_PROCESS]
END
ELSE
BEGIN
PRINT 'TABLE Name : SGW_BPM_PROCESS_ID_DESC IS already EXISTS'
END       
GO


IF COL_LENGTH('dbo.SGW_BPM_PRCS_INST_ATTACHMENTS', 'ADDITIONAL_INFO') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_PRCS_INST_ATTACHMENTS]
ADD ADDITIONAL_INFO VARCHAR(8000) NULL
END
GO



IF COL_LENGTH('dbo.SGW_BPM_REQUEST', 'ADDITIONAL_INFO') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_REQUEST]
ADD ADDITIONAL_INFO VARCHAR(8000) NULL
END
GO



IF COL_LENGTH('dbo.SGW_BPM_ACTY_INST_CHECKLIST', 'RECEIVED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ACTY_INST_CHECKLIST]
ADD RECEIVED_DATE DATETIME NULL
END
GO


-------------------------------------------------------------------------------78_PIR 30373_ALTER SCRIPT GetActivityRuleFromSessionStore(6.0.15.1)--------------------------------------------------
/****** Object:  StoredProcedure [dbo].[GetActivityRuleFromSessionStore]    Script Date: 3/17/2021 5:25:08 PM ******/


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



ALTER PROCEDURE [dbo].[GetActivityRuleFromSessionStore]
	@SESSION_STORE_SERIAL_ID INT
AS
BEGIN
 SELECT ACTIVITY_INSTANCE_ID, RULE_RESULT, 
     CASE WHEN BUS_OBJECT IS NULL THEN 'FALSE' ELSE 'TRUE' END as BUS_OBJECT,
	 UPDATE_SEQ FROM dbo.SGS_SESSION_STORE  WHERE SESSION_STORE_SERIAL_ID = @SESSION_STORE_SERIAL_ID 
END
GO



IF EXISTS (SELECT 1 FROM sys.objects
WHERE Name = 'UDF_GETAPPLICATIONDATE'
AND Type IN ( N'FN', N'IF', N'TF', N'FS', N'FT' ))



BEGIN
PRINT 'User defined function UDF_GETAPPLICATIONDATE already Exist'
END
GO
print 'User defined function UDF_GETAPPLICATIONDATE Is Created or Altered Successfully ';

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE OR ALTER FUNCTION [dbo].[UDF_GETAPPLICATIONDATE]()
RETURNS DateTime
AS
BEGIN
	
	-- Return the result of the function
	Declare @Region varchar(4);
	Declare @UseApplicationDate varchar(1);
	Declare @ApplicationDate DateTime;
	DECLARE @LocalApplicationDate DateTime;	
	Select @Region = REGION_VALUE,@UseApplicationDate=USE_APPLICATION_DATE,@ApplicationDate=APPLICATION_DATE from SGS_SYSTEM_MANAGEMENT;

	IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE' AND TABLE_NAME='SGS_TIME_TRAVEL') 
		SELECT @LocalApplicationDate = APPLICATION_DATE FROM SGS_TIME_TRAVEL WHERE MACHINE_NAME = (SELECT HOST_NAME())


	IF(@LocalApplicationDate IS NOT NULL and @Region = 'DEVL' AND @UseApplicationDate IS NOT NULL AND @UseApplicationDate = 'Y')
		RETURN CONVERT(DATETIME, CONVERT(CHAR(8), @LocalApplicationDate, 112) + ' ' + FORMAT(GETDATE(), 'HH:mm:ss.fff'));	
	
	ELSE IF(@Region <> 'PROD' AND @UseApplicationDate IS NOT NULL AND @UseApplicationDate = 'Y' AND @ApplicationDate IS NOT NULL)
		RETURN CONVERT(DATETIME, CONVERT(CHAR(8), @ApplicationDate, 112) + ' ' + FORMAT(GETDATE(), 'HH:mm:ss.fff'));
				
	RETURN GETDATE();
END
GO
-------------------------------------------------------------------------------89_CREATE_UDF_SPLIT--------------------------------------------------

IF EXISTS (SELECT 1 FROM sys.objects
WHERE Name = 'UDF_SPLIT'
AND Type IN ( N'FN', N'IF', N'TF', N'FS', N'FT' ))



BEGIN
PRINT 'User defined function UDF_SPLIT already Exist'
END
GO
print 'User defined function UDF_SPLIT Is Created or Altered Successfully ';
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE OR ALTER FUNCTION [dbo].[UDF_SPLIT] (@String varchar(MAX), @Delimiter char(1))       
returns @temptable TABLE (Items varchar(MAX))       
as       
begin      
    declare @idx int       
    declare @slice varchar(8000)       

    select @idx = 1       
        if len(@String)<1 or @String is null  return       

    while @idx!= 0       
    begin       
        set @idx = charindex(@Delimiter,@String)       
        if @idx!=0       
            set @slice = left(@String,@idx - 1)       
        else       
            set @slice = @String       

        if(len(@slice)>0)  
            insert into @temptable(Items) values(@slice)       

        set @String = right(@String,len(@String) - @idx)       
        if len(@String) = 0 break       
    end   
return 
end;
Go
------------------------------------------------------------3/16/2022-----------
IF COL_LENGTH('dbo.SGW_BPM_PRCS_INST_ATTACHMENTS', 'ADDITIONAL_INFO') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_PRCS_INST_ATTACHMENTS]
ADD ADDITIONAL_INFO VARCHAR(8000) NULL
END
GO

IF COL_LENGTH('dbo.SGW_BPM_REQUEST', 'ADDITIONAL_INFO') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_REQUEST]
ADD ADDITIONAL_INFO VARCHAR(8000) NULL
END
GO

IF COL_LENGTH('dbo.SGW_BPM_ACTY_INST_CHECKLIST', 'RECEIVED_DATE') IS NULL
BEGIN
ALTER TABLE [dbo].[SGW_BPM_ACTY_INST_CHECKLIST]
ADD RECEIVED_DATE DATETIME NULL
END
Go 

IF NOT EXISTS(SELECT * FROM SGS_MESSAGES WHERE MESSAGE_ID = 1565) 
BEGIN
 INSERT INTO dbo.SGS_MESSAGES (MESSAGE_ID, DISPLAY_MESSAGE, SEVERITY_ID, SEVERITY_VALUE, INTERNAL_INSTRUCTIONS, EMPLOYER_INSTRUCTIONS,  CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
 VALUES (1565, 'Please complete all required checklist items before completing the task.',20002001, 'E', NULL, NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

----------------------------------------------3/17/2022--------------------------------------------------------------------

IF NOT EXISTS(select * from SGW_BPM_SERVICE_TIMER where ACTION_METHOD='ProcessUploadedDocsToFileNetWSS') 
BEGIN
INSERT INTO [dbo].[SGW_BPM_SERVICE_TIMER] ([ACTION_METHOD], [INTERVAL], [ENABLED], [BPM_TRACING_FLAG], [BPM_QUERY_TRACING_FLAG], [BPM_QUERY_LIMIT], [BPM_QUERY_LIMIT_ALERT], [BPM_QUERY_HIGH_LIMIT], [BPM_QUERY_HIGH_LIMIT_ALERT], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ]) VALUES (N'ProcessUploadedDocsToFileNetWSS', 15000, N'Y', N'Y', N'Y', 1000, NULL, 3000, NULL, N'BPM Service', CAST(N'2020-09-29T21:51:00.000' AS DateTime), N'!perslinkdev2', CAST(N'2022-02-01T12:08:27.487' AS DateTime), 0)
PRINT 'RECORD INSERTED SUCCESSFULLY.' 
END
ELSE
BEGIN
PRINT 'ProcessUploadedDocsToFileNetWSS IS already EXISTS'
END  
Go

IF NOT EXISTS(select * from SGW_BPM_SERVICE_TIMER where ACTION_METHOD='NeoSpinServicePollingTick') 
BEGIN
INSERT [dbo].[SGW_BPM_SERVICE_TIMER] ([ACTION_METHOD], [INTERVAL], [ENABLED], [BPM_TRACING_FLAG], [BPM_QUERY_TRACING_FLAG], [BPM_QUERY_LIMIT], [BPM_QUERY_LIMIT_ALERT], [BPM_QUERY_HIGH_LIMIT], [BPM_QUERY_HIGH_LIMIT_ALERT], [CREATED_BY], [CREATED_DATE], [MODIFIED_BY], [MODIFIED_DATE], [UPDATE_SEQ]) VALUES (N'NeoSpinServicePollingTick', 60000, N'Y', N'Y', N'Y', 1000, NULL, 3000, NULL, N'BPM Service', CAST(N'2020-09-29T21:51:00.000' AS DateTime), N'!perslinkdev2', CAST(N'2022-02-01T12:08:27.487' AS DateTime), 0)
PRINT 'RECORD INSERTED SUCCESSFULLY.' 
END
ELSE
BEGIN
PRINT 'NeoSpinServicePollingTick IS already EXISTS'
END
GO
-------------------------------------------------------------------------------------3/17/2022----------------------------------------------------------------------
IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE   WHERE CODE_ID = 2005 AND CODE_VALUE = 'ALIN') 
 BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2005,'ALIN','Initiate New',NULL,NULL, NULL,NULL,NULL, NULL,1,NULL, 'Conversion',getdate(),'Conversion',getdate(),0);
PRINT 'Initiate New INSERTED SUCCESSFULLY.'
END
ELSE
BEGIN
PRINT 'Initiate New already EXISTS'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE   WHERE CODE_ID = 2005 AND CODE_VALUE = 'INRE') 
 BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2005,'INRE','Initiate Or Resume',NULL,NULL, NULL,NULL,NULL, NULL,2,NULL, 'Conversion',getdate(),'Conversion',getdate(),0);
PRINT 'Initiate Or Resume INSERTED SUCCESSFULLY.'
END
ELSE
BEGIN
PRINT 'Initiate Or Resume already EXISTS'
END
GO

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE   WHERE CODE_ID = 2005 AND CODE_VALUE = 'REEX') 
 BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2005,'REEX','Resume or Exception',NULL,NULL, NULL,NULL,NULL, NULL,4,NULL, 'Conversion',getdate(),'Conversion',getdate(),0);
PRINT 'Resume or Exception INSERTED SUCCESSFULLY.'
END
ELSE
BEGIN
PRINT 'Resume or Exception already EXISTS'
END
GO
 

IF NOT EXISTS(SELECT 1 FROM SGS_CODE_VALUE   WHERE CODE_ID = 2005 AND CODE_VALUE = 'RENE') 
 BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2005,'RENE','Never Initiate only Resume',NULL,NULL, NULL,NULL,NULL, NULL,3,NULL, 'Conversion',getdate(),'Conversion',getdate(),0);
PRINT 'Never Initiate only Resume INSERTED SUCCESSFULLY.'
END
ELSE
BEGIN
PRINT 'Never Initiate only Resume already EXISTS'
END
GO
----------------------------------------Changes to add new status column to SGW_PROCESS_INSTANCE  (23/03/2022)-------------------------------
IF NOT EXISTS(SELECT 1 FROM SYS.COLUMNS WHERE NAME =N'MIGRATION_STATUS_VALUE'  AND OBJECT_ID = OBJECT_ID(N'SGW_PROCESS_INSTANCE'))
BEGIN
ALTER TABLE [dbo].[SGW_PROCESS_INSTANCE]
ADD MIGRATION_STATUS_VALUE VARCHAR(4);
PRINT 'COLUMN NAME: MIGRATION_STATUS_VALUE ALTERED SUCCESSFULLY'
END
ELSE
BEGIN
  PRINT 'COLUMN NAME: MIGRATION_STATUS_VALUE ALREADY EXISTS IN THE TABLE SGW_PROCESS_INSTANCE'
END
GO


IF NOT EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_SGW_PROCESS_INSTANCE_MIGRATION_STATUS_VALUE' AND object_id = OBJECT_ID('SGW_PROCESS_INSTANCE'))
BEGIN
CREATE NONCLUSTERED INDEX IX_SGW_PROCESS_INSTANCE_MIGRATION_STATUS_VALUE
ON [dbo].[SGW_PROCESS_INSTANCE] (MIGRATION_STATUS_VALUE);
Print('Non Clustred index IX_SGW_PROCESS_INSTANCE_MIGRATION_STATUS_VALUE added sucessfully on SGW_PROCESS_INSTANCE')
END
ELSE
BEGIN
Print('IX_SGW_PROCESS_INSTANCE_MIGRATION_STATUS_VALUE Already Exists')
END
Go
--------------------------SGW_PROCESS_INSTANCE (2/4/2022)-------------
IF NOT EXISTS(SELECT 1 FROM SYS.COLUMNS WHERE NAME =N'MIGRATION_ERROR'  AND OBJECT_ID = OBJECT_ID(N'SGW_PROCESS_INSTANCE'))
BEGIN
ALTER TABLE [dbo].[SGW_PROCESS_INSTANCE]
ADD MIGRATION_ERROR VARCHAR(50);
PRINT 'COLUMN NAME: MIGRATION_ERROR ALTERED SUCCESSFULLY'
END
ELSE
BEGIN
  PRINT 'COLUMN NAME: MIGRATION_ERROR ALREADY EXISTS IN THE TABLE SGW_PROCESS_INSTANCE'
END
GO
--------------------------------------------------------------------------------------------------------------------
IF EXISTS (SELECT 1 FROM SGW_BPM_CASE WHERE CASE_ID=0)
BEGIN
	DELETE FROM [dbo].[SGW_BPM_CASE] WHERE CASE_ID=0
END
GO
IF EXISTS (SELECT 1 FROM SGW_BPM_ACTIVITY WHERE ACTIVITY_ID=0)
BEGIN
	DELETE FROM [dbo].[SGW_BPM_ACTIVITY] WHERE ACTIVITY_ID=0
END
GO
IF EXISTS (SELECT 1 FROM SGW_BPM_PROCESS WHERE PROCESS_ID=0)
BEGIN
	DELETE FROM [dbo].[SGW_BPM_PROCESS] WHERE PROCESS_ID=0
END
GO


--------------------------------------------------------------------------------------------------------------------------

IF NOT EXISTS ( SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME=N'SGT_BPM_ACTIVITY_ROLE_XR') 
BEGIN
PRINT 'TABLE Name : SGT_BPM_ACTIVITY_ROLE_XR IS CREATED'
CREATE TABLE [dbo].[SGT_BPM_ACTIVITY_ROLE_XR]
(
ACTIVITY_ROLE_XR_ID INT IDENTITY(1,1) PRIMARY KEY,
ACTIVITY_ID INT NOT NULL,
ROLE_ID INT NOT NULL
);
END
ELSE
BEGIN
PRINT 'TABLE Name : SGT_BPM_ACTIVITY_ROLE_XR IS already EXISTS'
END       
GO

-------------------------------------------------------------------------------------------------------------------------------
IF NOT EXISTS(select * from SGW_BPM_SERVICE_TIMER where ACTION_METHOD='UpdateActivityInstanceElegibleUsers') 
BEGIN
INSERT INTO [dbo].[SGW_BPM_SERVICE_TIMER]([ACTION_METHOD],[INTERVAL],[ENABLED],[BPM_TRACING_FLAG],[BPM_QUERY_TRACING_FLAG],[BPM_QUERY_LIMIT],[BPM_QUERY_LIMIT_ALERT],[BPM_QUERY_HIGH_LIMIT],[BPM_QUERY_HIGH_LIMIT_ALERT],[CREATED_BY],[CREATED_DATE],[MODIFIED_BY],[MODIFIED_DATE],[UPDATE_SEQ])
VALUES('UpdateActivityInstanceElegibleUsers','6000','Y','Y','Y','1000',NULL,'3000',NULL,'BPM Service',GETDATE(),'BPM Service',GETDATE(),'0')
END
GO

----------------------------------------------------------------------------------------------------------------------------------

IF NOT EXISTS(SELECT * FROM SGS_CODE_VALUE WITH(NOLOCK) WHERE CODE_ID = 2007 AND CODE_VALUE = 'REJT') 
BEGIN
	 INSERT INTO DBO.SGS_CODE_VALUE (CODE_ID, CODE_VALUE, DESCRIPTION, DATA1, DATA2, DATA3, COMMENTS, START_DATE, END_DATE, CODE_VALUE_ORDER, LEGACY_CODE_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)
	 VALUES (2007,'REJT','Rejected',NULL,NULL, NULL,NULL,NULL, NULL,0,NULL, 'system',GETDATE(),'system',GETDATE(),0)
END
GO

----------------------------------------------------------------------------------------------------------------------------------

IF NOT EXISTS (SELECT 1 FROM SGS_SYSTEM_SETTINGS WHERE SETTING_NAME = 'AllowDeployIfConfigurationChange')
 BEGIN
 INSERT INTO SGS_SYSTEM_SETTINGS VALUES ('AllowDeployIfConfigurationChange', 'bool', 'true', null, null)
 END
 GO
 ----------------------------------------------------------------------------------------------------------------------------------

 CREATE NONCLUSTERED INDEX [IX_SGW_BPM_ACTY_INST_CHECKLIST_CHECKLIST_INSTANCE] ON 
[dbo].[SGW_BPM_ACTY_INST_CHECKLIST] ([ACTIVITY_INSTANCE_ID],[ACTIVITY_CHECKLIST_ID]) 
INCLUDE ([REQUIRED_FLAG],[COMPLETED_IND],[COMPLETED_DATE])

CREATE NONCLUSTERED INDEX [IX_SGW_BPM_ACTY_INST_CHECKLIST_CHECKLIST_ID] 
ON [dbo].[SGW_BPM_ACTY_INST_CHECKLIST] ([ACTIVITY_CHECKLIST_ID]) 
INCLUDE ([ACTIVITY_INSTANCE_ID],[REQUIRED_FLAG],[COMPLETED_IND],[COMPLETED_DATE])