<?xml version="1.0" encoding="utf-8"?>
<entity ID="entPaymentHistoryDistribution" sfwActive="True" sfwStatus="Valid" sfwType="BusinessRule" sfwMainCDO="icdoPaymentHistoryDistribution" sfwObjectID="busPaymentHistoryDistribution" sfwTableName="sgt_payment_history_distribution" sfwView="False" sfwParentEntity="entExtendBase">
  <rules>
    <rule ID="Is1099rExistForRefund" sfwMessageId="6465" sfwExpression="(this.Is1099rExistForRefund() == True)" sfwObjectBased="True" />
    <rule ID="VisbleRuleIsBtnReissuedVisible" sfwExpression="(this.icdoPaymentHistoryDistribution.status_value == &quot;RSAP&quot;)" sfwObjectBased="True" />
    <rule ID="VisibleRuleIsBtnCancelledVisible" sfwExpression="(this.icdoPaymentHistoryDistribution.status_value == &quot;SPP&quot;) || &#xA;(this.icdoPaymentHistoryDistribution.status_value == &quot;VPND&quot;)" sfwObjectBased="True" />
    <rule ID="VisibleRuleIsBtnEscheatReissueApproved" sfwExpression="((this.icdoPaymentHistoryDistribution.payment_method_value == &quot;CHK&quot;) || &#xA;(this.icdoPaymentHistoryDistribution.payment_method_value == &quot;RCHK&quot;)) &amp;&amp; &#xA;!(RFunc.GetValue&lt;String&gt;(this, &quot;ibusDistributionHistory.icdoPaymentHistoryDistributionStatusHistory.status_changed_by&quot;) == RFunc.GetValue&lt;String&gt;(this, &quot;iobjPassInfo.istrUserID&quot;)) &amp;&amp; &#xA;(this.icdoPaymentHistoryDistribution.status_value == &quot;ERP&quot;)" sfwObjectBased="True" />
    <rule ID="VisibleRuleIsBtnEscheatReissued" sfwExpression="((this.icdoPaymentHistoryDistribution.payment_method_value == &quot;CHK&quot;) || &#xA;(this.icdoPaymentHistoryDistribution.payment_method_value == &quot;RCHK&quot;)) &amp;&amp; &#xA;(this.icdoPaymentHistoryDistribution.status_value == &quot;ERAP&quot;)" sfwObjectBased="True" />
    <rule ID="VisibleRuleIsBtnEscheatReissuePending" sfwExpression="((this.icdoPaymentHistoryDistribution.payment_method_value == &quot;CHK&quot;) || &#xA;(this.icdoPaymentHistoryDistribution.payment_method_value == &quot;RCHK&quot;)) &amp;&amp; &#xA;(this.icdoPaymentHistoryDistribution.status_value == &quot;ESND&quot;)" sfwObjectBased="True" />
    <rule ID="VisibleRuleIsBtnReceivableCreatedVisible" sfwExpression="(this.icdoPaymentHistoryDistribution.status_value == &quot;RPND&quot;)" sfwObjectBased="True" />
    <rule ID="VisibleRuleIsBtnReceivablePending" sfwExpression="(this.icdoPaymentHistoryDistribution.status_value == &quot;CLRD&quot;)" sfwObjectBased="True" />
    <rule ID="VisibleRuleIsBtnStopPayPendingVisible" sfwExpression="((this.icdoPaymentHistoryDistribution.payment_method_value == &quot;CHK&quot;) || &#xA;(this.icdoPaymentHistoryDistribution.payment_method_value == &quot;RCHK&quot;)) &amp;&amp; &#xA;(this.icdoPaymentHistoryDistribution.status_value == &quot;OUTS&quot;)" sfwObjectBased="True" />
    <rule ID="VisibleRuleIsBtnVoidPendingVisible" sfwExpression="(this.icdoPaymentHistoryDistribution.status_value == &quot;OUTS&quot;) &amp;&amp; &#xA;!(RFunc.GetValue&lt;Int32&gt;(this, &quot;ibusPaymentHistoryHeader.icdoPaymentHistoryHeader.payment_schedule_id&quot;) == 0)" sfwObjectBased="True" />
    <rule ID="VisibleRuleIsClearedBtnVisible" sfwExpression="!(this.icdoPaymentHistoryDistribution.status_value == &quot;CLRD&quot;)" sfwObjectBased="True" />
    <rule ID="VisibleRuleIsEscheattoNDPERSAndStateAndReissueApprovedAndCancelBtnVisible" sfwExpression="(this.IsEscheattoNDPERSAndStateBtnVisible() == True)" sfwObjectBased="True" />
    <rule ID="VisibleRuleIsOutstandingBtnVisible" sfwExpression="!(this.icdoPaymentHistoryDistribution.status_value == &quot;OUTS&quot;)" sfwObjectBased="True" />
    <rule ID="VisibleRuleIsReissueApproveAndCancelbtnVisible" sfwExpression="(this.IsReissueApprovedBtnVisible() == True)" sfwObjectBased="True" />
    <rule ID="VisibleRuleIsReissueToRolloverOrgVisible" sfwExpression="(this.IsReissueToRolloverOrgAllowed() == True)" sfwObjectBased="True" />
    <rule ID="VisibleRuleReIssueToSameRolloverOrgAllowed" sfwExpression="(this.IsReissueToSameRolloverOrgAllowed() == True) &amp;&amp; &#xA;(this.IsReissueApprovedBtnVisible() == True)" sfwObjectBased="True" />
  </rules>
  <delete />
  <checklist />
  <initialload>
    <item ID="VisibleRuleIsBtnStopPayPendingVisible" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRuleIsEscheattoNDPERSAndStateAndReissueApprovedAndCancelBtnVisible" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRuleIsBtnCancelledVisible" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRuleIsBtnEscheatReissuePending" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRuleIsBtnEscheatReissueApproved" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRuleIsBtnEscheatReissued" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRuleIsBtnReceivablePending" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRuleIsBtnVoidPendingVisible" sfwMode="All" sfwStatus="Active" />
    <item ID="VisbleRuleIsBtnReissuedVisible" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRuleIsBtnReceivableCreatedVisible" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRuleIsReissueToRolloverOrgVisible" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRuleIsReissueApproveAndCancelbtnVisible" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRuleIsOutstandingBtnVisible" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRuleIsClearedBtnVisible" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleRuleReIssueToSameRolloverOrgAllowed" sfwStatus="Active" sfwMode="All" />
  </initialload>
  <softerror />
  <harderror>
    <item ID="Is1099rExistForRefund" sfwMode="All" sfwStatus="Active" />
  </harderror>
  <validatedelete />
  <groupslist />
  <updateablecdo />
  <commonproperties />
  <queries>
    <query ID="LoadACHPaymentDistribution" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT   SPE.PAYEE_ACCOUNT_ID,PHD.NET_AMOUNT,PHD.ROUTING_NUMBER,PHD.ACCOUNT_NUMBER,     &#xD;&#xA;     PHD.ACCOUNT_TYPE_VALUE AS TRANSACTION_CODE,    &#xD;&#xA;     PHD.ACCOUNT_NUMBER AS ACCOUNT_NO,&#xD;&#xA;     CASE WHEN PHH.PERSON_ID IS NULL THEN ORG.ORG_ID ELSE PER1.PERSON_ID END AS PERSON_ID,&#xD;&#xA;     CASE WHEN PHH.PERSON_ID IS NULL THEN ORG.ORG_NAME ELSE PER1.LAST_NAME + ', ' + PER1.FIRST_NAME END&#xD;&#xA;     AS PERSON_NAME       &#xD;&#xA;FROM    SGT_PAYMENT_HISTORY_DISTRIBUTION PHD WITH(NOLOCK)&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xD;&#xA;     ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN SGT_PAYEE_ACCOUNT SPE WITH(NOLOCK) &#xD;&#xA;     ON SPE.PAYEE_ACCOUNT_ID=PHH.PAYEE_ACCOUNT_ID &#xD;&#xA;  LEFT JOIN SGT_PAYEE_ACCOUNT_ACH_DETAIL PE WITH(NOLOCK) &#xD;&#xA;     ON SPE.PAYEE_ACCOUNT_ID=PE.PAYEE_ACCOUNT_ID  AND PE.BANK_ORG_ID = PHD.ORG_ID&#xD;&#xA;  LEFT JOIN SGT_PERSON PER1 WITH(NOLOCK) &#xD;&#xA;     ON PER1.PERSON_ID=SPE.PAYEE_PERSLINK_ID&#xD;&#xA;  LEFT JOIN  SGT_ORGANIZATION ORG&#xD;&#xA;    ON PHD.ORG_ID = ORG.ORG_ID&#xD;&#xA;WHERE    PHD.PAYMENT_METHOD_VALUE = 'ACH'&#xD;&#xA;    AND PHH.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID&#xD;&#xA;UNION ALL&#xD;&#xA;SELECT   SPE.PAYEE_ACCOUNT_ID,PHD.NET_AMOUNT,PHD.ROUTING_NUMBER,PHD.ACCOUNT_NUMBER,     &#xD;&#xA;     PHD.ACCOUNT_TYPE_VALUE AS TRANSACTION_CODE,    &#xD;&#xA;     PHD.ACCOUNT_NUMBER AS ACCOUNT_NO,&#xD;&#xA;     ORG.ORG_ID  AS PERSON_ID,&#xD;&#xA;     ORG.ORG_NAME AS PERSON_NAME       &#xD;&#xA;FROM    SGT_PAYMENT_HISTORY_DISTRIBUTION PHD WITH(NOLOCK)&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xD;&#xA;     ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN SGT_PAYEE_ACCOUNT SPE WITH(NOLOCK) &#xD;&#xA;     ON SPE.PAYEE_ACCOUNT_ID=PHH.PAYEE_ACCOUNT_ID &#xD;&#xA;  LEFT JOIN SGT_PAYEE_ACCOUNT_ACH_DETAIL PE WITH(NOLOCK) &#xD;&#xA;     ON SPE.PAYEE_ACCOUNT_ID=PE.PAYEE_ACCOUNT_ID  AND PE.BANK_ORG_ID = PHD.ORG_ID&#xD;&#xA;  LEFT JOIN SGT_ORGANIZATION ORG WITH(NOLOCK) &#xD;&#xA;     ON PHD.ORG_ID=ORG.ORG_ID&#xD;&#xA;WHERE    PHD.PAYMENT_METHOD_VALUE = 'RACH'&#xD;&#xA;    AND PHH.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID">
      <parameters>
        <parameter ID="@PAYMENTSCHEDULEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadCheckPaymentDistribution" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="--------------------------------------------------------------------&#xD;&#xA;-- entPaymentHistoryDistribution.LoadCheckPaymentDistribution&#xD;&#xA;--------------------------------------------------------------------&#xD;&#xA;&#xD;&#xA;SELECT * FROM &#xD;&#xA;(&#xD;&#xA;SELECT   CASE WHEN PHH.PERSON_ID IS NULL THEN CAST(ORG.ORG_CODE AS INT) ELSE PER.PERSON_ID END AS PERSON_ID,&#xD;&#xA;    CASE WHEN PHH.PERSON_ID IS NULL THEN ORG.ORG_CODE ELSE CAST(PER.PERSON_ID AS CHAR(6)) END AS istrPersonIdOrOrgCode,&#xD;&#xA;     DIST.RECIPIENT_NAME AS PERSONNAME, ORG.ORG_ID,&#xD;&#xA;     UPPER(DIST.ADDR_LINE_1) AS ADDR_LINE_1, &#xD;&#xA;     UPPER(DIST.ADDR_LINE_2)as ADDR_LINE_2,&#xD;&#xA;     UPPER(DIST.ADDR_CITY) AS ADDR_CITY, &#xD;&#xA;     DIST.ADDR_STATE_VALUE, &#xD;&#xA;     DIST.ADDR_COUNTRY_VALUE,&#xD;&#xA;     ISNULL(DIST.ADDR_ZIP_CODE,'')+CASE WHEN ADDR_ZIP_4_CODE IS NOT NULL THEN '-' ELSE '' END+ISNULL(ADDR_ZIP_4_CODE,'') AS ADDR_ZIP_CODE,&#xD;&#xA;     UPPER(DIST.FOREIGN_POSTAL_CODE) AS FOREIGN_POSTAL_CODE, &#xD;&#xA;     UPPER(DIST.FOREIGN_PROVINCE) AS FOREIGN_PROVINCE,&#xD;&#xA;     DIST.CHECK_NUMBER, DIST.CHECK_MESSAGE,DIST.PAYMENT_HISTORY_DISTRIBUTION_ID,&#xD;&#xA;     DIST.NET_AMOUNT,DIST.FBO_CO,&#xD;&#xA;     PLN.PLAN_NAME,PLN.PLAN_CODE, PHH.PAYEE_ACCOUNT_ID, PHH.PAYMENT_HISTORY_HEADER_ID,&#xD;&#xA;     PHH.PLAN_ID, PHH.PAYMENT_DATE,PHH.FED_TAX_OPTION_VALUE, PHH.FED_TAX_ALLOWANCE,&#xD;&#xA;     PHH.FED_MARITAL_STATUS_VALUE, PHH.FED_ADDITIONAL_TAX_AMOUNT,&#xD;&#xA;     PHH.STATE_TAX_OPTION_VALUE, PHH.STATE_TAX_ALLOWANCE, &#xD;&#xA;     PHH.STATE_MARITAL_STATUS_VALUE, (SELECT SUM(ISNULL(HISDET.AMOUNT,0)) FROM SGT_PAYMENT_HISTORY_DETAIL HISDET WITH(NOLOCK) JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON HISDET.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID AND PIT.PAYMENT_ITEM_TYPE_ID = HISDET.PAYMENT_ITEM_TYPE_ID AND PIT.ITEM_TYPE_DIRECTION = -1 AND PIT.ACH_CHECK_GROUP_VALUE = 'STTX' ) AS STATE_ADDITIONAL_TAX_AMOUNT,&#xD;&#xA;     CV1.DESCRIPTION AS BENEFIT_TYPE, CV2.DESCRIPTION AS BENEFIT_OPTION,&#xD;&#xA;     CV3.DESCRIPTION AS ADDR_STATE_DESCRIPTION,CV4.DESCRIPTION AS ADDR_COUNTRY_DESCRIPTION,&#xD;&#xA;     CV5.DESCRIPTION AS FED_TAX_OPTION_DESCRIPTION,CV6.DESCRIPTION AS STATE_TAX_OPTION_DESCRIPTION,&#xD;&#xA;     CV10.[DESCRIPTION] AS FED_MARITAL_STATUS_DESCRIPTION,CV8.DESCRIPTION AS STATE_MARITAL_STATUS_DESCRIPTION,&#xD;&#xA;     CV9.DESCRIPTION AS PAYMENT_METHOD_DESCRIPTION&#xD;&#xA;FROM    SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION DIST WITH(NOLOCK)&#xD;&#xA;     ON PHH.PAYMENT_HISTORY_HEADER_ID = DIST.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; LEFT OUTER JOIN SGT_PERSON PER WITH(NOLOCK)&#xD;&#xA;     ON DIST.PERSON_ID = PER.PERSON_ID&#xD;&#xA; LEFT OUTER JOIN SGT_PAYEE_ACCOUNT ACCT WITH(NOLOCK)&#xD;&#xA;     ON ACCT.PAYEE_ACCOUNT_ID = PHH.PAYEE_ACCOUNT_ID&#xD;&#xA; INNER JOIN SGT_PLAN PLN WITH(NOLOCK)&#xD;&#xA;     ON PLN.PLAN_ID = PHH.PLAN_ID &#xD;&#xA; LEFT OUTER JOIN SGS_CODE_VALUE CV1 WITH(NOLOCK)&#xD;&#xA;     ON CV1.CODE_VALUE = ACCT.BENEFIT_ACCOUNT_TYPE_VALUE &#xD;&#xA;    AND CV1.CODE_ID = ACCT.BENEFIT_ACCOUNT_TYPE_ID&#xD;&#xA; LEFT OUTER JOIN SGS_CODE_VALUE CV2 WITH(NOLOCK)&#xD;&#xA;     ON CV2.CODE_VALUE = ACCT.BENEFIT_OPTION_VALUE &#xD;&#xA;    AND CV2.CODE_ID = ACCT.BENEFIT_OPTION_ID&#xD;&#xA; LEFT OUTER JOIN  SGT_ORGANIZATION ORG WITH(NOLOCK)&#xD;&#xA;    ON DIST.ORG_ID = ORG.ORG_ID&#xD;&#xA; LEFT OUTER JOIN SGS_CODE_VALUE CV3 WITH(NOLOCK)&#xD;&#xA;    ON DIST.ADDR_STATE_ID = CV3.CODE_ID AND DIST.ADDR_STATE_VALUE = CV3.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN SGS_CODE_VALUE CV4 WITH(NOLOCK)&#xD;&#xA;    ON DIST.ADDR_COUNTRY_ID = CV4.CODE_ID AND DIST.ADDR_COUNTRY_VALUE = CV4.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN SGS_CODE_VALUE CV5 WITH(NOLOCK)&#xD;&#xA;    ON PHH.FED_TAX_OPTION_ID = CV5.CODE_ID AND PHH.FED_TAX_OPTION_VALUE = CV5.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN SGS_CODE_VALUE CV6 WITH(NOLOCK)&#xD;&#xA;    ON PHH.STATE_TAX_OPTION_ID = CV6.CODE_ID AND PHH.STATE_TAX_OPTION_VALUE = CV6.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN SGS_CODE_VALUE CV7 WITH(NOLOCK)&#xD;&#xA;    ON PHH.FED_MARITAL_STATUS_ID = CV7.CODE_ID AND PHH.FED_MARITAL_STATUS_VALUE = CV7.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN SGS_CODE_VALUE CV8 WITH(NOLOCK)&#xD;&#xA;    ON PHH.STATE_MARITAL_STATUS_ID = CV8.CODE_ID AND PHH.STATE_MARITAL_STATUS_VALUE = CV8.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN SGS_CODE_VALUE CV9 WITH(NOLOCK)&#xD;&#xA;    ON DIST.PAYMENT_METHOD_ID = CV9.CODE_ID AND DIST.PAYMENT_METHOD_VALUE = CV9.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN SGS_CODE_VALUE CV10 WITH(NOLOCK)&#xD;&#xA;&#x9;ON PHH.FED_FILING_STATUS_ID = CV10.CODE_ID AND PHH.FED_FILING_STATUS_VALUE = CV10.CODE_VALUE&#xD;&#xA;WHERE    DIST.PAYMENT_METHOD_VALUE = 'CHK'&#xD;&#xA;    AND PHH.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID&#xD;&#xA;UNION ALL&#xD;&#xA;SELECT   CAST(ORG.ORG_CODE AS INT) AS PERSON_ID,ORG.ORG_CODE AS istrPersonIdOrOrgCode, ORG.ORG_NAME AS PERSONNAME,&#xD;&#xA;&#x9; ORG.ORG_ID,&#xD;&#xA;     UPPER(ORGADDR.ADDR_LINE_1) AS ADDR_LINE_1, &#xD;&#xA;     UPPER(ORGADDR.ADDR_LINE_2)as ADDR_LINE_2,&#xD;&#xA;     UPPER(ORGADDR.CITY) AS ADDR_CITY, &#xD;&#xA;     ORGADDR.STATE_VALUE AS ADDR_STATE_VALUE, &#xD;&#xA;     ORGADDR.COUNTRY_VALUE AS ADDR_COUNTRY_VALUE,&#xD;&#xA;     ISNULL(ORGADDR.ZIP_CODE,'')+CASE WHEN ORGADDR.ZIP_4_CODE IS NOT NULL THEN '-' ELSE '' END+ISNULL(ORGADDR.ZIP_4_CODE,'') AS ADDR_ZIP_CODE,&#xD;&#xA;     UPPER(ORGADDR.FOREIGN_POSTAL_CODE) AS FOREIGN_POSTAL_CODE, &#xD;&#xA;     UPPER(ORGADDR.FOREIGN_PROVINCE) AS FOREIGN_PROVINCE,&#xD;&#xA;     DIST.CHECK_NUMBER, DIST.CHECK_MESSAGE,DIST.PAYMENT_HISTORY_DISTRIBUTION_ID,&#xD;&#xA;     DIST.NET_AMOUNT,DIST.FBO_CO,&#xD;&#xA;     PLN.PLAN_NAME,PLN.PLAN_CODE, PHH.PAYEE_ACCOUNT_ID, PHH.PAYMENT_HISTORY_HEADER_ID,&#xD;&#xA;     PHH.PLAN_ID, PHH.PAYMENT_DATE,PHH.FED_TAX_OPTION_VALUE, PHH.FED_TAX_ALLOWANCE,&#xD;&#xA;     PHH.FED_MARITAL_STATUS_VALUE, PHH.FED_ADDITIONAL_TAX_AMOUNT,&#xD;&#xA;     PHH.STATE_TAX_OPTION_VALUE, PHH.STATE_TAX_ALLOWANCE, &#xD;&#xA;     PHH.STATE_MARITAL_STATUS_VALUE, (SELECT SUM(ISNULL(HISDET.AMOUNT,0)) FROM SGT_PAYMENT_HISTORY_DETAIL HISDET WITH(NOLOCK) JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) ON HISDET.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID AND PIT.PAYMENT_ITEM_TYPE_ID = HISDET.PAYMENT_ITEM_TYPE_ID AND PIT.ITEM_TYPE_DIRECTION = -1 AND PIT.ACH_CHECK_GROUP_VALUE = 'STTX' ) AS STATE_ADDITIONAL_TAX_AMOUNT,&#xD;&#xA;     'Rollover' AS BENEFIT_TYPE, CV2.DESCRIPTION AS BENEFIT_OPTION,&#xD;&#xA;     CV3.DESCRIPTION AS ADDR_STATE_DESCRIPTION,CV4.DESCRIPTION AS ADDR_COUNTRY_DESCRIPTION,&#xD;&#xA;     CV5.DESCRIPTION AS FED_TAX_OPTION_DESCRIPTION,CV6.DESCRIPTION AS STATE_TAX_OPTION_DESCRIPTION,&#xD;&#xA;     CV10.[DESCRIPTION] AS FED_MARITAL_STATUS_DESCRIPTION,CV8.DESCRIPTION AS STATE_MARITAL_STATUS_DESCRIPTION,&#xD;&#xA;     CV9.DESCRIPTION AS PAYMENT_METHOD_DESCRIPTION&#xD;&#xA;FROM    SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION DIST WITH(NOLOCK)&#xD;&#xA;     ON PHH.PAYMENT_HISTORY_HEADER_ID = DIST.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; LEFT OUTER JOIN SGT_ORGANIZATION ORG WITH(NOLOCK)&#xD;&#xA;     ON DIST.ORG_ID = ORG.ORG_ID&#xD;&#xA; LEFT OUTER JOIN&#xD;&#xA; (&#xD;&#xA;&#x9;SELECT A.ORG_ID, B.ADDR_LINE_1, B.ADDR_LINE_2, B.CITY, B.STATE_VALUE, B.COUNTRY_VALUE, &#xD;&#xA;&#x9;B.ZIP_CODE, B.ZIP_4_CODE, B.FOREIGN_POSTAL_CODE, B.FOREIGN_PROVINCE&#xD;&#xA;&#x9;FROM sgt_organization A INNER JOIN SGT_ORG_CONTACT_ADDRESS B &#xD;&#xA;&#x9;ON A.ORG_ID = B.ORG_ID AND B.CONTACT_ORG_ADDRESS_ID = A.PRIMARY_ADDRESS_ID&#xD;&#xA; ) ORGADDR ON ORGADDR.ORG_ID = ORG.ORG_ID&#xD;&#xA; LEFT OUTER JOIN SGT_PAYEE_ACCOUNT ACCT WITH(NOLOCK)&#xD;&#xA;     ON ACCT.PAYEE_ACCOUNT_ID = PHH.PAYEE_ACCOUNT_ID&#xD;&#xA; INNER JOIN SGT_PLAN PLN WITH(NOLOCK)&#xD;&#xA;     ON PLN.PLAN_ID = PHH.PLAN_ID &#xD;&#xA; LEFT OUTER JOIN SGS_CODE_VALUE CV1 WITH(NOLOCK)&#xD;&#xA;     ON CV1.CODE_VALUE = ACCT.BENEFIT_ACCOUNT_TYPE_VALUE &#xD;&#xA;    AND CV1.CODE_ID = ACCT.BENEFIT_ACCOUNT_TYPE_ID&#xD;&#xA; LEFT OUTER JOIN SGS_CODE_VALUE CV2 WITH(NOLOCK)&#xD;&#xA;     ON CV2.CODE_VALUE = ACCT.BENEFIT_OPTION_VALUE &#xD;&#xA;    AND CV2.CODE_ID = ACCT.BENEFIT_OPTION_ID&#xD;&#xA; LEFT OUTER JOIN SGS_CODE_VALUE CV3 WITH(NOLOCK)&#xD;&#xA;    ON DIST.ADDR_STATE_ID = CV3.CODE_ID AND DIST.ADDR_STATE_VALUE = CV3.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN SGS_CODE_VALUE CV4 WITH(NOLOCK)&#xD;&#xA;    ON DIST.ADDR_COUNTRY_ID = CV4.CODE_ID AND DIST.ADDR_COUNTRY_VALUE = CV4.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN SGS_CODE_VALUE CV5 WITH(NOLOCK)&#xD;&#xA;    ON PHH.FED_TAX_OPTION_ID = CV5.CODE_ID AND PHH.FED_TAX_OPTION_VALUE = CV5.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN SGS_CODE_VALUE CV6 WITH(NOLOCK)&#xD;&#xA;    ON PHH.STATE_TAX_OPTION_ID = CV6.CODE_ID AND PHH.STATE_TAX_OPTION_VALUE = CV6.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN SGS_CODE_VALUE CV7 WITH(NOLOCK)&#xD;&#xA;    ON PHH.FED_MARITAL_STATUS_ID = CV7.CODE_ID AND PHH.FED_MARITAL_STATUS_VALUE = CV7.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN SGS_CODE_VALUE CV8 WITH(NOLOCK)&#xD;&#xA;    ON PHH.STATE_MARITAL_STATUS_ID = CV8.CODE_ID AND PHH.STATE_MARITAL_STATUS_VALUE = CV8.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN SGS_CODE_VALUE CV9 WITH(NOLOCK)&#xD;&#xA;    ON DIST.PAYMENT_METHOD_ID = CV9.CODE_ID AND DIST.PAYMENT_METHOD_VALUE = CV9.CODE_VALUE&#xD;&#xA; LEFT OUTER JOIN SGS_CODE_VALUE CV10 WITH(NOLOCK)&#xD;&#xA;&#x9;ON PHH.FED_FILING_STATUS_ID = CV10.CODE_ID AND PHH.FED_FILING_STATUS_VALUE = CV10.CODE_VALUE&#xD;&#xA;WHERE    DIST.PAYMENT_METHOD_VALUE = 'RCHK'&#xD;&#xA;    AND PHH.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID&#xD;&#xA;) Temp&#xD;&#xA;ORDER BY CHECK_NUMBER">
      <parameters>
        <parameter ID="@PAYMENTSCHEDULEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="CreateCheckHistoryforPayees" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="-------------------------------------------------------------------------------------------&#xD;&#xA;-- entPaymentHistoryDistribution.CreateCheckHistoryforPayees&#xD;&#xA;-------------------------------------------------------------------------------------------&#xD;&#xA;Declare @checkNo varchar(20)&#xD;&#xA;Declare @CheckBookId int&#xD;&#xA;Declare @lastCheckId  Int&#xD;&#xA;&#xD;&#xA;SELECT TOP 1 @CHECKNO = CASE WHEN ISNULL(LAST_CHECK_NUMBER,'') = '' THEN FIRST_CHECK_NUMBER &#xD;&#xA;     ELSE LAST_CHECK_NUMBER END,&#xD;&#xA;   @CheckBookId  = CHECK_BOOK_ID&#xD;&#xA;FROM SGT_PAYMENT_CHECK_BOOK WITH(NOLOCK) &#xD;&#xA;INNER JOIN SGS_CODE_VALUE WITH(NOLOCK) ON CODE_ID = 7005 AND SGS_CODE_VALUE.DATA3 = SGT_PAYMENT_CHECK_BOOK.CHECK_BOOK_ID&#xD;&#xA;WHERE EFFECTIVE_DATE=(SELECT MAX(EFFECTIVE_DATE)FROM SGT_PAYMENT_CHECK_BOOK WITH(NOLOCK) WHERE EFFECTIVE_DATE&lt;=@PAYMENTDATE)&#xD;&#xA;AND SGS_CODE_VALUE.CODE_VALUE = 'RETR' &#xD;&#xA;&#xD;&#xA;SELECT  PAYEE_ACCOUNT_ID,PRE_NOTE_FLAG  into #temp&#xD;&#xA; FROM SGT_PAYEE_ACCOUNT_ACH_DETAIL ACH &#xD;&#xA; WHERE  @PAYMENTDATE BETWEEN ACH.ACH_START_DATE &#xD;&#xA; AND (CASE WHEN ACH.ACH_END_DATE IS NULL THEN '99991231' ELSE ACH.ACH_END_DATE END)&#xD;&#xA;&#xD;&#xA;select payee_account_id,pre_note_flag into #temp1 from #temp WITH(NOLOCK) where pre_note_flag = 'Y'&#xD;&#xA;&#xD;&#xA;Update a set Pre_note_flag = 'Y' from &#xD;&#xA;#temp a WITH(NOLOCK) inner join #temp1 b WITH(NOLOCK) on a.payee_account_id =b.payee_account_id &#xD;&#xA;and a.Pre_note_flag &lt;&gt; 'Y'&#xD;&#xA;&#xD;&#xA;select distinct Payee_account_id,Pre_note_flag into #temp2 &#xD;&#xA;from #temp WITH(NOLOCK)&#xD;&#xA;&#xD;&#xA;INSERT INTO SGT_PAYMENT_HISTORY_DISTRIBUTION(PAYMENT_HISTORY_HEADER_ID, PAYMENT_METHOD_ID, PAYMENT_METHOD_VALUE, &#xD;&#xA;CHECK_MESSAGE, DISTRIBUTION_STATUS_ID, DISTRIBUTION_STATUS_VALUE, NET_AMOUNT, CHECK_NUMBER, &#xD;&#xA;OLD_DISTRIBUTION_ID, RECIPIENT_NAME, FBO_CO, ADDR_LINE_1, ADDR_LINE_2, ADDR_CITY, ADDR_STATE_ID,&#xD;&#xA;ADDR_STATE_VALUE, ADDR_COUNTRY_ID, ADDR_COUNTRY_VALUE, &#xD;&#xA;ADDR_ZIP_CODE, ADDR_ZIP_4_CODE, FOREIGN_PROVINCE, FOREIGN_POSTAL_CODE, BANK_NAME, ROUTING_NUMBER,&#xD;&#xA;ACCOUNT_TYPE_ID, ACCOUNT_TYPE_VALUE, ACCOUNT_NUMBER, PERSON_ID, ORG_ID, CREATED_BY, CREATED_DATE, &#xD;&#xA;MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)&#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA; PAYMENT_HISTORY_HEADER_ID,PAYMENT_METHOD_ID,PAYMENT_METHOD_VALUE,&#xD;&#xA; CHECK_MESSAGE,DISTRIBUTION_STATUS_ID,DISTRIBUTION_STATUS_VALUE,&#xD;&#xA; SUM(AMOUNT) AS NET_AMOUNT,&#xD;&#xA; (ROW_NUMBER() OVER (ORDER BY PAYMENT_HISTORY_HEADER_ID))+@CHECKNO  AS CHECK_NUMBER,&#xD;&#xA; NULL AS OLD_DISTRIBUTION_ID,RECIPIENT_NAME,&#xD;&#xA; FBO_CO AS FBO_CO, ADDR_LINE_1,ADDR_LINE_2,&#xD;&#xA; CITY,STATE_ID,STATE_VALUE,COUNTRY_ID,COUNTRY_VALUE,&#xD;&#xA; ZIP_CODE,ZIP_4_CODE,FOREIGN_PROVINCE,FOREIGN_POSTAL_CODE,&#xD;&#xA; NULL AS BANK_NAME,NULL AS ROUTING_NUMBER,&#xD;&#xA; 211 AS ACCOUNT_TYPE_ID,NULL AS ACCOUNT_TYPE_VALUE,NULL AS ACCOUNT_NUMBER,&#xD;&#xA; PERSON_ID,ORG_ID,'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) AS CREATED_BY,GETDATE() AS CREATED_DATE,&#xD;&#xA; 'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) AS MODIFIED_BY,GETDATE() AS MODIFIED_DATE,0 AS UPDATE_SEQ  &#xD;&#xA;FROM &#xD;&#xA; (&#xD;&#xA; SELECT PHH.PAYMENT_HISTORY_HEADER_ID, PHH.PERSON_ID,PHH.ORG_ID,PHH.PAYEE_ACCOUNT_ID,BS.CHECK_MESSAGE,&#xD;&#xA;   2504 AS PAYMENT_METHOD_ID,&#xD;&#xA;  'CHK' AS PAYMENT_METHOD_VALUE,&#xD;&#xA;  2505 AS DISTRIBUTION_STATUS_ID,&#xD;&#xA;  'COTS' AS DISTRIBUTION_STATUS_VALUE,&#xD;&#xA;  CASE WHEN PHH.person_id IS NOT NULL  THEN  ISNULL(P.FIRST_NAME,'') +' '+ ISNULL(P.MIDDLE_NAME,'') +' '+ ISNULL(P.LAST_NAME,'') else O.ORG_CODE+','+O.ORG_NAME END AS RECIPIENT_NAME, &#xD;&#xA;  PHD.AMOUNT*PIT.ITEM_TYPE_DIRECTION AS AMOUNT,  &#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_LINE_1 ELSE OCA.ADDR_LINE_1 END AS ADDR_LINE_1,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_LINE_2 ELSE OCA.ADDR_LINE_2 END AS ADDR_LINE_2,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_CITY ELSE OCA.CITY END AS CITY,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_STATE_ID ELSE OCA.STATE_ID END AS STATE_ID,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_STATE_VALUE ELSE OCA.STATE_VALUE END AS STATE_VALUE,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_COUNTRY_ID ELSE OCA.COUNTRY_ID END AS COUNTRY_ID,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_COUNTRY_VALUE ELSE OCA.COUNTRY_VALUE END AS COUNTRY_VALUE,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_ZIP_CODE ELSE OCA.ZIP_CODE END AS ZIP_CODE,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_ZIP_4_CODE ELSE OCA.ZIP_4_CODE END AS ZIP_4_CODE,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.FOREIGN_PROVINCE ELSE OCA.FOREIGN_PROVINCE END AS FOREIGN_PROVINCE,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.FOREIGN_POSTAL_CODE ELSE OCA.FOREIGN_POSTAL_CODE END AS FOREIGN_POSTAL_CODE,&#xD;&#xA;  case when PA.BENEFIT_OPTION_VALUE IN ('DBCT','DBDC','DBTT') AND PHH.ORG_ID IS NOT NULL&#xD;&#xA;     and (PA.RHIC_EE_AMOUNT_REFUND_FLAG is null or PA.RHIC_EE_AMOUNT_REFUND_FLAG='N')&#xD;&#xA;     then ISNULL(PP.LAST_NAME,'') +', '+ ISNULL(PP.MIDDLE_NAME,'') +' '+ ISNULL(PP.FIRST_NAME,'') else null END AS FBO_CO&#xD;&#xA;   FROM SGT_PAYMENT_HISTORY_DETAIL  PHD WITH(NOLOCK)&#xD;&#xA;  INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)  &#xD;&#xA;   ON PHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID &#xD;&#xA;  INNER JOIN SGT_PAYEE_ACCOUNT PA WITH(NOLOCK)  &#xD;&#xA;   ON PHH.PAYEE_ACCOUNT_ID=PA.PAYEE_ACCOUNT_ID  &#xD;&#xA;  INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) &#xD;&#xA;   ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID &#xD;&#xA;  INNER JOIN SGT_PAYMENT_SCHEDULE BS WITH(NOLOCK) &#xD;&#xA;   ON PHH.PAYMENT_SCHEDULE_ID = BS.PAYMENT_SCHEDULE_ID &#xD;&#xA;   LEFT OUTER JOIN &#xD;&#xA;   (Select *  from #temp2 WITH(NOLOCK)) as ACH ON ACH.PAYEE_ACCOUNT_ID=PA.PAYEE_ACCOUNT_ID&#xD;&#xA;  LEFT OUTER JOIN SGT_PERSON PP WITH(NOLOCK) ON PP.PERSON_ID=PA.PAYEE_PERSLINK_ID&#xD;&#xA;  LEFT OUTER JOIN SGT_PERSON P WITH(NOLOCK)  ON PHH.PERSON_ID = P.PERSON_ID&#xD;&#xA;  LEFT OUTER JOIN SGT_ORGANIZATION O WITH(NOLOCK)  ON PHH.ORG_ID = O.ORG_ID&#xD;&#xA;  LEFT OUTER JOIN SGT_ORG_CONTACT_ADDRESS OCA WITH(NOLOCK)  ON O.PRIMARY_ADDRESS_ID=OCA.CONTACT_ORG_ADDRESS_ID&#xD;&#xA;  LEFT OUTER JOIN (SELECT P.PERSON_ID, --PA1.PERSON_ADDRESS_ID,PA2.PERSON_ADDRESS_ID,PA3.PERSON_ADDRESS_ID,PA4.PERSON_ADDRESS_ID,&#xD;&#xA;      PA4.ADDR_LINE_1, PA4.ADDR_LINE_2,PA4.ADDR_CITY,PA4.ADDR_STATE_ID,PA4.ADDR_STATE_VALUE,PA4.ADDR_COUNTRY_ID,PA4.ADDR_COUNTRY_VALUE&#xD;&#xA;      ,PA4.ADDR_ZIP_CODE,PA4.ADDR_ZIP_4_CODE, PA4.FOREIGN_PROVINCE,PA4.FOREIGN_POSTAL_CODE &#xD;&#xA;    FROM SGT_PERSON P WITH(NOLOCK) &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA1 WITH(NOLOCK)   ON P.PERSON_ID  = PA1.PERSON_ID  AND PA1.ADDRESS_TYPE_VALUE = 'PERM'  AND &#xD;&#xA;      @PAYMENTDATE BETWEEN PA1.START_DATE AND IsNull(PA1.END_DATE, '99991231')&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA2 WITH(NOLOCK)  ON P.PERSON_ID  = PA2.PERSON_ID AND PA2.ADDRESS_TYPE_VALUE = 'TEMP' AND&#xD;&#xA;      @PAYMENTDATE BETWEEN PA2.START_DATE AND IsNull(PA2.END_DATE, '99991231')&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA3 WITH(NOLOCK)  ON P.PERSON_ID  = PA3.PERSON_ID AND PA3.ADDRESS_TYPE_VALUE = 'PAYM' AND&#xD;&#xA;      @PAYMENTDATE BETWEEN PA3.START_DATE AND IsNull(PA3.END_DATE, '99991231')&#xD;&#xA;Left Outer Join SGT_PERSON_ADDRESS PA4 WITH(NOLOCK) On COALESCE(PA1.PERSON_ADDRESS_ID, PA2.PERSON_ADDRESS_ID, PA3.PERSON_ADDRESS_ID) = PA4.PERSON_ADDRESS_ID&#xD;&#xA;) AS PERADDR ON PERADDR.PERSON_ID=PHH.PERSON_ID&#xD;&#xA;           &#xD;&#xA;  WHERE PHH.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID&#xD;&#xA;   AND (ACH.PAYEE_ACCOUNT_ID IS  NULL  or ach.Pre_note_flag = 'Y' )&#xD;&#xA;   AND (PIT.ALLOW_ROLLOVER_CODE_VALUE &lt;&gt; 'CRET' OR PIT.ITEM_TYPE_CODE in ('ITEM215','ITEM216','ITEM218','ITEM219'))&#xD;&#xA;   and BENEFIT_OPTION_VALUE NOT IN ('REFD', 'RGRD', 'AURD','SPEL')&#xD;&#xA; ) AS TEMP&#xD;&#xA;GROUP BY PAYMENT_HISTORY_HEADER_ID,PERSON_ID,ORG_ID,PAYEE_ACCOUNT_ID,CHECK_MESSAGE,&#xD;&#xA; PAYMENT_METHOD_ID,PAYMENT_METHOD_VALUE,&#xD;&#xA; DISTRIBUTION_STATUS_ID,&#xD;&#xA; DISTRIBUTION_STATUS_VALUE,&#xD;&#xA; RECIPIENT_NAME,&#xD;&#xA; ADDR_LINE_1,ADDR_LINE_2,&#xD;&#xA; CITY,STATE_ID,STATE_VALUE,COUNTRY_ID,COUNTRY_VALUE,&#xD;&#xA; ZIP_CODE,ZIP_4_CODE,FOREIGN_PROVINCE,FOREIGN_POSTAL_CODE,FBO_CO&#xD;&#xA;HAVING SUM(AMOUNT)&gt;0&#xD;&#xA;ORDER BY PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#xD;&#xA;Select @lastCheckId   = @@Identity&#xD;&#xA;&#xD;&#xA;Select @CHECKNO = CHECK_NUMBER from &#xD;&#xA;SGT_PAYMENT_HISTORY_DISTRIBUTION WITH(NOLOCK) &#xD;&#xA;where Payment_history_distribution_id = @lastCheckId&#xD;&#xA;&#xD;&#xA;If @CHECKNO is not null begin&#xD;&#xA; UPDATE SGT_PAYMENT_CHECK_BOOK SET LAST_CHECK_NUMBER = @CHECKNO ,MODIFIED_BY='PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid),MODIFIED_DATE=GETDATE(),&#xD;&#xA; UPDATE_SEQ = UPDATE_SEQ+1&#xD;&#xA; WHERE CHECK_BOOK_ID = @CHECKBOOKID&#xD;&#xA;end&#xD;&#xA; &#xD;&#xA;---&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; ROLL OVER &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#xD;&#xA;SELECT TOP 1 @CHECKNO = CASE WHEN ISNULL(LAST_CHECK_NUMBER,'') = '' THEN FIRST_CHECK_NUMBER &#xD;&#xA;     ELSE LAST_CHECK_NUMBER END,&#xD;&#xA;   @CHECKBOOKID  = CHECK_BOOK_ID&#xD;&#xA;FROM SGT_PAYMENT_CHECK_BOOK WITH(NOLOCK) &#xD;&#xA;INNER JOIN SGS_CODE_VALUE WITH(NOLOCK) ON CODE_ID = 7005 AND SGS_CODE_VALUE.DATA3 = SGT_PAYMENT_CHECK_BOOK.CHECK_BOOK_ID&#xD;&#xA;WHERE EFFECTIVE_DATE=(SELECT MAX(EFFECTIVE_DATE)FROM SGT_PAYMENT_CHECK_BOOK WITH(NOLOCK) WHERE EFFECTIVE_DATE&lt;=@PAYMENTDATE)&#xD;&#xA;AND SGS_CODE_VALUE.CODE_VALUE = 'RETR'&#xD;&#xA;&#xD;&#xA;INSERT INTO SGT_PAYMENT_HISTORY_DISTRIBUTION&#xD;&#xA;(&#xD;&#xA;PAYMENT_HISTORY_HEADER_ID, PAYMENT_METHOD_ID, PAYMENT_METHOD_VALUE, &#xD;&#xA;CHECK_MESSAGE, DISTRIBUTION_STATUS_ID, DISTRIBUTION_STATUS_VALUE, NET_AMOUNT, CHECK_NUMBER, &#xD;&#xA;OLD_DISTRIBUTION_ID, RECIPIENT_NAME, FBO_CO, ADDR_LINE_1, ADDR_LINE_2, ADDR_CITY, ADDR_STATE_ID, ADDR_STATE_VALUE, &#xD;&#xA;ADDR_COUNTRY_ID, ADDR_COUNTRY_VALUE, ADDR_ZIP_CODE, ADDR_ZIP_4_CODE, FOREIGN_PROVINCE, FOREIGN_POSTAL_CODE, &#xD;&#xA;BANK_NAME, ROUTING_NUMBER, ACCOUNT_TYPE_ID, ACCOUNT_TYPE_VALUE, ACCOUNT_NUMBER, &#xD;&#xA;PERSON_ID, ORG_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA;PAYMENT_HISTORY_HEADER_ID, PAYMENT_METHOD_ID, PAYMENT_METHOD_VALUE, CHECK_MESSAGE,&#xD;&#xA;DISTRIBUTION_STATUS_ID, DISTRIBUTION_STATUS_VALUE, NET_AMOUNT, &#xD;&#xA;CHECK_NUMBER,&#xD;&#xA;NULL AS OLD_DISTRIBUTION_ID, &#xD;&#xA;RECIPIENT_NAME, FBO_CO, ADDR_LINE_1, ADDR_LINE_2, ADDR_CITY, ADDR_STATE_ID, &#xD;&#xA;ADDR_STATE_VALUE, ADDR_COUNTRY_ID, ADDR_COUNTRY_VALUE, ADDR_ZIP_CODE, ADDR_ZIP_4_CODE,&#xD;&#xA;FOREIGN_PROVINCE, FOREIGN_POSTAL_CODE, BANK_NAME, ROUTING_NUMBER, &#xD;&#xA;ACCOUNT_TYPE_ID, ACCOUNT_TYPE_VALUE, ACCOUNT_NUMBER, PERSON_ID, ORG_ID, CREATED_BY, &#xD;&#xA;CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ  &#xD;&#xA;FROM (&#xD;&#xA;&#xD;&#xA;            SELECT PAYMENT.PAYMENT_HISTORY_HEADER_ID,PAYMENT.PERSON_ID,PAYMENT.ROLLOVER_ORG_ID as ORG_ID,PAYMENT.PAYEE_ACCOUNT_ID,&#xD;&#xA;            PAYMENT.AMOUNT AS NET_AMOUNT,PAYMENT.CHECK_MESSAGE,&#xD;&#xA;             2504 AS PAYMENT_METHOD_ID,&#xD;&#xA;            'RCHK' AS PAYMENT_METHOD_VALUE,&#xD;&#xA;            2505 AS DISTRIBUTION_STATUS_ID,&#xD;&#xA;            'RROT' AS DISTRIBUTION_STATUS_VALUE,&#xD;&#xA;            O.ORG_NAME AS RECIPIENT_NAME,&#xD;&#xA;            'FBO:'+isnull(PPSN.FIRST_NAME,'') +', '+ isnull(PPSN.MIDDLE_NAME,'')+' '+isnull(PPSN.LAST_NAME,'')+ ' A/C NO: '+ isnull(PARD.ACCOUNT_NUMBER,'') AS FBO_CO,&#xD;&#xA;            OB.BANK_ORG_ID,&#xD;&#xA;            BANK.ORG_NAME as BANK_NAME,&#xD;&#xA;   (ROW_NUMBER() OVER (ORDER BY PAYMENT_HISTORY_HEADER_ID))+@CHECKNO  AS CHECK_NUMBER,&#xD;&#xA;            BANK.ROUTING_NO AS ROUTING_NUMBER,&#xD;&#xA;            211 AS ACCOUNT_TYPE_ID,&#xD;&#xA;            OB.ACCOUNT_TYPE_VALUE AS ACCOUNT_TYPE_VALUE,&#xD;&#xA;            OB.ACCOUNT_NO AS ACCOUNT_NUMBER,&#xD;&#xA;            CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_LINE_1 END AS ADDR_LINE_1 ,&#xD;&#xA;            CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_LINE_2 END AS ADDR_LINE_2 ,&#xD;&#xA;            CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_CITY END AS  ADDR_CITY ,&#xD;&#xA;            CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_STATE_ID END AS ADDR_STATE_ID ,&#xD;&#xA;            CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_STATE_VALUE END AS ADDR_STATE_VALUE ,&#xD;&#xA;            CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_COUNTRY_ID END AS ADDR_COUNTRY_ID,&#xD;&#xA;            CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_COUNTRY_VALUE END AS ADDR_COUNTRY_VALUE,&#xD;&#xA;            CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_ZIP_CODE END AS ADDR_ZIP_CODE,&#xD;&#xA;            CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_ZIP_4_CODE END AS ADDR_ZIP_4_CODE,&#xD;&#xA;            CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.FOREIGN_PROVINCE END AS FOREIGN_PROVINCE,&#xD;&#xA;            CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.FOREIGN_POSTAL_CODE END AS FOREIGN_POSTAL_CODE,&#xD;&#xA;            'PERSLink Batch' AS  CREATED_BY ,GETDATE() AS CREATED_DATE,&#xD;&#xA;            'PERSLink Batch' AS  MODIFIED_BY ,GETDATE() AS MODIFIED_DATE,0 UPDATE_SEQ&#xD;&#xA;      FROM&#xD;&#xA;      (&#xD;&#xA;            &#xD;&#xA;            SELECT PHH.PAYMENT_HISTORY_HEADER_ID,PHH.PERSON_ID,PHH.ORG_ID,&#xD;&#xA;   PHH.PAYEE_ACCOUNT_ID,PHH.ORG_ID as ROLLOVER_ORG_ID,   --&#xD;&#xA;            PS.CHECK_MESSAGE,SUM(PHD.AMOUNT*PIT.ITEM_TYPE_DIRECTION) AS AMOUNT&#xD;&#xA;            FROM SGT_PAYMENT_HISTORY_DETAIL  PHD WITH(NOLOCK) &#xD;&#xA;            INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)  &#xD;&#xA;                  ON PHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID &#xD;&#xA;            INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) &#xD;&#xA;                  ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID &#xD;&#xA;            INNER JOIN SGT_PAYMENT_SCHEDULE PS WITH(NOLOCK)  ON PS.PAYMENT_SCHEDULE_ID=PHH.PAYMENT_SCHEDULE_ID&#xD;&#xA;            WHERE PHH.PAYMENT_SCHEDULE_ID=@PAYMENTSCHEDULEID&#xD;&#xA;            AND PIT.ALLOW_ROLLOVER_CODE_VALUE = 'CRET'          &#xD;&#xA;           GROUP BY  PHH.PAYMENT_HISTORY_HEADER_ID,PHH.PERSON_ID,PHH.ORG_ID,PHH.PAYEE_ACCOUNT_ID,PHD.ROLLOVER_ORG_ID,PS.CHECK_MESSAGE   &#xD;&#xA;      ) AS PAYMENT&#xD;&#xA;      INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_DETAIL PARD WITH(NOLOCK)   &#xD;&#xA;      ON PARD.PAYEE_ACCOUNT_ID = PAYMENT.PAYEE_ACCOUNT_ID AND PARD.ROLLOVER_ORG_ID = PAYMENT.ROLLOVER_ORG_ID  &#xD;&#xA;      LEFT OUTER JOIN SGT_ORG_BANK OB WITH(NOLOCK)  ON PARD.ROLLOVER_ORG_ID = OB.ORG_ID&#xD;&#xA;                  AND OB.USAGE_VALUE = 'DEP' AND OB.STATUS_VALUE = 'ACTV'&#xD;&#xA;      LEFT OUTER JOIN SGT_PERSON P WITH(NOLOCK)  ON PAYMENT.PERSON_ID = P.PERSON_ID&#xD;&#xA;      LEFT OUTER JOIN SGT_ORGANIZATION BANK WITH(NOLOCK)  ON BANK.ORG_ID = OB.BANK_ORG_ID  &#xD;&#xA;      LEFT OUTER JOIN SGT_ORGANIZATION O WITH(NOLOCK)  ON O.ORG_ID = PARD.ROLLOVER_ORG_ID  &#xD;&#xA;      LEFT OUTER JOIN SGT_PAYEE_ACCOUNT PAACT WITH(NOLOCK) ON PAYMENT.PAYEE_ACCOUNT_ID = PAACT.PAYEE_ACCOUNT_ID&#xD;&#xA;      LEFT OUTER JOIN SGT_PERSON PPSN WITH(NOLOCK) ON  PAACT.PAYEE_PERSLINK_ID = PPSN.PERSON_ID&#xD;&#xA;  LEFT OUTER JOIN (SELECT P.PERSON_ID, --PA1.PERSON_ADDRESS_ID,PA2.PERSON_ADDRESS_ID,PA3.PERSON_ADDRESS_ID,PA4.PERSON_ADDRESS_ID,&#xD;&#xA;      PA4.ADDR_LINE_1, PA4.ADDR_LINE_2,PA4.ADDR_CITY,PA4.ADDR_STATE_ID,PA4.ADDR_STATE_VALUE,PA4.ADDR_COUNTRY_ID,PA4.ADDR_COUNTRY_VALUE&#xD;&#xA;      ,PA4.ADDR_ZIP_CODE,PA4.ADDR_ZIP_4_CODE, PA4.FOREIGN_PROVINCE,PA4.FOREIGN_POSTAL_CODE &#xD;&#xA;    FROM SGT_PERSON P WITH(NOLOCK) &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA1 WITH(NOLOCK)   ON P.PERSON_ID  = PA1.PERSON_ID  AND PA1.ADDRESS_TYPE_VALUE = 'PERM'  AND &#xD;&#xA;      @PAYMENTDATE BETWEEN PA1.START_DATE AND IsNull(PA1.END_DATE, '99991231')&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA2 WITH(NOLOCK)  ON P.PERSON_ID  = PA2.PERSON_ID AND PA2.ADDRESS_TYPE_VALUE = 'TEMP' AND&#xD;&#xA;      @PAYMENTDATE BETWEEN PA2.START_DATE AND IsNull(PA2.END_DATE, '99991231')&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA3 WITH(NOLOCK)  ON P.PERSON_ID  = PA3.PERSON_ID AND PA3.ADDRESS_TYPE_VALUE = 'PAYM' AND&#xD;&#xA;      @PAYMENTDATE BETWEEN PA3.START_DATE AND IsNull(PA3.END_DATE, '99991231')&#xD;&#xA;Left Outer Join SGT_PERSON_ADDRESS PA4 WITH(NOLOCK) On COALESCE(PA1.PERSON_ADDRESS_ID, PA2.PERSON_ADDRESS_ID, PA3.PERSON_ADDRESS_ID) = PA4.PERSON_ADDRESS_ID&#xD;&#xA;) AS PERADDR ON PERADDR.PERSON_ID=PAYMENT.PERSON_ID&#xD;&#xA;WHERE PARD.STATUS_VALUE = 'ACTV' &#xD;&#xA;    AND OB.ORG_ID IS NULL&#xD;&#xA;)TEMP WHERE NET_AMOUNT &gt; 0 ORDER BY PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#xD;&#xA;SELECT @LASTCHECKID   = @@IDENTITY&#xD;&#xA; &#xD;&#xA;SELECT @CHECKNO = CHECK_NUMBER FROM &#xD;&#xA;SGT_PAYMENT_HISTORY_DISTRIBUTION WITH(NOLOCK) &#xD;&#xA;WHERE PAYMENT_HISTORY_DISTRIBUTION_ID = @LASTCHECKID&#xD;&#xA;&#xD;&#xA;If @CHECKNO is not null begin&#xD;&#xA; UPDATE SGT_PAYMENT_CHECK_BOOK SET LAST_CHECK_NUMBER = @CHECKNO ,MODIFIED_BY='PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid),MODIFIED_DATE=GETDATE(),&#xD;&#xA; UPDATE_SEQ = UPDATE_SEQ+1&#xD;&#xA; WHERE CHECK_BOOK_ID = @CHECKBOOKID&#xD;&#xA;end&#xD;&#xA;&#xD;&#xA;--------&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;  REFUND  &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#xD;&#xA;SELECT TOP 1 @CHECKNO = CASE WHEN ISNULL(LAST_CHECK_NUMBER,'') = '' THEN FIRST_CHECK_NUMBER &#xD;&#xA;     ELSE LAST_CHECK_NUMBER END,&#xD;&#xA;   @CHECKBOOKID  = CHECK_BOOK_ID&#xD;&#xA;FROM SGT_PAYMENT_CHECK_BOOK WITH(NOLOCK) &#xD;&#xA;INNER JOIN SGS_CODE_VALUE WITH(NOLOCK) ON CODE_ID = 7005 AND SGS_CODE_VALUE.DATA3 = SGT_PAYMENT_CHECK_BOOK.CHECK_BOOK_ID&#xD;&#xA;WHERE EFFECTIVE_DATE=(SELECT MAX(EFFECTIVE_DATE)FROM SGT_PAYMENT_CHECK_BOOK WITH(NOLOCK) WHERE EFFECTIVE_DATE&lt;=@PAYMENTDATE)&#xD;&#xA;AND SGS_CODE_VALUE.CODE_VALUE = 'RETR'&#xD;&#xA;&#xD;&#xA;INSERT INTO SGT_PAYMENT_HISTORY_DISTRIBUTION(PAYMENT_HISTORY_HEADER_ID, PAYMENT_METHOD_ID, PAYMENT_METHOD_VALUE, &#xD;&#xA;CHECK_MESSAGE, DISTRIBUTION_STATUS_ID, DISTRIBUTION_STATUS_VALUE, NET_AMOUNT, CHECK_NUMBER, &#xD;&#xA;OLD_DISTRIBUTION_ID, RECIPIENT_NAME, FBO_CO, ADDR_LINE_1, ADDR_LINE_2, ADDR_CITY, ADDR_STATE_ID,&#xD;&#xA;ADDR_STATE_VALUE, ADDR_COUNTRY_ID, ADDR_COUNTRY_VALUE, &#xD;&#xA;ADDR_ZIP_CODE, ADDR_ZIP_4_CODE, FOREIGN_PROVINCE, FOREIGN_POSTAL_CODE, BANK_NAME, ROUTING_NUMBER,&#xD;&#xA;ACCOUNT_TYPE_ID, ACCOUNT_TYPE_VALUE, ACCOUNT_NUMBER, PERSON_ID, ORG_ID, CREATED_BY, CREATED_DATE, &#xD;&#xA;MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)&#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA; PAYMENT_HISTORY_HEADER_ID,PAYMENT_METHOD_ID,PAYMENT_METHOD_VALUE,&#xD;&#xA; CHECK_MESSAGE,DISTRIBUTION_STATUS_ID,DISTRIBUTION_STATUS_VALUE,&#xD;&#xA; SUM(AMOUNT) AS NET_AMOUNT,&#xD;&#xA; (ROW_NUMBER() OVER (ORDER BY PAYMENT_HISTORY_HEADER_ID))+@CHECKNO  AS CHECK_NUMBER,&#xD;&#xA; NULL AS OLD_DISTRIBUTION_ID,RECIPIENT_NAME,&#xD;&#xA; FBO_CO AS FBO_CO, ADDR_LINE_1,ADDR_LINE_2,&#xD;&#xA; CITY,STATE_ID,STATE_VALUE,COUNTRY_ID,COUNTRY_VALUE,&#xD;&#xA; ZIP_CODE,ZIP_4_CODE,FOREIGN_PROVINCE,FOREIGN_POSTAL_CODE,&#xD;&#xA; NULL AS BANK_NAME,NULL AS ROUTING_NUMBER,&#xD;&#xA; 211 AS ACCOUNT_TYPE_ID,NULL AS ACCOUNT_TYPE_VALUE,NULL AS ACCOUNT_NUMBER,&#xD;&#xA; PERSON_ID,ORG_ID,'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) AS CREATED_BY,GETDATE() AS CREATED_DATE,&#xD;&#xA; 'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) AS MODIFIED_BY,GETDATE() AS MODIFIED_DATE,0 AS UPDATE_SEQ  &#xD;&#xA;FROM &#xD;&#xA; (&#xD;&#xA; SELECT PHH.PAYMENT_HISTORY_HEADER_ID, PHH.PERSON_ID,PHH.ORG_ID,PHH.PAYEE_ACCOUNT_ID,BS.CHECK_MESSAGE,&#xD;&#xA;   2504 AS PAYMENT_METHOD_ID,&#xD;&#xA;  'CHK' AS PAYMENT_METHOD_VALUE,&#xD;&#xA;  2505 AS DISTRIBUTION_STATUS_ID,&#xD;&#xA;  'COTS' AS DISTRIBUTION_STATUS_VALUE,&#xD;&#xA;  CASE WHEN PHH.person_id IS NOT NULL  THEN  ISNULL(P.FIRST_NAME,'') +' '+ ISNULL(P.MIDDLE_NAME,'') +' '+ ISNULL(P.LAST_NAME,'') else O.ORG_CODE+','+O.ORG_NAME END AS RECIPIENT_NAME, &#xD;&#xA;  PHD.AMOUNT*PIT.ITEM_TYPE_DIRECTION AS AMOUNT,  &#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_LINE_1 ELSE OCA.ADDR_LINE_1 END AS ADDR_LINE_1,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_LINE_2 ELSE OCA.ADDR_LINE_2 END AS ADDR_LINE_2,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_CITY ELSE OCA.CITY END AS CITY,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_STATE_ID ELSE OCA.STATE_ID END AS STATE_ID,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_STATE_VALUE ELSE OCA.STATE_VALUE END AS STATE_VALUE,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_COUNTRY_ID ELSE OCA.COUNTRY_ID END AS COUNTRY_ID,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_COUNTRY_VALUE ELSE OCA.COUNTRY_VALUE END AS COUNTRY_VALUE,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_ZIP_CODE ELSE OCA.ZIP_CODE END AS ZIP_CODE,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_ZIP_4_CODE ELSE OCA.ZIP_4_CODE END AS ZIP_4_CODE,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.FOREIGN_PROVINCE ELSE OCA.FOREIGN_PROVINCE END AS FOREIGN_PROVINCE,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.FOREIGN_POSTAL_CODE ELSE OCA.FOREIGN_POSTAL_CODE END AS FOREIGN_POSTAL_CODE,&#xD;&#xA;  case when PA.BENEFIT_OPTION_VALUE IN ('DBCT','DBDC','DBTT') AND PHH.ORG_ID IS NOT NULL&#xD;&#xA;     and (PA.RHIC_EE_AMOUNT_REFUND_FLAG is null or PA.RHIC_EE_AMOUNT_REFUND_FLAG='N')&#xD;&#xA;     then ISNULL(PP.LAST_NAME,'') +', '+ ISNULL(PP.MIDDLE_NAME,'') +' '+ ISNULL(PP.FIRST_NAME,'') else null END AS FBO_CO&#xD;&#xA;   FROM SGT_PAYMENT_HISTORY_DETAIL  PHD WITH(NOLOCK)&#xD;&#xA;  INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)  &#xD;&#xA;   ON PHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID &#xD;&#xA;  INNER JOIN SGT_PAYEE_ACCOUNT PA WITH(NOLOCK)  &#xD;&#xA;   ON PHH.PAYEE_ACCOUNT_ID=PA.PAYEE_ACCOUNT_ID  &#xD;&#xA;  INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) &#xD;&#xA;   ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID &#xD;&#xA;  INNER JOIN SGT_PAYMENT_SCHEDULE BS WITH(NOLOCK) &#xD;&#xA;   ON PHH.PAYMENT_SCHEDULE_ID = BS.PAYMENT_SCHEDULE_ID &#xD;&#xA;   LEFT OUTER JOIN &#xD;&#xA;   (Select *  from #temp2 WITH(NOLOCK)) as ACH ON ACH.PAYEE_ACCOUNT_ID=PA.PAYEE_ACCOUNT_ID&#xD;&#xA;  LEFT OUTER JOIN SGT_PERSON PP WITH(NOLOCK) ON PP.PERSON_ID=PA.PAYEE_PERSLINK_ID&#xD;&#xA;  LEFT OUTER JOIN SGT_PERSON P WITH(NOLOCK)  ON PHH.PERSON_ID = P.PERSON_ID&#xD;&#xA;  LEFT OUTER JOIN SGT_ORGANIZATION O WITH(NOLOCK)  ON PHH.ORG_ID = O.ORG_ID&#xD;&#xA;  LEFT OUTER JOIN SGT_ORG_CONTACT_ADDRESS OCA WITH(NOLOCK)  ON O.PRIMARY_ADDRESS_ID=OCA.CONTACT_ORG_ADDRESS_ID&#xD;&#xA;  LEFT OUTER JOIN (SELECT P.PERSON_ID, --PA1.PERSON_ADDRESS_ID,PA2.PERSON_ADDRESS_ID,PA3.PERSON_ADDRESS_ID,PA4.PERSON_ADDRESS_ID,&#xD;&#xA;      PA4.ADDR_LINE_1, PA4.ADDR_LINE_2,PA4.ADDR_CITY,PA4.ADDR_STATE_ID,PA4.ADDR_STATE_VALUE,PA4.ADDR_COUNTRY_ID,PA4.ADDR_COUNTRY_VALUE&#xD;&#xA;      ,PA4.ADDR_ZIP_CODE,PA4.ADDR_ZIP_4_CODE, PA4.FOREIGN_PROVINCE,PA4.FOREIGN_POSTAL_CODE &#xD;&#xA;    FROM SGT_PERSON P WITH(NOLOCK) &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA1 WITH(NOLOCK)   ON P.PERSON_ID  = PA1.PERSON_ID  AND PA1.ADDRESS_TYPE_VALUE = 'PERM'  AND &#xD;&#xA;      @PAYMENTDATE BETWEEN PA1.START_DATE AND IsNull(PA1.END_DATE, '99991231')&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA2 WITH(NOLOCK)  ON P.PERSON_ID  = PA2.PERSON_ID AND PA2.ADDRESS_TYPE_VALUE = 'TEMP' AND&#xD;&#xA;      @PAYMENTDATE BETWEEN PA2.START_DATE AND IsNull(PA2.END_DATE, '99991231')&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA3 WITH(NOLOCK)  ON P.PERSON_ID  = PA3.PERSON_ID AND PA3.ADDRESS_TYPE_VALUE = 'PAYM' AND&#xD;&#xA;      @PAYMENTDATE BETWEEN PA3.START_DATE AND IsNull(PA3.END_DATE, '99991231')&#xD;&#xA;Left Outer Join SGT_PERSON_ADDRESS PA4 WITH(NOLOCK) On COALESCE(PA1.PERSON_ADDRESS_ID, PA2.PERSON_ADDRESS_ID, PA3.PERSON_ADDRESS_ID) = PA4.PERSON_ADDRESS_ID&#xD;&#xA;) AS PERADDR ON PERADDR.PERSON_ID=PHH.PERSON_ID&#xD;&#xA;           &#xD;&#xA;  WHERE PHH.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID&#xD;&#xA;   AND (ACH.PAYEE_ACCOUNT_ID IS  NULL  or ach.Pre_note_flag = 'Y' )&#xD;&#xA;   AND (PIT.ALLOW_ROLLOVER_CODE_VALUE &lt;&gt; 'CRET' OR PIT.ITEM_TYPE_CODE in ('ITEM215','ITEM216','ITEM218','ITEM219'))&#xD;&#xA;   and BENEFIT_OPTION_VALUE IN ('REFD', 'RGRD', 'AURD')&#xD;&#xA; ) AS TEMP&#xD;&#xA;GROUP BY PAYMENT_HISTORY_HEADER_ID,PERSON_ID,ORG_ID,PAYEE_ACCOUNT_ID,CHECK_MESSAGE,&#xD;&#xA; PAYMENT_METHOD_ID,PAYMENT_METHOD_VALUE,&#xD;&#xA; DISTRIBUTION_STATUS_ID,&#xD;&#xA; DISTRIBUTION_STATUS_VALUE,&#xD;&#xA; RECIPIENT_NAME,&#xD;&#xA; ADDR_LINE_1,ADDR_LINE_2,&#xD;&#xA; CITY,STATE_ID,STATE_VALUE,COUNTRY_ID,COUNTRY_VALUE,&#xD;&#xA; ZIP_CODE,ZIP_4_CODE,FOREIGN_PROVINCE,FOREIGN_POSTAL_CODE,FBO_CO&#xD;&#xA;HAVING SUM(AMOUNT)&gt;0&#xD;&#xA;ORDER BY PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#xD;&#xA;Select @lastCheckId   = @@Identity&#xD;&#xA;&#xD;&#xA;Select @CHECKNO = CHECK_NUMBER from &#xD;&#xA;SGT_PAYMENT_HISTORY_DISTRIBUTION WITH(NOLOCK) &#xD;&#xA;where Payment_history_distribution_id = @lastCheckId&#xD;&#xA;&#xD;&#xA;If @CHECKNO is not null begin&#xD;&#xA; UPDATE SGT_PAYMENT_CHECK_BOOK SET LAST_CHECK_NUMBER = @CHECKNO ,MODIFIED_BY='PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid),MODIFIED_DATE=GETDATE(),&#xD;&#xA; UPDATE_SEQ = UPDATE_SEQ+1&#xD;&#xA; WHERE CHECK_BOOK_ID = @CHECKBOOKID&#xD;&#xA;end&#xD;&#xA;&#xD;&#xA;--------&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;  DB DC Transfer - Special Election  &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#xD;&#xA;&#xD;&#xA;INSERT INTO SGT_PAYMENT_HISTORY_DISTRIBUTION(PAYMENT_HISTORY_HEADER_ID, PAYMENT_METHOD_ID, PAYMENT_METHOD_VALUE, &#xD;&#xA;CHECK_MESSAGE, DISTRIBUTION_STATUS_ID, DISTRIBUTION_STATUS_VALUE, NET_AMOUNT, CHECK_NUMBER, &#xD;&#xA;OLD_DISTRIBUTION_ID, RECIPIENT_NAME, FBO_CO, ADDR_LINE_1, ADDR_LINE_2, ADDR_CITY, ADDR_STATE_ID,&#xD;&#xA;ADDR_STATE_VALUE, ADDR_COUNTRY_ID, ADDR_COUNTRY_VALUE, &#xD;&#xA;ADDR_ZIP_CODE, ADDR_ZIP_4_CODE, FOREIGN_PROVINCE, FOREIGN_POSTAL_CODE, BANK_NAME, ROUTING_NUMBER,&#xD;&#xA;ACCOUNT_TYPE_ID, ACCOUNT_TYPE_VALUE, ACCOUNT_NUMBER, PERSON_ID, ORG_ID, CREATED_BY, CREATED_DATE, &#xD;&#xA;MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)&#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA; PAYMENT_HISTORY_HEADER_ID,PAYMENT_METHOD_ID,PAYMENT_METHOD_VALUE,&#xD;&#xA; CHECK_MESSAGE,DISTRIBUTION_STATUS_ID,DISTRIBUTION_STATUS_VALUE,&#xD;&#xA; SUM(AMOUNT) AS NET_AMOUNT,&#xD;&#xA; NULL AS CHECK_NUMBER,&#xD;&#xA; NULL AS OLD_DISTRIBUTION_ID,RECIPIENT_NAME,&#xD;&#xA; FBO_CO AS FBO_CO, ADDR_LINE_1,ADDR_LINE_2,&#xD;&#xA; CITY,STATE_ID,STATE_VALUE,COUNTRY_ID,COUNTRY_VALUE,&#xD;&#xA; ZIP_CODE,ZIP_4_CODE,FOREIGN_PROVINCE,FOREIGN_POSTAL_CODE,&#xD;&#xA; NULL AS BANK_NAME,NULL AS ROUTING_NUMBER,&#xD;&#xA; 211 AS ACCOUNT_TYPE_ID,NULL AS ACCOUNT_TYPE_VALUE,NULL AS ACCOUNT_NUMBER,&#xD;&#xA; PERSON_ID,ORG_ID,'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) AS CREATED_BY,GETDATE() AS CREATED_DATE,&#xD;&#xA; 'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) AS MODIFIED_BY,GETDATE() AS MODIFIED_DATE,0 AS UPDATE_SEQ  &#xD;&#xA;FROM &#xD;&#xA; (&#xD;&#xA; SELECT PHH.PAYMENT_HISTORY_HEADER_ID, PHH.PERSON_ID,PHH.ORG_ID,PHH.PAYEE_ACCOUNT_ID,BS.CHECK_MESSAGE,&#xD;&#xA;   2504 AS PAYMENT_METHOD_ID,&#xD;&#xA;  'VNPT' AS PAYMENT_METHOD_VALUE,&#xD;&#xA;  2505 AS DISTRIBUTION_STATUS_ID,&#xD;&#xA;  'COTS' AS DISTRIBUTION_STATUS_VALUE,&#xD;&#xA;  CASE WHEN PHH.person_id IS NOT NULL  THEN  ISNULL(P.FIRST_NAME,'') +' '+ ISNULL(P.MIDDLE_NAME,'') +' '+ ISNULL(P.LAST_NAME,'') else O.ORG_CODE+','+O.ORG_NAME END AS RECIPIENT_NAME, &#xD;&#xA;  PHD.AMOUNT*PIT.ITEM_TYPE_DIRECTION AS AMOUNT,  &#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_LINE_1 ELSE OCA.ADDR_LINE_1 END AS ADDR_LINE_1,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_LINE_2 ELSE OCA.ADDR_LINE_2 END AS ADDR_LINE_2,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_CITY ELSE OCA.CITY END AS CITY,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_STATE_ID ELSE OCA.STATE_ID END AS STATE_ID,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_STATE_VALUE ELSE OCA.STATE_VALUE END AS STATE_VALUE,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_COUNTRY_ID ELSE OCA.COUNTRY_ID END AS COUNTRY_ID,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_COUNTRY_VALUE ELSE OCA.COUNTRY_VALUE END AS COUNTRY_VALUE,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_ZIP_CODE ELSE OCA.ZIP_CODE END AS ZIP_CODE,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_ZIP_4_CODE ELSE OCA.ZIP_4_CODE END AS ZIP_4_CODE,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.FOREIGN_PROVINCE ELSE OCA.FOREIGN_PROVINCE END AS FOREIGN_PROVINCE,&#xD;&#xA;  CASE WHEN PHH.PERSON_ID IS NOT NULL THEN PERADDR.FOREIGN_POSTAL_CODE ELSE OCA.FOREIGN_POSTAL_CODE END AS FOREIGN_POSTAL_CODE,&#xD;&#xA;  case when PA.BENEFIT_OPTION_VALUE IN ('SPEL') AND PHH.ORG_ID IS NOT NULL&#xD;&#xA;     and (PA.RHIC_EE_AMOUNT_REFUND_FLAG is null or PA.RHIC_EE_AMOUNT_REFUND_FLAG='N')&#xD;&#xA;     then ISNULL(PP.LAST_NAME,'') +', '+ ISNULL(PP.MIDDLE_NAME,'') +' '+ ISNULL(PP.FIRST_NAME,'') else null END AS FBO_CO&#xD;&#xA;   FROM SGT_PAYMENT_HISTORY_DETAIL  PHD WITH(NOLOCK)&#xD;&#xA;  INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)  &#xD;&#xA;   ON PHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID &#xD;&#xA;  INNER JOIN SGT_PAYEE_ACCOUNT PA WITH(NOLOCK)  &#xD;&#xA;   ON PHH.PAYEE_ACCOUNT_ID=PA.PAYEE_ACCOUNT_ID  &#xD;&#xA;  INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) &#xD;&#xA;   ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID &#xD;&#xA;  INNER JOIN SGT_PAYMENT_SCHEDULE BS WITH(NOLOCK) &#xD;&#xA;   ON PHH.PAYMENT_SCHEDULE_ID = BS.PAYMENT_SCHEDULE_ID &#xD;&#xA;   LEFT OUTER JOIN &#xD;&#xA;   (Select *  from #temp2 WITH(NOLOCK)) as ACH ON ACH.PAYEE_ACCOUNT_ID=PA.PAYEE_ACCOUNT_ID&#xD;&#xA;  LEFT OUTER JOIN SGT_PERSON PP WITH(NOLOCK) ON PP.PERSON_ID=PA.PAYEE_PERSLINK_ID&#xD;&#xA;  LEFT OUTER JOIN SGT_PERSON P WITH(NOLOCK)  ON PHH.PERSON_ID = P.PERSON_ID&#xD;&#xA;  LEFT OUTER JOIN SGT_ORGANIZATION O WITH(NOLOCK)  ON PHH.ORG_ID = O.ORG_ID&#xD;&#xA;  LEFT OUTER JOIN SGT_ORG_CONTACT_ADDRESS OCA WITH(NOLOCK)  ON O.PRIMARY_ADDRESS_ID=OCA.CONTACT_ORG_ADDRESS_ID&#xD;&#xA;  LEFT OUTER JOIN (SELECT P.PERSON_ID, --PA1.PERSON_ADDRESS_ID,PA2.PERSON_ADDRESS_ID,PA3.PERSON_ADDRESS_ID,PA4.PERSON_ADDRESS_ID,&#xD;&#xA;      PA4.ADDR_LINE_1, PA4.ADDR_LINE_2,PA4.ADDR_CITY,PA4.ADDR_STATE_ID,PA4.ADDR_STATE_VALUE,PA4.ADDR_COUNTRY_ID,PA4.ADDR_COUNTRY_VALUE&#xD;&#xA;      ,PA4.ADDR_ZIP_CODE,PA4.ADDR_ZIP_4_CODE, PA4.FOREIGN_PROVINCE,PA4.FOREIGN_POSTAL_CODE &#xD;&#xA;    FROM SGT_PERSON P WITH(NOLOCK) &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA1 WITH(NOLOCK)   ON P.PERSON_ID  = PA1.PERSON_ID  AND PA1.ADDRESS_TYPE_VALUE = 'PERM'  AND &#xD;&#xA;      @PAYMENTDATE BETWEEN PA1.START_DATE AND IsNull(PA1.END_DATE, '99991231')&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA2 WITH(NOLOCK)  ON P.PERSON_ID  = PA2.PERSON_ID AND PA2.ADDRESS_TYPE_VALUE = 'TEMP' AND&#xD;&#xA;      @PAYMENTDATE BETWEEN PA2.START_DATE AND IsNull(PA2.END_DATE, '99991231')&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA3 WITH(NOLOCK)  ON P.PERSON_ID  = PA3.PERSON_ID AND PA3.ADDRESS_TYPE_VALUE = 'PAYM' AND&#xD;&#xA;      @PAYMENTDATE BETWEEN PA3.START_DATE AND IsNull(PA3.END_DATE, '99991231')&#xD;&#xA;Left Outer Join SGT_PERSON_ADDRESS PA4 WITH(NOLOCK) On COALESCE(PA1.PERSON_ADDRESS_ID, PA2.PERSON_ADDRESS_ID, PA3.PERSON_ADDRESS_ID) = PA4.PERSON_ADDRESS_ID&#xD;&#xA;) AS PERADDR ON PERADDR.PERSON_ID=PHH.PERSON_ID&#xD;&#xA;           &#xD;&#xA;  WHERE PHH.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID&#xD;&#xA;   AND (ACH.PAYEE_ACCOUNT_ID IS  NULL  or ach.Pre_note_flag = 'Y' )&#xD;&#xA;   AND (PIT.ALLOW_ROLLOVER_CODE_VALUE &lt;&gt; 'CRET' OR PIT.ITEM_TYPE_CODE in ('ITEM2','ITEM6','ITEM6','ITEM18','ITEM452','ITEM3','ITEM8','ITEM19'))&#xD;&#xA;   and BENEFIT_OPTION_VALUE IN ('SPEL')&#xD;&#xA; ) AS TEMP&#xD;&#xA;GROUP BY PAYMENT_HISTORY_HEADER_ID,PERSON_ID,ORG_ID,PAYEE_ACCOUNT_ID,CHECK_MESSAGE,&#xD;&#xA; PAYMENT_METHOD_ID,PAYMENT_METHOD_VALUE,&#xD;&#xA; DISTRIBUTION_STATUS_ID,&#xD;&#xA; DISTRIBUTION_STATUS_VALUE,&#xD;&#xA; RECIPIENT_NAME,&#xD;&#xA; ADDR_LINE_1,ADDR_LINE_2,&#xD;&#xA; CITY,STATE_ID,STATE_VALUE,COUNTRY_ID,COUNTRY_VALUE,&#xD;&#xA; ZIP_CODE,ZIP_4_CODE,FOREIGN_PROVINCE,FOREIGN_POSTAL_CODE,FBO_CO&#xD;&#xA;HAVING SUM(AMOUNT)&gt;0&#xD;&#xA;ORDER BY PAYMENT_HISTORY_HEADER_ID">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
        <parameter ID="@PAYMENTSCHEDULEID" sfwDataType="int" />
        <parameter ID="@batchscheduleid" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="CreateRolloverCheckACHHistoryForPayees" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="-------------------------------------------------------------------------&#xD;&#xA;--entPaymentHistoryDistribution.CreateRolloverCheckACHHistoryForPayees&#xD;&#xA;-------------------------------------------------------------------------&#xD;&#xA;-- Rollover Check Creation Part is moved to Create Check History Query for PIR 8891&#xD;&#xA;-------------------------------------------------------------------------&#xD;&#xA;INSERT INTO SGT_PAYMENT_HISTORY_DISTRIBUTION&#xD;&#xA;(&#xD;&#xA;PAYMENT_HISTORY_HEADER_ID, PAYMENT_METHOD_ID, PAYMENT_METHOD_VALUE, &#xD;&#xA;CHECK_MESSAGE, DISTRIBUTION_STATUS_ID, DISTRIBUTION_STATUS_VALUE, NET_AMOUNT, CHECK_NUMBER, &#xD;&#xA;OLD_DISTRIBUTION_ID, RECIPIENT_NAME, FBO_CO, ADDR_LINE_1, ADDR_LINE_2, ADDR_CITY, ADDR_STATE_ID, ADDR_STATE_VALUE, &#xD;&#xA;ADDR_COUNTRY_ID, ADDR_COUNTRY_VALUE, ADDR_ZIP_CODE, ADDR_ZIP_4_CODE, FOREIGN_PROVINCE, FOREIGN_POSTAL_CODE, &#xD;&#xA;BANK_NAME, ROUTING_NUMBER, ACCOUNT_TYPE_ID, ACCOUNT_TYPE_VALUE, ACCOUNT_NUMBER, &#xD;&#xA;PERSON_ID, ORG_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA;PAYMENT_HISTORY_HEADER_ID, PAYMENT_METHOD_ID, PAYMENT_METHOD_VALUE, CHECK_MESSAGE,&#xD;&#xA;DISTRIBUTION_STATUS_ID, DISTRIBUTION_STATUS_VALUE, NET_AMOUNT, &#xD;&#xA;CHECK_NUMBER,&#xD;&#xA;NULL AS OLD_DISTRIBUTION_ID, &#xD;&#xA;RECIPIENT_NAME, FBO_CO, ADDR_LINE_1, ADDR_LINE_2, ADDR_CITY, ADDR_STATE_ID, &#xD;&#xA;ADDR_STATE_VALUE, ADDR_COUNTRY_ID, ADDR_COUNTRY_VALUE, ADDR_ZIP_CODE, ADDR_ZIP_4_CODE,&#xD;&#xA;FOREIGN_PROVINCE, FOREIGN_POSTAL_CODE, BANK_NAME, ROUTING_NUMBER, &#xD;&#xA;ACCOUNT_TYPE_ID, ACCOUNT_TYPE_VALUE, ACCOUNT_NUMBER, PERSON_ID, ORG_ID, CREATED_BY, &#xD;&#xA;CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ  &#xD;&#xA;FROM (&#xD;&#xA;&#xD;&#xA;SELECT  PAYMENT.PAYMENT_HISTORY_HEADER_ID,PAYMENT.PERSON_ID,PAYMENT.ROLLOVER_ORG_ID as ORG_ID,PAYMENT.PAYEE_ACCOUNT_ID,&#xD;&#xA;            PAYMENT.AMOUNT AS NET_AMOUNT,PAYMENT.CHECK_MESSAGE,&#xD;&#xA;             2504 AS PAYMENT_METHOD_ID,&#xD;&#xA;            'RACH' AS PAYMENT_METHOD_VALUE,&#xD;&#xA;            2505 AS DISTRIBUTION_STATUS_ID,&#xD;&#xA;            'ROTS' AS DISTRIBUTION_STATUS_VALUE,&#xD;&#xA;   O.ORG_NAME AS RECIPIENT_NAME,&#xD;&#xA;            'FBO:'+isnull(PPSN.FIRST_NAME,'') +', '+ isnull(PPSN.MIDDLE_NAME,'') +' '+ isnull(PPSN.LAST_NAME,'') + ' A/C NO: '+ isnull(PARD.ACCOUNT_NUMBER,'') AS FBO_CO,&#xD;&#xA;            OB.BANK_ORG_ID,&#xD;&#xA;   NULL AS CHECK_NUMBER,&#xD;&#xA;            BANK.ORG_NAME AS BANK_NAME,&#xD;&#xA;            BANK.ROUTING_NO AS ROUTING_NUMBER,&#xD;&#xA;            OB.ACCOUNT_TYPE_ID, &#xD;&#xA;            OB.ACCOUNT_TYPE_VALUE ,&#xD;&#xA;            OB.ACCOUNT_NO AS ACCOUNT_NUMBER,&#xD;&#xA;            CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_LINE_1 END AS ADDR_LINE_1 ,&#xD;&#xA;            CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_LINE_2 END AS ADDR_LINE_2 ,&#xD;&#xA;            CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_CITY END AS  ADDR_CITY ,&#xD;&#xA;            CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_STATE_ID END AS ADDR_STATE_ID ,&#xD;&#xA;            CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_STATE_VALUE END AS ADDR_STATE_VALUE ,&#xD;&#xA;            CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_COUNTRY_ID END AS ADDR_COUNTRY_ID,&#xD;&#xA;            CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_COUNTRY_VALUE END AS ADDR_COUNTRY_VALUE,&#xD;&#xA;            CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_ZIP_CODE END AS ADDR_ZIP_CODE,&#xD;&#xA;            CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_ZIP_4_CODE END AS ADDR_ZIP_4_CODE,&#xD;&#xA;            CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.FOREIGN_PROVINCE END AS FOREIGN_PROVINCE,&#xD;&#xA;            CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.FOREIGN_POSTAL_CODE END AS FOREIGN_POSTAL_CODE,&#xD;&#xA;            'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) AS  CREATED_BY ,GETDATE() AS CREATED_DATE,&#xD;&#xA;            'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) AS  MODIFIED_BY ,GETDATE() AS MODIFIED_DATE,0 UPDATE_SEQ&#xD;&#xA;      FROM&#xD;&#xA;      (&#xD;&#xA;            SELECT PHH.PAYMENT_HISTORY_HEADER_ID,PHH.PERSON_ID,PHH.ORG_ID,&#xD;&#xA;   PHH.PAYEE_ACCOUNT_ID,PHH.ORG_ID as ROLLOVER_ORG_ID,   -- &#xD;&#xA;            PS.CHECK_MESSAGE, SUM(PHD.AMOUNT*PIT.ITEM_TYPE_DIRECTION) AS AMOUNT&#xD;&#xA;            FROM SGT_PAYMENT_HISTORY_DETAIL  PHD WITH(NOLOCK) &#xD;&#xA;            INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)  &#xD;&#xA;                  ON PHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID &#xD;&#xA;            INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) &#xD;&#xA;                  ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID &#xD;&#xA;            INNER JOIN SGT_PAYMENT_SCHEDULE PS WITH(NOLOCK)  ON PS.PAYMENT_SCHEDULE_ID=PHH.PAYMENT_SCHEDULE_ID&#xD;&#xA;            WHERE PHH.PAYMENT_SCHEDULE_ID=@PAYMENTSCHEDULEID&#xD;&#xA;            AND PIT.ALLOW_ROLLOVER_CODE_VALUE = 'CRET'&#xD;&#xA;           GROUP BY  PHH.PAYMENT_HISTORY_HEADER_ID,PHH.PERSON_ID,PHH.ORG_ID,PHH.PAYEE_ACCOUNT_ID,PHD.ROLLOVER_ORG_ID,PS.CHECK_MESSAGE&#xD;&#xA;      ) AS PAYMENT&#xD;&#xA;      INNER JOIN SGT_PAYEE_ACCOUNT_ROLLOVER_DETAIL PARD WITH(NOLOCK) &#xD;&#xA;  ON PARD.PAYEE_ACCOUNT_ID = PAYMENT.PAYEE_ACCOUNT_ID AND PARD.ROLLOVER_ORG_ID = PAYMENT.ROLLOVER_ORG_ID&#xD;&#xA;      INNER JOIN SGT_ORG_BANK OB WITH(NOLOCK)  ON PARD.ROLLOVER_ORG_ID = OB.ORG_ID      &#xD;&#xA;       AND OB.USAGE_VALUE = 'DEP' AND OB.STATUS_VALUE = 'ACTV'&#xD;&#xA;      LEFT OUTER JOIN SGT_PERSON P WITH(NOLOCK)  ON PAYMENT.PERSON_ID = P.PERSON_ID&#xD;&#xA;      LEFT OUTER JOIN SGT_PAYEE_ACCOUNT PAACT WITH(NOLOCK) ON PAYMENT.PAYEE_ACCOUNT_ID = PAACT.PAYEE_ACCOUNT_ID&#xD;&#xA;      LEFT OUTER JOIN SGT_PERSON PPSN WITH(NOLOCK) ON  PAACT.PAYEE_PERSLINK_ID = PPSN.PERSON_ID&#xD;&#xA;      LEFT OUTER JOIN SGT_ORGANIZATION BANK WITH(NOLOCK)  ON BANK.ORG_ID = OB.BANK_ORG_ID  &#xD;&#xA;      LEFT OUTER JOIN SGT_ORGANIZATION O WITH(NOLOCK)  ON O.ORG_ID = PARD.ROLLOVER_ORG_ID  &#xD;&#xA;      LEFT OUTER JOIN (SELECT  P.PERSON_ID, CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;                   CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;                                    THEN PA2.ADDR_LINE_1  &#xD;&#xA;                          WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;                                    THEN PA1.ADDR_LINE_1  END&#xD;&#xA;                        ELSE  PA3.ADDR_LINE_1 END&#xD;&#xA;                  AS ADDR_LINE_1,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;                   CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;                                    THEN PA2.ADDR_LINE_2  &#xD;&#xA;                          WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;                                    THEN PA1.ADDR_LINE_2  END&#xD;&#xA;                        ELSE  PA3.ADDR_LINE_2 END&#xD;&#xA;                  AS ADDR_LINE_2,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;                   CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;                                    THEN PA2.ADDR_CITY  &#xD;&#xA;                          WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;                                    THEN PA1.ADDR_CITY  END&#xD;&#xA;                        ELSE  PA3.ADDR_CITY END&#xD;&#xA;                  AS ADDR_CITY,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;                   CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;                                    THEN PA2.ADDR_STATE_ID  &#xD;&#xA;                          WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;                                    THEN PA1.ADDR_STATE_ID  END&#xD;&#xA;                        ELSE  PA3.ADDR_STATE_ID END&#xD;&#xA;                  AS ADDR_STATE_ID,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;                   CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;                                    THEN PA2.ADDR_STATE_VALUE  &#xD;&#xA;                          WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;                                    THEN PA1.ADDR_STATE_VALUE  END&#xD;&#xA;                        ELSE  PA3.ADDR_STATE_VALUE END&#xD;&#xA;                  AS ADDR_STATE_VALUE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;                   CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;                                    THEN PA2.ADDR_COUNTRY_ID &#xD;&#xA;                          WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;                                    THEN PA1.ADDR_COUNTRY_ID  END&#xD;&#xA;                        ELSE  PA3.ADDR_COUNTRY_ID END&#xD;&#xA;                  AS ADDR_COUNTRY_ID,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;                   CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;                                    THEN PA2.ADDR_COUNTRY_VALUE  &#xD;&#xA;                          WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;                                    THEN PA1.ADDR_COUNTRY_VALUE  END&#xD;&#xA;                        ELSE  PA3.ADDR_COUNTRY_VALUE END&#xD;&#xA;                  AS ADDR_COUNTRY_VALUE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;                   CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;                                    THEN PA2.ADDR_ZIP_CODE &#xD;&#xA;                          WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;                                    THEN PA1.ADDR_ZIP_CODE  END&#xD;&#xA;                        ELSE  PA3.ADDR_ZIP_CODE END&#xD;&#xA;                  AS ADDR_ZIP_CODE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;                   CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;                                    THEN PA2.ADDR_ZIP_4_CODE  &#xD;&#xA;                          WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;                                    THEN PA1.ADDR_ZIP_4_CODE  END&#xD;&#xA;                        ELSE  PA3.ADDR_ZIP_4_CODE END&#xD;&#xA;                  AS ADDR_ZIP_4_CODE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;                   CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;                                    THEN PA2.FOREIGN_PROVINCE  &#xD;&#xA;                          WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;                                    THEN PA1.FOREIGN_PROVINCE  END&#xD;&#xA;                        ELSE  PA3.FOREIGN_PROVINCE END&#xD;&#xA;                  AS FOREIGN_PROVINCE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;                   CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;                                    THEN PA2.FOREIGN_POSTAL_CODE  &#xD;&#xA;                          WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;                                    THEN PA1.FOREIGN_POSTAL_CODE  END&#xD;&#xA;                        ELSE  PA3.FOREIGN_POSTAL_CODE END&#xD;&#xA;                  AS FOREIGN_POSTAL_CODE&#xD;&#xA;FROM SGT_PERSON P WITH(NOLOCK) &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA1 WITH(NOLOCK)   ON P.PERSON_ID  = PA1.PERSON_ID  AND PA1.ADDRESS_TYPE_VALUE = 'PERM'  AND &#xD;&#xA;        @PAYMENTDATE BETWEEN PA1.START_DATE AND &#xD;&#xA;        (CASE WHEN PA1.END_DATE IS NULL &#xD;&#xA;             THEN '99991231' ELSE PA1.END_DATE END)&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA2 WITH(NOLOCK)  ON P.PERSON_ID  = PA2.PERSON_ID AND PA2.ADDRESS_TYPE_VALUE = 'TEMP' AND&#xD;&#xA;        @PAYMENTDATE BETWEEN PA2.START_DATE AND &#xD;&#xA;        (CASE WHEN PA2.END_DATE IS NULL &#xD;&#xA;             THEN '99991231' ELSE PA2.END_DATE END)&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA3 WITH(NOLOCK)  ON P.PERSON_ID  = PA3.PERSON_ID AND PA3.ADDRESS_TYPE_VALUE = 'PAYM' AND&#xD;&#xA;        @PAYMENTDATE BETWEEN PA3.START_DATE AND &#xD;&#xA;        (CASE WHEN PA3.END_DATE IS NULL &#xD;&#xA;             THEN '99991231' ELSE PA3.END_DATE END)) AS PERADDR ON PERADDR.PERSON_ID=PAYMENT.PERSON_ID&#xD;&#xA;WHERE  PARD.STATUS_VALUE = 'ACTV' ) as RACH&#xD;&#xA;ORDER BY PAYMENT_HISTORY_HEADER_ID">
      <parameters>
        <parameter ID="@PAYMENTSCHEDULEID" sfwDataType="int" />
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
        <parameter ID="@batchscheduleid" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="CreateACHHistoryForPayees" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="INSERT INTO SGT_PAYMENT_HISTORY_DISTRIBUTION&#xD;&#xA;(&#xD;&#xA;PAYMENT_HISTORY_HEADER_ID, PAYMENT_METHOD_ID, PAYMENT_METHOD_VALUE, CHECK_MESSAGE, &#xD;&#xA;DISTRIBUTION_STATUS_ID, DISTRIBUTION_STATUS_VALUE, NET_AMOUNT, CHECK_NUMBER, OLD_DISTRIBUTION_ID, RECIPIENT_NAME,&#xD;&#xA;FBO_CO, ADDR_LINE_1, ADDR_LINE_2, ADDR_CITY, ADDR_STATE_ID, ADDR_STATE_VALUE, ADDR_COUNTRY_ID, ADDR_COUNTRY_VALUE, &#xD;&#xA;ADDR_ZIP_CODE, ADDR_ZIP_4_CODE, FOREIGN_PROVINCE, FOREIGN_POSTAL_CODE, BANK_NAME, ROUTING_NUMBER,&#xD;&#xA;ACCOUNT_TYPE_ID, ACCOUNT_TYPE_VALUE, ACCOUNT_NUMBER, PERSON_ID, ORG_ID,&#xD;&#xA;CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ, PAYEE_ACCOUNT_ACH_DETAIL_ID&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;SELECT&#xD;&#xA;PAYMENT_HISTORY_HEADER_ID, PAYMENT_METHOD_ID, PAYMENT_METHOD_VALUE, CHECK_MESSAGE,&#xD;&#xA;DISTRIBUTION_STATUS_ID, DISTRIBUTION_STATUS_VALUE, NET_AMOUNT, CHECK_NUMBER, OLD_DISTRIBUTION_ID, &#xD;&#xA;RECIPIENT_NAME, FBO_CO, ADDR_LINE_1, ADDR_LINE_2, ADDR_CITY, ADDR_STATE_ID, ADDR_STATE_VALUE, &#xD;&#xA;ADDR_COUNTRY_ID, ADDR_COUNTRY_VALUE, ADDR_ZIP_CODE, ADDR_ZIP_4_CODE, FOREIGN_PROVINCE, FOREIGN_POSTAL_CODE,&#xD;&#xA;BANK_NAME, ROUTING_NUMBER, ACCOUNT_TYPE_ID, ACCOUNT_TYPE_VALUE, ACCOUNT_NUMBER, PERSON_ID, ORG_ID,&#xD;&#xA;'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) as  CREATED_BY ,getdate() as CREATED_DATE,&#xD;&#xA;'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) as  MODIFIED_BY ,getdate() as MODIFIED_DATE,0 UPDATE_SEQ, PAYEE_ACCOUNT_ACH_DETAIL_ID&#xD;&#xA;FROM (&#xD;&#xA;SELECT      PAYMENT.PAYMENT_HISTORY_HEADER_ID,&#xD;&#xA;&#xD;&#xA;            2504 AS PAYMENT_METHOD_ID,&#xD;&#xA;&#xD;&#xA;            'ACH' AS PAYMENT_METHOD_VALUE,&#xD;&#xA;&#xD;&#xA;            PAYMENT.CHECK_MESSAGE,&#xD;&#xA;&#xD;&#xA;            2505 AS DISTRIBUTION_STATUS_ID,&#xD;&#xA;&#xD;&#xA;            'AOTS' AS DISTRIBUTION_STATUS_VALUE,&#xD;&#xA;&#xD;&#xA;            CASE WHEN isnull(ACH.PARTIAL_AMOUNT,0) &lt;&gt; 0 THEN CASE WHEN payment.amount &lt; ACH.PARTIAL_AMOUNT THEN payment.amount eLSE ACH.PARTIAL_AMOUNT end&#xD;&#xA;&#xD;&#xA;                  ELSE (PAYMENT.AMOUNT*isnull(ACH.PERCENTAGE_OF_NET_AMOUNT,0))/100.00 END AS NET_AMOUNT,         &#xD;&#xA;&#xD;&#xA;            null AS CHECK_NUMBER,&#xD;&#xA;&#xD;&#xA;            NULL AS OLD_DISTRIBUTION_ID,&#xD;&#xA;    CASE WHEN PAYMENT.person_id IS NOT NULL  THEN  ISNULL(P.LAST_NAME,'') +', '+ ISNULL(P.MIDDLE_NAME,'') +' '+ ISNULL(P.FIRST_NAME,'') else O.ORG_CODE+','+O.ORG_NAME END AS RECIPIENT_NAME,             &#xD;&#xA;            FBO_CO,&#xD;&#xA;&#xD;&#xA;   CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_LINE_1 ELSE OCA.ADDR_LINE_1 END AS ADDR_LINE_1,&#xD;&#xA;   CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_LINE_2 ELSE OCA.ADDR_LINE_2 END AS ADDR_LINE_2,&#xD;&#xA;   CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_CITY ELSE OCA.CITY END AS ADDR_CITY,&#xD;&#xA;   CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_STATE_ID ELSE OCA.STATE_ID END AS ADDR_STATE_ID,&#xD;&#xA;   CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_STATE_VALUE ELSE OCA.STATE_VALUE END AS ADDR_STATE_VALUE,&#xD;&#xA;   CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_COUNTRY_ID ELSE OCA.COUNTRY_ID END AS ADDR_COUNTRY_ID,&#xD;&#xA;   CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_COUNTRY_VALUE ELSE OCA.COUNTRY_VALUE END AS ADDR_COUNTRY_VALUE,&#xD;&#xA;   CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_ZIP_CODE ELSE OCA.ZIP_CODE END AS ADDR_ZIP_CODE,&#xD;&#xA;   CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_ZIP_4_CODE ELSE OCA.ZIP_4_CODE END AS ADDR_ZIP_4_CODE,&#xD;&#xA;   CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.FOREIGN_PROVINCE ELSE OCA.FOREIGN_PROVINCE END AS FOREIGN_PROVINCE,&#xD;&#xA;   CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.FOREIGN_POSTAL_CODE ELSE OCA.FOREIGN_POSTAL_CODE END AS FOREIGN_POSTAL_CODE,        &#xD;&#xA;   &#xD;&#xA;            ORG.ORG_NAME as BANK_NAME,&#xD;&#xA;&#xD;&#xA;            ORG.ROUTING_NO as ROUTING_NUMBER,&#xD;&#xA;&#xD;&#xA;            ACH.BANK_ACCOUNT_TYPE_ID as ACCOUNT_TYPE_ID, &#xD;&#xA;&#xD;&#xA;            ACH.BANK_ACCOUNT_TYPE_VALUE as ACCOUNT_TYPE_VALUE,&#xD;&#xA;&#xD;&#xA;            ACH.ACCOUNT_NUMBER as ACCOUNT_NUMBER,&#xD;&#xA;&#xD;&#xA;            PAYMENT.PERSON_ID,PAYMENT.ORG_ID, ACH.PAYEE_ACCOUNT_ACH_DETAIL_ID&#xD;&#xA;&#xD;&#xA;FROM&#xD;&#xA;&#xD;&#xA;      (&#xD;&#xA;            SELECT PHH.PAYMENT_HISTORY_HEADER_ID,SCH.CHECK_MESSAGE,PHH.PERSON_ID,PHH.ORG_ID,PHH.PAYEE_ACCOUNT_ID,SUM(PHD.AMOUNT*PIT.ITEM_TYPE_DIRECTION) AS AMOUNT,&#xD;&#xA;   case when PA.BENEFIT_OPTION_VALUE IN ('DBCT','DBDC','DBTT','SPEL') AND PHH.ORG_ID IS NOT NULL&#xD;&#xA;     and (PA.RHIC_EE_AMOUNT_REFUND_FLAG is null or PA.RHIC_EE_AMOUNT_REFUND_FLAG='N')&#xD;&#xA;     then ISNULL(PAYP.LAST_NAME,'') +', '+ ISNULL(PAYP.MIDDLE_NAME,'') +' '+ ISNULL(PAYP.FIRST_NAME,'') else null END AS FBO_CO,PA.RHIC_EE_AMOUNT_REFUND_FLAG       &#xD;&#xA;            FROM SGT_PAYMENT_HISTORY_DETAIL  PHD&#xD;&#xA;&#xD;&#xA;            INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH  &#xD;&#xA;&#xD;&#xA;                  ON PHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID &#xD;&#xA;&#xD;&#xA;   INNER JOIN SGT_PAYEE_ACCOUNT PA&#xD;&#xA;&#xD;&#xA;      ON PA.PAYEE_ACCOUNT_ID=PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;   &#xD;&#xA;            INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT &#xD;&#xA;&#xD;&#xA;                  ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID &#xD;&#xA;&#xD;&#xA;            INNER JOIN SGT_PAYMENT_SCHEDULE SCH &#xD;&#xA;&#xD;&#xA;                  ON SCH.PAYMENT_SCHEDULE_ID = PHH.PAYMENT_SCHEDULE_ID&#xD;&#xA;&#xD;&#xA;   LEFT OUTER JOIN SGT_PERSON PAYP&#xD;&#xA;&#xD;&#xA;      ON PAYP.PERSON_ID=PA.PAYEE_PERSLINK_ID&#xD;&#xA;&#xD;&#xA;            WHERE PHH.PAYMENT_SCHEDULE_ID=@PAYMENTSCHEDULEID&#xD;&#xA;&#xD;&#xA;            AND (PIT.ALLOW_ROLLOVER_CODE_VALUE &lt;&gt; 'CRET' OR PIT.ITEM_TYPE_CODE in ('ITEM215','ITEM216','ITEM218','ITEM219'))&#xD;&#xA;&#xD;&#xA;            GROUP BY  PHH.PAYMENT_HISTORY_HEADER_ID,PHH.PERSON_ID,PHH.ORG_ID,PHH.PAYEE_ACCOUNT_ID,SCH.CHECK_MESSAGE,&#xD;&#xA;       PA.BENEFIT_OPTION_VALUE,PAYP.LAST_NAME,PAYP.MIDDLE_NAME,PAYP.FIRST_NAME,PA.RHIC_EE_AMOUNT_REFUND_FLAG&#xD;&#xA;&#xD;&#xA;      ) AS PAYMENT&#xD;&#xA;&#xD;&#xA;      INNER JOIN SGT_PAYEE_ACCOUNT_ACH_DETAIL ACH &#xD;&#xA;&#xD;&#xA;            ON ACH.PAYEE_ACCOUNT_ID = PAYMENT.PAYEE_ACCOUNT_ID &#xD;&#xA;&#xD;&#xA;            AND @PAYMENTDATE BETWEEN ACH.ACH_START_DATE AND &#xD;&#xA;&#xD;&#xA;                  (CASE WHEN ACH.ACH_END_DATE IS NULL &#xD;&#xA;&#xD;&#xA;                        THEN '99991231' ELSE ACH.ACH_END_DATE END)&#xD;&#xA;&#xD;&#xA;      LEFT OUTER JOIN SGT_PERSON P  ON PAYMENT.PERSON_ID = P.PERSON_ID&#xD;&#xA;&#xD;&#xA;      LEFT OUTER JOIN SGT_ORGANIZATION O  ON PAYMENT.ORG_ID = O.ORG_ID&#xD;&#xA;&#xD;&#xA;      LEFT OUTER JOIN SGT_ORGANIZATION ORG  ON ACH.BANK_ORG_ID = ORG.ORG_ID&#xD;&#xA;&#xD;&#xA;   LEFT OUTER JOIN SGT_ORG_CONTACT_ADDRESS OCA  ON O.PRIMARY_ADDRESS_ID=OCA.CONTACT_ORG_ADDRESS_ID&#xD;&#xA;&#xD;&#xA;   LEFT OUTER JOIN (SELECT  P.PERSON_ID, CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_LINE_1  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_LINE_1  END&#xD;&#xA;    ELSE  PA3.ADDR_LINE_1 END&#xD;&#xA;   AS ADDR_LINE_1,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_LINE_2  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_LINE_2  END&#xD;&#xA;    ELSE  PA3.ADDR_LINE_2 END&#xD;&#xA;   AS ADDR_LINE_2,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_CITY  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_CITY  END&#xD;&#xA;    ELSE  PA3.ADDR_CITY END&#xD;&#xA;   AS ADDR_CITY,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_STATE_ID  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_STATE_ID  END&#xD;&#xA;    ELSE  PA3.ADDR_STATE_ID END&#xD;&#xA;   AS ADDR_STATE_ID,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_STATE_VALUE  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_STATE_VALUE  END&#xD;&#xA;    ELSE  PA3.ADDR_STATE_VALUE END&#xD;&#xA;   AS ADDR_STATE_VALUE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_COUNTRY_ID &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_COUNTRY_ID  END&#xD;&#xA;    ELSE  PA3.ADDR_COUNTRY_ID END&#xD;&#xA;   AS ADDR_COUNTRY_ID,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_COUNTRY_VALUE  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_COUNTRY_VALUE  END&#xD;&#xA;    ELSE  PA3.ADDR_COUNTRY_VALUE END&#xD;&#xA;   AS ADDR_COUNTRY_VALUE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_ZIP_CODE &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_ZIP_CODE  END&#xD;&#xA;    ELSE  PA3.ADDR_ZIP_CODE END&#xD;&#xA;   AS ADDR_ZIP_CODE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_ZIP_4_CODE  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_ZIP_4_CODE  END&#xD;&#xA;    ELSE  PA3.ADDR_ZIP_4_CODE END&#xD;&#xA;   AS ADDR_ZIP_4_CODE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.FOREIGN_PROVINCE  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.FOREIGN_PROVINCE  END&#xD;&#xA;    ELSE  PA3.FOREIGN_PROVINCE END&#xD;&#xA;   AS FOREIGN_PROVINCE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.FOREIGN_POSTAL_CODE  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.FOREIGN_POSTAL_CODE  END&#xD;&#xA;    ELSE  PA3.FOREIGN_POSTAL_CODE END&#xD;&#xA;   AS FOREIGN_POSTAL_CODE&#xD;&#xA;FROM SGT_PERSON P &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA1   ON P.PERSON_ID  = PA1.PERSON_ID  AND PA1.ADDRESS_TYPE_VALUE = 'PERM'  AND &#xD;&#xA;      @PAYMENTDATE BETWEEN PA1.START_DATE AND &#xD;&#xA;      (CASE WHEN PA1.END_DATE IS NULL &#xD;&#xA;           THEN '99991231' ELSE PA1.END_DATE END)&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA2  ON P.PERSON_ID  = PA2.PERSON_ID AND PA2.ADDRESS_TYPE_VALUE = 'TEMP' AND&#xD;&#xA;      @PAYMENTDATE BETWEEN PA2.START_DATE AND &#xD;&#xA;      (CASE WHEN PA2.END_DATE IS NULL &#xD;&#xA;           THEN '99991231' ELSE PA2.END_DATE END)&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA3  ON P.PERSON_ID  = PA3.PERSON_ID AND PA3.ADDRESS_TYPE_VALUE = 'PAYM' AND&#xD;&#xA;      @PAYMENTDATE BETWEEN PA3.START_DATE AND &#xD;&#xA;      (CASE WHEN PA3.END_DATE IS NULL &#xD;&#xA;           THEN '99991231' ELSE PA3.END_DATE END)) AS PERADDR ON PERADDR.PERSON_ID=PAYMENT.PERSON_ID&#xD;&#xA;&#xD;&#xA;LEFT OUTER JOIN&#xD;&#xA;(&#xD;&#xA; SELECT DISTINCT PAYEE_ACCOUNT_ID FROM &#xD;&#xA;  SGT_PAYMENT_HISTORY_DISTRIBUTION CHK&#xD;&#xA;   INNER JOIN SGT_PAYMENT_HISTORY_HEADER CHKHD&#xD;&#xA;   ON CHK.PAYMENT_HISTORY_HEADER_ID = CHKHD.PAYMENT_HISTORY_HEADER_ID &#xD;&#xA;   WHERE PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID &#xD;&#xA;   AND PAYMENT_METHOD_VALUE = 'CHK'&#xD;&#xA;) AS CHECKSPAID&#xD;&#xA;ON PAYMENT.PAYEE_ACCOUNT_ID  = CHECKSPAID.PAYEE_ACCOUNT_ID &#xD;&#xA;WHERE ACH.PRE_NOTE_FLAG = 'N' AND PRIMARY_ACCOUNT_FLAG = 'Y'&#xD;&#xA;AND CHECKSPAID.PAYEE_ACCOUNT_ID IS NULL&#xD;&#xA;&#xD;&#xA;   &#xD;&#xA;&#xD;&#xA;UNION ALL&#xD;&#xA;&#xD;&#xA;SELECT      PAYMENT.PAYMENT_HISTORY_HEADER_ID,&#xD;&#xA;&#xD;&#xA;            2504 AS PAYMENT_METHOD_ID,&#xD;&#xA;&#xD;&#xA;            'ACH' AS PAYMENT_METHOD_VALUE,&#xD;&#xA;&#xD;&#xA;            PAYMENT.CHECK_MESSAGE,&#xD;&#xA;&#xD;&#xA;            2505 AS DISTRIBUTION_STATUS_ID,&#xD;&#xA;&#xD;&#xA;            'AOTS' AS DISTRIBUTION_STATUS_VALUE,&#xD;&#xA;&#xD;&#xA;            CASE WHEN (CASE WHEN ISNULL(PRIMARY_ACH.PARTIAL_AMOUNT,0) &gt; 0 THEN  case when PAYMENT.AMOUNT &lt;  PRIMARY_ACH.PARTIAL_AMOUNT then 0 Else (PAYMENT.AMOUNT -   isnull(PRIMARY_ACH.PARTIAL_AMOUNT,0)) End  ELSE 0 END) = 0&#xD;&#xA;                  THEN CASE WHEN ISNULL(PRIMARY_ACH.PERCENTAGE_OF_NET_AMOUNT,0) &gt; 0 &#xD;&#xA;       THEN PAYMENT.AMOUNT - &#xD;&#xA;       ROUND((PAYMENT.AMOUNT * isnull(PRIMARY_ACH.PERCENTAGE_OF_NET_AMOUNT,0)/100.00), 2) &#xD;&#xA;      ELSE 0 END&#xD;&#xA;                  ELSE (CASE WHEN ISNULL(PRIMARY_ACH.PARTIAL_AMOUNT,0) &gt; 0 THEN  PAYMENT.AMOUNT -   isnull(PRIMARY_ACH.PARTIAL_AMOUNT,0)  ELSE 0 END) END AS NET_AMOUNT,         &#xD;&#xA;&#xD;&#xA;            null AS CHECK_NUMBER,&#xD;&#xA;&#xD;&#xA;            NULL AS OLD_DISTRIBUTION_ID,&#xD;&#xA;&#xD;&#xA;           CASE WHEN PAYMENT.person_id IS NOT NULL  THEN  ISNULL(P.LAST_NAME,'') +', '+ ISNULL(P.MIDDLE_NAME,'') +' '+ ISNULL(P.FIRST_NAME,'') else O.ORG_CODE+','+O.ORG_NAME END AS RECIPIENT_NAME,             &#xD;&#xA;&#xD;&#xA;            FBO_CO AS FBO_CO,&#xD;&#xA;&#xD;&#xA;  CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_LINE_1 ELSE OCA.ADDR_LINE_1 END AS ADDR_LINE_1,&#xD;&#xA;   CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_LINE_2 ELSE OCA.ADDR_LINE_2 END AS ADDR_LINE_2,&#xD;&#xA;   CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_CITY ELSE OCA.CITY END AS ADDR_CITY,&#xD;&#xA;   CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_STATE_ID ELSE OCA.STATE_ID END AS ADDR_STATE_ID,&#xD;&#xA;   CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_STATE_VALUE ELSE OCA.STATE_VALUE END AS ADDR_STATE_VALUE,&#xD;&#xA;   CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_COUNTRY_ID ELSE OCA.COUNTRY_ID END AS ADDR_COUNTRY_ID,&#xD;&#xA;   CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_COUNTRY_VALUE ELSE OCA.COUNTRY_VALUE END AS ADDR_COUNTRY_VALUE,&#xD;&#xA;   CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_ZIP_CODE ELSE OCA.ZIP_CODE END AS ADDR_ZIP_CODE,&#xD;&#xA;   CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_ZIP_4_CODE ELSE OCA.ZIP_4_CODE END AS ADDR_ZIP_4_CODE,&#xD;&#xA;   CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.FOREIGN_PROVINCE ELSE OCA.FOREIGN_PROVINCE END AS FOREIGN_PROVINCE,&#xD;&#xA;   CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.FOREIGN_POSTAL_CODE ELSE OCA.FOREIGN_POSTAL_CODE END AS FOREIGN_POSTAL_CODE,        &#xD;&#xA;          &#xD;&#xA;            ORG.ORG_NAME as BANK_NAME,&#xD;&#xA;&#xD;&#xA;            ORG.ROUTING_NO as ROUTING_NUMBER,&#xD;&#xA;&#xD;&#xA;            ACH.BANK_ACCOUNT_TYPE_ID as ACCOUNT_TYPE_ID, &#xD;&#xA;&#xD;&#xA;            ACH.BANK_ACCOUNT_TYPE_VALUE as ACCOUNT_TYPE_VALUE,&#xD;&#xA;&#xD;&#xA;            ACH.ACCOUNT_NUMBER as ACCOUNT_NUMBER,&#xD;&#xA;&#xD;&#xA;            PAYMENT.PERSON_ID,PAYMENT.ORG_ID, ACH.PAYEE_ACCOUNT_ACH_DETAIL_ID&#xD;&#xA;&#xD;&#xA;FROM&#xD;&#xA;&#xD;&#xA;      (&#xD;&#xA;&#xD;&#xA;            SELECT PHH.PAYMENT_HISTORY_HEADER_ID,SCH.CHECK_MESSAGE,PHH.PERSON_ID,PHH.ORG_ID,PHH.PAYEE_ACCOUNT_ID,SUM(PHD.AMOUNT*PIT.ITEM_TYPE_DIRECTION) AS AMOUNT,&#xD;&#xA;&#xD;&#xA;   case when PA.BENEFIT_OPTION_VALUE IN ('DBCT','DBDC','DBTT','SPEL') AND PHH.ORG_ID IS NOT NULL&#xD;&#xA;     and (PA.RHIC_EE_AMOUNT_REFUND_FLAG is null or PA.RHIC_EE_AMOUNT_REFUND_FLAG='Y')&#xD;&#xA;     then ISNULL(PAYP.LAST_NAME,'') +', '+ ISNULL(PAYP.MIDDLE_NAME,'') +' '+ ISNULL(PAYP.FIRST_NAME,'') else null END AS FBO_CO ,PA.RHIC_EE_AMOUNT_REFUND_FLAG&#xD;&#xA;            FROM SGT_PAYMENT_HISTORY_DETAIL  PHD &#xD;&#xA;&#xD;&#xA;            INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH  &#xD;&#xA;&#xD;&#xA;                  ON PHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID &#xD;&#xA;&#xD;&#xA;   INNER JOIN SGT_PAYEE_ACCOUNT PA&#xD;&#xA;&#xD;&#xA;      ON PA.PAYEE_ACCOUNT_ID=PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;&#xD;&#xA;            INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT &#xD;&#xA;&#xD;&#xA;                  ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;&#xD;&#xA;            INNER JOIN SGT_PAYMENT_SCHEDULE SCH &#xD;&#xA;&#xD;&#xA;                  ON SCH.PAYMENT_SCHEDULE_ID = PHH.PAYMENT_SCHEDULE_ID &#xD;&#xA;&#xD;&#xA;   LEFT OUTER JOIN SGT_PERSON PAYP&#xD;&#xA;&#xD;&#xA;      ON PAYP.PERSON_ID=PA.PAYEE_PERSLINK_ID&#xD;&#xA;&#xD;&#xA;            WHERE PHH.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID &#xD;&#xA;&#xD;&#xA;            AND (PIT.ALLOW_ROLLOVER_CODE_VALUE &lt;&gt; 'CRET' OR PIT.ITEM_TYPE_CODE in ('ITEM215','ITEM216','ITEM218','ITEM219'))&#xD;&#xA;&#xD;&#xA;            GROUP BY  PHH.PAYMENT_HISTORY_HEADER_ID,PHH.PERSON_ID,PHH.ORG_ID,PHH.PAYEE_ACCOUNT_ID,SCH.CHECK_MESSAGE,&#xD;&#xA;        PA.BENEFIT_OPTION_VALUE,PAYP.LAST_NAME,PAYP.MIDDLE_NAME,PAYP.FIRST_NAME,PA.RHIC_EE_AMOUNT_REFUND_FLAG&#xD;&#xA;&#xD;&#xA;      ) AS PAYMENT&#xD;&#xA;&#xD;&#xA;      INNER JOIN SGT_PAYEE_ACCOUNT_ACH_DETAIL ACH &#xD;&#xA;&#xD;&#xA;            ON ACH.PAYEE_ACCOUNT_ID = PAYMENT.PAYEE_ACCOUNT_ID &#xD;&#xA;&#xD;&#xA;            AND @PAYMENTDATE BETWEEN ACH.ACH_START_DATE AND &#xD;&#xA;&#xD;&#xA;                  (CASE WHEN ACH.ACH_END_DATE IS NULL &#xD;&#xA;&#xD;&#xA;                  THEN '99991231' ELSE ACH.ACH_END_DATE END)&#xD;&#xA;&#xD;&#xA;      INNER JOIN &#xD;&#xA;&#xD;&#xA;      (&#xD;&#xA;&#xD;&#xA;            SELECT  PAYMENTP.PAYEE_ACCOUNT_ID,PAYMENTP.AMOUNT,&#xD;&#xA;&#xD;&#xA;                  ACHP.PERCENTAGE_OF_NET_AMOUNT,&#xD;&#xA;&#xD;&#xA;                  ACHP.PARTIAL_AMOUNT     &#xD;&#xA;&#xD;&#xA;            FROM&#xD;&#xA;&#xD;&#xA;            (&#xD;&#xA;&#xD;&#xA;                  SELECT PHHP.PAYEE_ACCOUNT_ID,SUM(PHDP.AMOUNT*PITP.ITEM_TYPE_DIRECTION) AS AMOUNT&#xD;&#xA;&#xD;&#xA;                  FROM SGT_PAYMENT_HISTORY_DETAIL  PHDP &#xD;&#xA;&#xD;&#xA;                  INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHHP &#xD;&#xA;&#xD;&#xA;                        ON PHDP.PAYMENT_HISTORY_HEADER_ID = PHHP.PAYMENT_HISTORY_HEADER_ID &#xD;&#xA;&#xD;&#xA;                  INNER JOIN SGT_PAYMENT_ITEM_TYPE PITP &#xD;&#xA;&#xD;&#xA;                        ON PHDP.PAYMENT_ITEM_TYPE_ID = PITP.PAYMENT_ITEM_TYPE_ID &#xD;&#xA;&#xD;&#xA;                  WHERE PHHP.PAYMENT_SCHEDULE_ID=@PAYMENTSCHEDULEID&#xD;&#xA;&#xD;&#xA;                  AND (PITP.ALLOW_ROLLOVER_CODE_VALUE &lt;&gt; 'CRET' OR PITP.ITEM_TYPE_CODE in ('ITEM215','ITEM216','ITEM218','ITEM219'))&#xD;&#xA;&#xD;&#xA;                  GROUP BY  PHHP.PAYEE_ACCOUNT_ID&#xD;&#xA;&#xD;&#xA;            ) AS PAYMENTP&#xD;&#xA;&#xD;&#xA;            INNER JOIN SGT_PAYEE_ACCOUNT_ACH_DETAIL ACHP &#xD;&#xA;&#xD;&#xA;                  ON ACHP.PAYEE_ACCOUNT_ID = PAYMENTP.PAYEE_ACCOUNT_ID &#xD;&#xA;&#xD;&#xA;                  AND @PAYMENTDATE BETWEEN ACHP.ACH_START_DATE AND &#xD;&#xA;&#xD;&#xA;                        (CASE WHEN ACHP.ACH_END_DATE IS NULL &#xD;&#xA;&#xD;&#xA;                              THEN '99991231' ELSE ACHP.ACH_END_DATE END)&#xD;&#xA;&#xD;&#xA;            WHERE ACHP.PRE_NOTE_FLAG = 'N' AND ACHP.PRIMARY_ACCOUNT_FLAG = 'Y'&#xD;&#xA;      )&#xD;&#xA;&#xD;&#xA;      AS PRIMARY_ACH &#xD;&#xA;&#xD;&#xA;      ON PAYMENT.PAYEE_ACCOUNT_ID = PRIMARY_ACH.PAYEE_ACCOUNT_ID&#xD;&#xA;&#xD;&#xA;      LEFT OUTER JOIN SGT_PERSON P  ON PAYMENT.PERSON_ID = P.PERSON_ID&#xD;&#xA;&#xD;&#xA;      LEFT OUTER JOIN SGT_ORGANIZATION O  ON PAYMENT.ORG_ID = O.ORG_ID&#xD;&#xA;&#xD;&#xA;      LEFT OUTER JOIN SGT_ORGANIZATION ORG  ON ACH.BANK_ORG_ID = ORG.ORG_ID&#xD;&#xA;&#xD;&#xA;   LEFT OUTER JOIN SGT_ORG_CONTACT_ADDRESS OCA  ON O.PRIMARY_ADDRESS_ID=OCA.CONTACT_ORG_ADDRESS_ID&#xD;&#xA;  LEFT OUTER JOIN (SELECT  P.PERSON_ID, CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_LINE_1  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_LINE_1  END&#xD;&#xA;    ELSE  PA3.ADDR_LINE_1 END&#xD;&#xA;   AS ADDR_LINE_1,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_LINE_2  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_LINE_2  END&#xD;&#xA;    ELSE  PA3.ADDR_LINE_2 END&#xD;&#xA;   AS ADDR_LINE_2,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_CITY  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_CITY  END&#xD;&#xA;    ELSE  PA3.ADDR_CITY END&#xD;&#xA;   AS ADDR_CITY,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_STATE_ID  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_STATE_ID  END&#xD;&#xA;    ELSE  PA3.ADDR_STATE_ID END&#xD;&#xA;   AS ADDR_STATE_ID,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_STATE_VALUE  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_STATE_VALUE  END&#xD;&#xA;    ELSE  PA3.ADDR_STATE_VALUE END&#xD;&#xA;   AS ADDR_STATE_VALUE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_COUNTRY_ID &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_COUNTRY_ID  END&#xD;&#xA;    ELSE  PA3.ADDR_COUNTRY_ID END&#xD;&#xA;   AS ADDR_COUNTRY_ID,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_COUNTRY_VALUE  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_COUNTRY_VALUE  END&#xD;&#xA;    ELSE  PA3.ADDR_COUNTRY_VALUE END&#xD;&#xA;   AS ADDR_COUNTRY_VALUE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_ZIP_CODE &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_ZIP_CODE  END&#xD;&#xA;    ELSE  PA3.ADDR_ZIP_CODE END&#xD;&#xA;   AS ADDR_ZIP_CODE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_ZIP_4_CODE  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_ZIP_4_CODE  END&#xD;&#xA;    ELSE  PA3.ADDR_ZIP_4_CODE END&#xD;&#xA;   AS ADDR_ZIP_4_CODE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.FOREIGN_PROVINCE  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.FOREIGN_PROVINCE  END&#xD;&#xA;    ELSE  PA3.FOREIGN_PROVINCE END&#xD;&#xA;   AS FOREIGN_PROVINCE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.FOREIGN_POSTAL_CODE  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.FOREIGN_POSTAL_CODE  END&#xD;&#xA;    ELSE  PA3.FOREIGN_POSTAL_CODE END&#xD;&#xA;   AS FOREIGN_POSTAL_CODE&#xD;&#xA;FROM SGT_PERSON P &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA1   ON P.PERSON_ID  = PA1.PERSON_ID  AND PA1.ADDRESS_TYPE_VALUE = 'PERM'  AND &#xD;&#xA;      @PAYMENTDATE BETWEEN PA1.START_DATE AND &#xD;&#xA;      (CASE WHEN PA1.END_DATE IS NULL &#xD;&#xA;           THEN '99991231' ELSE PA1.END_DATE END)&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA2  ON P.PERSON_ID  = PA2.PERSON_ID AND PA2.ADDRESS_TYPE_VALUE = 'TEMP' AND&#xD;&#xA;      @PAYMENTDATE BETWEEN PA2.START_DATE AND &#xD;&#xA;      (CASE WHEN PA2.END_DATE IS NULL &#xD;&#xA;           THEN '99991231' ELSE PA2.END_DATE END)&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA3  ON P.PERSON_ID  = PA3.PERSON_ID AND PA3.ADDRESS_TYPE_VALUE = 'PAYM' AND&#xD;&#xA;      @PAYMENTDATE BETWEEN PA3.START_DATE AND &#xD;&#xA;      (CASE WHEN PA3.END_DATE IS NULL &#xD;&#xA;           THEN '99991231' ELSE PA3.END_DATE END)) AS PERADDR ON PERADDR.PERSON_ID=PAYMENT.PERSON_ID&#xD;&#xA;LEFT OUTER JOIN&#xD;&#xA;(&#xD;&#xA; SELECT DISTINCT PAYEE_ACCOUNT_ID FROM &#xD;&#xA;  SGT_PAYMENT_HISTORY_DISTRIBUTION CHK&#xD;&#xA;   INNER JOIN SGT_PAYMENT_HISTORY_HEADER CHKHD&#xD;&#xA;   ON CHK.PAYMENT_HISTORY_HEADER_ID = CHKHD.PAYMENT_HISTORY_HEADER_ID &#xD;&#xA;   WHERE PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID &#xD;&#xA;   AND PAYMENT_METHOD_VALUE = 'CHK'&#xD;&#xA;) AS CHECKSPAID&#xD;&#xA;ON PAYMENT.PAYEE_ACCOUNT_ID  = CHECKSPAID.PAYEE_ACCOUNT_ID &#xD;&#xA;WHERE ACH.PRE_NOTE_FLAG = 'N' AND PRIMARY_ACCOUNT_FLAG &lt;&gt; 'Y'&#xD;&#xA;AND CHECKSPAID.PAYEE_ACCOUNT_ID IS NULL&#xD;&#xA;)TEMP &#xD;&#xA;where  net_amount &gt; 0&#xD;&#xA;ORDER BY PAYMENT_HISTORY_HEADER_ID">
      <parameters>
        <parameter ID="@PAYMENTSCHEDULEID" sfwDataType="int" />
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
        <parameter ID="@batchscheduleid" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="UpdateFBO" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="Update Phd set FBO_CO = Contact_Name,UPDATE_SEQ = UPDATE_SEQ+1 from &#xD;&#xA; SGT_PAYMENT_HISTORY_DISTRIBUTION Phd&#xD;&#xA;Inner Join &#xD;&#xA;(&#xD;&#xA; select &#xD;&#xA;  case when pc1.person_id is null &#xD;&#xA;    then pc.contact_name&#xD;&#xA;    else isnull(Pc1.FIRST_NAME,'') +', '+ isnull(Pc1.MIDDLE_NAME,'')+' '+ isnull(Pc1.LAST_NAME,'') &#xD;&#xA;  end as Contact_Name,&#xD;&#xA;  phh.payment_history_header_id &#xD;&#xA;  From sgt_payment_history_header Phh WITH(NOLOCK) &#xD;&#xA;  inner Join Sgt_payee_account Pa WITH(NOLOCK) &#xD;&#xA;   on Pa.Payee_account_id = Phh.payee_account_id &#xD;&#xA;  inner join Sgt_person P WITH(NOLOCK)&#xD;&#xA;   on Pa.Payee_perslink_id = P.Person_id &#xD;&#xA;  Inner Join Sgt_person_Contact Pc WITH(NOLOCK)&#xD;&#xA;   on pa.Payee_perslink_id  = pc.Person_id &#xD;&#xA;  left outer JOin SGT_PERSON Pc1 WITH(NOLOCK) on&#xD;&#xA;   Pc.Contact_person_id = pc1.Person_id&#xD;&#xA; where phh.Payment_schedule_id = @paymentScheduleId&#xD;&#xA; and (datediff(d,p.date_of_birth,@PaymentDate ))/365.25 &lt; 18.0&#xD;&#xA; and pc.relationship_value = 'GRDN'&#xD;&#xA;&#xD;&#xA;union all&#xD;&#xA;&#xD;&#xA;select &#xD;&#xA;  Left((Rtrim(Ltrim(ISNULL(PP.LAST_NAME,'') +', '+ ISNULL(PP.MIDDLE_NAME,'') +' '+ ISNULL(PP.FIRST_NAME,''))))&#xD;&#xA;     +' - '+ (ltrim(rtrim(cv.description)))&#xD;&#xA;   ,100) as Contact_Name,&#xD;&#xA;  phh.payment_history_header_id &#xD;&#xA;  From sgt_payment_history_header Phh WITH(NOLOCK) &#xD;&#xA;  inner Join Sgt_payee_account Pa WITH(NOLOCK) &#xD;&#xA;   on Pa.Payee_account_id = Phh.payee_account_id&#xD;&#xA;  inner join sgt_benefit_application ba&#xD;&#xA;   on ba.benefit_application_id=pa.application_id&#xD;&#xA;  inner join sgs_code_value cv on cv.code_id=ba.ND_UNIV_CODE_ID and cv.code_value=ba.ND_UNIV_CODE_VALUE&#xD;&#xA;  LEFT OUTER JOIN SGT_PERSON PP ON PP.PERSON_ID=PA.PAYEE_PERSLINK_ID&#xD;&#xA; where phh.Payment_schedule_id = @paymentScheduleId &#xD;&#xA;    and pa.benefit_option_value='DTCT' and (pa.RHIC_EE_AMOUNT_REFUND_FLAG='N' or pa.RHIC_EE_AMOUNT_REFUND_FLAG is null)&#xD;&#xA;) as Payee&#xD;&#xA;On Payee.payment_history_header_id = phd.payment_history_header_id&#xD;&#xA;and payment_method_value not in ('RACH','RCHK')&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;">
      <parameters>
        <parameter ID="@paymentScheduleId" sfwDataType="int" />
        <parameter ID="@PaymentDate" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="CreateChkACHHistoryforExcessContrReturnAdhoc" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DECLARE @CHECKNO_RETR INT&#xD;&#xA;DECLARE @CHECKBOOKID_RETR INT&#xD;&#xA;&#xD;&#xA;DECLARE @CHECKNO_INSR INT&#xD;&#xA;DECLARE @CHECKBOOKID_INSR INT&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb..#TEMP') IS NOT NULL&#xD;&#xA;    DROP TABLE #TEMP&#xD;&#xA;&#xD;&#xA;SELECT * &#xD;&#xA;INTO #TEMP&#xD;&#xA;FROM SGS_CODE_VALUE&#xD;&#xA;WHERE CODE_ID = 7005&#xD;&#xA;&#xD;&#xA;SELECT @CHECKNO_RETR = CASE WHEN ISNULL(LAST_CHECK_NUMBER,'') = '' THEN FIRST_CHECK_NUMBER &#xD;&#xA;     ELSE LAST_CHECK_NUMBER END,&#xD;&#xA;   @CHECKBOOKID_RETR  = CHECK_BOOK_ID&#xD;&#xA;FROM SGT_PAYMENT_CHECK_BOOK CB&#xD;&#xA;JOIN #TEMP CV ON CV.DATA3 = CB.CHECK_BOOK_ID&#xD;&#xA;WHERE EFFECTIVE_DATE=(SELECT MAX(EFFECTIVE_DATE)FROM SGT_PAYMENT_CHECK_BOOK WHERE EFFECTIVE_DATE&lt;=@PAYMENTDATE)&#xD;&#xA;AND CV.CODE_VALUE = 'RETR'&#xD;&#xA;&#xD;&#xA;SELECT @CHECKNO_INSR = CASE WHEN ISNULL(LAST_CHECK_NUMBER,'') = '' THEN FIRST_CHECK_NUMBER &#xD;&#xA;     ELSE LAST_CHECK_NUMBER END,&#xD;&#xA;   @CHECKBOOKID_INSR  = CHECK_BOOK_ID&#xD;&#xA;FROM SGT_PAYMENT_CHECK_BOOK CB&#xD;&#xA;JOIN #TEMP CV ON CV.DATA3 = CB.CHECK_BOOK_ID&#xD;&#xA;WHERE EFFECTIVE_DATE=(SELECT MAX(EFFECTIVE_DATE)FROM SGT_PAYMENT_CHECK_BOOK WHERE EFFECTIVE_DATE&lt;=@PAYMENTDATE)&#xD;&#xA;AND CV.CODE_VALUE = 'INSR'&#xD;&#xA;&#xD;&#xA;INSERT INTO SGT_PAYMENT_HISTORY_DISTRIBUTION&#xD;&#xA;(&#xD;&#xA;PAYMENT_HISTORY_HEADER_ID, PAYMENT_METHOD_ID, PAYMENT_METHOD_VALUE, CHECK_MESSAGE, &#xD;&#xA;DISTRIBUTION_STATUS_ID, DISTRIBUTION_STATUS_VALUE, NET_AMOUNT, CHECK_NUMBER, OLD_DISTRIBUTION_ID, RECIPIENT_NAME,&#xD;&#xA;FBO_CO, ADDR_LINE_1, ADDR_LINE_2, ADDR_CITY, ADDR_STATE_ID, ADDR_STATE_VALUE, ADDR_COUNTRY_ID, ADDR_COUNTRY_VALUE, &#xD;&#xA;ADDR_ZIP_CODE, ADDR_ZIP_4_CODE, FOREIGN_PROVINCE, FOREIGN_POSTAL_CODE, BANK_NAME, ROUTING_NUMBER,&#xD;&#xA;ACCOUNT_TYPE_ID, ACCOUNT_TYPE_VALUE, ACCOUNT_NUMBER, PERSON_ID, ORG_ID,&#xD;&#xA;CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT&#xD;&#xA;PAYMENT_HISTORY_HEADER_ID, PAYMENT_METHOD_ID, PAYMENT_METHOD_VALUE, CHECK_MESSAGE,&#xD;&#xA;DISTRIBUTION_STATUS_ID, DISTRIBUTION_STATUS_VALUE, NET_AMOUNT, CHECK_NUMBER, OLD_DISTRIBUTION_ID, &#xD;&#xA;RECIPIENT_NAME, FBO_CO, ADDR_LINE_1, ADDR_LINE_2, ADDR_CITY, ADDR_STATE_ID, ADDR_STATE_VALUE, &#xD;&#xA;ADDR_COUNTRY_ID, ADDR_COUNTRY_VALUE, ADDR_ZIP_CODE, ADDR_ZIP_4_CODE, FOREIGN_PROVINCE, FOREIGN_POSTAL_CODE,&#xD;&#xA;BANK_NAME, ROUTING_NUMBER, ACCOUNT_TYPE_ID, ACCOUNT_TYPE_VALUE, ACCOUNT_NUMBER, PERSON_ID, ORG_ID,&#xD;&#xA;'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) as  CREATED_BY ,getdate() as CREATED_DATE,&#xD;&#xA;'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) as  MODIFIED_BY ,getdate() as MODIFIED_DATE,0 UPDATE_SEQ&#xD;&#xA;FROM (&#xD;&#xA;SELECT  PAYMENT.PERSON_ID,PAYMENT.ORG_ID,PAYMENT.PAYEE_ACCOUNT_ID,PAYMENT.AMOUNT,&#xD;&#xA;   2504 AS PAYMENT_METHOD_ID,&#xD;&#xA;  'ACH' AS PAYMENT_METHOD_VALUE,&#xD;&#xA;  2505 AS DISTRIBUTION_STATUS_ID,&#xD;&#xA;  'AOTS' AS DISTRIBUTION_STATUS_VALUE,&#xD;&#xA;  CASE WHEN PAYMENT.ORG_ID IS NOT NULL THEN &#xD;&#xA;    O.ORG_NAME ELSE CASE WHEN EXREF.REFUND_TO_VALUE = 'ESME' THEN 'Estate of ' else '' end + isnull(P.LAST_NAME,'') +', '&#xD;&#xA;    + isnull(P.MIDDLE_NAME,'')+' '+isnull(P.FIRST_NAME,'') END &#xD;&#xA;    AS RECIPIENT_NAME,&#xD;&#xA;  NULL AS CHECK_NUMBER,&#xD;&#xA;        NULL AS FBO_CO,&#xD;&#xA;  PAYMENT.PAYMENT_HISTORY_HEADER_ID,&#xD;&#xA;  PAYMENT.CHECK_MESSAGE,&#xD;&#xA;  AMOUNT AS NET_AMOUNT,&#xD;&#xA;  BANK.ORG_NAME AS BANK_NAME,&#xD;&#xA;  BANK.ROUTING_NO AS ROUTING_NUMBER,&#xD;&#xA;  NULL AS OLD_DISTRIBUTION_ID,&#xD;&#xA;  CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_LINE_1 ELSE OCA.ADDR_LINE_1 END AS ADDR_LINE_1,&#xD;&#xA;  CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_LINE_2 ELSE OCA.ADDR_LINE_2 END AS ADDR_LINE_2,&#xD;&#xA;  CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_CITY ELSE OCA.CITY END AS ADDR_CITY,&#xD;&#xA;  CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_STATE_ID ELSE OCA.STATE_ID END AS ADDR_STATE_ID,&#xD;&#xA;  CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_STATE_VALUE ELSE OCA.STATE_VALUE END AS ADDR_STATE_VALUE,&#xD;&#xA;  CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_COUNTRY_ID ELSE OCA.COUNTRY_ID END AS ADDR_COUNTRY_ID,&#xD;&#xA;  CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_COUNTRY_VALUE ELSE OCA.COUNTRY_VALUE END AS ADDR_COUNTRY_VALUE,&#xD;&#xA;  CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_ZIP_CODE ELSE OCA.ZIP_CODE END AS ADDR_ZIP_CODE,&#xD;&#xA;  CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_ZIP_4_CODE ELSE OCA.ZIP_4_CODE END AS ADDR_ZIP_4_CODE,&#xD;&#xA;  CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.FOREIGN_PROVINCE ELSE OCA.FOREIGN_PROVINCE END AS FOREIGN_PROVINCE,&#xD;&#xA;  CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.FOREIGN_POSTAL_CODE ELSE OCA.FOREIGN_POSTAL_CODE END AS FOREIGN_POSTAL_CODE,    &#xD;&#xA;  OB.ACCOUNT_TYPE_ID,&#xD;&#xA;  OB.ACCOUNT_TYPE_VALUE,&#xD;&#xA;  OB.ACCOUNT_NO AS ACCOUNT_NUMBER&#xD;&#xA; FROM&#xD;&#xA; (&#xD;&#xA;  SELECT PHH.PAYMENT_HISTORY_HEADER_ID,SCH.CHECK_MESSAGE,PHH.PERSON_ID,PHH.ORG_ID,PHH.PAYEE_ACCOUNT_ID,SUM(PHD.AMOUNT*PIT.ITEM_TYPE_DIRECTION) AS AMOUNT&#xD;&#xA;&#x9;,PLN.BENEFIT_TYPE_VALUE&#xD;&#xA;  FROM SGT_PAYMENT_HISTORY_DETAIL  PHD &#xD;&#xA;  INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH  &#xD;&#xA;   ON PHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID &#xD;&#xA;  INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT &#xD;&#xA;   ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID &#xD;&#xA;  INNER JOIN SGT_PAYMENT_SCHEDULE SCH &#xD;&#xA;            ON SCH.PAYMENT_SCHEDULE_ID = PHH.PAYMENT_SCHEDULE_ID&#xD;&#xA;  INNER JOIN SGT_PLAN PLN ON PLN.PLAN_ID = PHH.PLAN_ID&#xD;&#xA;  WHERE PHH.PAYMENT_SCHEDULE_ID=@PAYMENTSCHEDULEID&#xD;&#xA;  AND PIT.ALLOW_ROLLOVER_CODE_VALUE &lt;&gt; 'CRET' and PHH.Payee_account_id is null and PHH.Person_id  is null&#xD;&#xA;  GROUP BY  PHH.PERSON_ID,PHH.ORG_ID,PHH.PAYEE_ACCOUNT_ID,PHH.PAYMENT_HISTORY_HEADER_ID,SCH.CHECK_MESSAGE,PLN.BENEFIT_TYPE_VALUE&#xD;&#xA; ) AS PAYMENT&#xD;&#xA; INNER JOIN (SELECT CASE WHEN REFUND_TO_VALUE = 'ESME' THEN REFUND_TO_VALUE ELSE '' END AS REFUND_TO_VALUE,PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;     FROM SGT_REMITTANCE WHERE REFUND_STATUS_VALUE in ('APRD','RIA')&#xD;&#xA;     GROUP BY CASE WHEN REFUND_TO_VALUE = 'ESME' THEN REFUND_TO_VALUE ELSE '' END,PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; ) AS EXREF ON EXREF.PAYMENT_HISTORY_HEADER_ID = PAYMENT.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN SGT_ORG_BANK OB  on PAYMENT.ORG_ID = OB.ORG_ID&#xD;&#xA; LEFT OUTER JOIN SGT_PERSON P  ON PAYMENT.PERSON_ID = P.PERSON_ID&#xD;&#xA; LEFT OUTER JOIN SGT_ORGANIZATION O  ON PAYMENT.ORG_ID = O.ORG_ID&#xD;&#xA; LEFT OUTER JOIN SGT_ORGANIZATION BANK  ON BANK.ORG_ID = OB.BANK_ORG_ID&#xD;&#xA; LEFT OUTER JOIN SGT_ORG_CONTACT_ADDRESS OCA  ON O.PRIMARY_ADDRESS_ID=OCA.CONTACT_ORG_ADDRESS_ID&#xD;&#xA; LEFT OUTER JOIN (SELECT  P.PERSON_ID, CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_LINE_1  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_LINE_1  END&#xD;&#xA;    ELSE  PA3.ADDR_LINE_1 END&#xD;&#xA;   AS ADDR_LINE_1,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_LINE_2  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_LINE_2  END&#xD;&#xA;    ELSE  PA3.ADDR_LINE_2 END&#xD;&#xA;   AS ADDR_LINE_2,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_CITY  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_CITY  END&#xD;&#xA;    ELSE  PA3.ADDR_CITY END&#xD;&#xA;   AS ADDR_CITY,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_STATE_ID  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_STATE_ID  END&#xD;&#xA;    ELSE  PA3.ADDR_STATE_ID END&#xD;&#xA;   AS ADDR_STATE_ID,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_STATE_VALUE  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_STATE_VALUE  END&#xD;&#xA;    ELSE  PA3.ADDR_STATE_VALUE END&#xD;&#xA;   AS ADDR_STATE_VALUE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_COUNTRY_ID &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_COUNTRY_ID  END&#xD;&#xA;    ELSE  PA3.ADDR_COUNTRY_ID END&#xD;&#xA;   AS ADDR_COUNTRY_ID,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_COUNTRY_VALUE  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_COUNTRY_VALUE  END&#xD;&#xA;    ELSE  PA3.ADDR_COUNTRY_VALUE END&#xD;&#xA;   AS ADDR_COUNTRY_VALUE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_ZIP_CODE &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_ZIP_CODE  END&#xD;&#xA;    ELSE  PA3.ADDR_ZIP_CODE END&#xD;&#xA;   AS ADDR_ZIP_CODE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_ZIP_4_CODE  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_ZIP_4_CODE  END&#xD;&#xA;    ELSE  PA3.ADDR_ZIP_4_CODE END&#xD;&#xA;   AS ADDR_ZIP_4_CODE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.FOREIGN_PROVINCE  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.FOREIGN_PROVINCE  END&#xD;&#xA;    ELSE  PA3.FOREIGN_PROVINCE END&#xD;&#xA;   AS FOREIGN_PROVINCE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.FOREIGN_POSTAL_CODE  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.FOREIGN_POSTAL_CODE  END&#xD;&#xA;    ELSE  PA3.FOREIGN_POSTAL_CODE END&#xD;&#xA;   AS FOREIGN_POSTAL_CODE&#xD;&#xA;FROM SGT_PERSON P &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA1   ON P.PERSON_ID  = PA1.PERSON_ID  AND PA1.ADDRESS_TYPE_VALUE = 'PERM'  AND &#xD;&#xA;      @PAYMENTDATE BETWEEN PA1.START_DATE AND &#xD;&#xA;      (CASE WHEN PA1.END_DATE IS NULL &#xD;&#xA;           THEN '99991231' ELSE PA1.END_DATE END)&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA2  ON P.PERSON_ID  = PA2.PERSON_ID AND PA2.ADDRESS_TYPE_VALUE = 'TEMP' AND&#xD;&#xA;      @PAYMENTDATE BETWEEN PA2.START_DATE AND &#xD;&#xA;      (CASE WHEN PA2.END_DATE IS NULL &#xD;&#xA;           THEN '99991231' ELSE PA2.END_DATE END)&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA3  ON P.PERSON_ID  = PA3.PERSON_ID AND PA3.ADDRESS_TYPE_VALUE = 'PAYM' AND&#xD;&#xA;      @PAYMENTDATE BETWEEN PA3.START_DATE AND &#xD;&#xA;      (CASE WHEN PA3.END_DATE IS NULL &#xD;&#xA;           THEN '99991231' ELSE PA3.END_DATE END)) AS PERADDR ON PERADDR.PERSON_ID=PAYMENT.PERSON_ID&#xD;&#xA; WHERE OB.USAGE_VALUE = 'DEP' and OB.STATUS_VALUE = 'ACTV'&#xD;&#xA;&#xD;&#xA;UNION ALL&#xD;&#xA;&#xD;&#xA;SELECT  PAYMENT.PERSON_ID,PAYMENT.ORG_ID,PAYMENT.PAYEE_ACCOUNT_ID,PAYMENT.AMOUNT,&#xD;&#xA;  2504 as PAYMENT_METHOD_ID,&#xD;&#xA;  'CHK' AS PAYMENT_METHOD_VALUE,&#xD;&#xA;  2505 AS DISTRIBUTION_STATUS_ID,&#xD;&#xA;  'COTS' AS DISTRIBUTION_STATUS_VALUE,&#xD;&#xA;  CASE WHEN PAYMENT.ORG_ID IS NOT NULL THEN &#xD;&#xA;    O.ORG_NAME ELSE CASE WHEN EXREF.REFUND_TO_VALUE = 'ESME' THEN 'Estate of ' else '' end + isnull(P.FIRST_NAME,'') +' '&#xD;&#xA;    + isnull(P.MIDDLE_NAME,'')+' '+isnull(P.LAST_NAME,'') END &#xD;&#xA;    AS RECIPIENT_NAME,&#xD;&#xA;  (ROW_NUMBER() OVER (PARTITION BY BENEFIT_TYPE_VALUE ORDER BY PAYMENT.PAYMENT_HISTORY_HEADER_ID)) + &#xD;&#xA;  CASE &#xD;&#xA;&#x9;WHEN &#xD;&#xA;&#x9;&#x9;BENEFIT_TYPE_VALUE = 'INSR' &#xD;&#xA;&#x9;THEN &#xD;&#xA;&#x9;&#x9;@CHECKNO_INSR&#xD;&#xA;&#x9;ELSE&#xD;&#xA;&#x9;&#x9;@CHECKNO_RETR&#xD;&#xA;&#x9;END&#xD;&#xA;   AS CHECK_NUMBER,&#xD;&#xA;        NULL AS FBO_CO,&#xD;&#xA;  PAYMENT.PAYMENT_HISTORY_HEADER_ID,&#xD;&#xA;  PAYMENT.CHECK_MESSAGE, &#xD;&#xA;  AMOUNT AS NET_AMOUNT,&#xD;&#xA;  BANK.ORG_NAME AS BANK_NAME,&#xD;&#xA;  BANK.ROUTING_NO AS ROUTING_NUMBER,&#xD;&#xA;  NULL AS OLD_DISTRIBUTION_ID,&#xD;&#xA;  CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_LINE_1 ELSE OCA.ADDR_LINE_1 END AS ADDR_LINE_1,&#xD;&#xA;  CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_LINE_2 ELSE OCA.ADDR_LINE_2 END AS ADDR_LINE_2,&#xD;&#xA;  CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_CITY ELSE OCA.CITY END AS ADDR_CITY,&#xD;&#xA;  CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_STATE_ID ELSE OCA.STATE_ID END AS ADDR_STATE_ID,&#xD;&#xA;  CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_STATE_VALUE ELSE OCA.STATE_VALUE END AS ADDR_STATE_VALUE,&#xD;&#xA;  CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_COUNTRY_ID ELSE OCA.COUNTRY_ID END AS ADDR_COUNTRY_ID,&#xD;&#xA;  CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_COUNTRY_VALUE ELSE OCA.COUNTRY_VALUE END AS ADDR_COUNTRY_VALUE,&#xD;&#xA;  CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_ZIP_CODE ELSE OCA.ZIP_CODE END AS ADDR_ZIP_CODE,&#xD;&#xA;  CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.ADDR_ZIP_4_CODE ELSE OCA.ZIP_4_CODE END AS ADDR_ZIP_4_CODE,&#xD;&#xA;  CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.FOREIGN_PROVINCE ELSE OCA.FOREIGN_PROVINCE END AS FOREIGN_PROVINCE,&#xD;&#xA;  CASE WHEN PAYMENT.PERSON_ID IS NOT NULL THEN PERADDR.FOREIGN_POSTAL_CODE ELSE OCA.FOREIGN_POSTAL_CODE END AS FOREIGN_POSTAL_CODE,    &#xD;&#xA;  211 AS ACCOUNT_TYPE_ID,&#xD;&#xA;  OB.ACCOUNT_TYPE_VALUE AS ACCOUNT_TYPE_VALUE,&#xD;&#xA;  OB.ACCOUNT_NO AS ACCOUNT_NUMBER&#xD;&#xA; FROM&#xD;&#xA; (&#xD;&#xA;  SELECT PHH.PAYMENT_HISTORY_HEADER_ID,SCH.CHECK_MESSAGE,PHH.PERSON_ID,PHH.ORG_ID,PHH.PAYEE_ACCOUNT_ID,SUM(PHD.AMOUNT*PIT.ITEM_TYPE_DIRECTION) AS AMOUNT&#xD;&#xA;&#x9;,PLN.BENEFIT_TYPE_VALUE&#xD;&#xA;  FROM SGT_PAYMENT_HISTORY_DETAIL  PHD &#xD;&#xA;  INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH  &#xD;&#xA;   ON PHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID &#xD;&#xA;  INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT &#xD;&#xA;   ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID &#xD;&#xA;  INNER JOIN SGT_PAYMENT_SCHEDULE SCH &#xD;&#xA;            ON SCH.PAYMENT_SCHEDULE_ID = PHH.PAYMENT_SCHEDULE_ID&#xD;&#xA;  INNER JOIN (SELECT PLAN_ID, CASE WHEN BENEFIT_TYPE_VALUE = 'INSR' THEN 'INSR' ELSE 'RETR' END AS BENEFIT_TYPE_VALUE FROM SGT_PLAN) PLN ON PLN.PLAN_ID = PHH.PLAN_ID&#xD;&#xA;        WHERE PHH.PAYMENT_SCHEDULE_ID=@PAYMENTSCHEDULEID&#xD;&#xA;  AND PIT.ALLOW_ROLLOVER_CODE_VALUE &lt;&gt; 'CRET' and PHH.Payee_account_id is null &#xD;&#xA;  GROUP BY  PHH.PERSON_ID,PHH.ORG_ID,PHH.PAYEE_ACCOUNT_ID,PHH.PAYMENT_HISTORY_HEADER_ID,SCH.CHECK_MESSAGE,PLN.BENEFIT_TYPE_VALUE&#xD;&#xA; ) AS PAYMENT&#xD;&#xA; INNER JOIN (SELECT CASE WHEN REFUND_TO_VALUE = 'ESME' THEN REFUND_TO_VALUE ELSE '' END AS REFUND_TO_VALUE,&#xD;&#xA;     PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;  FROM SGT_REMITTANCE WHERE REFUND_STATUS_VALUE in ('APRD','RIA')&#xD;&#xA;  GROUP BY CASE WHEN REFUND_TO_VALUE = 'ESME' THEN REFUND_TO_VALUE ELSE '' END,PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; ) AS EXREF ON EXREF.PAYMENT_HISTORY_HEADER_ID = PAYMENT.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; lEFT JOIN SGT_ORG_BANK OB  on PAYMENT.ORG_ID = OB.ORG_ID AND OB.USAGE_VALUE = 'DEP' and OB.STATUS_VALUE = 'ACTV'&#xD;&#xA; LEFT OUTER JOIN SGT_PERSON P  ON PAYMENT.PERSON_ID = P.PERSON_ID&#xD;&#xA; LEFT OUTER JOIN SGT_ORGANIZATION O  ON PAYMENT.ORG_ID = O.ORG_ID&#xD;&#xA; LEFT OUTER JOIN SGT_ORGANIZATION BANK  ON BANK.ORG_ID = OB.BANK_ORG_ID&#xD;&#xA; LEFT OUTER JOIN SGT_ORG_CONTACT_ADDRESS OCA  ON O.PRIMARY_ADDRESS_ID=OCA.CONTACT_ORG_ADDRESS_ID&#xD;&#xA; LEFT OUTER JOIN (SELECT  P.PERSON_ID, CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_LINE_1  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_LINE_1  END&#xD;&#xA;    ELSE  PA3.ADDR_LINE_1 END&#xD;&#xA;   AS ADDR_LINE_1,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_LINE_2  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_LINE_2  END&#xD;&#xA;    ELSE  PA3.ADDR_LINE_2 END&#xD;&#xA;   AS ADDR_LINE_2,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_CITY  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_CITY  END&#xD;&#xA;    ELSE  PA3.ADDR_CITY END&#xD;&#xA;   AS ADDR_CITY,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_STATE_ID  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_STATE_ID  END&#xD;&#xA;    ELSE  PA3.ADDR_STATE_ID END&#xD;&#xA;   AS ADDR_STATE_ID,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_STATE_VALUE  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_STATE_VALUE  END&#xD;&#xA;    ELSE  PA3.ADDR_STATE_VALUE END&#xD;&#xA;   AS ADDR_STATE_VALUE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_COUNTRY_ID &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_COUNTRY_ID  END&#xD;&#xA;    ELSE  PA3.ADDR_COUNTRY_ID END&#xD;&#xA;   AS ADDR_COUNTRY_ID,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_COUNTRY_VALUE  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_COUNTRY_VALUE  END&#xD;&#xA;    ELSE  PA3.ADDR_COUNTRY_VALUE END&#xD;&#xA;   AS ADDR_COUNTRY_VALUE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_ZIP_CODE &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_ZIP_CODE  END&#xD;&#xA;    ELSE  PA3.ADDR_ZIP_CODE END&#xD;&#xA;   AS ADDR_ZIP_CODE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.ADDR_ZIP_4_CODE  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.ADDR_ZIP_4_CODE  END&#xD;&#xA;    ELSE  PA3.ADDR_ZIP_4_CODE END&#xD;&#xA;   AS ADDR_ZIP_4_CODE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.FOREIGN_PROVINCE  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.FOREIGN_PROVINCE  END&#xD;&#xA;    ELSE  PA3.FOREIGN_PROVINCE END&#xD;&#xA;   AS FOREIGN_PROVINCE,&#xD;&#xA;CASE WHEN PA3.PERSON_ID IS NULL THEN &#xD;&#xA;    CASE WHEN PA2.PERSON_ID IS NOT NULL &#xD;&#xA;      THEN PA2.FOREIGN_POSTAL_CODE  &#xD;&#xA;      WHEN PA1.PERSON_ID IS NOT NULL&#xD;&#xA;      THEN PA1.FOREIGN_POSTAL_CODE  END&#xD;&#xA;    ELSE  PA3.FOREIGN_POSTAL_CODE END&#xD;&#xA;   AS FOREIGN_POSTAL_CODE&#xD;&#xA;FROM SGT_PERSON P &#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA1   ON P.PERSON_ID  = PA1.PERSON_ID  AND PA1.ADDRESS_TYPE_VALUE = 'PERM'  AND &#xD;&#xA;      @PAYMENTDATE BETWEEN PA1.START_DATE AND &#xD;&#xA;      (CASE WHEN PA1.END_DATE IS NULL &#xD;&#xA;           THEN '99991231' ELSE PA1.END_DATE END)&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA2  ON P.PERSON_ID  = PA2.PERSON_ID AND PA2.ADDRESS_TYPE_VALUE = 'TEMP' AND&#xD;&#xA;      @PAYMENTDATE BETWEEN PA2.START_DATE AND &#xD;&#xA;      (CASE WHEN PA2.END_DATE IS NULL &#xD;&#xA;           THEN '99991231' ELSE PA2.END_DATE END)&#xD;&#xA;LEFT OUTER JOIN SGT_PERSON_ADDRESS PA3  ON P.PERSON_ID  = PA3.PERSON_ID AND PA3.ADDRESS_TYPE_VALUE = 'PAYM' AND&#xD;&#xA;      @PAYMENTDATE BETWEEN PA3.START_DATE AND &#xD;&#xA;      (CASE WHEN PA3.END_DATE IS NULL &#xD;&#xA;           THEN '99991231' ELSE PA3.END_DATE END)) AS PERADDR ON PERADDR.PERSON_ID=PAYMENT.PERSON_ID&#xD;&#xA; WHERE (OB.ORG_ID IS NULL OR PAYMENT.PERSON_ID IS NOT NULL)&#xD;&#xA;) temp ORDER BY PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#xD;&#xA;SELECT @CHECKNO_RETR = MAX(CONVERT(INT,PHD.CHECK_NUMBER))&#xD;&#xA;FROM SGT_PAYMENT_HISTORY_DISTRIBUTION PHD&#xD;&#xA;JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID AND PHH.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID&#xD;&#xA;JOIN SGT_PLAN P ON P.PLAN_ID = PHH.PLAN_ID&#xD;&#xA;WHERE P.BENEFIT_TYPE_VALUE &lt;&gt; 'INSR'&#xD;&#xA;&#xD;&#xA;SELECT @CHECKNO_INSR = MAX(CONVERT(INT,PHD.CHECK_NUMBER))&#xD;&#xA;FROM SGT_PAYMENT_HISTORY_DISTRIBUTION PHD&#xD;&#xA;JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID AND PHH.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID&#xD;&#xA;JOIN SGT_PLAN P ON P.PLAN_ID = PHH.PLAN_ID&#xD;&#xA;WHERE P.BENEFIT_TYPE_VALUE = 'INSR'&#xD;&#xA;&#xD;&#xA;IF @CHECKNO_RETR IS NOT NULL &#xD;&#xA;BEGIN&#xD;&#xA;&#x9;UPDATE CB&#xD;&#xA;&#x9;SET CB.LAST_CHECK_NUMBER = @CHECKNO_RETR&#xD;&#xA;&#x9;&#x9;,MODIFIED_BY='PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid),MODIFIED_DATE=GETDATE(),UPDATE_SEQ = UPDATE_SEQ+1&#xD;&#xA;&#x9;FROM SGT_PAYMENT_CHECK_BOOK CB&#xD;&#xA;&#x9;WHERE CB.CHECK_BOOK_ID = @CHECKBOOKID_RETR&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;IF @CHECKNO_INSR IS NOT NULL &#xD;&#xA;BEGIN&#xD;&#xA;&#x9;UPDATE CB&#xD;&#xA;&#x9;SET CB.LAST_CHECK_NUMBER = @CHECKNO_INSR&#xD;&#xA;&#x9;&#x9;,MODIFIED_BY='PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid),MODIFIED_DATE=GETDATE(),UPDATE_SEQ = UPDATE_SEQ+1&#xD;&#xA;&#x9;FROM SGT_PAYMENT_CHECK_BOOK CB&#xD;&#xA;&#x9;WHERE CB.CHECK_BOOK_ID = @CHECKBOOKID_INSR&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb..#TEMP') IS NOT NULL&#xD;&#xA;    DROP TABLE #TEMP">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
        <parameter ID="@PAYMENTSCHEDULEID" sfwDataType="int" />
        <parameter ID="@batchscheduleid" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="ACHStatusUpdateBatch" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="Select d.PAYMENT_HISTORY_DISTRIBUTION_ID,d.PAYMENT_HISTORY_HEADER_ID,DISTRIBUTION_STATUS_ID,&#xD;&#xA;CASE WHEN DISTRIBUTION_STATUS_VALUE ='AOTS' THEN 'ACRD' &#xD;&#xA;   WHEN DISTRIBUTION_STATUS_VALUE ='ROTS' THEN 'RCRD'&#xD;&#xA;   END as DISTRIBUTION_STATUS_VALUE into #temp&#xD;&#xA; FROM SGT_PAYMENT_HISTORY_DISTRIBUTION D &#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_HEADER H &#xD;&#xA; ON  D.PAYMENT_HISTORY_HEADER_ID = H.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;WHERE PAYMENT_METHOD_VALUE IN ('ACH','RACH')&#xD;&#xA;AND DISTRIBUTION_STATUS_VALUE IN ('AOTS','ROTS')&#xD;&#xA;AND H.PAYMENT_DATE&lt;=@PAYMENTDATE and H.PAYMENT_DATE&lt;=@BATCHDATE&#xD;&#xA;&#xD;&#xA;update d&#xD;&#xA;  set d.DISTRIBUTION_STATUS_VALUE=t.DISTRIBUTION_STATUS_VALUE,&#xD;&#xA;   d.modified_by='PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid),&#xD;&#xA;   d.modified_date=getdate(),&#xD;&#xA;   d.update_seq=update_seq+1&#xD;&#xA;From SGT_PAYMENT_HISTORY_DISTRIBUTION D &#xD;&#xA;  inner join #temp t on d.PAYMENT_HISTORY_DISTRIBUTION_ID=t.PAYMENT_HISTORY_DISTRIBUTION_ID&#xD;&#xA;&#xD;&#xA;INSERT INTO SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY&#xD;&#xA;(&#xD;&#xA;PAYMENT_HISTORY_DISTRIBUTION_ID, PAYMENT_HISTORY_HEADER_ID, DISTRIBUTION_STATUS_ID, DISTRIBUTION_STATUS_VALUE, TRANSACTION_DATE, STATUS_CHANGED_BY, STATUS_CHANGE_REASON_ID, STATUS_CHANGE_REASON_VALUE, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ&#xD;&#xA;)&#xD;&#xA;SELECT D.PAYMENT_HISTORY_DISTRIBUTION_ID,D.PAYMENT_HISTORY_HEADER_ID,&#xD;&#xA;  D.DISTRIBUTION_STATUS_ID,D.DISTRIBUTION_STATUS_VALUE,@BATCHDATE AS TRANSACTION_DATE,&#xD;&#xA;  'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) AS STATUS_CHANGED_BY,2551 AS STATUS_CHANGE_REASON_ID , NULL AS STATUS_CHANGE_REASON_VALUE,&#xD;&#xA;  'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) AS CREATED_BY,GETDATE() AS CREATE_DATE ,&#xD;&#xA;  'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) AS MODIFIED_BY,GETDATE() AS  MODIFIED_DATE,0 AS UPDATE_SEQ&#xD;&#xA;FROM #temp D &#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_HEADER H  &#xD;&#xA;  ON  D.PAYMENT_HISTORY_HEADER_ID = H.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN SGT_PAYMENT_SCHEDULE P&#xD;&#xA;  ON P.PAYMENT_SCHEDULE_ID=H.PAYMENT_SCHEDULE_ID &#xD;&#xA;WHERE  H.PAYMENT_DATE&lt;=@PAYMENTDATE and H.PAYMENT_DATE&lt;=@BATCHDATE&#xD;&#xA;&#xD;&#xA;update d&#xD;&#xA;  set d.status_value='PRCD',&#xD;&#xA;   d.modified_by='PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid),&#xD;&#xA;   d.modified_date=getdate(),&#xD;&#xA;   d.update_seq=D.update_seq+1&#xD;&#xA;From SGT_PAYMENT_HISTORY_HEADER D &#xD;&#xA;  inner join #temp t on d.PAYMENT_HISTORY_HEADER_ID=t.PAYMENT_HISTORY_HEADER_ID">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
        <parameter ID="@BATCHDATE" sfwDataType="DateTime" />
        <parameter ID="@batchscheduleid" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="rptPaymentHistoryDistributionStatusBatchReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="Select A.PERSON_ID,A.ORG_ID,ORG.ORG_CODE,&#xD;&#xA;  CASE WHEN A.PERSON_ID IS NOT NULL THEN LAST_NAME +','+FIRST_NAME &#xD;&#xA;    WHEN A.ORG_ID IS NOT NULL THEN ORG.ORG_NAME&#xD;&#xA;    ELSE '' END &#xD;&#xA;  AS PERSONNAME,&#xD;&#xA;  check_number,a.PAYMENT_HISTORY_DISTRIBUTION_ID as controlnumber,cv.description as status,net_amount&#xD;&#xA;from sgt_payment_history_distribution a WITH(NOLOCK)&#xD;&#xA;  inner join sgs_code_value cv WITH(NOLOCK) on cv.code_id=a.distribution_status_id and cv.code_value=a.distribution_status_value&#xD;&#xA;  inner join sgt_payment_history_header c WITH(NOLOCK) on a.payment_history_header_id=c.payment_history_header_id&#xD;&#xA;  inner join sgt_payment_history_distribution_status_history d on a.payment_history_distribution_id=d.payment_history_distribution_id&#xD;&#xA;  LEFT OUTER JOIN SGT_PERSON P ON P.PERSON_ID=A.PERSON_ID&#xD;&#xA;  LEFT OUTER JOIN SGT_ORGANIZATION ORG&#xD;&#xA;   ON A.ORG_ID = ORG.ORG_ID&#xD;&#xA;where (cv.data2&lt;&gt;'outs' AND cv.data2&lt;&gt;'CLRD') and &#xD;&#xA;    d.DISTRIBUTION_STATUS_HISTORY_ID=&#xD;&#xA;  (&#xD;&#xA;  Select max(e.DISTRIBUTION_STATUS_HISTORY_ID)&#xD;&#xA;  from sgt_payment_history_distribution_status_history e  &#xD;&#xA;  where e.payment_history_distribution_id=a.payment_history_distribution_id&#xD;&#xA;  ) and d.transaction_date &lt;= @Paymentdate&#xD;&#xA;  ">
      <parameters>
        <parameter ID="@Paymentdate" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="rptPaymentHistoryDistributionStatusReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="Select a.PAYMENT_HISTORY_DISTRIBUTION_ID,A.PERSON_ID,A.ORG_ID,ORG.ORG_CODE,&#xD;&#xA;  CASE WHEN A.PERSON_ID IS NOT NULL THEN LAST_NAME +','+FIRST_NAME &#xD;&#xA;    WHEN A.ORG_ID IS NOT NULL THEN ORG.ORG_NAME&#xD;&#xA;    ELSE '' END &#xD;&#xA;  AS PERSONNAME,&#xD;&#xA;  check_number,a.PAYMENT_HISTORY_DISTRIBUTION_ID as controlnumber,cv.description as status,&#xD;&#xA;  (SELECT max(TRANSACTION_DATE)    &#xD;&#xA;  FROM SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY WHERE PAYMENT_HISTORY_DISTRIBUTION_ID = a.PAYMENT_HISTORY_DISTRIBUTION_ID&#xD;&#xA;  GROUP BY PAYMENT_HISTORY_HEADER_ID) as transaction_date,net_amount  &#xD;&#xA;from sgt_payment_history_distribution a &#xD;&#xA;       inner join sgt_payment_history_header b &#xD;&#xA;   on a.payment_history_header_id=b.payment_history_header_id&#xD;&#xA;  LEFT OUTER JOIN SGT_PERSON P ON P.PERSON_ID=A.PERSON_ID&#xD;&#xA;  LEFT OUTER JOIN SGT_ORGANIZATION ORG&#xD;&#xA;   ON A.ORG_ID = ORG.ORG_ID&#xD;&#xA;    inner join sgs_code_value cv&#xD;&#xA;   on cv.code_id=a.DISTRIBUTION_STATUS_ID and cv.code_value=a.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;     inner join sgs_code_value cv1&#xD;&#xA;   on cv1.code_id=2515 and cv1.code_value=cv.data2&#xD;&#xA;where cv1.code_value=Case When isnull(@Status,'') &lt;&gt; '' then @Status Else cv1.code_value End &#xD;&#xA;  and b.payment_date between @start_date and @end_date&#xD;&#xA;">
      <parameters>
        <parameter ID="@Status" sfwDataType="string" />
        <parameter ID="@start_date" sfwDataType="DateTime" />
        <parameter ID="@end_date" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="UpdateRecipientNameForDeathIssue" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="Update New Set New.RECIPIENT_NAME  = 'Estate of ' + New.RECIPIENT_NAME &#xD;&#xA; From sgt_payment_history_distribution old&#xD;&#xA; inner join sgt_payment_history_distribution new on New.OLD_DISTRIBUTION_ID = OLD.PAYMENT_HISTORY_DISTRIBUTION_ID  &#xD;&#xA; Inner Join SGT_PAYMENT_HISTORY_HEADER PHHOLD on old.Payment_history_header_id = PHHOLD.Payment_history_header_id &#xD;&#xA; Inner Join SGT_PAYMENT_HISTORY_HEADER PHHNEW on NEW.Payment_history_header_id = PHHNEW.Payment_history_header_id &#xD;&#xA; Inner Join Sgt_payee_account Pa on PHHNEW.Payee_account_id = Pa.Payee_account_id &#xD;&#xA;Inner join SGT_DEATH_NOTIFICATION DN on Pa.payee_perslink_id = DN.Person_id&#xD;&#xA;Where New.OLD_DISTRIBUTION_ID is not null and New.PAYMENT_METHOD_VALUE in ('CHK','ACH')&#xD;&#xA;and DN.DEATH_CERTIFIED_FLAG = 'Y' and DN.DATE_OF_DEATH  &gt; PHHOLD.Payment_date&#xD;&#xA;and PHHNEW.Payment_date = @PaymentDate and PHHNEW.Payment_schedule_id = @PaymentScheduleId">
      <parameters>
        <parameter ID="@PaymentDate" sfwDataType="DateTime" />
        <parameter ID="@PaymentScheduleId" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="CreateOutstandingDistributionHistoryRecords" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="INSERT INTO SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY&#xD;&#xA;(&#xD;&#xA;PAYMENT_HISTORY_DISTRIBUTION_ID, PAYMENT_HISTORY_HEADER_ID, DISTRIBUTION_STATUS_ID, DISTRIBUTION_STATUS_VALUE, TRANSACTION_DATE, STATUS_CHANGED_BY, STATUS_CHANGE_REASON_ID, STATUS_CHANGE_REASON_VALUE, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ&#xD;&#xA;)&#xD;&#xA;Select &#xD;&#xA;PAYMENT_HISTORY_DISTRIBUTION_ID,&#xD;&#xA;PAYMENT_HISTORY_HEADER_ID,&#xD;&#xA;DISTRIBUTION_STATUS_ID,&#xD;&#xA;DISTRIBUTION_STATUS_VALUE,&#xD;&#xA;TRANSACTION_DATE,&#xD;&#xA;'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) as STATUS_CHANGED_BY,&#xD;&#xA;2551 as STATUS_CHANGE_REASON_ID,&#xD;&#xA;null as STATUS_CHANGE_REASON_VALUE,&#xD;&#xA;'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) as CREATED_BY,&#xD;&#xA;getdate() as CREATED_DATE,&#xD;&#xA;'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) as MODIFIED_BY,&#xD;&#xA;getdate() as MODIFIED_DATE,&#xD;&#xA;0 as UPDATE_SEQ from&#xD;&#xA;(select a.*,b.payment_date as TRANSACTION_DATE from SGT_PAYMENT_HISTORY_DISTRIBUTION a&#xD;&#xA;  inner join SGT_PAYMENT_HISTORY_HEADER b on a.PAYMENT_HISTORY_HEADER_ID=b.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;  inner join sgs_code_value cv on cv.code_id=a.DISTRIBUTION_STATUS_ID and cv.code_value=a.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;where cv.data2='OUTS' and b.payment_schedule_id=@paymentscheduleid)TEMP">
      <parameters>
        <parameter ID="@paymentscheduleid" sfwDataType="int" />
        <parameter ID="@batchscheduleid" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="UpdateDistributionFromReissueApproveToReissued" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="INSERT INTO SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY&#xD;&#xA;(&#xD;&#xA; PAYMENT_HISTORY_DISTRIBUTION_ID, PAYMENT_HISTORY_HEADER_ID, DISTRIBUTION_STATUS_ID, DISTRIBUTION_STATUS_VALUE, TRANSACTION_DATE, STATUS_CHANGED_BY, STATUS_CHANGE_REASON_ID, STATUS_CHANGE_REASON_VALUE, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ&#xD;&#xA;)&#xD;&#xA;SELECT  PAYMENT_HISTORY_DISTRIBUTION_ID,&#xD;&#xA;  PAYMENT_HISTORY_HEADER_ID,&#xD;&#xA;  DISTRIBUTION_STATUS_ID,&#xD;&#xA;   CASE  WHEN TEMP.DATA1='ACH' THEN 'ARSD' &#xD;&#xA;       WHEN TEMP.DATA1='RACH' THEN 'RRSD'&#xD;&#xA;       WHEN TEMP.DATA1='RCHK' THEN 'RRRS'&#xD;&#xA;             WHEN TEMP.DATA1='CHK' THEN 'CVAC' END&#xD;&#xA;  AS DISTRIBUTION_STATUS_VALUE,&#xD;&#xA;  @PAYMENTDATE as TRANSACTION_DATE,&#xD;&#xA;  'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) as STATUS_CHANGED_BY,&#xD;&#xA;  2551 as STATUS_CHANGE_REASON_ID,&#xD;&#xA;  STATUS_CHANGE_REASON_VALUE,&#xD;&#xA;  'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) as CREATED_BY,&#xD;&#xA;  getdate() as CREATED_DATE,&#xD;&#xA;  'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) as MODIFIED_BY,&#xD;&#xA;  getdate() as MODIFIED_DATE,&#xD;&#xA;  0 as UPDATE_SEQ&#xD;&#xA;From&#xD;&#xA; ( SELECT A.*,CV.DATA1 AS DATA1 FROM SGT_PAYMENT_HISTORY_DISTRIBUTION A &#xD;&#xA;    INNER JOIN SGT_PAYMENT_HISTORY_HEADER B&#xD;&#xA;     ON A.PAYMENT_HISTORY_HEADER_ID=B.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;    INNER JOIN SGS_CODE_VALUE CV &#xD;&#xA;     ON CV.CODE_ID=A.DISTRIBUTION_STATUS_ID AND CV.CODE_VALUE=A.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;  WHERE CV.DATA2='RSAP' AND B.PAYMENT_DATE&lt;=@PAYMENTDATE&#xD;&#xA; )TEMP&#xD;&#xA; &#xD;&#xA; &#xD;&#xA;UPDATE D&#xD;&#xA; SET D.STATUS_VALUE='PRCD',&#xD;&#xA;  D.MODIFIED_BY='PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid),&#xD;&#xA;  D.MODIFIED_DATE=GETDATE(),&#xD;&#xA;  D.UPDATE_SEQ=D.UPDATE_SEQ+1&#xD;&#xA; FROM SGT_PAYMENT_HISTORY_HEADER D &#xD;&#xA; INNER JOIN &#xD;&#xA; (&#xD;&#xA;  SELECT DISTINCT a.PAYMENT_HISTORY_HEADER_ID FROM &#xD;&#xA;  SGT_PAYMENT_HISTORY_DISTRIBUTION A &#xD;&#xA;   INNER JOIN SGT_PAYMENT_HISTORY_HEADER B&#xD;&#xA;    ON A.PAYMENT_HISTORY_HEADER_ID=B.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;   INNER JOIN SGS_CODE_VALUE CV &#xD;&#xA;    ON CV.CODE_ID=A.DISTRIBUTION_STATUS_ID AND CV.CODE_VALUE=A.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;  WHERE CV.DATA2='RSAP' AND B.PAYMENT_DATE&lt;=@PAYMENTDATE&#xD;&#xA; ) T ON D.PAYMENT_HISTORY_HEADER_ID=T.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; &#xD;&#xA;UPDATE A&#xD;&#xA; SET DISTRIBUTION_STATUS_VALUE =&#xD;&#xA;   CASE  WHEN CV.DATA1='ACH' THEN 'ARSD' &#xD;&#xA;       WHEN CV.DATA1='RACH' THEN 'RRSD'&#xD;&#xA;       WHEN CV.DATA1='RCHK' THEN 'RRRS'&#xD;&#xA;             WHEN CV.DATA1='CHK' THEN 'CVAC' END,&#xD;&#xA;  modified_by='PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid),&#xD;&#xA;  modified_date=getdate()             &#xD;&#xA;FROM SGT_PAYMENT_HISTORY_DISTRIBUTION A &#xD;&#xA;  INNER JOIN SGT_PAYMENT_HISTORY_HEADER B&#xD;&#xA;   ON A.PAYMENT_HISTORY_HEADER_ID=B.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;  INNER JOIN SGS_CODE_VALUE CV &#xD;&#xA;   ON CV.CODE_ID=A.DISTRIBUTION_STATUS_ID AND CV.CODE_VALUE=A.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;WHERE CV.DATA2='RSAP' AND B.PAYMENT_DATE&lt;=@PAYMENTDATE">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
        <parameter ID="@batchscheduleid" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="UpdateOldDistribtuionID" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="UPDATE A&#xD;&#xA;SET A.OLD_DISTRIBUTION_ID=REISSAPP.PAYMENT_HISTORY_DISTRIBUTION_ID,&#xD;&#xA;    A.MODIFIED_BY='PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid),&#xD;&#xA;    A.MODIFIED_DATE=GETDATE(),&#xD;&#xA;    A.UPDATE_SEQ=A.UPDATE_SEQ+1&#xD;&#xA;FROM SGT_PAYMENT_HISTORY_DISTRIBUTION A &#xD;&#xA;  INNER JOIN SGT_PAYMENT_HISTORY_HEADER B&#xD;&#xA;    ON A.PAYMENT_HISTORY_HEADER_ID=B.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;  INNER JOIN SGS_CODE_VALUE CV &#xD;&#xA;      ON CV.CODE_ID=A.DISTRIBUTION_STATUS_ID AND CV.CODE_VALUE=A.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;  INNER JOIN &#xD;&#xA;  (&#xD;&#xA;   SELECT A.PAYMENT_HISTORY_HEADER_ID,A.PAYMENT_HISTORY_DISTRIBUTION_ID,B.PAYEE_ACCOUNT_ID&#xD;&#xA;   FROM SGT_PAYMENT_HISTORY_DISTRIBUTION A &#xD;&#xA;     INNER JOIN SGT_PAYMENT_HISTORY_HEADER B&#xD;&#xA;      ON A.PAYMENT_HISTORY_HEADER_ID=B.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;     INNER JOIN SGS_CODE_VALUE CV &#xD;&#xA;      ON CV.CODE_ID=A.DISTRIBUTION_STATUS_ID AND CV.CODE_VALUE=A.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;   WHERE CV.DATA2 in ('RSAP','ERAP') AND B.PAYMENT_DATE&lt; @PAYMENTDATE&#xD;&#xA;  )REISSAPP ON B.OLD_PAYMENT_HISTORY_HEADER_ID=REISSAPP.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;WHERE B.PAYMENT_SCHEDULE_ID=@PAYMENTSCHEDULEID AND CV.DATA2='OUTS'">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
        <parameter ID="@PAYMENTSCHEDULEID" sfwDataType="int" />
        <parameter ID="@batchscheduleid" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadAllOutstatingChecks" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT A.*,C.*,R.PAYMENT_HISTORY_HEADER_ID REMITTANCE_HISTORY_HEADER_ID,P.*,S.* FROM SGT_PAYMENT_HISTORY_DISTRIBUTION A WITH(NOLOCK)&#xD;&#xA;  INNER JOIN SGS_CODE_VALUE B WITH(NOLOCK) ON B.CODE_ID=A.DISTRIBUTION_STATUS_ID AND B.CODE_VALUE=A.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;  INNER JOIN SGT_PAYMENT_HISTORY_HEADER C WITH(NOLOCK) ON A.PAYMENT_HISTORY_HEADER_ID=C.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;  LEFT JOIN SGT_PAYEE_ACCOUNT P WITH(NOLOCK) ON C.PAYEE_ACCOUNT_ID=P.PAYEE_ACCOUNT_ID&#xD;&#xA;  LEFT JOIN SGT_REMITTANCE R WITH(NOLOCK) ON R.PAYMENT_HISTORY_HEADER_ID=C.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;  INNER JOIN SGT_PAYMENT_SCHEDULE S ON S.PAYMENT_SCHEDULE_ID=C.PAYMENT_SCHEDULE_ID&#xD;&#xA;WHERE B.DATA2='OUTS' AND A.PAYMENT_METHOD_VALUE='CHK'&#xD;&#xA;AND DATEDIFF(D,C.PAYMENT_DATE,@BATCHRUNDATE) &gt; 59&#xD;&#xA;">
      <parameters>
        <parameter ID="@BATCHRUNDATE" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="rptPaymentHistoryDistributionStatusReportOtherThanOutstandingAndCleared" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT A.PERSON_ID,A.ORG_ID,ORG.ORG_CODE,&#xD;&#xA;  CASE WHEN A.PERSON_ID IS NOT NULL THEN LAST_NAME +','+FIRST_NAME &#xD;&#xA;    WHEN A.ORG_ID IS NOT NULL THEN ORG.ORG_NAME&#xD;&#xA;    ELSE '' END &#xD;&#xA;  AS PERSONNAME,&#xD;&#xA;  CHECK_NUMBER,A.PAYMENT_HISTORY_DISTRIBUTION_ID AS CONTROLNUMBER,CV.DESCRIPTION AS STATUS,NET_AMOUNT&#xD;&#xA;FROM SGT_PAYMENT_HISTORY_DISTRIBUTION A WITH(NOLOCK)&#xD;&#xA;  INNER JOIN SGS_CODE_VALUE CV WITH(NOLOCK) ON CV.CODE_ID=A.DISTRIBUTION_STATUS_ID AND CV.CODE_VALUE=A.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;  INNER JOIN SGT_PAYMENT_HISTORY_HEADER C WITH(NOLOCK) ON A.PAYMENT_HISTORY_HEADER_ID=C.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;  INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY D ON A.PAYMENT_HISTORY_DISTRIBUTION_ID=D.PAYMENT_HISTORY_DISTRIBUTION_ID&#xD;&#xA;  LEFT OUTER JOIN SGT_PERSON P ON P.PERSON_ID=A.PERSON_ID&#xD;&#xA;  LEFT OUTER JOIN SGT_ORGANIZATION ORG&#xD;&#xA;   ON A.ORG_ID = ORG.ORG_ID&#xD;&#xA;WHERE (CV.DATA2&lt;&gt;'OUTS' AND CV.DATA2&lt;&gt;'CLRD') AND (A.PAYMENT_METHOD_VALUE='CHK' OR A.PAYMENT_METHOD_VALUE='RCHK') AND &#xD;&#xA;    D.DISTRIBUTION_STATUS_HISTORY_ID=&#xD;&#xA;  (&#xD;&#xA;  SELECT MAX(E.DISTRIBUTION_STATUS_HISTORY_ID)&#xD;&#xA;  FROM SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY E  &#xD;&#xA;  WHERE E.PAYMENT_HISTORY_DISTRIBUTION_ID=A.PAYMENT_HISTORY_DISTRIBUTION_ID&#xD;&#xA;  ) AND D.TRANSACTION_DATE BETWEEN DATEADD(MM,-1,@PAYMENTDATE) AND DATEADD(DD,-1,@PAYMENTDATE)&#xD;&#xA;  ">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="rptOutstandingChecks" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT A.PERSON_ID,A.ORG_ID,ORG.ORG_CODE,&#xD;&#xA;  CASE WHEN A.PERSON_ID IS NOT NULL THEN LAST_NAME +','+FIRST_NAME &#xD;&#xA;    WHEN A.ORG_ID IS NOT NULL THEN ORG.ORG_NAME&#xD;&#xA;    ELSE '' END &#xD;&#xA;  AS PERSONNAME,&#xD;&#xA;  CHECK_NUMBER,A.PAYMENT_HISTORY_DISTRIBUTION_ID AS CONTROLNUMBER,CV.DESCRIPTION AS STATUS,NET_AMOUNT,A.ACCOUNT_NUMBER AS ACCOUNT_NO&#xD;&#xA;  ,CVB.DATA2 AS NDPERS_BANK_ACCOUNT, C.PAYMENT_DATE AS Check_Date,ISNULL(CVBENTYPE.DESCRIPTION,'') AS Benefit_Type &#xD;&#xA;&#xD;&#xA;FROM SGT_PAYMENT_HISTORY_DISTRIBUTION A WITH(NOLOCK)&#xD;&#xA;  INNER JOIN SGT_PAYMENT_HISTORY_HEADER C WITH(NOLOCK) ON A.PAYMENT_HISTORY_HEADER_ID=C.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;  INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY D ON A.PAYMENT_HISTORY_DISTRIBUTION_ID=D.PAYMENT_HISTORY_DISTRIBUTION_ID&#xD;&#xA;  INNER JOIN SGS_CODE_VALUE CV WITH(NOLOCK) ON CV.CODE_ID=D.DISTRIBUTION_STATUS_ID AND CV.CODE_VALUE=D.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;  LEFT OUTER JOIN SGT_PERSON P ON P.PERSON_ID=A.PERSON_ID &#xD;&#xA;  LEFT OUTER JOIN SGT_ORGANIZATION ORG ON A.ORG_ID = ORG.ORG_ID&#xD;&#xA;  LEFT OUTER JOIN SGT_PAYEE_ACCOUNT PAYEE ON PAYEE.PAYEE_ACCOUNT_ID = C.PAYEE_ACCOUNT_ID&#xD;&#xA;  INNER JOIN SGT_PLAN PLN ON PLN.PLAN_ID = C.PLAN_ID&#xD;&#xA;  INNER JOIN SGS_CODE_VALUE CVB ON CVB.CODE_VALUE = CASE WHEN PLN.BENEFIT_TYPE_VALUE = 'INSR' THEN 'INSR' ELSE 'RETR' END AND CVB.CODE_ID = 7005 &#xD;&#xA;  LEFT OUTER JOIN SGS_CODE_VALUE CVBENTYPE ON CVBENTYPE.CODE_VALUE = PAYEE.BENEFIT_ACCOUNT_TYPE_VALUE AND CVBENTYPE.CODE_ID = 1904 &#xD;&#xA;WHERE (CV.DATA2 = 'OUTS') &#xD;&#xA;AND (A.PAYMENT_METHOD_VALUE='CHK' OR A.PAYMENT_METHOD_VALUE='RCHK')&#xD;&#xA;AND D.DISTRIBUTION_STATUS_HISTORY_ID=&#xD;&#xA;  (&#xD;&#xA;&#x9;  SELECT MAX(E.DISTRIBUTION_STATUS_HISTORY_ID)&#xD;&#xA;&#x9;  FROM SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY E  &#xD;&#xA;&#x9;  WHERE E.PAYMENT_HISTORY_DISTRIBUTION_ID=A.PAYMENT_HISTORY_DISTRIBUTION_ID&#xD;&#xA;&#x9;  AND E.TRANSACTION_DATE&lt; @PAYMENTDATE&#xD;&#xA;  )&#xD;&#xA;ORDER BY A.ACCOUNT_NUMBER,CVB.DATA2,CAST(CHECK_NUMBER AS INT)">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
      </parameters>
    </query>
    <query ID="fleBNDClearedCheckFileInbound" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select a.* from sgt_payment_history_distribution a WITH(NOLOCK)&#xD;&#xA;  inner join sgs_code_value b WITH(NOLOCK) on b.code_id=a.distribution_status_id and b.code_value=a.distribution_status_value&#xD;&#xA;where b.data2='outs' and (a.payment_method_value='CHK' or a.payment_method_value='RCHK')">
      <parameters />
    </query>
    <query ID="CreateVendorReceivables" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="INSERT INTO SGT_PROVIDER_REPORT_PAYMENT&#xD;&#xA;(&#xD;&#xA;SUBSYSTEM_ID, SUBSYSTEM_VALUE, SUBSYSTEM_REF_ID, PERSON_ID, PROVIDER_ORG_ID, PAYEE_ACCOUNT_ID, EFFECTIVE_DATE, AMOUNT, BATCH_REQUEST_ID, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ&#xD;&#xA;)&#xD;&#xA;SELECT 349 AS SUBSYSTEM_ID,&#xD;&#xA; 'PMNT' AS SUBSYSTEM_VALUE,&#xD;&#xA; temp.PAYMENT_HISTORY_DETAIL_ID AS SUBSYSTEM_REF_ID,&#xD;&#xA; temp.PERSON_ID AS PERSON_ID,&#xD;&#xA; temp.VENDOR_ORG_ID AS PROVIDER_ORG_ID,&#xD;&#xA; temp.PAYEE_ACCOUNT_ID AS PAYEE_ACCOUNT_ID,&#xD;&#xA; @PAYMENTDATE AS EFFECTIVE_DATE,&#xD;&#xA; (temp.AMOUNT * -1) AS AMOUNT,&#xD;&#xA; 0 AS BATCH_REQUEST_ID,&#xD;&#xA; 'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) as CREATED_BY,&#xD;&#xA; getdate() as CREATED_DATE,&#xD;&#xA; 'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) as MODIFIED_BY,&#xD;&#xA; GETDATE() AS MODIFIED_DATE,&#xD;&#xA; 0 AS UPDATE_SEQ FROM&#xD;&#xA;(&#xD;&#xA;SELECT t.* FROM SGT_PAYMENT_HISTORY_DISTRIBUTION A &#xD;&#xA; INNER JOIN SGT_PAYMENT_HISTORY_HEADER B ON A.PAYMENT_HISTORY_HEADER_ID=B.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; INNER JOIN &#xD;&#xA; (&#xD;&#xA; SELECT C.*,B.PAYEE_ACCOUNT_ID,B.PERSON_ID,A.PAYMENT_HISTORY_DISTRIBUTION_ID&#xD;&#xA; FROM SGT_PAYMENT_HISTORY_DISTRIBUTION A &#xD;&#xA;   INNER JOIN SGT_PAYMENT_HISTORY_HEADER B&#xD;&#xA;    ON A.PAYMENT_HISTORY_HEADER_ID=B.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;   INNER JOIN SGT_PAYMENT_HISTORY_DETAIL C&#xD;&#xA;    ON A.PAYMENT_HISTORY_HEADER_ID=C.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;   INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT&#xD;&#xA;    ON C.PAYMENT_ITEM_TYPE_ID=PIT.PAYMENT_ITEM_TYPE_ID&#xD;&#xA;   INNER JOIN SGS_CODE_VALUE CV &#xD;&#xA;    ON CV.CODE_ID=A.DISTRIBUTION_STATUS_ID AND CV.CODE_VALUE=A.DISTRIBUTION_STATUS_VALUE&#xD;&#xA; WHERE CV.DATA2='RSAP' AND c.VENDOR_ORG_ID is not null&#xD;&#xA;    AND B.PAYMENT_DATE &lt; @PAYMENTDATE&#xD;&#xA; )T on A.OLD_DISTRIBUTION_ID=T.PAYMENT_HISTORY_DISTRIBUTION_ID&#xD;&#xA;WHERE A.OLD_DISTRIBUTION_ID IS NOT NULL AND B.PAYMENT_SCHEDULE_ID=@PAYMENTSCHEDULEID&#xD;&#xA;)temp">
      <parameters>
        <parameter ID="@PAYMENTSCHEDULEID" sfwDataType="int" />
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
        <parameter ID="@batchscheduleid" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="UpdateDistributionFromEscheatApproveToEscheatReissue" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="INSERT INTO SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY&#xD;&#xA;(&#xD;&#xA; PAYMENT_HISTORY_DISTRIBUTION_ID, PAYMENT_HISTORY_HEADER_ID, DISTRIBUTION_STATUS_ID, DISTRIBUTION_STATUS_VALUE, TRANSACTION_DATE, STATUS_CHANGED_BY, STATUS_CHANGE_REASON_ID, STATUS_CHANGE_REASON_VALUE, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;SELECT  PAYMENT_HISTORY_DISTRIBUTION_ID,&#xD;&#xA;  PAYMENT_HISTORY_HEADER_ID,&#xD;&#xA;  DISTRIBUTION_STATUS_ID,&#xD;&#xA;   CASE  WHEN TEMP.DATA1='RCHK' THEN 'RRED'&#xD;&#xA;      WHEN TEMP.DATA1='CHK' THEN 'ERED' END AS&#xD;&#xA;  DISTRIBUTION_STATUS_VALUE,&#xD;&#xA;  @PAYMENTDATE as TRANSACTION_DATE,&#xD;&#xA;  'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) as STATUS_CHANGED_BY,&#xD;&#xA;  2551 as STATUS_CHANGE_REASON_ID,&#xD;&#xA;  STATUS_CHANGE_REASON_VALUE,&#xD;&#xA;  'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) as CREATED_BY,&#xD;&#xA;  getdate() as CREATED_DATE,&#xD;&#xA;  'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) as MODIFIED_BY,&#xD;&#xA;  getdate() as MODIFIED_DATE,&#xD;&#xA;  0 as UPDATE_SEQ&#xD;&#xA;From&#xD;&#xA; ( SELECT A.*,CV.DATA1 FROM SGT_PAYMENT_HISTORY_DISTRIBUTION A &#xD;&#xA;    INNER JOIN SGT_PAYMENT_HISTORY_HEADER B&#xD;&#xA;     ON A.PAYMENT_HISTORY_HEADER_ID=B.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;    INNER JOIN SGS_CODE_VALUE CV &#xD;&#xA;     ON CV.CODE_ID=A.DISTRIBUTION_STATUS_ID AND CV.CODE_VALUE=A.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;  WHERE CV.DATA2='ERAP' AND B.PAYMENT_DATE&lt;=@PAYMENTDATE&#xD;&#xA; )TEMP&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;UPDATE D&#xD;&#xA; SET D.STATUS_VALUE='PRCD',&#xD;&#xA;  D.MODIFIED_BY='PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid),&#xD;&#xA;  D.MODIFIED_DATE=GETDATE(),&#xD;&#xA;  D.UPDATE_SEQ=D.UPDATE_SEQ+1&#xD;&#xA; FROM SGT_PAYMENT_HISTORY_HEADER D &#xD;&#xA; INNER JOIN &#xD;&#xA; (&#xD;&#xA;  SELECT DISTINCT a.PAYMENT_HISTORY_HEADER_ID FROM &#xD;&#xA;  SGT_PAYMENT_HISTORY_DISTRIBUTION A &#xD;&#xA;   INNER JOIN SGT_PAYMENT_HISTORY_HEADER B&#xD;&#xA;    ON A.PAYMENT_HISTORY_HEADER_ID=B.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;   INNER JOIN SGS_CODE_VALUE CV &#xD;&#xA;    ON CV.CODE_ID=A.DISTRIBUTION_STATUS_ID AND CV.CODE_VALUE=A.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;  WHERE CV.DATA2='ERAP' AND B.PAYMENT_DATE&lt;=@PAYMENTDATE&#xD;&#xA; ) T ON D.PAYMENT_HISTORY_HEADER_ID=T.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; &#xD;&#xA;&#xD;&#xA;UPDATE A&#xD;&#xA; SET DISTRIBUTION_STATUS_VALUE =&#xD;&#xA;   CASE  WHEN CV.DATA1='RCHK' THEN 'RRED'&#xD;&#xA;      WHEN CV.DATA1='CHK' THEN 'ERED' END,&#xD;&#xA;  modified_by='PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid),&#xD;&#xA;  modified_date=getdate()             &#xD;&#xA;FROM SGT_PAYMENT_HISTORY_DISTRIBUTION A &#xD;&#xA;  INNER JOIN SGT_PAYMENT_HISTORY_HEADER B&#xD;&#xA;   ON A.PAYMENT_HISTORY_HEADER_ID=B.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;  INNER JOIN SGS_CODE_VALUE CV &#xD;&#xA;   ON CV.CODE_ID=A.DISTRIBUTION_STATUS_ID AND CV.CODE_VALUE=A.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;WHERE CV.DATA2='ERAP' AND B.PAYMENT_DATE&lt;=@PAYMENTDATE">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
        <parameter ID="@batchscheduleid" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadPayeeWithMultipleACHorCheck" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="DECLARE @FILTER1 VARCHAR(4)&#xD;&#xA;DECLARE @FILTER2 VARCHAR(4)&#xD;&#xA;&#xD;&#xA;IF(@CHOICE = 1)&#xD;&#xA; BEGIN&#xD;&#xA;  SET @FILTER1 = 'CHK'&#xD;&#xA;  SET @FILTER2 = 'RCHK'&#xD;&#xA; END&#xD;&#xA;ELSE&#xD;&#xA; BEGIN&#xD;&#xA;  SET @FILTER1 = 'ACH'&#xD;&#xA;  SET @FILTER2 = 'RACH'&#xD;&#xA; END&#xD;&#xA;&#xD;&#xA;SELECT PA.PAYEE_ACCOUNT_ID,ISNULL(PA.PAYEE_PERSLINK_ID,PA.PAYEE_ORG_ID) AS PERSON_ORG_ID,&#xD;&#xA;CASE WHEN PA.PAYEE_PERSLINK_ID IS NOT NULL THEN PER.LAST_NAME+' '+PER.FIRST_NAME&#xD;&#xA; ELSE ORG.ORG_NAME END AS PERSON_ORG_NAME,COUNT(0) AS CNT&#xD;&#xA;FROM SGT_PAYMENT_HISTORY_HEADER HED WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION DIST WITH(NOLOCK) ON DIST.PAYMENT_HISTORY_HEADER_ID = HED.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT PA WITH(NOLOCK) ON HED.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;LEFT JOIN SGT_PERSON PER WITH(NOLOCK) ON PA.PAYEE_PERSLINK_ID = PER.PERSON_ID&#xD;&#xA;LEFT JOIN SGT_ORGANIZATION ORG WITH(NOLOCK) ON PA.PAYEE_ORG_ID = ORG.ORG_ID&#xD;&#xA;WHERE HED.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID&#xD;&#xA;AND DIST.PAYMENT_METHOD_VALUE IN (@FILTER1,@FILTER2)&#xD;&#xA;GROUP BY PA.PAYEE_ACCOUNT_ID,PA.PAYEE_PERSLINK_ID,PA.PAYEE_ORG_ID,PER.LAST_NAME,PER.FIRST_NAME,ORG.ORG_NAME&#xD;&#xA;HAVING COUNT(0) &gt; 1">
      <parameters>
        <parameter ID="@CHOICE" sfwDataType="int" />
        <parameter ID="@PAYMENTSCHEDULEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="CreateCheckHistoryforEscheatToState" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="-------------------------------------------------------------------------------------------&#xD;&#xA;-- cdoPaymentHistoryDistribution.CreateCheckHistoryforEscheatSate&#xD;&#xA;-------------------------------------------------------------------------------------------&#xD;&#xA;&#xD;&#xA;DECLARE @CHECKNO_RETR INT&#xD;&#xA;DECLARE @CHECKBOOKID_RETR INT&#xD;&#xA;&#xD;&#xA;DECLARE @CHECKNO_INSR INT&#xD;&#xA;DECLARE @CHECKBOOKID_INSR INT&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb..#TEMP') IS NOT NULL&#xD;&#xA;    DROP TABLE #TEMP&#xD;&#xA;&#xD;&#xA;SELECT * &#xD;&#xA;INTO #TEMP&#xD;&#xA;FROM SGS_CODE_VALUE&#xD;&#xA;WHERE CODE_ID = 7005&#xD;&#xA;&#xD;&#xA;SELECT @CHECKNO_RETR = CASE WHEN ISNULL(LAST_CHECK_NUMBER,'') = '' THEN FIRST_CHECK_NUMBER &#xD;&#xA;     ELSE LAST_CHECK_NUMBER END,&#xD;&#xA;   @CHECKBOOKID_RETR  = CHECK_BOOK_ID&#xD;&#xA;FROM SGT_PAYMENT_CHECK_BOOK CB&#xD;&#xA;JOIN #TEMP CV ON CV.DATA3 = CB.CHECK_BOOK_ID&#xD;&#xA;WHERE EFFECTIVE_DATE=(SELECT MAX(EFFECTIVE_DATE)FROM SGT_PAYMENT_CHECK_BOOK WHERE EFFECTIVE_DATE&lt;=@PAYMENTDATE)&#xD;&#xA;AND CV.CODE_VALUE = 'RETR'&#xD;&#xA;&#xD;&#xA;SELECT @CHECKNO_INSR = CASE WHEN ISNULL(LAST_CHECK_NUMBER,'') = '' THEN FIRST_CHECK_NUMBER &#xD;&#xA;     ELSE LAST_CHECK_NUMBER END,&#xD;&#xA;   @CHECKBOOKID_INSR  = CHECK_BOOK_ID&#xD;&#xA;FROM SGT_PAYMENT_CHECK_BOOK CB&#xD;&#xA;JOIN #TEMP CV ON CV.DATA3 = CB.CHECK_BOOK_ID&#xD;&#xA;WHERE EFFECTIVE_DATE=(SELECT MAX(EFFECTIVE_DATE)FROM SGT_PAYMENT_CHECK_BOOK WHERE EFFECTIVE_DATE&lt;=@PAYMENTDATE)&#xD;&#xA;AND CV.CODE_VALUE = 'INSR'&#xD;&#xA;&#xD;&#xA;INSERT INTO SGT_PAYMENT_HISTORY_DISTRIBUTION(PAYMENT_HISTORY_HEADER_ID, PAYMENT_METHOD_ID, PAYMENT_METHOD_VALUE, &#xD;&#xA;CHECK_MESSAGE, DISTRIBUTION_STATUS_ID, DISTRIBUTION_STATUS_VALUE, NET_AMOUNT, CHECK_NUMBER, &#xD;&#xA;OLD_DISTRIBUTION_ID, RECIPIENT_NAME, FBO_CO, ADDR_LINE_1, ADDR_LINE_2, ADDR_CITY, ADDR_STATE_ID,&#xD;&#xA;ADDR_STATE_VALUE, ADDR_COUNTRY_ID, ADDR_COUNTRY_VALUE, &#xD;&#xA;ADDR_ZIP_CODE, ADDR_ZIP_4_CODE, FOREIGN_PROVINCE, FOREIGN_POSTAL_CODE, BANK_NAME, ROUTING_NUMBER,&#xD;&#xA;ACCOUNT_TYPE_ID, ACCOUNT_TYPE_VALUE, ACCOUNT_NUMBER, PERSON_ID, ORG_ID, CREATED_BY, CREATED_DATE, &#xD;&#xA;MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ)&#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA; PAYMENT_HISTORY_HEADER_ID,PAYMENT_METHOD_ID,PAYMENT_METHOD_VALUE,&#xD;&#xA; CHECK_MESSAGE,DISTRIBUTION_STATUS_ID,DISTRIBUTION_STATUS_VALUE,&#xD;&#xA; SUM(AMOUNT) AS NET_AMOUNT,&#xD;&#xA; (ROW_NUMBER() OVER (PARTITION BY TEMP.BENEFIT_TYPE_VALUE ORDER BY PAYMENT_HISTORY_HEADER_ID))+&#xD;&#xA; CASE &#xD;&#xA;&#x9;WHEN &#xD;&#xA;&#x9;&#x9;BENEFIT_TYPE_VALUE = 'INSR' &#xD;&#xA;&#x9;THEN &#xD;&#xA;&#x9;&#x9;@CHECKNO_INSR&#xD;&#xA;&#x9;ELSE&#xD;&#xA;&#x9;&#x9;@CHECKNO_RETR&#xD;&#xA;&#x9;END&#xD;&#xA;   AS CHECK_NUMBER,&#xD;&#xA; PAYMENT_HISTORY_DISTRIBUTION_ID AS OLD_DISTRIBUTION_ID,RECIPIENT_NAME,&#xD;&#xA; FBO_CO AS FBO_CO, ADDR_LINE_1,ADDR_LINE_2,&#xD;&#xA; CITY,STATE_ID,STATE_VALUE,COUNTRY_ID,COUNTRY_VALUE,&#xD;&#xA; ZIP_CODE,ZIP_4_CODE,FOREIGN_PROVINCE,FOREIGN_POSTAL_CODE,&#xD;&#xA; NULL AS BANK_NAME,NULL AS ROUTING_NUMBER,&#xD;&#xA; 211 AS ACCOUNT_TYPE_ID,NULL AS ACCOUNT_TYPE_VALUE,NULL AS ACCOUNT_NUMBER,&#xD;&#xA; null as PERSON_ID,ORG_ID,'PERSLink Batch' AS CREATED_BY,GETDATE() AS CREATED_DATE,&#xD;&#xA; 'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) AS MODIFIED_BY,GETDATE() AS MODIFIED_DATE,0 AS UPDATE_SEQ  &#xD;&#xA;FROM &#xD;&#xA; (&#xD;&#xA; SELECT PHH.PAYMENT_HISTORY_HEADER_ID, PHH.ORG_ID,BS.CHECK_MESSAGE,&#xD;&#xA;   2504 AS PAYMENT_METHOD_ID,&#xD;&#xA;  'CHK' AS PAYMENT_METHOD_VALUE,&#xD;&#xA;  2505 AS DISTRIBUTION_STATUS_ID,&#xD;&#xA;  'COTS' AS DISTRIBUTION_STATUS_VALUE,&#xD;&#xA;  O.ORG_CODE+','+O.ORG_NAME AS RECIPIENT_NAME, &#xD;&#xA;  PHD.AMOUNT*PIT.ITEM_TYPE_DIRECTION AS AMOUNT,&#xD;&#xA;  OLDDIST.PAYMENT_HISTORY_DISTRIBUTION_ID,  &#xD;&#xA;  OCA.ADDR_LINE_1 AS ADDR_LINE_1,&#xD;&#xA;  OCA.ADDR_LINE_2 AS ADDR_LINE_2,&#xD;&#xA;  OCA.CITY AS CITY,&#xD;&#xA;  OCA.STATE_ID AS STATE_ID,&#xD;&#xA;  OCA.STATE_VALUE AS STATE_VALUE,&#xD;&#xA;  OCA.COUNTRY_ID AS COUNTRY_ID,&#xD;&#xA;  OCA.COUNTRY_VALUE AS COUNTRY_VALUE,&#xD;&#xA;  OCA.ZIP_CODE AS ZIP_CODE,&#xD;&#xA;  OCA.ZIP_4_CODE AS ZIP_4_CODE,&#xD;&#xA;  OCA.FOREIGN_PROVINCE AS FOREIGN_PROVINCE,&#xD;&#xA;  OCA.FOREIGN_POSTAL_CODE AS FOREIGN_POSTAL_CODE,&#xD;&#xA;  null AS FBO_CO,&#xD;&#xA;  PLN.BENEFIT_TYPE_VALUE AS BENEFIT_TYPE_VALUE&#xD;&#xA;  FROM SGT_PAYMENT_HISTORY_DETAIL  PHD WITH(NOLOCK)&#xD;&#xA;  INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)  &#xD;&#xA;  ON PHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;  INNER JOIN (SELECT PLAN_ID, CASE WHEN BENEFIT_TYPE_VALUE = 'INSR' THEN 'INSR' ELSE 'RETR' END AS BENEFIT_TYPE_VALUE FROM SGT_PLAN WITH(NOLOCK)) PLN &#xD;&#xA;  ON PLN.PLAN_ID = PHH.PLAN_ID&#xD;&#xA;  INNER JOIN SGT_PAYMENT_HISTORY_HEADER OLDHEADER WITH(NOLOCK) &#xD;&#xA;  ON OLDHEADER.PAYMENT_HISTORY_HEADER_ID = PHH.OLD_PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;  INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION OLDDIST WITH(NOLOCK)&#xD;&#xA;  ON OLDDIST.PAYMENT_HISTORY_HEADER_ID = OLDHEADER.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;  INNER JOIN SGT_PAYMENT_ITEM_TYPE PIT WITH(NOLOCK) &#xD;&#xA;   ON PHD.PAYMENT_ITEM_TYPE_ID = PIT.PAYMENT_ITEM_TYPE_ID &#xD;&#xA;  INNER JOIN SGT_PAYMENT_SCHEDULE BS WITH(NOLOCK) &#xD;&#xA;   ON PHH.PAYMENT_SCHEDULE_ID = BS.PAYMENT_SCHEDULE_ID &#xD;&#xA;  INNER JOIN SGT_ORGANIZATION O WITH(NOLOCK)  ON PHH.ORG_ID = O.ORG_ID&#xD;&#xA;  LEFT OUTER JOIN SGT_ORG_CONTACT_ADDRESS OCA WITH(NOLOCK)  ON O.PRIMARY_ADDRESS_ID=OCA.CONTACT_ORG_ADDRESS_ID&#xD;&#xA;  WHERE PHH.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID &#xD;&#xA;  AND OLDDIST.DISTRIBUTION_STATUS_VALUE IN ('CEST', 'RSST') and OLDHEADER.PAYMENT_DATE &lt;= @PAYMENTDATE&#xD;&#xA;   &#xD;&#xA; ) AS TEMP&#xD;&#xA;GROUP BY PAYMENT_HISTORY_HEADER_ID,ORG_ID,CHECK_MESSAGE,&#xD;&#xA; PAYMENT_METHOD_ID,PAYMENT_METHOD_VALUE,&#xD;&#xA; DISTRIBUTION_STATUS_ID,&#xD;&#xA; DISTRIBUTION_STATUS_VALUE,&#xD;&#xA; RECIPIENT_NAME,&#xD;&#xA; ADDR_LINE_1,ADDR_LINE_2,&#xD;&#xA; CITY,STATE_ID,STATE_VALUE,COUNTRY_ID,COUNTRY_VALUE,&#xD;&#xA; ZIP_CODE,ZIP_4_CODE,FOREIGN_PROVINCE,FOREIGN_POSTAL_CODE,FBO_CO,PAYMENT_HISTORY_DISTRIBUTION_ID, BENEFIT_TYPE_VALUE&#xD;&#xA;HAVING SUM(AMOUNT)&gt;0&#xD;&#xA;ORDER BY PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#xD;&#xA;SELECT @CHECKNO_RETR = MAX(CONVERT(INT,PHD.CHECK_NUMBER))&#xD;&#xA;FROM SGT_PAYMENT_HISTORY_DISTRIBUTION PHD&#xD;&#xA;JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID AND PHH.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID&#xD;&#xA;JOIN SGT_PLAN P ON P.PLAN_ID = PHH.PLAN_ID&#xD;&#xA;WHERE P.BENEFIT_TYPE_VALUE &lt;&gt; 'INSR'&#xD;&#xA;&#xD;&#xA;SELECT @CHECKNO_INSR = MAX(CONVERT(INT,PHD.CHECK_NUMBER))&#xD;&#xA;FROM SGT_PAYMENT_HISTORY_DISTRIBUTION PHD&#xD;&#xA;JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID AND PHH.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID&#xD;&#xA;JOIN SGT_PLAN P ON P.PLAN_ID = PHH.PLAN_ID&#xD;&#xA;WHERE P.BENEFIT_TYPE_VALUE = 'INSR'&#xD;&#xA;&#xD;&#xA;IF @CHECKNO_RETR IS NOT NULL &#xD;&#xA;BEGIN&#xD;&#xA;&#x9;UPDATE CB&#xD;&#xA;&#x9;SET CB.LAST_CHECK_NUMBER = @CHECKNO_RETR&#xD;&#xA;&#x9;&#x9;,MODIFIED_BY='PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid),MODIFIED_DATE=GETDATE(),UPDATE_SEQ = UPDATE_SEQ+1&#xD;&#xA;&#x9;FROM SGT_PAYMENT_CHECK_BOOK CB&#xD;&#xA;&#x9;WHERE CB.CHECK_BOOK_ID = @CHECKBOOKID_RETR&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;IF @CHECKNO_INSR IS NOT NULL &#xD;&#xA;BEGIN&#xD;&#xA;&#x9;UPDATE CB&#xD;&#xA;&#x9;SET CB.LAST_CHECK_NUMBER = @CHECKNO_INSR&#xD;&#xA;&#x9;&#x9;,MODIFIED_BY='PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid),MODIFIED_DATE=GETDATE(),UPDATE_SEQ = UPDATE_SEQ+1&#xD;&#xA;&#x9;FROM SGT_PAYMENT_CHECK_BOOK CB&#xD;&#xA;&#x9;WHERE CB.CHECK_BOOK_ID = @CHECKBOOKID_INSR&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb..#TEMP') IS NOT NULL&#xD;&#xA;    DROP TABLE #TEMP">
      <parameters>
        <parameter ID="@PAYMENTSCHEDULEID" sfwDataType="int" />
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
        <parameter ID="@batchscheduleid" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="UpdateDistributionFromEscheatToStateToPaymentIssued" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="INSERT INTO SGT_PAYMENT_HISTORY_DISTRIBUTION_STATUS_HISTORY&#xD;&#xA;(&#xD;&#xA; PAYMENT_HISTORY_DISTRIBUTION_ID, PAYMENT_HISTORY_HEADER_ID, DISTRIBUTION_STATUS_ID, DISTRIBUTION_STATUS_VALUE, TRANSACTION_DATE, STATUS_CHANGED_BY, STATUS_CHANGE_REASON_ID, STATUS_CHANGE_REASON_VALUE, CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;SELECT  PAYMENT_HISTORY_DISTRIBUTION_ID,&#xD;&#xA;  PAYMENT_HISTORY_HEADER_ID,&#xD;&#xA;  DISTRIBUTION_STATUS_ID,&#xD;&#xA;   CASE  WHEN TEMP.DATA1='CHK' THEN 'CPIS'&#xD;&#xA;      WHEN TEMP.DATA1='RCHK' THEN 'RPIS' END AS&#xD;&#xA;  DISTRIBUTION_STATUS_VALUE,&#xD;&#xA;  @PAYMENTDATE as TRANSACTION_DATE,&#xD;&#xA;  'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) as STATUS_CHANGED_BY,&#xD;&#xA;  2551 as STATUS_CHANGE_REASON_ID,&#xD;&#xA;  STATUS_CHANGE_REASON_VALUE,&#xD;&#xA;  'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) as CREATED_BY,&#xD;&#xA;  getdate() as CREATED_DATE,&#xD;&#xA;  'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) as MODIFIED_BY,&#xD;&#xA;  getdate() as MODIFIED_DATE,&#xD;&#xA;  0 as UPDATE_SEQ&#xD;&#xA;From&#xD;&#xA; ( SELECT A.*,CV.DATA1 FROM SGT_PAYMENT_HISTORY_DISTRIBUTION A &#xD;&#xA;    INNER JOIN SGT_PAYMENT_HISTORY_HEADER B&#xD;&#xA;     ON A.PAYMENT_HISTORY_HEADER_ID=B.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#x9; INNER JOIN SGS_CODE_VALUE CV &#xD;&#xA;     ON CV.CODE_ID=A.DISTRIBUTION_STATUS_ID AND CV.CODE_VALUE=A.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;  WHERE CV.DATA2='ESST' AND B.PAYMENT_DATE&lt;=@PAYMENTDATE&#xD;&#xA; )TEMP&#xD;&#xA;&#xD;&#xA;--Not updating escheated to state headers to processed&#xD;&#xA;--UPDATE D&#xD;&#xA;-- SET D.STATUS_VALUE='PRCD',&#xD;&#xA;--  D.MODIFIED_BY='PERSLINK BATCH',&#xD;&#xA;--  D.MODIFIED_DATE=GETDATE(),&#xD;&#xA;--  D.UPDATE_SEQ=D.UPDATE_SEQ+1&#xD;&#xA;-- FROM SGT_PAYMENT_HISTORY_HEADER D &#xD;&#xA;-- INNER JOIN &#xD;&#xA;-- (&#xD;&#xA;--  SELECT DISTINCT a.PAYMENT_HISTORY_HEADER_ID FROM &#xD;&#xA;--  SGT_PAYMENT_HISTORY_DISTRIBUTION A &#xD;&#xA;--   INNER JOIN SGT_PAYMENT_HISTORY_HEADER B&#xD;&#xA;--    ON A.PAYMENT_HISTORY_HEADER_ID=B.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;--   INNER JOIN SGS_CODE_VALUE CV &#xD;&#xA;--    ON CV.CODE_ID=A.DISTRIBUTION_STATUS_ID AND CV.CODE_VALUE=A.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;--  WHERE CV.DATA2='ESST' AND B.PAYMENT_DATE&lt;=@PAYMENTDATE&#xD;&#xA;-- ) T ON D.PAYMENT_HISTORY_HEADER_ID=T.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA; &#xD;&#xA;--Updating the distribution status to Payment issued to state&#xD;&#xA;UPDATE A&#xD;&#xA; SET DISTRIBUTION_STATUS_VALUE =&#xD;&#xA;   CASE  WHEN CV.DATA1='RCHK' THEN 'RPIS'&#xD;&#xA;      WHEN CV.DATA1='CHK' THEN 'CPIS' END,&#xD;&#xA;  modified_by='PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid),&#xD;&#xA;  modified_date=getdate()             &#xD;&#xA;FROM SGT_PAYMENT_HISTORY_DISTRIBUTION A &#xD;&#xA;  INNER JOIN SGT_PAYMENT_HISTORY_HEADER B&#xD;&#xA;   ON A.PAYMENT_HISTORY_HEADER_ID=B.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;  INNER JOIN SGS_CODE_VALUE CV &#xD;&#xA;   ON CV.CODE_ID=A.DISTRIBUTION_STATUS_ID AND CV.CODE_VALUE=A.DISTRIBUTION_STATUS_VALUE&#xD;&#xA;WHERE CV.DATA2='ESST' AND B.PAYMENT_DATE&lt;=@PAYMENTDATE">
      <parameters>
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
        <parameter ID="@batchscheduleid" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadPayeesWithMixedPayments" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql=";WITH CTE_ACH_CHECK_PAYMENT_MEMBERS AS &#xA;(&#xA;&#x9;SELECT &#xA;&#x9;&#x9;H.PERSON_ID AS HEADER_PERSON_ID&#xA;&#x9;&#x9;,H.PAYMENT_SCHEDULE_ID AS HEADER_PAYMENT_SCHEDULE_ID&#xA;&#x9;&#x9;,COUNT(*) AS PAYMENT_COUNT&#xA;&#x9;&#x9;,PAYEE_ACCOUNT_IDs = &#xA;&#x9;&#x9;&#x9;STUFF((SELECT ', ' + CAST(PHH.PAYEE_ACCOUNT_ID AS VARCHAR(10))&#xA;           FROM SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xA;           WHERE PHH.PAYMENT_SCHEDULE_ID = H.PAYMENT_SCHEDULE_ID AND PHH.PERSON_ID = H.PERSON_ID &#xA;          FOR XML PATH('')), 1, 2, '')&#xA;&#x9;FROM &#xA;&#x9;&#x9;SGT_PAYMENT_HISTORY_HEADER H WITH(NOLOCK)&#xA;&#x9;&#x9;JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION D WITH(NOLOCK) ON H.PAYMENT_HISTORY_HEADER_ID = D.PAYMENT_HISTORY_HEADER_ID&#xA;&#x9;WHERE&#xA;&#x9;&#x9;D.PAYMENT_METHOD_VALUE IN ('ACH', 'CHK', 'RACH', 'RCHK') AND H.PERSON_ID IS NOT NULL AND H.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID&#xA;&#x9;GROUP BY &#xA;&#x9;&#x9;H.PERSON_ID, H.PAYMENT_SCHEDULE_ID&#xA;&#x9;HAVING &#xA;&#x9;&#x9;COUNT(*) &gt; 1 &#xA;), &#xA;CTE_ACH_CHECK_PAY_MEMBERS AS &#xA;(&#xA;&#x9;SELECT &#xA;&#x9;&#x9;RANK() OVER (PARTITION BY MEMBERS.HEADER_PAYMENT_SCHEDULE_ID&#xA;&#x9;&#x9;,MEMBERS.HEADER_PERSON_ID ORDER BY D.PAYMENT_METHOD_VALUE ASC) AS BOTH_METHOD_TYPES&#xA;&#x9;&#x9;,MEMBERS.HEADER_PAYMENT_SCHEDULE_ID&#xA;&#x9;&#x9;,MEMBERS.HEADER_PERSON_ID&#xA;&#x9;&#x9;,MEMBERS.PAYEE_ACCOUNT_IDs&#xA;&#x9;FROM  &#xA;&#x9;&#x9;CTE_ACH_CHECK_PAYMENT_MEMBERS MEMBERS &#xA;&#x9;&#x9;JOIN SGT_PAYMENT_HISTORY_HEADER HEADER WITH(NOLOCK) ON MEMBERS.HEADER_PAYMENT_SCHEDULE_ID = HEADER.PAYMENT_SCHEDULE_ID AND HEADER.PERSON_ID = MEMBERS.HEADER_PERSON_ID&#xA;&#x9;&#x9;JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION D WITH(NOLOCK) ON HEADER.PAYMENT_HISTORY_HEADER_ID = D.PAYMENT_HISTORY_HEADER_ID&#xA;)&#xA;,CTE_ACH_CHECK_PAYMENT_MEMBERS_ORGS AS &#xA;(&#xA;&#x9;SELECT &#xA;&#x9;&#x9;PA.PAYEE_PERSLINK_ID AS HEADER_PERSON_ID&#xA;&#x9;&#x9;,H.PAYMENT_SCHEDULE_ID AS HEADER_PAYMENT_SCHEDULE_ID&#xA;&#x9;&#x9;,PA.PAYEE_ACCOUNT_ID&#xA;&#x9;&#x9;,COUNT(*) AS PAYMENT_COUNT&#xA;&#x9;&#x9;,PAYEE_ACCOUNT_IDs = &#xA;&#x9;&#x9;&#x9;STUFF((SELECT ', ' + CAST(PHH.PAYEE_ACCOUNT_ID AS VARCHAR(10))&#xA;           FROM SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xA;           WHERE PHH.PAYMENT_SCHEDULE_ID = H.PAYMENT_SCHEDULE_ID AND PHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xA;          FOR XML PATH('')), 1, 2, '')&#xA;&#x9;FROM &#xA;&#x9;&#x9;SGT_PAYMENT_HISTORY_HEADER H WITH(NOLOCK)&#xA;&#x9;&#x9;JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION D WITH(NOLOCK) ON H.PAYMENT_HISTORY_HEADER_ID = D.PAYMENT_HISTORY_HEADER_ID&#xA;&#x9;&#x9;JOIN SGT_PAYEE_ACCOUNT PA WITH(NOLOCK) ON PA.PAYEE_ACCOUNT_ID = H.PAYEE_ACCOUNT_ID&#xA;&#x9;WHERE&#xA;&#x9;&#x9;D.PAYMENT_METHOD_VALUE IN ('ACH', 'RCHK') AND H.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID&#xA;&#x9;GROUP BY &#xA;&#x9;&#x9;PA.PAYEE_PERSLINK_ID, PA.PAYEE_ACCOUNT_ID, H.PAYMENT_SCHEDULE_ID&#xA;&#x9;HAVING &#xA;&#x9;&#x9;COUNT(*) &gt; 1&#xA;&#xA;&#x9;UNION ALL&#xA;&#x9;&#x9;&#xA;&#x9;SELECT &#xA;&#x9;&#x9;PA.PAYEE_PERSLINK_ID AS HEADER_PERSON_ID&#xA;&#x9;&#x9;,H.PAYMENT_SCHEDULE_ID AS HEADER_PAYMENT_SCHEDULE_ID&#xA;&#x9;&#x9;,PA.PAYEE_ACCOUNT_ID&#xA;&#x9;&#x9;,COUNT(*) AS PAYMENT_COUNT&#xA;&#x9;&#x9;,PAYEE_ACCOUNT_IDs = &#xA;&#x9;&#x9;&#x9;STUFF((SELECT ', ' + CAST(PHH.PAYEE_ACCOUNT_ID AS VARCHAR(10))&#xA;           FROM SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xA;           WHERE PHH.PAYMENT_SCHEDULE_ID = H.PAYMENT_SCHEDULE_ID AND PHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xA;          FOR XML PATH('')), 1, 2, '')&#xA;&#x9;FROM &#xA;&#x9;&#x9;SGT_PAYMENT_HISTORY_HEADER H WITH(NOLOCK)&#xA;&#x9;&#x9;JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION D WITH(NOLOCK) ON H.PAYMENT_HISTORY_HEADER_ID = D.PAYMENT_HISTORY_HEADER_ID&#xA;&#x9;&#x9;JOIN SGT_PAYEE_ACCOUNT PA WITH(NOLOCK) ON PA.PAYEE_ACCOUNT_ID = H.PAYEE_ACCOUNT_ID&#xA;&#x9;WHERE&#xA;&#x9;&#x9;D.PAYMENT_METHOD_VALUE IN ('CHK', 'RACH') AND H.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID&#xA;&#x9;GROUP BY &#xA;&#x9;&#x9;PA.PAYEE_PERSLINK_ID, PA.PAYEE_ACCOUNT_ID, H.PAYMENT_SCHEDULE_ID&#xA;&#x9;HAVING &#xA;&#x9;&#x9;COUNT(*) &gt; 1 &#xA;), &#xA;CTE_ACH_CHECK_PAY_MEMBERS_ORGS AS &#xA;(&#xA;&#x9;SELECT &#xA;&#x9;&#x9;RANK() OVER (PARTITION BY MEMBERS.HEADER_PAYMENT_SCHEDULE_ID,MEMBERS.HEADER_PERSON_ID ORDER BY D.PAYMENT_METHOD_VALUE ASC) AS BOTH_METHOD_TYPES&#xA;&#x9;&#x9;,MEMBERS.HEADER_PAYMENT_SCHEDULE_ID&#xA;&#x9;&#x9;,MEMBERS.HEADER_PERSON_ID&#xA;&#x9;&#x9;,MEMBERS.PAYEE_ACCOUNT_IDs&#xA;&#x9;FROM  &#xA;&#x9;&#x9;CTE_ACH_CHECK_PAYMENT_MEMBERS_ORGS MEMBERS &#xA;&#x9;&#x9;JOIN SGT_PAYMENT_HISTORY_HEADER HEADER WITH(NOLOCK) ON MEMBERS.HEADER_PAYMENT_SCHEDULE_ID = HEADER.PAYMENT_SCHEDULE_ID AND HEADER.PAYEE_ACCOUNT_ID = MEMBERS.PAYEE_ACCOUNT_ID&#xA;&#x9;&#x9;JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION D WITH(NOLOCK) ON HEADER.PAYMENT_HISTORY_HEADER_ID = D.PAYMENT_HISTORY_HEADER_ID&#xA;)&#xA;,CTE_ACH_CHECK_PAYMENT_ORGS AS &#xA;(&#xA;&#x9;SELECT &#xA;&#x9;&#x9;H.ORG_ID AS ORG_ID&#xA;&#x9;&#x9;,H.PAYMENT_SCHEDULE_ID AS HEADER_PAYMENT_SCHEDULE_ID&#xA;&#x9;&#x9;,COUNT(*) AS PAYMENT_COUNT&#xA;&#x9;&#x9;,PAYEE_ACCOUNT_IDs = &#xA;&#x9;&#x9;&#x9;STUFF((SELECT ', ' + CAST(PHH.PAYEE_ACCOUNT_ID AS VARCHAR(10))&#xA;           FROM SGT_PAYMENT_HISTORY_HEADER PHH WITH(NOLOCK)&#xA;           WHERE PHH.PAYMENT_SCHEDULE_ID = H.PAYMENT_SCHEDULE_ID AND PHH.ORG_ID = H.ORG_ID &#xA;          FOR XML PATH('')), 1, 2, '')&#xA;&#x9;FROM &#xA;&#x9;&#x9;SGT_PAYMENT_HISTORY_HEADER H WITH(NOLOCK)&#xA;&#x9;&#x9;JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION D WITH(NOLOCK) ON H.PAYMENT_HISTORY_HEADER_ID = D.PAYMENT_HISTORY_HEADER_ID&#xA;&#x9;WHERE&#xA;&#x9;&#x9;D.PAYMENT_METHOD_VALUE IN ('ACH', 'CHK', 'RACH', 'RCHK') AND H.ORG_ID IS NOT NULL AND H.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID&#xA;&#x9;GROUP BY &#xA;&#x9;&#x9;H.ORG_ID, H.PAYMENT_SCHEDULE_ID&#xA;&#x9;HAVING &#xA;&#x9;&#x9;COUNT(*) &gt; 1 &#xA;), &#xA;CTE_ACH_CHECK_PAY_ORGS AS &#xA;(&#xA;&#x9;SELECT &#xA;&#x9;&#x9;RANK() OVER (PARTITION BY ORGS.HEADER_PAYMENT_SCHEDULE_ID&#xA;&#x9;&#x9;,ORGS.ORG_ID ORDER BY D.PAYMENT_METHOD_VALUE ASC) AS BOTH_METHOD_TYPES&#xA;&#x9;&#x9;,ORGS.HEADER_PAYMENT_SCHEDULE_ID&#xA;&#x9;&#x9;,ORGS.ORG_ID&#xA;&#x9;&#x9;,ORGS.PAYEE_ACCOUNT_IDs&#xA;&#x9;FROM  &#xA;&#x9;&#x9;CTE_ACH_CHECK_PAYMENT_ORGS ORGS &#xA;&#x9;&#x9;JOIN SGT_PAYMENT_HISTORY_HEADER HEADER WITH(NOLOCK) ON ORGS.HEADER_PAYMENT_SCHEDULE_ID = HEADER.PAYMENT_SCHEDULE_ID AND HEADER.ORG_ID = ORGS.ORG_ID&#xA;&#x9;&#x9;JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION D WITH(NOLOCK) ON HEADER.PAYMENT_HISTORY_HEADER_ID = D.PAYMENT_HISTORY_HEADER_ID&#xA;)&#xA;&#xA;SELECT &#xA;&#x9;ORGS.PAYEE_ACCOUNT_IDs&#xA;&#x9;,ORGS.ORG_ID AS PERSON_OR_ORG_ID&#xA;&#x9;,ORG.ORG_NAME AS PERSON_OR_ORG_NAME&#xA;&#x9;,BOTH_METHOD_TYPES  &#xA;FROM &#xA;&#x9;CTE_ACH_CHECK_PAY_ORGS ORGS&#xA;&#x9;JOIN SGT_ORGANIZATION ORG WITH(NOLOCK) ON ORG.ORG_ID = ORGS.ORG_ID&#xA;WHERE &#xA;&#x9;ORGS.BOTH_METHOD_TYPES &gt; 1&#xA;&#xA;UNION&#xA;&#xA;SELECT&#xA;&#x9;MEMBERS.PAYEE_ACCOUNT_IDs &#xA;&#x9;,MEMBERS.HEADER_PERSON_ID AS PERSON_OR_ORG_ID&#xA;&#x9;,(P.first_name+', '+P.middle_name+', '+P.last_name) as PERSON_OR_ORG_NAME&#xA;&#x9;,BOTH_METHOD_TYPES   &#xA;FROM &#xA;&#x9;CTE_ACH_CHECK_PAY_MEMBERS MEMBERS&#xA;&#x9;JOIN SGT_PERSON P WITH(NOLOCK) ON P.PERSON_ID = MEMBERS.HEADER_PERSON_ID&#xA;WHERE &#xA;&#x9;MEMBERS.BOTH_METHOD_TYPES &gt; 1&#xA;&#xA;UNION&#xA;&#xA;SELECT&#xA;&#x9;MEMBERS.PAYEE_ACCOUNT_IDs &#xA;&#x9;,MEMBERS.HEADER_PERSON_ID AS PERSON_OR_ORG_ID&#xA;&#x9;,(P.first_name+', '+P.middle_name+', '+P.last_name) as PERSON_OR_ORG_NAME&#xA;&#x9;,BOTH_METHOD_TYPES   &#xA;FROM &#xA;&#x9;CTE_ACH_CHECK_PAY_MEMBERS_ORGS MEMBERS&#xA;&#x9;JOIN SGT_PERSON P WITH(NOLOCK) ON P.PERSON_ID = MEMBERS.HEADER_PERSON_ID&#xA;WHERE &#xA;&#x9;MEMBERS.BOTH_METHOD_TYPES &gt; 1">
      <parameters>
        <parameter ID="@PAYMENTSCHEDULEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadPayeeWithMultiplePayments" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT PA.PAYEE_ACCOUNT_ID AS PAYEE_ACCOUNT_IDs,&#xD;&#xA;ISNULL(HED.PERSON_ID,0) AS PERSON_OR_ORG_ID,&#xD;&#xA;CASE WHEN HED.PERSON_ID IS NOT NULL THEN PER.LAST_NAME + ' ' + PER.FIRST_NAME ELSE '' END AS PERSON_OR_ORG_NAME,COUNT(1) AS CNT&#xD;&#xA;FROM SGT_PAYMENT_HISTORY_HEADER HED WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT PA WITH(NOLOCK) ON HED.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;LEFT JOIN SGT_PERSON PER WITH(NOLOCK) ON PA.PAYEE_PERSLINK_ID = PER.PERSON_ID&#xD;&#xA;WHERE HED.PERSON_ID IS NOT NULL AND  HED.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID&#xD;&#xA;GROUP BY PA.PAYEE_ACCOUNT_ID,HED.PERSON_ID,PER.LAST_NAME,PER.FIRST_NAME&#xD;&#xA;HAVING COUNT(1) &gt; 1 &#xD;&#xA;&#xD;&#xA;UNION ALL&#xD;&#xA;&#xD;&#xA;SELECT PA.PAYEE_ACCOUNT_ID AS PAYEE_ACCOUNT_IDs,&#xD;&#xA;ISNULL(HED.ORG_ID,0) AS PERSON_OR_ORG_ID,&#xD;&#xA;CASE WHEN HED.ORG_ID IS NOT NULL THEN ORG.ORG_NAME ELSE '' END AS PERSON_OR_ORG_NAME,COUNT(1) AS CNT&#xD;&#xA;FROM SGT_PAYMENT_HISTORY_HEADER HED WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGT_PAYEE_ACCOUNT PA WITH(NOLOCK) ON HED.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;LEFT JOIN SGT_ORGANIZATION ORG WITH(NOLOCK) ON PA.PAYEE_ORG_ID = ORG.ORG_ID&#xD;&#xA;WHERE HED.ORG_ID IS NOT NULL AND HED.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID &#xD;&#xA;GROUP BY PA.PAYEE_ACCOUNT_ID,HED.ORG_ID,ORG.ORG_NAME&#xD;&#xA;HAVING COUNT(1) &gt; 1">
      <parameters>
        <parameter ID="@PAYMENTSCHEDULEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="InsertIntoReportDataDCInDBDCSPEL" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="-----PIR 25920 Insert if VNPT-----&#xD;&#xA;&#xD;&#xA;INSERT INTO SGT_PROVIDER_REPORT_DATA_DC (SUBSYSTEM_ID, SUBSYSTEM_VALUE, SUBSYSTEM_REF_ID, PERSON_ID, SSN, FIRST_NAME, LAST_NAME, PROVIDER_ORG_ID,&#xD;&#xA;&#x9;PLAN_ID, EFFECTIVE_DATE, EE_CONTRIBUTION, EE_PRE_TAX, EE_EMPLOYER_PICKUP, ER_CONTRIBUTION, MEMBER_INTEREST, EMPLOYER_INTEREST, BATCH_REQUEST_ID,&#xD;&#xA;&#x9;CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ, EMPLOYER_RHIC_INTEREST)&#xD;&#xA;SELECT&#xD;&#xA;&#x9;SUBSYSTEM_ID, SUBSYSTEM_VALUE, SUBSYSTEM_REF_ID, PERSON_ID, SSN, FIRST_NAME, LAST_NAME, &#xD;&#xA;&#x9;PROVIDER_ORG_ID,&#xD;&#xA;&#x9;PLAN_ID, EFFECTIVE_DATE, EE_CONTRIBUTION, EE_PRE_TAX, EE_EMPLOYER_PICKUP, ER_CONTRIBUTION, &#xD;&#xA;&#x9;MEMBER_INTEREST, EMPLOYER_INTEREST, BATCH_REQUEST_ID,&#xD;&#xA;&#x9;CREATED_BY, CREATED_DATE, MODIFIED_BY, MODIFIED_DATE, UPDATE_SEQ, EMPLOYER_RHIC_INTEREST&#xD;&#xA;FROM&#xD;&#xA;(&#xD;&#xA;&#x9;SELECT &#xD;&#xA;&#x9;&#x9;349 AS SUBSYSTEM_ID,&#xD;&#xA;&#x9;&#x9;'BATR' AS SUBSYSTEM_VALUE,&#xD;&#xA;&#x9;&#x9;PHH.PAYMENT_HISTORY_HEADER_ID  AS SUBSYSTEM_REF_ID,&#xD;&#xA;&#x9;&#x9;P.PERSON_ID AS PERSON_ID,&#xD;&#xA;&#x9;&#x9;P.SSN AS SSN,&#xD;&#xA;&#x9;&#x9;P.FIRST_NAME AS FIRST_NAME,&#xD;&#xA;&#x9;&#x9;P.LAST_NAME AS LAST_NAME,&#xD;&#xA;&#x9;&#x9;PHH.ORG_ID AS PROVIDER_ORG_ID,&#xD;&#xA;&#x9;&#x9;PHH.PLAN_ID AS PLAN_ID,&#xD;&#xA;&#x9;&#x9;@PAYMENTDATE AS EFFECTIVE_DATE,&#xD;&#xA;&#x9;&#x9;EECONTRIBAMT.AMOUNT AS EE_CONTRIBUTION,&#xD;&#xA;&#x9;&#x9;EEPRETAXAMT.AMOUNT AS EE_PRE_TAX,&#xD;&#xA;&#x9;&#x9;0.00 AS EE_EMPLOYER_PICKUP,&#xD;&#xA;&#x9;&#x9;ERCONTRIBAMT.AMOUNT AS ER_CONTRIBUTION,&#xD;&#xA;&#x9;&#x9;0.00 AS MEMBER_INTEREST,&#xD;&#xA;&#x9;&#x9;0.00 AS EMPLOYER_INTEREST,&#xD;&#xA;&#x9;&#x9;NULL AS BATCH_REQUEST_ID,&#xD;&#xA;&#x9;&#x9;'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) AS CREATED_BY,&#xD;&#xA;&#x9;&#x9;GETDATE() AS CREATED_DATE,&#xD;&#xA;&#x9;&#x9;'PERSLink Batch'+' '+ convert(nvarchar,@batchscheduleid) AS MODIFIED_BY, &#xD;&#xA;&#x9;&#x9;GETDATE() AS MODIFIED_DATE,&#xD;&#xA;&#x9;&#x9;0 AS UPDATE_SEQ,&#xD;&#xA;&#x9;&#x9;0.00 AS EMPLOYER_RHIC_INTEREST&#xD;&#xA;&#x9;FROM SGT_PAYMENT_HISTORY_HEADER PHH&#xD;&#xA;&#x9;INNER JOIN SGT_PAYMENT_HISTORY_DISTRIBUTION PHD ON PHH.PAYMENT_HISTORY_HEADER_ID = PHD.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#x9;INNER JOIN SGT_PAYEE_ACCOUNT PA ON PHH.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;INNER JOIN SGT_PERSON P ON PA.PAYEE_PERSLINK_ID = P.PERSON_ID&#xD;&#xA;&#x9;--INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPIT ON PAPIT.PAYEE_ACCOUNT_ID = PHH.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;LEFT JOIN (SELECT PAPIT.PAYEE_ACCOUNT_ID, SUM(PAPIT.AMOUNT) AS AMOUNT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FROM SGT_PAYMENT_HISTORY_DISTRIBUTION PHD&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPIT ON PHH.PAYEE_ACCOUNT_ID = PAPIT.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;WHERE &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PHH.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND @PAYMENTDATE &lt;= ISNULL(PAPIT.END_DATE, '99991231')&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND PHD.PAYMENT_METHOD_VALUE = 'VNPT'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND PAPIT.PAYMENT_ITEM_TYPE_ID IN (1,5,6,17,199)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;GROUP BY PAPIT.PAYEE_ACCOUNT_ID) EEPRETAXAMT ON EEPRETAXAMT.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;LEFT JOIN (SELECT PAPIT.PAYEE_ACCOUNT_ID, SUM(PAPIT.AMOUNT) AS AMOUNT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FROM SGT_PAYMENT_HISTORY_DISTRIBUTION PHD&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPIT ON PHH.PAYEE_ACCOUNT_ID = PAPIT.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;WHERE &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PHH.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID  &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND @PAYMENTDATE &lt;= ISNULL(PAPIT.END_DATE, '99991231')&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND PHD.PAYMENT_METHOD_VALUE = 'VNPT'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND PAPIT.PAYMENT_ITEM_TYPE_ID IN (2)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;GROUP BY PAPIT.PAYEE_ACCOUNT_ID) EECONTRIBAMT ON EECONTRIBAMT.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;LEFT JOIN (SELECT PAPIT.PAYEE_ACCOUNT_ID, SUM(PAPIT.AMOUNT) AS AMOUNT&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;FROM SGT_PAYMENT_HISTORY_DISTRIBUTION PHD&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_PAYMENT_HISTORY_HEADER PHH ON PHD.PAYMENT_HISTORY_HEADER_ID = PHH.PAYMENT_HISTORY_HEADER_ID&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;INNER JOIN SGT_PAYEE_ACCOUNT_PAYMENT_ITEM_TYPE PAPIT ON PHH.PAYEE_ACCOUNT_ID = PAPIT.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;WHERE &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PHH.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID  &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND @PAYMENTDATE &lt;= ISNULL(PAPIT.END_DATE, '99991231')&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND PHD.PAYMENT_METHOD_VALUE = 'VNPT'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;AND PAPIT.PAYMENT_ITEM_TYPE_ID IN (7,107)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;GROUP BY PAPIT.PAYEE_ACCOUNT_ID) ERCONTRIBAMT ON ERCONTRIBAMT.PAYEE_ACCOUNT_ID = PA.PAYEE_ACCOUNT_ID&#xD;&#xA;&#x9;WHERE &#xD;&#xA;&#x9;&#x9;PHH.PAYMENT_SCHEDULE_ID = @PAYMENTSCHEDULEID &#xD;&#xA;&#x9;&#x9;AND PHD.PAYMENT_METHOD_VALUE = 'VNPT'&#xD;&#xA;&#x9;--GROUP BY PA.PAYEE_ACCOUNT_ID&#xD;&#xA;) AS TEMP">
      <parameters>
        <parameter ID="@PAYMENTSCHEDULEID" sfwDataType="int" />
        <parameter ID="@PAYMENTDATE" sfwDataType="DateTime" />
        <parameter ID="@batchscheduleid" sfwDataType="int" />
      </parameters>
    </query>
  </queries>
  <attributes>
    <attribute ID="PaymentHistoryDistributionId" sfwType="Column" sfwValue="payment_history_distribution_id" sfwKeyNo="1" sfwIsSequence="False" sfwIsNull="False" sfwIsIdentity="True" sfwDataType="int" sfwRequired="False" />
    <attribute ID="PaymentHistoryHeaderId" sfwType="Column" sfwValue="payment_history_header_id" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="False" sfwIsIdentity="False" sfwDataType="int" sfwRequired="False" />
    <attribute ID="PaymentMethodDescription" sfwType="Description" sfwValue="payment_method_description" />
    <attribute ID="PaymentMethodId" sfwType="Column" sfwValue="payment_method_id" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="False" sfwIsIdentity="False" sfwCodeID="2504" sfwDataType="int" sfwRequired="False" />
    <attribute ID="PaymentMethodValue" sfwType="Column" sfwValue="payment_method_value" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="False" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="4" />
    <attribute ID="CheckMessage" sfwType="Column" sfwValue="check_message" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="100" />
    <attribute ID="DistributionStatusDescription" sfwType="Description" sfwValue="distribution_status_description" />
    <attribute ID="DistributionStatusId" sfwType="Column" sfwValue="distribution_status_id" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="False" sfwIsIdentity="False" sfwCodeID="2505" sfwDataType="int" sfwRequired="False" />
    <attribute ID="DistributionStatusValue" sfwType="Column" sfwValue="distribution_status_value" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="False" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="4" />
    <attribute ID="NetAmount" sfwType="Column" sfwValue="net_amount" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="False" sfwIsIdentity="False" sfwDataType="decimal" sfwRequired="False" sfwLength="13,2" />
    <attribute ID="CheckNumber" sfwType="Column" sfwValue="check_number" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="15" />
    <attribute ID="OldDistributionId" sfwType="Column" sfwValue="old_distribution_id" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="int" sfwRequired="False" />
    <attribute ID="RecipientName" sfwType="Column" sfwValue="recipient_name" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="False" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="100" />
    <attribute ID="FboCo" sfwType="Column" sfwValue="fbo_co" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="100" />
    <attribute ID="AddrLine1" sfwType="Column" sfwValue="addr_line_1" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="60" />
    <attribute ID="AddrLine2" sfwType="Column" sfwValue="addr_line_2" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="60" />
    <attribute ID="AddrCity" sfwType="Column" sfwValue="addr_city" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="50" />
    <attribute ID="AddrStateDescription" sfwType="Description" sfwValue="addr_state_description" />
    <attribute ID="AddrStateId" sfwType="Column" sfwValue="addr_state_id" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwCodeID="150" sfwDataType="int" sfwRequired="False" />
    <attribute ID="AddrStateValue" sfwType="Column" sfwValue="addr_state_value" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="4" />
    <attribute ID="AddrCountryDescription" sfwType="Description" sfwValue="addr_country_description" />
    <attribute ID="AddrCountryId" sfwType="Column" sfwValue="addr_country_id" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwCodeID="151" sfwDataType="int" sfwRequired="False" />
    <attribute ID="AddrCountryValue" sfwType="Column" sfwValue="addr_country_value" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="4" />
    <attribute ID="AddrZipCode" sfwType="Column" sfwValue="addr_zip_code" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="5" />
    <attribute ID="AddrZip4Code" sfwType="Column" sfwValue="addr_zip_4_code" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="4" />
    <attribute ID="ForeignProvince" sfwType="Column" sfwValue="foreign_province" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="50" />
    <attribute ID="ForeignPostalCode" sfwType="Column" sfwValue="foreign_postal_code" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="10" />
    <attribute ID="BankName" sfwType="Column" sfwValue="bank_name" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="50" />
    <attribute ID="RoutingNumber" sfwType="Column" sfwValue="routing_number" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="15" />
    <attribute ID="AccountTypeDescription" sfwType="Description" sfwValue="account_type_description" />
    <attribute ID="AccountTypeId" sfwType="Column" sfwValue="account_type_id" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwCodeID="211" sfwDataType="int" sfwRequired="False" />
    <attribute ID="AccountTypeValue" sfwType="Column" sfwValue="account_type_value" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="4" />
    <attribute ID="AccountNumber" sfwType="Column" sfwValue="account_number" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="20" />
    <attribute ID="PersonId" sfwType="Column" sfwValue="person_id" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="int" sfwRequired="False" />
    <attribute ID="OrgId" sfwType="Column" sfwValue="org_id" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="int" sfwRequired="False" />
    <attribute ID="CreatedBy" sfwType="Column" sfwValue="created_by" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="False" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="50" />
    <attribute ID="CreatedDate" sfwType="Column" sfwValue="created_date" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="False" sfwIsIdentity="False" sfwDataType="DateTime" sfwRequired="False" />
    <attribute ID="ModifiedBy" sfwType="Column" sfwValue="modified_by" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="False" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="50" />
    <attribute ID="ModifiedDate" sfwType="Column" sfwValue="modified_date" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="False" sfwIsIdentity="False" sfwDataType="DateTime" sfwRequired="False" />
    <attribute ID="UpdateSeq" sfwType="Column" sfwValue="update_seq" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="False" sfwIsIdentity="False" sfwDataType="int" sfwRequired="False" />
    <attribute ID="StatusChangeReasonDescription" sfwType="Description" sfwValue="status_change_reason_description" />
    <attribute ID="StatusChangeReasonId" sfwType="Column" sfwValue="status_change_reason_id" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwCodeID="2551" sfwDataType="int" sfwRequired="False" />
    <attribute ID="StatusChangeReasonValue" sfwType="Column" sfwValue="status_change_reason_value" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="4" />
    <attribute ID="ReissueToRolloverOrgFlag" sfwType="Column" sfwValue="reissue_to_rollover_org_flag" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="1" />
    <attribute ID="ReissueToRolloverOrgBy" sfwType="Column" sfwValue="reissue_to_rollover_org_by" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="50" />
    <attribute ID="PayeeAccountAchDetailId" sfwType="Column" sfwValue="payee_account_ach_detail_id" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="int" sfwRequired="False" />
    <attribute sfwDataType="string" sfwType="Property" ID="StatusEffectiveDate" sfwValue="icdoPaymentHistoryDistribution.status_effective_date" />
    <attribute ID="objPerson" sfwType="Object" sfwEntity="entPerson" sfwValue="ibusPerson" />
    <attribute ID="objOrganization" sfwType="Object" sfwEntity="entOrganization" sfwValue="ibusOrganization" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrReissueSameRolloverFlag" sfwValue="istrReissueSameRolloverFlag" />
    <attribute sfwType="Collection" sfwEntity="entPaymentHistoryDistributionStatusHistory" ID="lstDistributionHistory" sfwValue="iclbDistributionHistory" />
    <attribute ID="objPaymentHistoryHeader" sfwType="Object" sfwEntity="entPaymentHistoryHeader" sfwValue="ibusPaymentHistoryHeader" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrNetAmountinWords" sfwValue="istrNetAmountinWords" />
    <attribute sfwDataType="string" sfwType="Property" ID="AddrDescription" sfwValue="icdoPaymentHistoryDistribution.addr_description" />
    <attribute sfwDataType="string" sfwType="Property" ID="ScrambledAccountNumber" sfwValue="icdoPaymentHistoryDistribution.scrambled_account_number" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrAsofDate" sfwValue="istrAsofDate" />
    <attribute sfwDataType="string" sfwType="Property" ID="Istr2ndCashOutstandingNotice" sfwValue="istr2ndCashOutstandingNotice" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrPremiumRefundCheck" sfwValue="istrPremiumRefundCheck" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrPaymentDateFormatted" sfwValue="istrPaymentDateFormatted" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrBenefitTypeOfDistribution" sfwValue="istrBenefitTypeOfDistribution" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrBenefitTypePremiumRefund" sfwValue="istrBenefitTypePremiumRefund" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrPaymentMethodDirectDeposit" sfwValue="istrPaymentMethodDirectDeposit" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrPaymentMethodRollover" sfwValue="istrPaymentMethodRollover" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrPriorRolloverOrg" sfwValue="istrPriorRolloverOrg" />
  </attributes>
  <objectmethods>
    <method ID="btnStopPayPending_Click" sfwReturnType="ArrayList" />
    <method ID="btnVoidPending_Click" sfwReturnType="ArrayList" />
    <method ID="btnEscheattoNDPERS_Click" sfwReturnType="ArrayList" />
    <method ID="btnEscheattoState_Click" sfwReturnType="ArrayList" />
    <method ID="btnReissueApproved_Click" sfwReturnType="ArrayList" />
    <method ID="btnCancel_Click" sfwReturnType="ArrayList" />
    <method ID="btnEscheatReissued_Click" sfwReturnType="ArrayList" />
    <method ID="btnEscheatReissueApproved_Click" sfwReturnType="ArrayList" />
    <method ID="btnEscheatReissuePending_Click" sfwReturnType="ArrayList" />
    <method ID="btnReceivableCreated_Click" sfwReturnType="ArrayList" />
    <method ID="btnReceivablePending_Click" sfwReturnType="ArrayList" />
    <method ID="btnCleared_Click" sfwReturnType="ArrayList" />
    <method ID="btnOutstanding_Click" sfwReturnType="ArrayList" />
  </objectmethods>
</entity>