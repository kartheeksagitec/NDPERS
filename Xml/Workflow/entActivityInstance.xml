<entity ID="entActivityInstance" sfwActive="True" sfwStatus="Valid" sfwRemoteObject="srvWorkflow" sfwType="BusinessRule" sfwMainCDO="icdoActivityInstance" sfwObjectID="busActivityInstance" sfwTableName="sgw_activity_instance" sfwView="False">
  <rules>
    <rule ID="VisibleCancelButton" sfwExpression="!(this.icdoActivityInstance.status_value == &quot;PROC&quot;) &amp;&amp; &#xA;((this.icdoActivityInstance.status_value == &quot;INPC&quot;) || &#xA;(this.icdoActivityInstance.status_value == &quot;SUSP&quot;) || &#xA;(this.icdoActivityInstance.status_value == &quot;RESU&quot;)) &amp;&amp; &#xA;!(this.iblnWorkflowEventActionClicked == True)" sfwObjectBased="True" />
    <rule ID="VisibleCheckoutButton" sfwExpression="!(this.icdoActivityInstance.status_value == &quot;PROC&quot;) &amp;&amp; &#xA;((this.icdoActivityInstance.status_value == &quot;UNPC&quot;) || &#xA;(this.icdoActivityInstance.status_value == &quot;RELE&quot;)) &amp;&amp; &#xA;!(this.iblnWorkflowEventActionClicked == True)" sfwObjectBased="True" />
    <rule ID="VisibleCompleteButton" sfwExpression="!(this.icdoActivityInstance.status_value == &quot;PROC&quot;) &amp;&amp; &#xA;!(this.icdoActivityInstance.return_from_audit_flag == &quot;Y&quot;) &amp;&amp; &#xA;((this.icdoActivityInstance.status_value == &quot;INPC&quot;) || &#xA;(this.icdoActivityInstance.status_value == &quot;RESU&quot;)) &amp;&amp; &#xA;!(this.iblnWorkflowEventActionClicked == True)" sfwObjectBased="True" />
    <rule ID="VisibleReleaseButton" sfwExpression="!(this.icdoActivityInstance.status_value == &quot;PROC&quot;) &amp;&amp; &#xA;((this.icdoActivityInstance.status_value == &quot;INPC&quot;) || &#xA;(this.icdoActivityInstance.status_value == &quot;RESU&quot;)) &amp;&amp; &#xA;!(this.iblnWorkflowEventActionClicked == True)" sfwObjectBased="True" />
    <rule ID="VisibleResumeButton" sfwExpression="(this.icdoActivityInstance.status_value == &quot;SUSP&quot;) &amp;&amp; &#xA;!(this.icdoActivityInstance.status_value == &quot;PROC&quot;) &amp;&amp; &#xA;!(this.iblnWorkflowEventActionClicked == True)" sfwObjectBased="True" />
    <rule ID="VisibleReturnButton" sfwExpression="!(RFunc.GetValue&lt;Boolean&gt;(this, &quot;ibusActivity.icdoActivity.iblnFirstActivityFlag&quot;) == True) &amp;&amp; &#xA;((this.icdoActivityInstance.status_value == &quot;INPC&quot;) || &#xA;(this.icdoActivityInstance.status_value == &quot;RESU&quot;)) &amp;&amp; &#xA;!(this.iblnWorkflowEventActionClicked == True)" sfwObjectBased="True" />
    <rule ID="VisibleReturnToAuditButton" sfwExpression="(this.icdoActivityInstance.return_from_audit_flag == &quot;Y&quot;) &amp;&amp; &#xA;((this.icdoActivityInstance.status_value == &quot;INPC&quot;) || &#xA;(this.icdoActivityInstance.status_value == &quot;RESU&quot;)) &amp;&amp; &#xA;!(this.iblnWorkflowEventActionClicked == True)" sfwObjectBased="True" />
    <rule ID="VisibleSuspendButton" sfwExpression="!(this.icdoActivityInstance.status_value == &quot;PROC&quot;) &amp;&amp; &#xA;((this.icdoActivityInstance.status_value == &quot;INPC&quot;) || &#xA;(this.icdoActivityInstance.status_value == &quot;RESU&quot;)) &amp;&amp; &#xA;!(this.iblnWorkflowEventActionClicked == True)" sfwObjectBased="True" />
  </rules>
  <delete />
  <checklist />
  <initialload>
    <item ID="VisibleCheckoutButton" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleSuspendButton" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleReleaseButton" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleReturnToAuditButton" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleCancelButton" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleCompleteButton" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleResumeButton" sfwMode="All" sfwStatus="Active" />
    <item ID="VisibleReturnButton" sfwMode="All" sfwStatus="Active" />
  </initialload>
  <softerror />
  <harderror />
  <validatedelete />
  <groupslist />
  <updateablecdo />
  <commonproperties />
  <queries>
    <query ID="GetMaxActivityInstanceHistoryByActivityInstance" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT * &#xD;&#xA;FROM SGW_ACTIVITY_INSTANCE_HISTORY WITH(NOLOCK) &#xD;&#xA;WHERE ACTIVITY_INSTANCE_HISTORY_ID IN &#xD;&#xA; (SELECT max(ACTIVITY_INSTANCE_HISTORY_ID) &#xD;&#xA;  FROM SGW_ACTIVITY_INSTANCE_HISTORY WITH(NOLOCK) &#xD;&#xA;   WHERE ACTIVITY_INSTANCE_ID = @activityInstanceId)">
      <parameters>
        <parameter ID="@activityInstanceId" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadSuspendedInstancesByProcessAndReference" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT    ACT.*&#xD;&#xA;FROM     SGW_ACTIVITY_INSTANCE ACT WITH(NOLOCK)&#xD;&#xA;  INNER JOIN SGW_PROCESS_INSTANCE WRK WITH(NOLOCK)&#xD;&#xA;      ON ACT.PROCESS_INSTANCE_ID = WRK.PROCESS_INSTANCE_ID&#xD;&#xA;WHERE     ACT.STATUS_VALUE = 'SUSP'&#xD;&#xA;       AND WRK.PROCESS_ID = @PROCESSID&#xD;&#xA;       AND ACT.REFERENCE_ID = @REFERENCEID">
      <parameters>
        <parameter ID="@PROCESSID" sfwDataType="int" />
        <parameter ID="@REFERENCEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadAllInstancesByProcessAndReference" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT    ACT.*&#xD;&#xA;FROM     SGW_ACTIVITY_INSTANCE ACT WITH(NOLOCK)&#xD;&#xA;  INNER JOIN SGW_PROCESS_INSTANCE WRK WITH(NOLOCK)&#xD;&#xA;      ON ACT.PROCESS_INSTANCE_ID = WRK.PROCESS_INSTANCE_ID&#xD;&#xA;WHERE     ACT.STATUS_VALUE NOT IN ('CANC','PROC','RETU','REAU')&#xD;&#xA;       AND WRK.PROCESS_ID = @PROCESSID&#xD;&#xA;       AND ACT.REFERENCE_ID = @REFERENCEID">
      <parameters>
        <parameter ID="@PROCESSID" sfwDataType="int" />
        <parameter ID="@REFERENCEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="SearchAndLoadReassignWork" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select top 100 PR.PROCESS_ID,SA.NAME,SA.Role_Id, SA.display_name, SA.supervisor_role_id,SAI.*,&#xD;&#xA;spi.process_instance_id,SPI.PERSON_ID,SPI.ORG_ID,&#xD;&#xA;p.first_name,p.last_name,p.middle_name,&#xD;&#xA;o.org_code,o.org_name,r.role_description,&#xD;&#xA;SPI.contact_ticket_id as contact_ticket_id,&#xD;&#xA;PR.Name as Process_Name,&#xD;&#xA;PR.DESCRIPTION as Process_Description&#xD;&#xA;from SGW_ACTIVITY_INSTANCE SAI&#xD;&#xA;inner join SGW_PROCESS_INSTANCE SPI ON SAI.PROCESS_INSTANCE_ID = SPI.PROCESS_INSTANCE_ID&#xD;&#xA;inner join SGW_ACTIVITY SA on SAI.ACTIVITY_ID = SA.ACTIVITY_ID&#xD;&#xA;inner join SGW_PROCESS PR on SPI.PROCESS_ID = PR.PROCESS_ID&#xD;&#xA;left outer join sgt_person p on p.person_id = SPI.person_id&#xD;&#xA;left outer join sgt_organization o on o.org_id = SPI.org_id&#xD;&#xA;left outer join sgs_roles r on r.role_id = SA.role_id&#xD;&#xA;left outer join sgt_contact_ticket sct on SPI.CONTACT_TICKET_ID = sct.CONTACT_TICKET_ID&#xD;&#xA;WHERE sa.role_id &gt; 0">
      <parameters />
    </query>
    <query ID="UserRole" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select SUR.*, USR.user_id &#xD;&#xA;from sgs_user_roles SUR, sgs_user USR&#xD;&#xA;where USR.user_serial_id = SUR.user_serial_id&#xD;&#xA;and SA.role_id = SUR.role_id and&#xD;&#xA;((effective_start_date is null) or &#xD;&#xA;(effective_start_date &lt;= getDate() and effective_end_date is null) or&#xD;&#xA;(getdate() between effective_start_date and effective_end_date))">
      <parameters />
    </query>
    <query ID="UserSupervisorRole" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select SUR.*, USR.user_id &#xD;&#xA;from sgs_user_roles SUR, sgs_user USR&#xD;&#xA;where USR.user_serial_id = SUR.user_serial_id&#xD;&#xA;and SA.supervisor_role_id = SUR.role_id and&#xD;&#xA;((effective_start_date is null) or &#xD;&#xA;(effective_start_date &lt;= getDate() and effective_end_date is null) or&#xD;&#xA;(getdate() between effective_start_date and effective_end_date))&#xD;&#xA;">
      <parameters />
    </query>
    <query ID="LoadRunningInstancesByPersonAndProcess" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select * from SGW_ACTIVITY_INSTANCE sai&#xD;&#xA;inner join SGW_PROCESS_INSTANCE spi on spi.PROCESS_INSTANCE_ID = sai.PROCESS_INSTANCE_ID&#xD;&#xA;where spi.person_id = @personID AND spi.PROCESS_ID = @processID&#xA;and sai.status_value not in ('CANC','PROC','RETU','REAU')">
      <parameters>
        <parameter ID="@personID" sfwDataType="int" />
        <parameter ID="@processID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="MyBasketBaseQuery" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select top 100 SA.PROCESS_ID, SA.NAME,SA.Role_Id, SA.display_name, SAI.*,&#xD;&#xA;spi.process_instance_id,SPI.PERSON_ID,SPI.ORG_ID,&#xD;&#xA;p.first_name,p.last_name,p.middle_name,&#xD;&#xA;o.org_code,o.org_name,r.role_description,&#xD;&#xA;spi.contact_ticket_id as contact_ticket_id,&#xD;&#xA;sp.DESCRIPTION as Process_Description,&#xD;&#xA;sp.Name as Process_Name,&#xD;&#xA;cv.DESCRIPTION as Source_Description&#xD;&#xA;from SGW_ACTIVITY_INSTANCE sai with (nolock)&#xD;&#xA;INNER JOIN SGW_PROCESS_INSTANCE AS spi ON SAI.PROCESS_INSTANCE_ID = SPI.PROCESS_INSTANCE_ID &#xD;&#xA;INNER JOIN SGW_PROCESS AS sp ON spi.PROCESS_ID = sp.PROCESS_ID &#xD;&#xA;INNER JOIN SGW_ACTIVITY AS sa ON spi.PROCESS_ID = sa.PROCESS_ID AND sai.ACTIVITY_ID = sa.ACTIVITY_ID &#xD;&#xA;left JOIN SGW_WORKFLOW_REQUEST swr on spi.REQUEST_ID = swr.WORKFLOW_REQUEST_ID&#xD;&#xA;left join sgt_person p with (nolock) on p.person_id = spi.person_id&#xD;&#xA;left join sgt_organization o with (nolock) on o.org_id = spi.org_id&#xD;&#xA;left outer join sgs_roles r with (nolock) on r.role_id = sa.role_id&#xD;&#xA;left JOIN SGS_CODE_VALUE cv on swr.SOURCE_ID = cv.CODE_ID and swr.SOURCE_VALUE = cv.CODE_VALUE&#xD;&#xA;WHERE sa.role_id &gt; 0">
      <parameters />
    </query>
    <query ID="LoadProcessInstanceHistory" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SA.DISPLAY_NAME AS ACTIVITY_NAME,&#xD;&#xA;SCV.DESCRIPTION AS STATUS_DESCRIPTION,SAIH.START_TIME,SAIH.END_TIME,SAIH.ACTION_USER_ID&#xD;&#xA;FROM SGW_ACTIVITY_INSTANCE_HISTORY SAIH&#xD;&#xA;INNER JOIN SGW_ACTIVITY_INSTANCE SAI ON SAIH.ACTIVITY_INSTANCE_ID = SAI.ACTIVITY_INSTANCE_ID &#xD;&#xA;INNER JOIN SGW_PROCESS_INSTANCE SPI ON SAI.PROCESS_INSTANCE_ID = SPI.PROCESS_INSTANCE_ID &#xD;&#xA;INNER JOIN SGW_ACTIVITY SA ON SAI.ACTIVITY_ID = SA.ACTIVITY_ID&#xD;&#xA;INNER JOIN SGS_CODE_VALUE SCV ON SAIH.STATUS_ID = SCV.CODE_ID AND SAIH.STATUS_VALUE = SCV.CODE_VALUE&#xD;&#xA;INNER JOIN SGW_PROCESS SP ON SPI.PROCESS_ID = SP.PROCESS_ID&#xD;&#xA;WHERE SPI.PROCESS_INSTANCE_ID = @PROCESS_INSTANCE_ID&#xD;&#xA;order by SAIH.CREATED_DATE DESC">
      <parameters>
        <parameter ID="@PROCESS_INSTANCE_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadProcessInstanceCheckList" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select * from SGW_PROCESS_INSTANCE_CHECKLIST ch&#xD;&#xA;inner join sgt_document doc on doc.document_id = ch.document_id&#xD;&#xA;where PROCESS_INSTANCE_ID = @processInstanceID &#xD;&#xA;order by REQUIRED_FLAG desc">
      <parameters>
        <parameter ID="@processInstanceID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadUsersByActivityRole" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT distinct u.USER_id, u.user_serial_id FROM SGS_USER u&#xD;&#xA;inner join sgs_user_roles ur on ur.user_serial_id = u.user_serial_id&#xD;&#xA;inner join SGW_ACTIVITY sa on sa.role_id = ur.role_id&#xD;&#xA;where sa.ACTIVITY_ID = @activityID">
      <parameters>
        <parameter ID="@activityID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadProcessInstanceHistoryByPerson" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SP.NAME AS PROCESS_NAME,&#xD;&#xA;CV.DESCRIPTION AS STATUS_DESCRIPTION,&#xD;&#xA;SAIH.START_TIME,&#xD;&#xA;SAIH.END_TIME,&#xD;&#xA;SAIH.ACTION_USER_ID,&#xD;&#xA;SA.DISPLAY_NAME AS ACTIVITY_NAME,&#xD;&#xA;CVSO.DESCRIPTION AS SOURCE,&#xD;&#xA;SPI.contact_ticket_id as contact_ticket_id,&#xD;&#xA;SP.DESCRIPTION as Process_Description&#xD;&#xA;FROM SGW_ACTIVITY_INSTANCE_HISTORY SAIH&#xD;&#xA;INNER JOIN SGW_ACTIVITY_INSTANCE SAI ON SAIH.ACTIVITY_INSTANCE_ID = SAI.ACTIVITY_INSTANCE_ID&#xD;&#xA;INNER JOIN SGW_PROCESS_INSTANCE SPI ON SAI.PROCESS_INSTANCE_ID = SPI.PROCESS_INSTANCE_ID&#xD;&#xA;INNER JOIN SGW_ACTIVITY SA ON SAI.ACTIVITY_ID=SA.ACTIVITY_ID&#xD;&#xA;INNER JOIN SGW_PROCESS SP on SA.PROCESS_ID=SP.PROCESS_ID&#xD;&#xA;INNER JOIN SGS_CODE_VALUE CV ON CV.CODE_ID=SAIH.STATUS_ID AND CV.CODE_VALUE=SAIH.STATUS_VALUE&#xD;&#xA;LEFT JOIN sgt_contact_ticket sct on SPI.CONTACT_TICKET_ID = sct.CONTACT_TICKET_ID -- some cases request will be deleted&#xD;&#xA;LEFT JOIN SGW_WORKFLOW_REQUEST SWR ON SPI.REQUEST_ID = SWR.WORKFLOW_REQUEST_ID&#xD;&#xA;LEFT JOIN SGS_CODE_VALUE CVSO ON CVSO.CODE_ID=SWR.SOURCE_ID AND CVSO.CODE_VALUE=SWR.SOURCE_VALUE&#xD;&#xA;WHERE SPI.PERSON_ID=@PERSON_ID&#xD;&#xA;ORDER BY START_TIME DESC">
      <parameters>
        <parameter ID="@PERSON_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadProcessInstanceHistoryByOrg" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT SP.NAME AS PROCESS_NAME,&#xD;&#xA;CV.DESCRIPTION AS STATUS_DESCRIPTION,&#xD;&#xA;SAIH.START_TIME,&#xD;&#xA;SAIH.END_TIME,&#xD;&#xA;SAIH.ACTION_USER_ID,&#xD;&#xA;SA.DISPLAY_NAME AS ACTIVITY_NAME,&#xD;&#xA;CVSO.DESCRIPTION AS SOURCE,&#xD;&#xA;SPI.contact_ticket_id as contact_ticket_id,&#xD;&#xA;SP.DESCRIPTION as Process_Description&#xD;&#xA;FROM SGW_ACTIVITY_INSTANCE_HISTORY SAIH&#xD;&#xA;INNER JOIN SGW_ACTIVITY_INSTANCE SAI ON SAIH.ACTIVITY_INSTANCE_ID = SAI.ACTIVITY_INSTANCE_ID&#xD;&#xA;INNER JOIN SGW_PROCESS_INSTANCE SPI ON SAI.PROCESS_INSTANCE_ID = SPI.PROCESS_INSTANCE_ID&#xD;&#xA;INNER JOIN SGW_ACTIVITY SA ON SAI.ACTIVITY_ID=SA.ACTIVITY_ID&#xD;&#xA;INNER JOIN SGW_PROCESS SP on SA.PROCESS_ID=SP.PROCESS_ID&#xD;&#xA;INNER JOIN SGS_CODE_VALUE CV ON CV.CODE_ID=SAIH.STATUS_ID AND CV.CODE_VALUE=SAIH.STATUS_VALUE&#xD;&#xA;LEFT JOIN sgt_contact_ticket sct on SPI.CONTACT_TICKET_ID = sct.CONTACT_TICKET_ID&#xD;&#xA;LEFT JOIN SGW_WORKFLOW_REQUEST SWR ON SPI.REQUEST_ID = SWR.WORKFLOW_REQUEST_ID&#xD;&#xA;LEFT JOIN SGS_CODE_VALUE CVSO ON CVSO.CODE_ID=SWR.SOURCE_ID AND CVSO.CODE_VALUE=SWR.SOURCE_VALUE&#xD;&#xA;WHERE SPI.ORG_ID=@ORG_ID&#xD;&#xA;ORDER BY START_TIME DESC">
      <parameters>
        <parameter ID="@ORG_ID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadRunningWorkflowByDocumentAndPerson" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT A.* FROM SGW_ACTIVITY_INSTANCE A&#xD;&#xA;INNER JOIN SGW_PROCESS_INSTANCE P ON A.PROCESS_INSTANCE_ID = P.PROCESS_INSTANCE_ID&#xD;&#xA;INNER JOIN SGW_PROCESS_INSTANCE_CHECKLIST B ON B.PROCESS_INSTANCE_ID = A.PROCESS_INSTANCE_ID&#xD;&#xA;INNER JOIN SGT_DOCUMENT D ON D.Document_Id = B.Document_Id&#xD;&#xA;WHERE A.STATUS_VALUE NOT IN('CANC','PROC','RETU','REAU') &#xD;&#xA;AND P.PERSON_ID = @personId AND D.DOCUMENT_CODE = @documentCode&#xD;&#xA;AND B.APPROVED_FLAG = 'N' AND B.REQUIRED_FLAG = 'Y'">
      <parameters>
        <parameter ID="@personId" sfwDataType="int" />
        <parameter ID="@documentCode" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="LoadRunningWorkflowByDocumentAndOrgCode" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT A.* FROM SGW_ACTIVITY_INSTANCE A&#xD;&#xA;INNER JOIN SGW_PROCESS_INSTANCE P ON A.PROCESS_INSTANCE_ID = P.PROCESS_INSTANCE_ID&#xD;&#xA;INNER JOIN SGW_PROCESS_INSTANCE_CHECKLIST B ON B.PROCESS_INSTANCE_ID = A.PROCESS_INSTANCE_ID&#xD;&#xA;INNER JOIN SGT_ORGANIZATION c ON c.org_id = p.org_id&#xD;&#xA;INNER JOIN SGT_DOCUMENT D ON D.Document_Id = B.Document_Id&#xD;&#xA;WHERE A.STATUS_VALUE NOT IN('CANC','PROC','RETU','REAU') &#xD;&#xA;AND c.org_code = @orgCode AND D.DOCUMENT_CODE = @documentCode&#xD;&#xA;AND B.APPROVED_FLAG = 'N' AND B.REQUIRED_FLAG = 'Y'">
      <parameters>
        <parameter ID="@orgCode" sfwDataType="string" />
        <parameter ID="@documentCode" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="rptExceptionReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SET NOCOUNT ON&#xD;&#xA;&#xD;&#xA;IF OBJECT_ID('tempdb..#TempTable') IS NOT NULL&#xD;&#xA;    DROP TABLE #TempTable&#xD;&#xA;&#xD;&#xA;create table #TempTable&#xD;&#xA;(&#xD;&#xA;TEMP_TABLE_RECORD_ID INT identity(1,1) PRIMARY KEY, &#xD;&#xA;Activity_Id INT,&#xD;&#xA; PERSON_ID INT,&#xD;&#xA; STANDARD_TIME INT,&#xD;&#xA; SumDateDiff INT, &#xD;&#xA; TimeDiff INT, &#xD;&#xA; CHECKED_OUT_USER Varchar(50),&#xD;&#xA; PROCESS_NAME varchar(500),&#xD;&#xA; ACTIVITY_NAME varchar(500) &#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;INSERT INTO #TempTable&#xD;&#xA;SELECT AI.Activity_Id AS Activity_Id , &#xD;&#xA;  AP.PERSON_ID AS Person_Id,&#xD;&#xA;  ACT.STANDARD_TIME_IN_MINUTES AS Standard_Time,&#xD;&#xA;  SUM(ISNULL(dbo.GetWorkingTimeInMinutes(Start_time, End_time),0)) as SumDateDiff,&#xD;&#xA;  (SUM(ISNULL(dbo.GetWorkingTimeInMinutes(Start_time, End_time),0)) - ACT.STANDARD_TIME_IN_MINUTES ) AS TimeDiff,&#xD;&#xA;  AI.CHECKED_OUT_USER,&#xD;&#xA;  DESCRIPTION as PROCESS_NAME,&#xD;&#xA;  DISPLAY_NAME AS ACTIVITY_NAME&#xD;&#xA;FROM Sgw_Activity_Instance_History AIH WITH(NOLOCK)&#xD;&#xA; INNER JOIN SGW_ACTIVITY_INSTANCE AI WITH(NOLOCK)&#xD;&#xA;  ON AIH.Activity_Instance_Id = AI.Activity_Instance_Id AND AI.Status_Value = 'PROC'&#xD;&#xA; Inner Join SGW_Process_instance AP WITH(NOLOCK)&#xD;&#xA;  on AI.Process_instance_id = AP.Process_instance_id&#xD;&#xA; INNER JOIN SGW_ACTIVITY ACT WITH(NOLOCK)&#xD;&#xA;  ON AI.Activity_Id = ACT.Activity_Id&#xD;&#xA; inner join SGW_PROCESS PR WITH(NOLOCK)&#xD;&#xA;  on AP.PROCESS_ID = PR.PROCESS_ID&#xD;&#xA;GROUP BY  &#xD;&#xA;  AI.Activity_Id , &#xD;&#xA;  AP.PERSON_ID ,&#xD;&#xA;  ACT.STANDARD_TIME_IN_MINUTES, &#xD;&#xA;  AI.CHECKED_OUT_USER,&#xD;&#xA;  DESCRIPTION ,&#xD;&#xA;  DISPLAY_NAME&#xD;&#xA;&#xD;&#xA;  CREATE NONCLUSTERED INDEX IX_TempTable_TIMEDIFF ON #TempTable(TEMP_TABLE_RECORD_ID, TimeDiff, Activity_Id) &#xD;&#xA;  INCLUDE (PROCESS_NAME,ACTIVITY_NAME,PERSON_ID,Standard_Time, SumDateDiff)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT PROCESS_NAME,&#xD;&#xA;  Activity_Id , &#xD;&#xA;  ACTIVITY_NAME,&#xD;&#xA;  PERSON_ID ,&#xD;&#xA;  Standard_Time,&#xD;&#xA;  SumDateDiff,&#xD;&#xA;  TimeDiff,&#xD;&#xA;CAST((Standard_Time)/480 as Varchar(3)) +':' + Cast(((Standard_Time)- (Standard_Time)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((Standard_Time) - (((Standard_Time)/480 * 480) + (((Standard_Time)- (Standard_Time)/480 * 480)/60)*60)) as Varchar(2)),2)  AS FormatedStd_Time,&#xD;&#xA;  CAST((SumDateDiff)/480 as Varchar(3)) +':' + Cast(((SumDateDiff)- (SumDateDiff)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((SumDateDiff) - (((SumDateDiff)/480 * 480) + (((SumDateDiff)- (SumDateDiff)/480 * 480)/60)*60)) as Varchar(2)),2)  AS Formated_ActualDuration,&#xD;&#xA;  CAST((ABS(TimeDiff))/480 as Varchar(3)) +':' + Cast(((ABS(TimeDiff))- (ABS(TimeDiff))/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((ABS(TimeDiff)) - (((ABS(TimeDiff))/480 * 480) + (((ABS(TimeDiff))- (ABS(TimeDiff))/480 * 480)/60)*60)) as Varchar(2)),2)&#xD;&#xA;   AS Formatted_TimeDiff,&#xD;&#xA;  CHECKED_OUT_USER&#xD;&#xA;FROM #TempTable Temp&#xD;&#xA;WHERE TimeDiff &gt; 0&#xD;&#xA;SET NOCOUNT OFF">
      <parameters />
    </query>
    <query ID="rptActivitiesInStatusExceeding3Days" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SET NOCOUNT ON&#xD;&#xA;&#xD;&#xA;DECLARE @TempTable as table&#xD;&#xA;( PERSLinkID_OrgID varchar(100),&#xD;&#xA; LastName_OrgName varchar(100),&#xD;&#xA; Initiated datetime,&#xD;&#xA; current_status varchar(100), &#xD;&#xA; [Role] varchar(100),  &#xD;&#xA; elapsed_time int,&#xD;&#xA;    activity_name varchar(100)&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;INSERT INTO @TempTable&#xD;&#xA; select isnull(cast(aP.person_id as nvarchar(10)),&#xD;&#xA;  right('000000'+cast(c.org_code as varchar(10)),6)) as PERSLinkID_OrgID,&#xD;&#xA;case when aP.person_id is null then c.org_name else b.last_name end as LastName_OrgName,&#xD;&#xA;(a.created_date) as Initiated,&#xD;&#xA;cv.Description as current_status,&#xD;&#xA;rol.role_description as [Role],&#xD;&#xA;ISNULL(dbo.GetWorkingTimeInMinutes(a.created_date, getdate()),0) as elapsed_time,&#xD;&#xA;SA.display_name as activity_name&#xD;&#xA;from dbo.SGW_ACTIVITY_INSTANCE a &#xD;&#xA;left join sgs_code_value cv &#xD;&#xA;  ON a.status_id=cv.CODE_ID AND a.status_value=cv.CODE_VALUE&#xD;&#xA;inner join sgW_activity SA &#xD;&#xA;  on SA.activity_id = a.activity_id&#xD;&#xA;Inner Join SGW_Process_instance AP &#xD;&#xA;  on A.Process_instance_id = AP.Process_instance_id&#xD;&#xA;left join sgt_person b &#xD;&#xA;  on ap.person_id=b.person_id&#xD;&#xA;left join sgt_organization c &#xD;&#xA; on ap.org_id=c.org_id&#xD;&#xA;left join sgs_roles rol&#xD;&#xA;  ON SA.role_id=rol.role_id&#xD;&#xA;where a.status_value IN ('UNPC','RELE') &#xD;&#xA; and (ISNULL(dbo.GetWorkingTimeInMinutes(a.created_date, getdate()),0) &gt;= 1440)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT PERSLinkID_OrgID,LastName_OrgName,Initiated,current_status,[Role],&#xD;&#xA;CAST((elapsed_time)/480 as Varchar(3)) AS elapsed_time, activity_name FROM @TempTable&#xD;&#xA;ORDER BY elapsed_time/480 desc,cast(PERSLinkID_OrgID as int)&#xD;&#xA;SET NOCOUNT OFF">
      <parameters />
    </query>
    <query ID="rptProcessBatchReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SET NOCOUNT ON&#xD;&#xA;DECLARE @CTR as table&#xD;&#xA;( ACTION_USER_ID VARCHAR(50),&#xD;&#xA; ACTIVITY_ID INT, &#xD;&#xA; PROCESS_ID INT,&#xD;&#xA; [UNPC] INT,&#xD;&#xA; [INPC] INT,&#xD;&#xA; [PROC] INT,&#xD;&#xA; [RELE] INT,&#xD;&#xA; [SUSP] INT,&#xD;&#xA; [CANC] INT,&#xD;&#xA; [RETU] INT,&#xD;&#xA; [REAU] INT,&#xD;&#xA; [RESU] INT&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;DECLARE @TIMEDIF as table&#xD;&#xA;( ACTION_USER_ID VARCHAR(50),&#xD;&#xA; ACTIVITY_ID INT,&#xD;&#xA; PROCESS_ID INT, &#xD;&#xA; [UNPC] BIGINT,&#xD;&#xA; [INPC] BIGINT,&#xD;&#xA; [PROC] BIGINT,&#xD;&#xA; [RELE] BIGINT,&#xD;&#xA; [SUSP] BIGINT,&#xD;&#xA; [CANC] INT,&#xD;&#xA; [RETU] INT,&#xD;&#xA; [REAU] INT,&#xD;&#xA; [RESU] BIGINT&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;INSERT INTO @CTR&#xD;&#xA; SELECT &#xD;&#xA;  ACTION_USER_ID ,&#xD;&#xA;  ACTIVITY_ID , &#xD;&#xA;  PROCESS_ID ,&#xD;&#xA;   [UNPC] AS UNPC,&#xD;&#xA;   [INPC] AS INPC,&#xD;&#xA;   [PROC] AS [PROC],&#xD;&#xA;   [RELE] AS RELE,&#xD;&#xA;   [SUSP] AS SUSP,&#xD;&#xA;   [CANC] AS CANC,&#xD;&#xA;   [RETU] AS RETU,&#xD;&#xA;   [REAU] AS REAU,&#xD;&#xA;   [RESU] AS RESU&#xD;&#xA; FROM &#xD;&#xA;  (&#xD;&#xA;   SELECT  AIH.ACTION_USER_ID AS ACTION_USER_ID, &#xD;&#xA;    AI.ACTIVITY_ID AS ACTIVITY_ID , &#xD;&#xA;    AP.PROCESS_ID  AS PROCESS_ID,&#xD;&#xA;    AIH.STATUS_VALUE AS STATUS_VALUE, &#xD;&#xA;    Count(AIH.STATUS_VALUE) as DifSecs&#xD;&#xA;   FROM SGW_ACTIVITY_INSTANCE_HISTORY AIH&#xD;&#xA;   INNER JOIN SGW_ACTIVITY_INSTANCE AI &#xD;&#xA;    ON AIH.ACTIVITY_INSTANCE_ID = AI.ACTIVITY_INSTANCE_ID&#xD;&#xA;   INNER JOIN SGW_PROCESS_INSTANCE AP &#xD;&#xA;    ON AI.PROCESS_INSTANCE_ID = AP.PROCESS_INSTANCE_ID&#xD;&#xA;   group by AIH.ACTION_USER_ID ,AI.ACTIVITY_ID,AP.PROCESS_ID,AIH.STATUS_VALUE  &#xD;&#xA;&#xD;&#xA;  ) P&#xD;&#xA; PIVOT&#xD;&#xA;  (&#xD;&#xA;   SUM(difsecs)&#xD;&#xA;   FOR STATUS_VALUE IN&#xD;&#xA;   ([UNPC],[INPC],[PROC],[RELE],[SUSP],[CANC],[RETU],[REAU],[RESU])&#xD;&#xA;  ) AS pvt&#xD;&#xA; ORDER BY &#xD;&#xA;  ACTION_USER_ID , &#xD;&#xA;  ACTIVITY_ID ,&#xD;&#xA;  PROCESS_ID&#xD;&#xA;&#xD;&#xA;INSERT INTO @TIMEDIF&#xD;&#xA;SELECT &#xD;&#xA; ACTION_USER_ID ,&#xD;&#xA; ACTIVITY_ID , &#xD;&#xA; PROCESS_ID ,&#xD;&#xA;  [UNPC] AS UNPC,&#xD;&#xA;  [INPC] AS INPC,&#xD;&#xA;  [PROC] AS [PROC],&#xD;&#xA;  [RELE] AS RELE,&#xD;&#xA;  [SUSP] AS SUSP,&#xD;&#xA;  [CANC] AS CANC,&#xD;&#xA;  [RETU] AS RETU,&#xD;&#xA;  [REAU] AS REAU,&#xD;&#xA;  [RESU] AS RESU&#xD;&#xA;FROM &#xD;&#xA; (&#xD;&#xA;  SELECT  AIH.ACTION_USER_ID AS ACTION_USER_ID, &#xD;&#xA;   AI.ACTIVITY_ID AS ACTIVITY_ID , &#xD;&#xA;   AP.PROCESS_ID  AS PROCESS_ID,&#xD;&#xA;   AIH.STATUS_VALUE AS STATUS_VALUE, &#xD;&#xA;   cast(dbo.GetWorkingTimeInMinutes(Start_time, End_time) as bigint) as DifSecs&#xD;&#xA;  FROM SGW_ACTIVITY_INSTANCE_HISTORY AIH&#xD;&#xA;  INNER JOIN SGW_ACTIVITY_INSTANCE AI &#xD;&#xA;   ON AIH.ACTIVITY_INSTANCE_ID = AI.ACTIVITY_INSTANCE_ID&#xD;&#xA;  INNER JOIN SGW_PROCESS_INSTANCE AP &#xD;&#xA;   ON AI.PROCESS_INSTANCE_ID = AP.PROCESS_INSTANCE_ID&#xD;&#xA; ) P&#xD;&#xA;PIVOT&#xD;&#xA; (&#xD;&#xA;  SUM(DifSecs)&#xD;&#xA;  FOR STATUS_VALUE IN&#xD;&#xA;  ([UNPC],[INPC],[PROC],[RELE],[SUSP],[CANC],[RETU],[REAU],[RESU])&#xD;&#xA; ) AS pvt&#xD;&#xA;ORDER BY &#xD;&#xA; ACTION_USER_ID , &#xD;&#xA; ACTIVITY_ID , &#xD;&#xA; PROCESS_ID &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT PR.DESCRIPTION as PROCESS_NAME,&#xD;&#xA;  C.ACTIVITY_ID AS ACTIVITY_PROFILE_ID,&#xD;&#xA;  AP1.DISPLAY_NAME AS ACTIVITY_NAME,&#xD;&#xA;  C.ACTION_USER_ID,&#xD;&#xA;  C.UNPC AS UNPC_COUNT,&#xD;&#xA;  CAST((CASE WHEN C.UNPC = 0 THEN 0 ELSE T.UNPC/C.UNPC END)/480 as Varchar(10)) +':' + Cast(((CASE WHEN C.UNPC = 0 THEN 0 ELSE T.UNPC/C.UNPC END)- (CASE WHEN C.UNPC = 0 THEN 0 ELSE T.UNPC/C.UNPC END)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((CASE WHEN C.UNPC = 0 THEN 0 ELSE T.UNPC/C.UNPC END) - (((CASE WHEN C.UNPC = 0 THEN 0 ELSE T.UNPC/C.UNPC END)/480 * 480) + (((CASE WHEN C.UNPC = 0 THEN 0 ELSE T.UNPC/C.UNPC END)- (CASE WHEN C.UNPC = 0 THEN 0 ELSE T.UNPC/C.UNPC END)/480 * 480)/60)*60)) as Varchar(2)),2)  AS UNPC_TIME_MEAN_AVG,&#xD;&#xA;        C.INPC AS INPC_COUNT,&#xD;&#xA;  CAST((CASE WHEN C.INPC = 0 THEN 0 ELSE T.INPC/C.INPC END)/480 as Varchar(10)) +':' + Cast(((CASE WHEN C.INPC = 0 THEN 0 ELSE T.INPC/C.INPC END)- (CASE WHEN C.INPC = 0 THEN 0 ELSE T.INPC/C.INPC END)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((CASE WHEN C.INPC = 0 THEN 0 ELSE T.INPC/C.INPC END) - (((CASE WHEN C.INPC = 0 THEN 0 ELSE T.INPC/C.INPC END)/480 * 480) + (((CASE WHEN C.INPC = 0 THEN 0 ELSE T.INPC/C.INPC END)- (CASE WHEN C.INPC = 0 THEN 0 ELSE T.INPC/C.INPC END)/480 * 480)/60)*60)) as Varchar(2)),2) AS INPC_TIME_MEAN_AVG,&#xD;&#xA;        C.[PROC] AS PROC_COUNT,&#xD;&#xA;  CAST((CASE WHEN C.[PROC] = 0 THEN 0 ELSE T.[PROC]/C.[PROC] END)/480 as Varchar(10)) +':' + Cast(((CASE WHEN C.[PROC] = 0 THEN 0 ELSE T.[PROC]/C.[PROC] END)- (CASE WHEN C.[PROC] = 0 THEN 0 ELSE T.[PROC]/C.[PROC] END)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((CASE WHEN C.[PROC] = 0 THEN 0 ELSE T.[PROC]/C.[PROC] END) - (((CASE WHEN C.[PROC] = 0 THEN 0 ELSE T.[PROC]/C.[PROC] END)/480 * 480) + (((CASE WHEN C.[PROC] = 0 THEN 0 ELSE T.[PROC]/C.[PROC] END)- (CASE WHEN C.[PROC] = 0 THEN 0 ELSE T.[PROC]/C.[PROC] END)/480 * 480)/60)*60)) as Varchar(2)),2) AS PROC_TIME_MEAN_AVG,&#xD;&#xA;        C.RELE AS RELE_COUNT,&#xD;&#xA;  CAST((CASE WHEN C.RELE = 0 THEN 0 ELSE T.RELE/C.RELE END)/480 as Varchar(10)) +':' + Cast(((CASE WHEN C.RELE = 0 THEN 0 ELSE T.RELE/C.RELE END)- (CASE WHEN C.RELE = 0 THEN 0 ELSE T.RELE/C.RELE END)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((CASE WHEN C.RELE = 0 THEN 0 ELSE T.RELE/C.RELE END) - (((CASE WHEN C.RELE = 0 THEN 0 ELSE T.RELE/C.RELE END)/480 * 480) + (((CASE WHEN C.RELE = 0 THEN 0 ELSE T.RELE/C.RELE END)- (CASE WHEN C.RELE = 0 THEN 0 ELSE T.RELE/C.RELE END)/480 * 480)/60)*60)) as Varchar(2)),2) AS RELE_TIME_MEAN_AVG,&#xD;&#xA;        C.SUSP AS SUSP_COUNT,&#xD;&#xA;  CAST((CASE WHEN C.SUSP = 0 THEN 0 ELSE T.SUSP/C.SUSP END)/480 as Varchar(10)) +':' + Cast(((CASE WHEN C.SUSP = 0 THEN 0 ELSE T.SUSP/C.SUSP END)- (CASE WHEN C.SUSP = 0 THEN 0 ELSE T.SUSP/C.SUSP END)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((CASE WHEN C.SUSP = 0 THEN 0 ELSE T.SUSP/C.SUSP END) - (((CASE WHEN C.SUSP = 0 THEN 0 ELSE T.SUSP/C.SUSP END)/480 * 480) + (((CASE WHEN C.SUSP = 0 THEN 0 ELSE T.SUSP/C.SUSP END)- (CASE WHEN C.SUSP = 0 THEN 0 ELSE T.SUSP/C.SUSP END)/480 * 480)/60)*60)) as Varchar(2)),2) AS SUSP_TIME_MEAN_AVG,&#xD;&#xA;        C.CANC AS CANC_COUNT,&#xD;&#xA;  CAST((CASE WHEN C.CANC = 0 THEN 0 ELSE T.CANC/C.CANC END)/480 as Varchar(10)) +':' + Cast(((CASE WHEN C.CANC = 0 THEN 0 ELSE T.CANC/C.CANC END)- (CASE WHEN C.CANC = 0 THEN 0 ELSE T.CANC/C.CANC END)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((CASE WHEN C.CANC = 0 THEN 0 ELSE T.CANC/C.CANC END) - (((CASE WHEN C.CANC = 0 THEN 0 ELSE T.CANC/C.CANC END)/480 * 480) + (((CASE WHEN C.CANC = 0 THEN 0 ELSE T.CANC/C.CANC END)- (CASE WHEN C.CANC = 0 THEN 0 ELSE T.CANC/C.CANC END)/480 * 480)/60)*60)) as Varchar(2)),2) AS CANC_TIME_MEAN_AVG,&#xD;&#xA;        C.RETU AS RETU_COUNT,&#xD;&#xA;  CAST((CASE WHEN C.RETU = 0 THEN 0 ELSE T.RETU/C.RETU END)/480 as Varchar(10)) +':' + Cast(((CASE WHEN C.RETU = 0 THEN 0 ELSE T.RETU/C.RETU END)- (CASE WHEN C.RETU = 0 THEN 0 ELSE T.RETU/C.RETU END)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((CASE WHEN C.RETU = 0 THEN 0 ELSE T.RETU/C.RETU END) - (((CASE WHEN C.RETU = 0 THEN 0 ELSE T.RETU/C.RETU END)/480 * 480) + (((CASE WHEN C.RETU = 0 THEN 0 ELSE T.RETU/C.RETU END)- (CASE WHEN C.RETU = 0 THEN 0 ELSE T.RETU/C.RETU END)/480 * 480)/60)*60)) as Varchar(2)),2) AS RETU_TIME_MEAN_AVG,&#xD;&#xA;        C.REAU AS REAU_COUNT,&#xD;&#xA;  CAST((CASE WHEN C.REAU = 0 THEN 0 ELSE T.REAU/C.REAU END)/480 as Varchar(10)) +':' + Cast(((CASE WHEN C.REAU = 0 THEN 0 ELSE T.REAU/C.REAU END)- (CASE WHEN C.REAU = 0 THEN 0 ELSE T.REAU/C.REAU END)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((CASE WHEN C.REAU = 0 THEN 0 ELSE T.REAU/C.REAU END) - (((CASE WHEN C.REAU = 0 THEN 0 ELSE T.REAU/C.REAU END)/480 * 480) + (((CASE WHEN C.REAU = 0 THEN 0 ELSE T.REAU/C.REAU END)- (CASE WHEN C.REAU = 0 THEN 0 ELSE T.REAU/C.REAU END)/480 * 480)/60)*60)) as Varchar(2)),2) AS REAU_TIME_MEAN_AVG,&#xD;&#xA;        C.RESU AS RESU_COUNT,&#xD;&#xA;  CAST((CASE WHEN C.RESU = 0 THEN 0 ELSE T.RESU/C.RESU END)/480 as Varchar(10)) +':' + Cast(((CASE WHEN C.RESU = 0 THEN 0 ELSE T.RESU/C.RESU END)- (CASE WHEN C.RESU = 0 THEN 0 ELSE T.RESU/C.RESU END)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((CASE WHEN C.RESU = 0 THEN 0 ELSE T.RESU/C.RESU END) - (((CASE WHEN C.RESU = 0 THEN 0 ELSE T.RESU/C.RESU END)/480 * 480) + (((CASE WHEN C.RESU = 0 THEN 0 ELSE T.RESU/C.RESU END)- (CASE WHEN C.RESU = 0 THEN 0 ELSE T.RESU/C.RESU END)/480 * 480)/60)*60)) as Varchar(2)),2) AS RESU_TIME_MEAN_AVG,&#xD;&#xA;  T.UNPC, T.INPC,T.[PROC],T.RELE,T.SUSP,T.CANC,T.RETU,T.REAU,T.RESU&#xD;&#xA; FROM  @CTR C &#xD;&#xA; INNER JOIN @TIMEDIF T ON &#xD;&#xA;  C.ACTION_USER_ID   = T.ACTION_USER_ID  AND&#xD;&#xA;  C.ACTIVITY_ID = T.ACTIVITY_ID AND&#xD;&#xA;  C.PROCESS_ID = T.PROCESS_ID&#xD;&#xA; INNER JOIN SGW_ACTIVITY AP1 ON &#xD;&#xA;  AP1.ACTIVITY_ID = C.ACTIVITY_ID&#xD;&#xA; INNER JOIN SGW_PROCESS PR &#xD;&#xA;  on C.PROCESS_ID = PR.PROCESS_ID&#xD;&#xA; WHERE ISNULL(C.INPC,0) + ISNULL(C.[PROC],0) + ISNULL(C.RELE,0) + ISNULL(C.SUSP,0)&#xD;&#xA;   + ISNULL(C.CANC,0) + ISNULL(C.RETU,0) + ISNULL(C.REAU,0) + ISNULL(C.RESU,0) &gt; 0&#xD;&#xA;&#xD;&#xA;SET NOCOUNT OFF">
      <parameters />
    </query>
    <query ID="rptUserBatchReport" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SET NOCOUNT ON&#xD;&#xA;&#xD;&#xA;DECLARE @TempTable as table&#xD;&#xA;( Action_User_Id Varchar(50),&#xD;&#xA; ACTIVITY_Id INT,&#xD;&#xA; Status_value Varchar(4),&#xD;&#xA; Status_Description VARCHAR(50),&#xD;&#xA; [COUNT] INT, &#xD;&#xA; [MinDateDiff] INT, &#xD;&#xA; [MaxDateDiff] INT, &#xD;&#xA; [SumDateDiff] BIGINT,&#xD;&#xA; [MedianDateDiff] INT&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;DECLARE @TempAIHTable as table&#xD;&#xA;( Action_User_Id Varchar(50), &#xD;&#xA; Status_Id int,&#xD;&#xA; Status_value Varchar(4),&#xD;&#xA; Activity_Instance_Id int,&#xD;&#xA; Start_time datetime,&#xD;&#xA; End_Time datetime,&#xD;&#xA; TimeDiff BIGINT&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;INSERT INTO @TempAIHTable&#xD;&#xA;SELECT  CASE WHEN Status_value = 'UNPC' THEN NULL ELSE Action_User_Id END AS Action_User_Id,   &#xD;&#xA;   Status_Id,Status_value,Activity_Instance_Id,Start_time,End_Time,&#xD;&#xA;   ISNULL(dbo.GetWorkingTimeInMinutes(Start_time, End_time),0) AS TimeDiff&#xD;&#xA;FROM Sgw_Activity_Instance_History (nolock)&#xD;&#xA;&#xD;&#xA;INSERT INTO @TempTable&#xD;&#xA;  SELECT  AIH.Action_User_Id AS Action_User_Id,&#xD;&#xA;   AI.ACTIVITY_Id AS ACTIVITY_Id , &#xD;&#xA;   AIH.Status_value, &#xD;&#xA;   CV.Description AS Status_Description, &#xD;&#xA;   &#xD;&#xA;   COUNT('0') AS [COUNT],&#xD;&#xA;   MIN(TimeDiff) as MinDateDiff,&#xD;&#xA;   MAX(TimeDiff) as MaxDateDiff,&#xD;&#xA;   SUM(TimeDiff) as SumDateDiff,&#xD;&#xA;&#xD;&#xA;   ( SELECT TOP 1 DateDiff as MedianDateDif FROM &#xD;&#xA;    ( &#xD;&#xA;     SELECT TOP 50 PERCENT TimeDiff AS DateDiff &#xD;&#xA;      FROM @TempAIHTable AIH1&#xD;&#xA;       INNER JOIN Sgw_Activity_Instance AI1 (nolock)&#xD;&#xA;       ON AIH1.Activity_Instance_Id = AI1.Activity_Instance_Id&#xD;&#xA;      WHERE &#xD;&#xA;       (AIH1.Action_User_Id = AIH.Action_User_Id &#xD;&#xA;        OR (AIH1.Action_User_ID IS NULL AND AIH.Action_User_Id IS NULL)) AND&#xD;&#xA;       AI1.ACTIVITY_Id  = AI.ACTIVITY_Id AND&#xD;&#xA;       AIH1.Status_value =AIH.Status_value&#xD;&#xA;     ORDER BY TimeDiff DESC &#xD;&#xA;    ) A ORDER BY DateDiff ASC&#xD;&#xA;   ) AS [MedianDateDiff]&#xD;&#xA;&#xD;&#xA;  FROM @TempAIHTable AIH&#xD;&#xA;   INNER JOIN Sgw_Activity_Instance AI (nolock)&#xD;&#xA;    ON AIH.Activity_Instance_Id = AI.Activity_Instance_Id&#xD;&#xA;   INNER JOIN Sgs_Code_Value CV (nolock)&#xD;&#xA;    ON AIH.Status_Id = CV.Code_Id AND AIH.Status_value = CV.Code_Value&#xD;&#xA;&#xD;&#xA;  GROUP BY AIH.Action_User_Id, AI.ACTIVITY_Id, AIH.Status_value, CV.Description  &#xD;&#xA;&#xD;&#xA;SELECT  Action_User_Id ,&#xD;&#xA; SAP.Display_Name + ' - ' + SAP.Name + ' (' + RO.ROLE_DESCRIPTION + ')' AS ROLE_NAME,&#xD;&#xA; Temp.ACTIVITY_Id , &#xD;&#xA; Status_Description, &#xD;&#xA;    [COUNT],&#xD;&#xA; CAST((MaxDateDiff)/480 as Varchar(10)) +':' + Cast(((MaxDateDiff)- (MaxDateDiff)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((MaxDateDiff) - (((MaxDateDiff)/480 * 480) + (((MaxDateDiff)- (MaxDateDiff)/480 * 480)/60)*60)) as Varchar(2)),2)  AS MaxDateDiff,&#xD;&#xA; CAST((MedianDateDiff)/480 as Varchar(10)) +':' + Cast(((MedianDateDiff)- (MedianDateDiff)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((MedianDateDiff) - (((MedianDateDiff)/480 * 480) + (((MedianDateDiff)- (MedianDateDiff)/480 * 480)/60)*60)) as Varchar(2)),2)  AS MedianDateDiff,&#xD;&#xA; CAST((MinDateDiff)/480 as Varchar(10)) +':' + Cast(((MinDateDiff)- (MinDateDiff)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((MinDateDiff) - (((MinDateDiff)/480 * 480) + (((MinDateDiff)- (MinDateDiff)/480 * 480)/60)*60)) as Varchar(2)),2)  AS MinDateDiff,&#xD;&#xA; CAST((SumDateDiff/[COUNT])/480 as Varchar(10)) +':' + Cast(((SumDateDiff/[COUNT])- (SumDateDiff/[COUNT])/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((SumDateDiff/[COUNT]) - (((SumDateDiff/[COUNT])/480 * 480) + (((SumDateDiff/[COUNT])- (SumDateDiff/[COUNT])/480 * 480)/60)*60)) as Varchar(2)),2)  AS MEAN_AVERAGE&#xD;&#xA;FROM @TempTable Temp&#xD;&#xA;INNER JOIN SGw_ACTIVITY SAP (nolock)&#xD;&#xA;ON Temp.ACTIVITY_ID=SAP.ACTIVITY_ID&#xD;&#xA;INNER JOIN SGS_ROLES RO (nolock) ON RO.ROLE_ID=SAP.ROLE_ID&#xD;&#xA;WHERE Status_value NOT IN ('UNPC')&#xD;&#xA;&#xD;&#xA;SET NOCOUNT OFF">
      <parameters />
    </query>
    <query ID="rptWorkFlowMetrics" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SET NOCOUNT ON&#xD;&#xA;&#xD;&#xA;DECLARE @CTR AS TABLE&#xD;&#xA;( &#xD;&#xA; ACTIVITY_INSTANCE_ID INT,&#xD;&#xA; ACTIVITY_ID INT,&#xD;&#xA; PROCESS_ID INT,&#xD;&#xA; PERSON_ID INT,&#xD;&#xA; ORG_ID INT,&#xD;&#xA; CREATED_DATE DATETIME,&#xD;&#xA; CURRENT_STATUS VARCHAR(4),&#xD;&#xA; MODIFIED_BY VARCHAR(50),&#xD;&#xA; UNPC INT,&#xD;&#xA; INPC INT,&#xD;&#xA; [PROC] INT,&#xD;&#xA; RELE INT,&#xD;&#xA; SUSP INT,&#xD;&#xA; CANC INT,&#xD;&#xA; RETU INT,&#xD;&#xA; REAU INT,&#xD;&#xA; RESU INT&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;DECLARE @TIMEDIF AS TABLE&#xD;&#xA;( &#xD;&#xA; ACTIVITY_INSTANCE_ID INT,&#xD;&#xA; ACTIVITY_ID INT,&#xD;&#xA; PROCESS_ID INT,&#xD;&#xA; PERSON_ID INT,&#xD;&#xA; ORG_ID INT,&#xD;&#xA; CREATED_DATE DATETIME,&#xD;&#xA; CURRENT_STATUS VARCHAR(4),&#xD;&#xA; MODIFIED_BY VARCHAR(50),&#xD;&#xA; UNPC INT,&#xD;&#xA; INPC INT,&#xD;&#xA; [PROC] INT,&#xD;&#xA; RELE INT,&#xD;&#xA; SUSP INT,&#xD;&#xA; CANC INT,&#xD;&#xA; RETU INT,&#xD;&#xA; REAU INT,&#xD;&#xA; RESU INT&#xD;&#xA;)&#xD;&#xA;  &#xD;&#xA;&#xD;&#xA;INSERT INTO @CTR&#xD;&#xA; SELECT &#xD;&#xA;  ACTIVITY_INSTANCE_ID ,&#xD;&#xA;  ACTIVITY_ID ,&#xD;&#xA;  PROCESS_ID,&#xD;&#xA;  PERSON_ID ,&#xD;&#xA;  ORG_ID ,&#xD;&#xA;  CREATED_DATE ,&#xD;&#xA;  CURRENT_STATUS ,&#xD;&#xA;  MODIFIED_BY, &#xD;&#xA;  [UNPC] AS UNPC,&#xD;&#xA;  [INPC] AS INPC,&#xD;&#xA;  [PROC] ,&#xD;&#xA;  [RELE] AS RELE,&#xD;&#xA;  [SUSP] AS SUSP,&#xD;&#xA;  [CANC] AS CANC,&#xD;&#xA;  [RETU] AS RETU,&#xD;&#xA;  [REAU] AS REAU,&#xD;&#xA;  [RESU] AS REAU&#xD;&#xA; FROM &#xD;&#xA;  (&#xD;&#xA;&#xD;&#xA;   SELECT AI.ACTIVITY_INSTANCE_ID ,&#xD;&#xA;    AI.ACTIVITY_Id,&#xD;&#xA;    AP.PROCESS_ID, &#xD;&#xA;    PERSON_ID ,&#xD;&#xA;    ORG_ID ,&#xD;&#xA;    AI.CREATED_DATE, &#xD;&#xA;    AI.STATUS_VALUE AS CURRENT_STATUS,&#xD;&#xA;    AI.MODIFIED_BY, &#xD;&#xA;    AIH.STATUS_VALUE AS STATUS_VALUE&#xD;&#xA;   FROM SGW_ACTIVITY_INSTANCE AI&#xD;&#xA;    INNER JOIN SGW_ACTIVITY_INSTANCE_HISTORY AIH &#xD;&#xA;     ON AI.Activity_Instance_Id = AIH.Activity_Instance_Id&#xD;&#xA;    INNER JOIN SGS_CODE_VALUE CV &#xD;&#xA;     ON AI.Status_Id = CV.Code_Id and AI.Status_Value  = CV.Code_Value&#xD;&#xA;    INNER JOIN SGW_ACTIVITY AP &#xD;&#xA;     ON AP.ACTIVITY_ID = AI.ACTIVITY_id&#xD;&#xA;    INNER JOIN SGW_PROCESS_INSTANCE SPI &#xD;&#xA;     ON AI.PROCESS_INSTANCE_ID = SPI.PROCESS_INSTANCE_ID&#xD;&#xA;   WHERE CONVERT(DATETIME,CONVERT(VARCHAR,Start_Time,101) ,110) &gt;= CONVERT(DATETIME,CONVERT(VARCHAR,@startTime,101) ,110) &#xD;&#xA;      AND CONVERT(DATETIME,CONVERT(VARCHAR,isnull(End_Time,getDate()),101) ,110) &lt;= CONVERT(DATETIME,CONVERT(VARCHAR,@endTime,101) ,110)&#xD;&#xA;   AND (@typeId IS NULL OR @typeId = '' OR @typeId = '0' OR @typeId = AP.Process_ID)&#xD;&#xA;   AND (@qualifiedName IS NULL OR @qualifiedName = '' OR @qualifiedName = '0' OR @qualifiedName = AP.ACTIVITY_ID)&#xD;&#xA;   AND (@userID IS NULL OR @userID = '' OR lower(@userID) = lower(AI.modified_by))&#xD;&#xA;   AND (@personID IS NULL OR @personID = '' OR @personID = SPI.PERSON_ID)&#xD;&#xA;   AND (@orgID IS NULL OR @orgID = '' OR @orgID = SPI.ORG_ID)&#xD;&#xA;         AND (@status IS NULL OR @status = '' OR @status = AI.status_value) &#xD;&#xA;  ) P&#xD;&#xA; PIVOT&#xD;&#xA;  (&#xD;&#xA;   COUNT (STATUS_VALUE)&#xD;&#xA;   FOR STATUS_VALUE IN&#xD;&#xA;   ([UNPC] ,[INPC] ,[PROC] ,[RELE] ,[SUSP] ,[CANC] ,[RETU] ,[REAU] ,[RESU] )&#xD;&#xA;  ) AS PVT&#xD;&#xA; ORDER BY &#xD;&#xA;  ACTIVITY_INSTANCE_ID ,&#xD;&#xA;  ACTIVITY_Id,&#xD;&#xA;  PROCESS_ID, &#xD;&#xA;  PERSON_ID ,&#xD;&#xA;  ORG_ID,&#xD;&#xA;  CREATED_DATE ,&#xD;&#xA;  CURRENT_STATUS ,&#xD;&#xA;  MODIFIED_BY&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;INSERT INTO @TIMEDIF&#xD;&#xA; SELECT &#xD;&#xA;  ACTIVITY_INSTANCE_ID ,&#xD;&#xA;  ACTIVITY_Id,&#xD;&#xA;  PROCESS_ID,   &#xD;&#xA;  PERSON_ID ,&#xD;&#xA;  ORG_ID ,&#xD;&#xA;  CREATED_DATE ,&#xD;&#xA;  CURRENT_STATUS ,&#xD;&#xA;  MODIFIED_BY,&#xD;&#xA;  [UNPC] AS UNPC,&#xD;&#xA;  [INPC] AS INPC,&#xD;&#xA;  [PROC] ,&#xD;&#xA;  [RELE] AS RELE,&#xD;&#xA;  [SUSP] AS SUSP,&#xD;&#xA;  [CANC] AS CANC,&#xD;&#xA;  [RETU] AS RETU,&#xD;&#xA;  [REAU] AS REAU,&#xD;&#xA;  [RESU] AS REAU&#xD;&#xA; FROM &#xD;&#xA;  (&#xD;&#xA;   SELECT AI.ACTIVITY_INSTANCE_ID ,&#xD;&#xA;    AI.ACTIVITY_Id,&#xD;&#xA;    AP.PROCESS_ID, &#xD;&#xA;    PERSON_ID ,&#xD;&#xA;    ORG_ID ,&#xD;&#xA;    AI.CREATED_DATE, &#xD;&#xA;    AI.STATUS_VALUE AS CURRENT_STATUS,&#xD;&#xA;    AI.MODIFIED_BY,&#xD;&#xA;    AIH.STATUS_VALUE AS STATUS_VALUE,&#xD;&#xA;    ISNULL(dbo.GetWorkingTimeInMinutes(Start_time, End_time),0) &#xD;&#xA;    AS DifMins&#xD;&#xA;   FROM SGW_ACTIVITY_INSTANCE AI&#xD;&#xA;    INNER JOIN SGW_ACTIVITY_INSTANCE_HISTORY AIH &#xD;&#xA;     ON AI.Activity_Instance_Id = AIH.Activity_Instance_Id&#xD;&#xA;    INNER JOIN SGS_CODE_VALUE CV &#xD;&#xA;     ON AI.Status_Id = CV.Code_Id and AI.Status_Value  = CV.Code_Value&#xD;&#xA;   INNER JOIN SGW_ACTIVITY AP ON AP.ACTIVITY_ID = AI.ACTIVITY_id&#xD;&#xA;    INNER JOIN SGW_PROCESS_INSTANCE SPI &#xD;&#xA;     ON AI.PROCESS_INSTANCE_ID = SPI.PROCESS_INSTANCE_ID&#xD;&#xA;   WHERE CONVERT(DATETIME,CONVERT(VARCHAR,Start_Time,101) ,110) &gt;= CONVERT(DATETIME,CONVERT(VARCHAR,@startTime,101) ,110) &#xD;&#xA;      AND CONVERT(DATETIME,CONVERT(VARCHAR,isnull(End_Time,getDate()),101) ,110) &lt;= CONVERT(DATETIME,CONVERT(VARCHAR,@endTime,101) ,110)&#xD;&#xA;   AND (@typeId IS NULL OR @typeId = '' OR @typeId = '0' OR @typeId = AP.Process_ID)&#xD;&#xA;   AND (@qualifiedName IS NULL OR @qualifiedName = '' OR @qualifiedName = '0' OR @qualifiedName = AP.ACTIVITY_ID)&#xD;&#xA;   AND (@userID IS NULL OR @userID = '' OR lower(@userID) = lower(AI.modified_by))&#xD;&#xA;   AND (@personID IS NULL OR @personID = '' OR @personID = SPI.PERSON_ID)&#xD;&#xA;   AND (@orgID IS NULL OR @orgID = '' OR @orgID = SPI.ORG_ID)&#xD;&#xA;         AND (@status IS NULL OR @status = '' OR @status = AI.status_value) &#xD;&#xA;  ) P&#xD;&#xA; PIVOT&#xD;&#xA;  (&#xD;&#xA;   SUM(DifMins)&#xD;&#xA;   FOR STATUS_VALUE IN ( [UNPC] ,[INPC] ,[PROC], [RELE] ,[SUSP] ,[CANC] ,[RETU] ,[REAU] ,[RESU] )&#xD;&#xA;  ) AS PVT&#xD;&#xA; ORDER BY &#xD;&#xA;  ACTIVITY_INSTANCE_ID ,&#xD;&#xA;  ACTIVITY_ID,&#xD;&#xA;  PROCESS_ID, &#xD;&#xA;  PERSON_ID ,&#xD;&#xA;  ORG_ID,&#xD;&#xA;  CREATED_DATE ,&#xD;&#xA;  CURRENT_STATUS ,&#xD;&#xA;  MODIFIED_BY&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;SELECT  PR.DESCRIPTION as PROCESS_NAME,&#xD;&#xA;  C.ACTIVITY_INSTANCE_ID ,&#xD;&#xA;  C.ACTIVITY_ID  AS ACTIVITY_PROFILE_ID,&#xD;&#xA;  AP.Name AS ACTIVITY_NAME,&#xD;&#xA;  AP.DISPLAY_NAME,&#xD;&#xA;  C.PERSON_ID ,&#xD;&#xA;  C.ORG_ID ,&#xD;&#xA;        O.ORG_CODE AS ORG_CODE,&#xD;&#xA;  C.CREATED_DATE ,&#xD;&#xA;  CV.DESCRIPTION AS CURRENT_STATUS,&#xD;&#xA;  CAST((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))/480 as Varchar(3)) &#xD;&#xA;   +':' + Cast(((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))- (ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))/480 * 480)/60 As Varchar(2))&#xD;&#xA;   +':'+right('00'+Cast(((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0)) - (((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))/480 * 480) &#xD;&#xA;   + (((ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))- (ISNULL(T.UNPC,0)+ISNULL(T.INPC,0)+ISNULL(T.[PROC],0)+ISNULL(T.RELE,0)+ISNULL(T.SUSP,0)+ISNULL(T.CANC,0)+ISNULL(T.RETU,0)+ISNULL(T.REAU,0)+ISNULL(T.RESU,0))/480 * 480)/60)*60)) as Varchar(2)),2)  AS CURRENT_DURATION,&#xD;&#xA;  C.UNPC AS UNPC_COUNT,&#xD;&#xA;  CAST((T.UNPC)/480 as Varchar(3)) +':' + Cast(((T.UNPC)- (T.UNPC)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.UNPC) - (((T.UNPC)/480 * 480) + (((T.UNPC)- (T.UNPC)/480 * 480)/60)*60)) as Varchar(2)),2)  AS UNPC_DURATION,&#xD;&#xA;  C.INPC AS INPC_COUNT,&#xD;&#xA;  CAST((T.INPC)/480 as Varchar(3)) +':' + Cast(((T.INPC)- (T.INPC)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.INPC) - (((T.INPC)/480 * 480) + (((T.INPC)- (T.INPC)/480 * 480)/60)*60)) as Varchar(2)),2)  AS INPC_DURATION,&#xD;&#xA;  C.[PROC] AS PROC_COUNT,&#xD;&#xA;  CAST((T.[PROC])/480 as Varchar(3)) +':' + Cast(((T.[PROC])- (T.[PROC])/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.[PROC]) - (((T.[PROC])/480 * 480) + (((T.[PROC])- (T.[PROC])/480 * 480)/60)*60)) as Varchar(2)),2)  AS PROC_DURATION,&#xD;&#xA;  C.RELE AS RELE_COUNT,&#xD;&#xA;  CAST((T.RELE)/480 as Varchar(3)) +':' + Cast(((T.RELE)- (T.RELE)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.RELE) - (((T.RELE)/480 * 480) + (((T.RELE)- (T.RELE)/480 * 480)/60)*60)) as Varchar(2)),2)  AS RELE_DURATION,&#xD;&#xA;  C.SUSP AS SUSP_COUNT,&#xD;&#xA;  CAST((T.SUSP)/480 as Varchar(3)) +':' + Cast(((T.SUSP)- (T.SUSP)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.SUSP) - (((T.SUSP)/480 * 480) + (((T.SUSP)- (T.SUSP)/480 * 480)/60)*60)) as Varchar(2)),2)  AS SUSP_DURATION,&#xD;&#xA;  C.CANC AS CANC_COUNT,&#xD;&#xA;  CAST((T.CANC)/480 as Varchar(3)) +':' + Cast(((T.CANC)- (T.CANC)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.CANC) - (((T.CANC)/480 * 480) + (((T.CANC)- (T.CANC)/480 * 480)/60)*60)) as Varchar(2)),2)  AS CANC_DURATION,&#xD;&#xA;  C.RETU AS RETU_COUNT,&#xD;&#xA;  CAST((T.RETU)/480 as Varchar(3)) +':' + Cast(((T.RETU)- (T.RETU)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.RETU) - (((T.RETU)/480 * 480) + (((T.RETU)- (T.RETU)/480 * 480)/60)*60)) as Varchar(2)),2)  AS RETU_DURATION,&#xD;&#xA;  C.REAU AS REAU_COUNT,&#xD;&#xA;  CAST((T.REAU)/480 as Varchar(3)) +':' + Cast(((T.REAU)- (T.REAU)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.REAU) - (((T.REAU)/480 * 480) + (((T.REAU)- (T.REAU)/480 * 480)/60)*60)) as Varchar(2)),2)  AS REAU_DURATION,&#xD;&#xA;  C.RESU AS RESU_COUNT,&#xD;&#xA;  CAST((T.RESU)/480 as Varchar(3)) +':' + Cast(((T.RESU)- (T.RESU)/480 * 480)/60 As Varchar(2))+':'+right('00'+Cast(((T.RESU) - (((T.RESU)/480 * 480) + (((T.RESU)- (T.RESU)/480 * 480)/60)*60)) as Varchar(2)),2)  AS RESU_DURATION,&#xD;&#xA;  C.MODIFIED_BY AS USER_ID&#xD;&#xA; FROM  @CTR C &#xD;&#xA; INNER JOIN @TIMEDIF T ON &#xD;&#xA; C.ACTIVITY_INSTANCE_ID = T.ACTIVITY_INSTANCE_ID and &#xD;&#xA; C.ACTIVITY_ID = T.ACTIVITY_ID AND&#xD;&#xA; C.PROCESS_ID = T.PROCESS_ID&#xD;&#xA; INNER JOIN SGW_ACTIVITY AP ON AP.ACTIVITY_ID=C.ACTIVITY_ID&#xD;&#xA; INNER JOIN SGS_CODE_VALUE CV ON CV.CODE_VALUE=C.CURRENT_STATUS AND CV.CODE_ID=20&#xD;&#xA; INNER JOIN SGW_PROCESS PR on C.PROCESS_ID = PR.PROCESS_ID&#xD;&#xA;   LEFT JOIN SGT_ORGANIZATION O ON O.ORG_ID = C.ORG_ID&#xD;&#xA;&#xD;&#xA;SET NOCOUNT OFF">
      <parameters>
        <parameter ID="@startTime" sfwDataType="DateTime" />
        <parameter ID="@endTime" sfwDataType="DateTime" />
        <parameter ID="@typeId" sfwDataType="string" />
        <parameter ID="@qualifiedName" sfwDataType="string" />
        <parameter ID="@userID" sfwDataType="string" />
        <parameter ID="@personID" sfwDataType="string" />
        <parameter ID="@orgID" sfwDataType="string" />
        <parameter ID="@status" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="LoadRunningRMDProcessInstancesByPersonAndPlan" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT    SAI.*&#xD;&#xA;FROM     SGW_ACTIVITY_INSTANCE SAI WITH(NOLOCK)&#xD;&#xA;  INNER JOIN SGW_PROCESS_INSTANCE SPI WITH(NOLOCK)&#xD;&#xA;      ON SAI.PROCESS_INSTANCE_ID = SPI.PROCESS_INSTANCE_ID&#xD;&#xA;WHERE     SAI.STATUS_VALUE NOT IN('CANC','PROC','RETU','REAU')&#xD;&#xA;       AND SPI.PROCESS_ID = @PROCESSID&#xD;&#xA;       and isnull(SPI.process_instance_id,0) &lt;&gt; @processInstanceID &#xD;&#xA;       and ((Select count(*) FROM SGT_BENEFIT_APPLICATION(NOLOCK) WHERE MEMBER_PERSON_ID=@PERSONID&#xD;&#xA;       and member_person_id = SPI.PERSON_ID&#xD;&#xA;AND PLAN_ID=@PLANID AND BENEFIT_ACCOUNT_TYPE_VALUE IN ('RETR','DETH','DISA','RFND')) &gt;0)">
      <parameters>
        <parameter ID="@PROCESSID" sfwDataType="int" />
        <parameter ID="@PERSONID" sfwDataType="int" />
        <parameter ID="@PLANID" sfwDataType="int" />
        <parameter ID="@processInstanceID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadRunningInstancesByOrgAndProcess" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select * from SGW_ACTIVITY_INSTANCE sai&#xD;&#xA;inner join SGW_PROCESS_INSTANCE spi on spi.PROCESS_INSTANCE_ID = sai.PROCESS_INSTANCE_ID&#xD;&#xA;where spi.org_id = @orgid AND spi.PROCESS_ID = @processID&#xA;and sai.status_value not in ('CANC','PROC','RETU','REAU')">
      <parameters>
        <parameter ID="@orgid" sfwDataType="int" />
        <parameter ID="@processID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadRunningInstancesByReferenceAndProcess" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="select * from SGW_ACTIVITY_INSTANCE sai&#xD;&#xA;inner join SGW_PROCESS_INSTANCE spi on spi.PROCESS_INSTANCE_ID = sai.PROCESS_INSTANCE_ID&#xD;&#xA;where sai.reference_id =@refid AND spi.PROCESS_ID = @processID&#xA;and sai.status_value not in ('CANC','PROC','RETU','REAU')&#xD;&#xA;&#xD;&#xA;">
      <parameters>
        <parameter ID="@processID" sfwDataType="int" />
        <parameter ID="@refid" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="IsActivityInstanceAlreadyExists" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT * FROM SGW_ACTIVITY_INSTANCE SAI WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGW_PROCESS_INSTANCE SPI WITH(NOLOCK) ON SPI.PROCESS_INSTANCE_ID = SAI.PROCESS_INSTANCE_ID&#xD;&#xA;WHERE SPI.PERSON_ID = @PERSONID AND SPI.PROCESS_ID = @PROCESSID AND SAI.REFERENCE_ID=@REFERENCEID&#xA; AND SAI.STATUS_VALUE NOT IN ('CANC','PROC','RETU','REAU')">
      <parameters>
        <parameter ID="@PERSONID" sfwDataType="int" />
        <parameter ID="@PROCESSID" sfwDataType="int" />
        <parameter ID="@REFERENCEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadRunningInstancesByPersonProcessRef" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT * FROM SGW_ACTIVITY_INSTANCE SAI WITH(NOLOCK)&#xD;&#xA;INNER JOIN SGW_PROCESS_INSTANCE SPI WITH(NOLOCK) ON SPI.PROCESS_INSTANCE_ID = SAI.PROCESS_INSTANCE_ID&#xD;&#xA;INNER JOIN SGW_WORKFLOW_REQUEST SWR WITH(NOLOCK) ON SWR.WORKFLOW_REQUEST_ID = SPI.REQUEST_ID&#xD;&#xA;WHERE SPI.PERSON_ID = @PERSONID AND SPI.PROCESS_ID = @PROCESSID AND ISNULL(SWR.REFERENCE_ID,0)=@REFERENCEID&#xD;&#xA;AND SAI.STATUS_VALUE NOT IN ('CANC','PROC','RETU','REAU')">
      <parameters>
        <parameter ID="@PERSONID" sfwDataType="int" />
        <parameter ID="@PROCESSID" sfwDataType="int" />
        <parameter ID="@REFERENCEID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadUnProcessedWorkflowRequestsByOrgAndProcess" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT * FROM SGW_WORKFLOW_REQUEST WITH(NOLOCK)&#xD;&#xA;WHERE PROCESS_ID = @PROCESSID AND &#xD;&#xA;STATUS_VALUE = 'PSNP' AND ORG_CODE = @ORGCODE">
      <parameters>
        <parameter ID="@PROCESSID" sfwDataType="int" />
        <parameter ID="@ORGCODE" sfwDataType="string" />
      </parameters>
    </query>
    <query ID="rptActivitiesInStatusExceeding3DaysSummary" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="IF OBJECT_ID('TEMPDB..#FINAL_TABLE') IS NOT NULL&#xD;&#xA;DROP TABLE #FINAL_TABLE&#xD;&#xA;&#xD;&#xA;DECLARE @TEMPTABLE AS TABLE&#xD;&#xA;( PERSLINKID_ORGID VARCHAR(100),&#xD;&#xA; LASTNAME_ORGNAME VARCHAR(100),&#xD;&#xA; INITIATED DATETIME,&#xD;&#xA; CURRENT_STATUS VARCHAR(100), &#xD;&#xA; ACTIVITY_ROLE VARCHAR(100),  &#xD;&#xA; ELAPSED_TIME INT,&#xD;&#xA; ACTIVITY_NAME VARCHAR(100)&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;INSERT INTO @TEMPTABLE&#xD;&#xA; SELECT ISNULL(CAST(AP.PERSON_ID AS NVARCHAR(10)),&#xD;&#xA;  RIGHT('000000'+CAST(C.ORG_CODE AS VARCHAR(10)),6)) AS PERSLINKID_ORGID,&#xD;&#xA;CASE WHEN AP.PERSON_ID IS NULL THEN C.ORG_NAME ELSE B.LAST_NAME END AS LASTNAME_ORGNAME,&#xD;&#xA;(A.CREATED_DATE) AS INITIATED,&#xD;&#xA;CV.DESCRIPTION AS CURRENT_STATUS,&#xD;&#xA;ROL.ROLE_DESCRIPTION AS [ROLE],&#xD;&#xA;ISNULL(DBO.GETWORKINGTIMEINMINUTES(A.CREATED_DATE, GETDATE()),0) AS ELAPSED_TIME,&#xD;&#xA;SA.DISPLAY_NAME AS ACTIVITY_NAME&#xD;&#xA;FROM DBO.SGW_ACTIVITY_INSTANCE A &#xD;&#xA;LEFT JOIN SGS_CODE_VALUE CV &#xD;&#xA;  ON A.STATUS_ID=CV.CODE_ID AND A.STATUS_VALUE=CV.CODE_VALUE&#xD;&#xA;INNER JOIN SGW_ACTIVITY SA &#xD;&#xA;  ON SA.ACTIVITY_ID = A.ACTIVITY_ID&#xD;&#xA;INNER JOIN SGW_PROCESS_INSTANCE AP &#xD;&#xA;  ON A.PROCESS_INSTANCE_ID = AP.PROCESS_INSTANCE_ID&#xD;&#xA;LEFT JOIN SGT_PERSON B &#xD;&#xA;  ON AP.PERSON_ID=B.PERSON_ID&#xD;&#xA;LEFT JOIN SGT_ORGANIZATION C &#xD;&#xA; ON AP.ORG_ID=C.ORG_ID&#xD;&#xA;LEFT JOIN SGS_ROLES ROL&#xD;&#xA;  ON SA.ROLE_ID=ROL.ROLE_ID&#xD;&#xA;WHERE A.STATUS_VALUE IN ('UNPC','RELE') &#xD;&#xA; AND (ISNULL(DBO.GETWORKINGTIMEINMINUTES(A.CREATED_DATE, GETDATE()),0) &gt;= 1440)&#xD;&#xA;&#xD;&#xA;SELECT &#xD;&#xA;&#x9;ACTIVITY_NAME, &#xD;&#xA;&#x9;ACTIVITY_ROLE, &#xD;&#xA;&#x9;CAST(DATEADD(MONTH, DATEDIFF(MONTH, 0, INITIATED), 0) AS DATE) AS MONTH_YEAR &#xD;&#xA;&#x9;INTO #FINAL_TABLE&#xD;&#xA;&#x9;FROM @TEMPTABLE&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;DECLARE @cols       NVARCHAR(MAX)=''&#xD;&#xA;DECLARE @query      NVARCHAR(MAX)=''&#xD;&#xA;DECLARE @COLS_SUM   NVARCHAR(MAX)=''&#xD;&#xA;DECLARE @COLS_TOT   NVARCHAR(MAX)=''&#xD;&#xA;&#xD;&#xA;--Preparing columns for Pivot&#xD;&#xA;SELECT @cols = @cols + QUOTENAME(MONTH_YEAR) + ',' &#xD;&#xA;FROM (SELECT DISTINCT MONTH_YEAR FROM #FINAL_TABLE) AS tmp ORDER BY tmp.MONTH_YEAR&#xD;&#xA;SELECT @cols = SUBSTRING(@cols, 0, LEN(@cols))&#xD;&#xA;IF(@cols = '')&#xD;&#xA;BEGIN&#x9;&#xD;&#xA;&#x9;SET @cols= '[1901]'&#xD;&#xA;END&#xD;&#xA;--Preparing sum of columns for Totals Horizontal&#xD;&#xA;SELECT @COLS_SUM = @COLS_SUM + QUOTENAME(MONTH_YEAR) + '+' &#xD;&#xA;FROM (SELECT DISTINCT MONTH_YEAR FROM #FINAL_TABLE) AS tmp ORDER BY tmp.MONTH_YEAR&#xD;&#xA;IF(@COLS_SUM &lt;&gt; '')&#xD;&#xA;BEGIN&#xD;&#xA;&#x9;SELECT @COLS_SUM = ','+ SUBSTRING(@COLS_SUM, 0, LEN(@COLS_SUM)) +' AS TOTAL'&#xD;&#xA;END&#xD;&#xA;ELSE &#xD;&#xA;BEGIN&#xD;&#xA;&#x9;SELECT @COLS_SUM = ',0 AS TOTAL'&#xD;&#xA;END&#xD;&#xA;--Preparing sum of individual columns for Totals Vertically&#xD;&#xA;SELECT @COLS_TOT = @COLS_TOT +'SUM('+ QUOTENAME(MONTH_YEAR) + '),' &#xD;&#xA;FROM (SELECT DISTINCT MONTH_YEAR FROM #FINAL_TABLE) AS tmp ORDER BY tmp.MONTH_YEAR&#xD;&#xA;SELECT @COLS_TOT = SUBSTRING(@COLS_TOT, 0, LEN(@COLS_TOT)) &#xD;&#xA;IF(@COLS_TOT = '')&#xD;&#xA;BEGIN&#xD;&#xA;&#x9;SET @COLS_TOT= '0'&#xD;&#xA;END&#xD;&#xA;&#xD;&#xA;SET @query = 'SELECT *'+@COLS_SUM+'  INTO #TAB FROM &#xD;&#xA;            (&#xD;&#xA;                    SELECT ACTIVITY_NAME, ACTIVITY_ROLE, MONTH_YEAR &#xD;&#xA;                    FROM #FINAL_TABLE&#xD;&#xA;            ) src&#xD;&#xA;            PIVOT &#xD;&#xA;            (&#xD;&#xA;                    COUNT(MONTH_YEAR) FOR MONTH_YEAR IN (' + @cols + ')&#xD;&#xA;            ) piv&#xD;&#xA;            SELECT *, 0 AS CUSTOMORDER INTO #TAB2 FROM #TAB &#xD;&#xA;            UNION ALL&#xD;&#xA;            SELECT ''GRAND_TOTAL'' AS TOTAL, ''GRAND_TOTAL'' AS TOTAL,'+@COLS_TOT+',SUM(TOTAL), 1 AS CUSTOMORDER FROM #TAB&#xD;&#xA;&#x9;&#x9;&#x9;ORDER BY CUSTOMORDER,#TAB.ACTIVITY_NAME, #TAB.ACTIVITY_ROLE&#xD;&#xA;&#x9;&#x9;&#x9;SELECT ACTIVITY_NAME, ACTIVITY_ROLE, ' + @cols + ', TOTAL FROM #TAB2 WHERE REPLACE(''' + @cols   + ''','','','''') &lt;&gt; ''[1901]'' ORDER BY #TAB2.CUSTOMORDER,#TAB2.ACTIVITY_NAME, #TAB2.ACTIVITY_ROLE'&#xD;&#xA;execute(@query)">
      <parameters />
    </query>
    <query ID="LoadRunningInstancesByFirstActivityofProcess" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT&#xA;&#x9; COUNT(ACTIVITY_INSTANCE_ID) as TOTALCOUNT&#xA;FROM&#xA;&#x9; SGW_ACTIVITY_INSTANCE SAI WITH(NOLOCK) &#xA;WHERE&#xA;&#x9; SAI.ACTIVITY_ID = @FIRSTACTIVITYID AND&#xA;&#x9; SAI.STATUS_VALUE IN ('INPC','UNPC')">
      <parameters>
        <parameter ID="@FIRSTACTIVITYID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadSuspendedInstancesByPersonWhenEmploymentEnded" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT  DISTINCT  ACT.*&#xD;&#xA;FROM     SGW_ACTIVITY_INSTANCE ACT WITH(NOLOCK)&#xD;&#xA;  INNER JOIN SGW_PROCESS_INSTANCE WRK WITH(NOLOCK)&#xD;&#xA;      ON ACT.PROCESS_INSTANCE_ID = WRK.PROCESS_INSTANCE_ID&#xD;&#xA;WHERE     ACT.STATUS_VALUE = 'SUSP'    &#xD;&#xA;       AND WRK.PERSON_ID = @PERSONID&#xD;&#xA;&#x9;   AND ACT.ACTIVITY_ID in (27,32,28,31,74)">
      <parameters>
        <parameter ID="@PERSONID" sfwDataType="int" />
      </parameters>
    </query>
    <query ID="LoadSuspendedInstancesByPersonWhenDeathNotificationComplete" sfwQueryType="SelectQuery" sfwDataType="EntityTable" sfwSql="SELECT DISTINCT  ACT.*&#xD;&#xA;FROM     SGW_ACTIVITY_INSTANCE ACT WITH(NOLOCK)&#xD;&#xA;  INNER JOIN SGW_PROCESS_INSTANCE WRK WITH(NOLOCK)&#xD;&#xA;      ON ACT.PROCESS_INSTANCE_ID = WRK.PROCESS_INSTANCE_ID&#xD;&#xA;WHERE     ACT.STATUS_VALUE = 'SUSP'    &#xD;&#xA;       AND WRK.PERSON_ID = @PERSONID&#xD;&#xA;&#x9;   AND ACT.ACTIVITY_ID in (58,59,144,148,152)">
      <parameters>
        <parameter ID="@PERSONID" sfwDataType="int" />
      </parameters>
    </query>
  </queries>
  <attributes>
    <attribute ID="ActivityInstanceId" sfwType="Column" sfwValue="activity_instance_id" sfwKeyNo="1" sfwIsSequence="False" sfwIsNull="False" sfwIsIdentity="True" sfwDataType="int" sfwRequired="False" />
    <attribute ID="ProcessInstanceId" sfwType="Column" sfwValue="process_instance_id" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="False" sfwIsIdentity="False" sfwDataType="int" sfwRequired="False" />
    <attribute ID="ActivityId" sfwType="Column" sfwValue="activity_id" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="int" sfwRequired="False" />
    <attribute ID="CheckedOutUser" sfwType="Column" sfwValue="checked_out_user" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="50" />
    <attribute ID="ReferenceId" sfwType="Column" sfwValue="reference_id" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="False" sfwIsIdentity="False" sfwDataType="long" sfwRequired="False" />
    <attribute ID="StatusDescription" sfwType="Description" sfwValue="status_description" />
    <attribute ID="StatusId" sfwType="Column" sfwValue="status_id" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwCodeID="20" sfwDataType="int" sfwRequired="False" />
    <attribute ID="StatusValue" sfwType="Column" sfwValue="status_value" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="4" />
    <attribute ID="SuspensionStartDate" sfwType="Column" sfwValue="suspension_start_date" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="DateTime" sfwRequired="False" />
    <attribute ID="SuspensionMinutes" sfwType="Column" sfwValue="suspension_minutes" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="int" sfwRequired="False" />
    <attribute ID="SuspensionEndDate" sfwType="Column" sfwValue="suspension_end_date" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="DateTime" sfwRequired="False" />
    <attribute ID="ReturnFromAuditFlag" sfwType="Column" sfwValue="return_from_audit_flag" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="1" />
    <attribute ID="ResumeActionDescription" sfwType="Description" sfwValue="resume_action_description" />
    <attribute ID="ResumeActionId" sfwType="Column" sfwValue="resume_action_id" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwCodeID="25" sfwDataType="int" sfwRequired="False" />
    <attribute ID="ResumeActionValue" sfwType="Column" sfwValue="resume_action_value" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="4" />
    <attribute ID="Comments" sfwType="Column" sfwValue="comments" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="True" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="500" />
    <attribute ID="CreatedBy" sfwType="Column" sfwValue="created_by" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="False" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="50" />
    <attribute ID="CreatedDate" sfwType="Column" sfwValue="created_date" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="False" sfwIsIdentity="False" sfwDataType="DateTime" sfwRequired="False" />
    <attribute ID="ModifiedBy" sfwType="Column" sfwValue="modified_by" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="False" sfwIsIdentity="False" sfwDataType="string" sfwRequired="False" sfwLength="50" />
    <attribute ID="ModifiedDate" sfwType="Column" sfwValue="modified_date" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="False" sfwIsIdentity="False" sfwDataType="DateTime" sfwRequired="False" />
    <attribute ID="UpdateSeq" sfwType="Column" sfwValue="update_seq" sfwKeyNo="0" sfwIsSequence="False" sfwIsNull="False" sfwIsIdentity="False" sfwDataType="int" sfwRequired="False" />
    <attribute ID="objProcessInstance" sfwType="Object" sfwEntity="entProcessInstance" sfwValue="ibusProcessInstance" />
    <attribute ID="objActivity" sfwType="Object" sfwEntity="entActivity" sfwValue="ibusActivity" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrViewDetails" sfwValue="istrViewDetails" />
    <attribute sfwDataType="string" sfwType="Property" ID="IstrView" sfwValue="istrView" />
    <attribute sfwType="Collection" sfwEntity="entProcessInstanceImageData" ID="lstProcessInstanceImageData" sfwValue="iclbProcessInstanceImageData" />
    <attribute sfwType="Collection" sfwEntity="entActivityInstanceHistory" ID="lstProcessInstanceHistory" sfwValue="iclbProcessInstanceHistory" />
    <attribute sfwType="Collection" sfwEntity="entProcessInstanceChecklist" ID="lstProcessInstanceChecklist" sfwValue="iclbProcessInstanceChecklist" />
    <attribute sfwType="Collection" sfwEntity="entNotes" ID="lstProcessInstanceNotes" sfwValue="iclbProcessInstanceNotes" />
  </attributes>
  <objectmethods>
    <method ID="InvokeWorkflowAction" sfwReturnType="ArrayList" />
    <method ID="btnApplyCheckList_Click" sfwReturnType="ArrayList" />
    <method ID="GenerateCSVofBackLogSummary" sfwReturnType="String" />
  </objectmethods>
  <constraint />
  <methods />
  <lifecycle />
  <ExtraFields />
</entity>